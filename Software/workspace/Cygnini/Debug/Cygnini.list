
Cygnini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d988  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800db18  0800db18  0001db18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df88  0800df88  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800df88  0800df88  0001df88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df90  0800df90  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df90  0800df90  0001df90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df94  0800df94  0001df94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800df98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b00c  200000b8  0800e04c  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b0c4  0800e04c  0002b0c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033a8e  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006198  00000000  00000000  00053b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002610  00000000  00000000  00059d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002340  00000000  00000000  0005c320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b16c  00000000  00000000  0005e660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020ed6  00000000  00000000  000897cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eca1b  00000000  00000000  000aa6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001970bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7b0  00000000  00000000  00197138  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db00 	.word	0x0800db00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	0800db00 	.word	0x0800db00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000dc4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dc8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d013      	beq.n	8000dfc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000dd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dd8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ddc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00b      	beq.n	8000dfc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000de4:	e000      	b.n	8000de8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000de6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000de8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f9      	beq.n	8000de6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000df2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <cygnini>:
TaskHandle_t SensorsHandle = NULL;
TaskHandle_t LCDHandle = NULL;
TaskHandle_t NotificationsHandle = NULL;


int cygnini(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af02      	add	r7, sp, #8

	HAL_Delay(500);
 8000e12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e16:	f002 fae5 	bl	80033e4 <HAL_Delay>
	printf("starting CYGNINI\r\n");
 8000e1a:	481f      	ldr	r0, [pc, #124]	; (8000e98 <cygnini+0x8c>)
 8000e1c:	f00b fde2 	bl	800c9e4 <puts>
	initialize_board();
 8000e20:	f000 f868 	bl	8000ef4 <initialize_board>

#if TX_NODE == 1
	xTaskCreate(ButtonsTask,(signed portCHAR *) "t4", 1024, NULL, tskIDLE_PRIORITY, &ButtonsHandle );
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <cygnini+0x90>)
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e32:	491b      	ldr	r1, [pc, #108]	; (8000ea0 <cygnini+0x94>)
 8000e34:	481b      	ldr	r0, [pc, #108]	; (8000ea4 <cygnini+0x98>)
 8000e36:	f009 fc87 	bl	800a748 <xTaskCreate>
#if RX_NODE == 1
	xTaskCreate(RadioTask,(signed portCHAR *) "t4", 1024, NULL, tskIDLE_PRIORITY, &RadioHandle );

#endif

	xTaskCreate(LEDsTask,(signed portCHAR *) "t4", 1024, NULL, tskIDLE_PRIORITY, &LEDsHandle );
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <cygnini+0x9c>)
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2300      	movs	r3, #0
 8000e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e48:	4915      	ldr	r1, [pc, #84]	; (8000ea0 <cygnini+0x94>)
 8000e4a:	4818      	ldr	r0, [pc, #96]	; (8000eac <cygnini+0xa0>)
 8000e4c:	f009 fc7c 	bl	800a748 <xTaskCreate>
	xTaskCreate(SensorsTask,(signed portCHAR *) "t4", 1024, NULL, tskIDLE_PRIORITY, &SensorsHandle );
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <cygnini+0xa4>)
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	2300      	movs	r3, #0
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e5e:	4910      	ldr	r1, [pc, #64]	; (8000ea0 <cygnini+0x94>)
 8000e60:	4814      	ldr	r0, [pc, #80]	; (8000eb4 <cygnini+0xa8>)
 8000e62:	f009 fc71 	bl	800a748 <xTaskCreate>
	xTaskCreate(LCDTask,(signed portCHAR *) "t4", 1024, NULL, tskIDLE_PRIORITY, &LCDHandle );
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <cygnini+0xac>)
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e74:	490a      	ldr	r1, [pc, #40]	; (8000ea0 <cygnini+0x94>)
 8000e76:	4811      	ldr	r0, [pc, #68]	; (8000ebc <cygnini+0xb0>)
 8000e78:	f009 fc66 	bl	800a748 <xTaskCreate>
	xTaskCreate(NotificationsTask,(signed portCHAR *) "t4", 1024, NULL, tskIDLE_PRIORITY, &NotificationsHandle );
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <cygnini+0xb4>)
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	2300      	movs	r3, #0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2300      	movs	r3, #0
 8000e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e8a:	4905      	ldr	r1, [pc, #20]	; (8000ea0 <cygnini+0x94>)
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <cygnini+0xb8>)
 8000e8e:	f009 fc5b 	bl	800a748 <xTaskCreate>

	vTaskStartScheduler();
 8000e92:	f009 fdd1 	bl	800aa38 <vTaskStartScheduler>

	while(1);
 8000e96:	e7fe      	b.n	8000e96 <cygnini+0x8a>
 8000e98:	0800db18 	.word	0x0800db18
 8000e9c:	200000d4 	.word	0x200000d4
 8000ea0:	0800db2c 	.word	0x0800db2c
 8000ea4:	080010c9 	.word	0x080010c9
 8000ea8:	200000d8 	.word	0x200000d8
 8000eac:	08001419 	.word	0x08001419
 8000eb0:	200000dc 	.word	0x200000dc
 8000eb4:	08001423 	.word	0x08001423
 8000eb8:	200000e0 	.word	0x200000e0
 8000ebc:	08001455 	.word	0x08001455
 8000ec0:	200000e4 	.word	0x200000e4
 8000ec4:	080014ad 	.word	0x080014ad

08000ec8 <__io_putchar>:
/**
  * @brief  This function sends character for standard io
  * @param ch character to send
  * @retval None
  */
int __io_putchar(int ch){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff72 	bl	8000dbc <ITM_SendChar>
	return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <__io_getchar>:
/**
  * @brief  This function receives character from standard io
  * @retval None
  */
int __io_getchar(void){
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

	return 0;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <initialize_board>:


int initialize_board(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	  graphic_lcd_initialize ();
 8000efa:	f000 fb7b 	bl	80015f4 <graphic_lcd_initialize>
	  graphic_lcd_clear_screen ();
 8000efe:	f000 fb0f 	bl	8001520 <graphic_lcd_clear_screen>
	  DISPLAY_BACKLIGHT_ON;
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f002 fd00 	bl	8003910 <HAL_GPIO_WritePin>
	  Si7006_port_init();
 8000f10:	f001 fd0a 	bl	8002928 <Si7006_port_init>


	  if(Si7006.check_hardware() == SI7006_ERROR){
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <initialize_board+0x80>)
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	4798      	blx	r3
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d105      	bne.n	8000f2c <initialize_board+0x38>
		  graphic_lcd_write(0, 0, "Si7006 NOT READY");
 8000f20:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <initialize_board+0x84>)
 8000f22:	2100      	movs	r1, #0
 8000f24:	2000      	movs	r0, #0
 8000f26:	f000 fb23 	bl	8001570 <graphic_lcd_write>
 8000f2a:	e004      	b.n	8000f36 <initialize_board+0x42>
	  }else{
		  graphic_lcd_write(0, 0, "Si7006 READY");
 8000f2c:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <initialize_board+0x88>)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2000      	movs	r0, #0
 8000f32:	f000 fb1d 	bl	8001570 <graphic_lcd_write>
	  }


	  int x = HAL_I2C_IsDeviceReady(&hi2c1,Si1133DevAddr, 1000, 1000);
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <initialize_board+0x8c>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b299      	uxth	r1, r3
 8000f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f44:	480f      	ldr	r0, [pc, #60]	; (8000f84 <initialize_board+0x90>)
 8000f46:	f002 ff75 	bl	8003e34 <HAL_I2C_IsDeviceReady>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	607b      	str	r3, [r7, #4]
	  if(x == HAL_OK) graphic_lcd_write(1, 0, "Si1133 READY");
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d105      	bne.n	8000f60 <initialize_board+0x6c>
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <initialize_board+0x94>)
 8000f56:	2100      	movs	r1, #0
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f000 fb09 	bl	8001570 <graphic_lcd_write>
 8000f5e:	e004      	b.n	8000f6a <initialize_board+0x76>
	  else graphic_lcd_write(1, 0, "Si1133 NOT READY");
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <initialize_board+0x98>)
 8000f62:	2100      	movs	r1, #0
 8000f64:	2001      	movs	r0, #1
 8000f66:	f000 fb03 	bl	8001570 <graphic_lcd_write>



}
 8000f6a:	bf00      	nop
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000aabc 	.word	0x2000aabc
 8000f78:	0800db30 	.word	0x0800db30
 8000f7c:	0800db44 	.word	0x0800db44
 8000f80:	20000000 	.word	0x20000000
 8000f84:	2000ac98 	.word	0x2000ac98
 8000f88:	0800db54 	.word	0x0800db54
 8000f8c:	0800db64 	.word	0x0800db64

08000f90 <RadioReset>:





void RadioReset(){
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0

	NRF24L01p_RadioConfig.DataReadyInterruptEnabled = 0;
 8000f96:	4b4a      	ldr	r3, [pc, #296]	; (80010c0 <RadioReset+0x130>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
	NRF24L01p_RadioConfig.DataSentInterruptFlagEnabled = 0;
 8000f9c:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <RadioReset+0x130>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	705a      	strb	r2, [r3, #1]
	NRF24L01p_RadioConfig.MaxRetryInterruptFlagEnabled = 0;
 8000fa2:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <RadioReset+0x130>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	709a      	strb	r2, [r3, #2]
	NRF24L01p_RadioConfig.Crc = CONFIG_CRC_16BIT;
 8000fa8:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <RadioReset+0x130>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	70da      	strb	r2, [r3, #3]
	NRF24L01p_RadioConfig.AutoReTransmissionCount = 15;
 8000fae:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <RadioReset+0x130>)
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	711a      	strb	r2, [r3, #4]
	NRF24L01p_RadioConfig.AutoReTransmitDelayX250us = 15;
 8000fb4:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <RadioReset+0x130>)
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	715a      	strb	r2, [r3, #5]
	NRF24L01p_RadioConfig.frequencyOffset = 2;
 8000fba:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <RadioReset+0x130>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	719a      	strb	r2, [r3, #6]
	NRF24L01p_RadioConfig.datarate = RF_SETUP_RF_DR_2MBPS;
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <RadioReset+0x130>)
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	71da      	strb	r2, [r3, #7]
	NRF24L01p_RadioConfig.RfPower = RF_SETUP_RF_PWR_0DBM;
 8000fc6:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <RadioReset+0x130>)
 8000fc8:	2206      	movs	r2, #6
 8000fca:	721a      	strb	r2, [r3, #8]
	NRF24L01p_RadioConfig.PllLock = 0;
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <RadioReset+0x130>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	725a      	strb	r2, [r3, #9]
	NRF24L01p_RadioConfig.ContWaveEnabled = 0;
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <RadioReset+0x130>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	729a      	strb	r2, [r3, #10]
	NRF24L01p_RadioConfig.FeatureDynamicPayloadEnabled = 1;
 8000fd8:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <RadioReset+0x130>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	72da      	strb	r2, [r3, #11]
	NRF24L01p_RadioConfig.FeaturePayloadWithAckEnabled = 1;
 8000fde:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <RadioReset+0x130>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	731a      	strb	r2, [r3, #12]
	NRF24L01p_RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <RadioReset+0x130>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	735a      	strb	r2, [r3, #13]

    RxPipeConfig[0].address = 0x11223344EE;
 8000fea:	4a36      	ldr	r2, [pc, #216]	; (80010c4 <RadioReset+0x134>)
 8000fec:	a428      	add	r4, pc, #160	; (adr r4, 8001090 <RadioReset+0x100>)
 8000fee:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000ff2:	e9c2 3402 	strd	r3, r4, [r2, #8]
    RxPipeConfig[1].address = 0x9A4524CE01;
 8000ff6:	4a33      	ldr	r2, [pc, #204]	; (80010c4 <RadioReset+0x134>)
 8000ff8:	a427      	add	r4, pc, #156	; (adr r4, 8001098 <RadioReset+0x108>)
 8000ffa:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000ffe:	e9c2 3408 	strd	r3, r4, [r2, #32]
    RxPipeConfig[2].address = 0x9A4524CE02;
 8001002:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <RadioReset+0x134>)
 8001004:	a426      	add	r4, pc, #152	; (adr r4, 80010a0 <RadioReset+0x110>)
 8001006:	e9d4 3400 	ldrd	r3, r4, [r4]
 800100a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    RxPipeConfig[3].address = 0x9A4524CE03;
 800100e:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <RadioReset+0x134>)
 8001010:	a425      	add	r4, pc, #148	; (adr r4, 80010a8 <RadioReset+0x118>)
 8001012:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001016:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    RxPipeConfig[4].address = 0x9A4524CE04;
 800101a:	4a2a      	ldr	r2, [pc, #168]	; (80010c4 <RadioReset+0x134>)
 800101c:	a424      	add	r4, pc, #144	; (adr r4, 80010b0 <RadioReset+0x120>)
 800101e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001022:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    RxPipeConfig[5].address = 0x9A4524CE05;
 8001026:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <RadioReset+0x134>)
 8001028:	a423      	add	r4, pc, #140	; (adr r4, 80010b8 <RadioReset+0x128>)
 800102a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800102e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80


	int i;
	for(i=0;i<6;i++){
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	e01f      	b.n	8001078 <RadioReset+0xe8>
		RxPipeConfig[i].PipeEnabled = 1;
 8001038:	4922      	ldr	r1, [pc, #136]	; (80010c4 <RadioReset+0x134>)
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	440b      	add	r3, r1
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
		RxPipeConfig[i].autoAckEnabled = 1;
 800104a:	491e      	ldr	r1, [pc, #120]	; (80010c4 <RadioReset+0x134>)
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	440b      	add	r3, r1
 8001058:	3301      	adds	r3, #1
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
		RxPipeConfig[i].dynamicPayloadEnabled = 1;
 800105e:	4919      	ldr	r1, [pc, #100]	; (80010c4 <RadioReset+0x134>)
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	3311      	adds	r3, #17
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
	for(i=0;i<6;i++){
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3301      	adds	r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b05      	cmp	r3, #5
 800107c:	dddc      	ble.n	8001038 <RadioReset+0xa8>
	}


	NRF24L01p_ResetConfigValues(&NRF24L01p_RadioConfig, RxPipeConfig);
 800107e:	4911      	ldr	r1, [pc, #68]	; (80010c4 <RadioReset+0x134>)
 8001080:	480f      	ldr	r0, [pc, #60]	; (80010c0 <RadioReset+0x130>)
 8001082:	f000 fbc3 	bl	800180c <NRF24L01p_ResetConfigValues>
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	bf00      	nop
 8001090:	223344ee 	.word	0x223344ee
 8001094:	00000011 	.word	0x00000011
 8001098:	4524ce01 	.word	0x4524ce01
 800109c:	0000009a 	.word	0x0000009a
 80010a0:	4524ce02 	.word	0x4524ce02
 80010a4:	0000009a 	.word	0x0000009a
 80010a8:	4524ce03 	.word	0x4524ce03
 80010ac:	0000009a 	.word	0x0000009a
 80010b0:	4524ce04 	.word	0x4524ce04
 80010b4:	0000009a 	.word	0x0000009a
 80010b8:	4524ce05 	.word	0x4524ce05
 80010bc:	0000009a 	.word	0x0000009a
 80010c0:	2000ab50 	.word	0x2000ab50
 80010c4:	2000aba0 	.word	0x2000aba0

080010c8 <ButtonsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonsTask */
void ButtonsTask(void *argument)
{
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b0aa      	sub	sp, #168	; 0xa8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonsTask */
	RadioReset();
 80010d0:	f7ff ff5e 	bl	8000f90 <RadioReset>



	Rxpayload.retransmitCount = 15;
 80010d4:	4bbe      	ldr	r3, [pc, #760]	; (80013d0 <ButtonsTask+0x308>)
 80010d6:	220f      	movs	r2, #15
 80010d8:	751a      	strb	r2, [r3, #20]

	graphic_lcd_write(0, 0, "PRESS ANY BUTTON");
 80010da:	4abe      	ldr	r2, [pc, #760]	; (80013d4 <ButtonsTask+0x30c>)
 80010dc:	2100      	movs	r1, #0
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 fa46 	bl	8001570 <graphic_lcd_write>
	graphic_lcd_write(3, 0, "A     B     C     D");
 80010e4:	4abc      	ldr	r2, [pc, #752]	; (80013d8 <ButtonsTask+0x310>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 fa41 	bl	8001570 <graphic_lcd_write>

	//printf("button loop\r\n");
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0){
 80010ee:	2108      	movs	r1, #8
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f4:	f002 fbf4 	bl	80038e0 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d16f      	bne.n	80011de <ButtonsTask+0x116>
		  	float temperature = Si7006_temperature(&Si7006);
 80010fe:	48b7      	ldr	r0, [pc, #732]	; (80013dc <ButtonsTask+0x314>)
 8001100:	f001 faea 	bl	80026d8 <Si7006_temperature>
 8001104:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4

			int tempInteger = (int)temperature;
 8001108:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800110c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001110:	ee17 3a90 	vmov	r3, s15
 8001114:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			int tempDecimel = ((float)temperature - (int)temperature)*100;
 8001118:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800111c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001124:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8001128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800112c:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80013e0 <ButtonsTask+0x318>
 8001130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001138:	ee17 3a90 	vmov	r3, s15
 800113c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			char tempString[30];
			char tempString2[30];
			sprintf(tempString, "Temp: %d.%d deg C", tempInteger,tempDecimel );
 8001140:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001144:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001148:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800114c:	49a5      	ldr	r1, [pc, #660]	; (80013e4 <ButtonsTask+0x31c>)
 800114e:	f00b fc51 	bl	800c9f4 <siprintf>
			sprintf(tempString2, "%d.%d deg C", tempInteger,tempDecimel );
 8001152:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800115a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800115e:	49a2      	ldr	r1, [pc, #648]	; (80013e8 <ButtonsTask+0x320>)
 8001160:	f00b fc48 	bl	800c9f4 <siprintf>
			graphic_lcd_clear_screen();
 8001164:	f000 f9dc 	bl	8001520 <graphic_lcd_clear_screen>
			graphic_lcd_write(0, 0, "temperature:");
 8001168:	4aa0      	ldr	r2, [pc, #640]	; (80013ec <ButtonsTask+0x324>)
 800116a:	2100      	movs	r1, #0
 800116c:	2000      	movs	r0, #0
 800116e:	f000 f9ff 	bl	8001570 <graphic_lcd_write>
			graphic_lcd_write(1, 0,tempString2);
 8001172:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001176:	461a      	mov	r2, r3
 8001178:	2100      	movs	r1, #0
 800117a:	2001      	movs	r0, #1
 800117c:	f000 f9f8 	bl	8001570 <graphic_lcd_write>


			sprintf(TxData, tempString);
 8001180:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001184:	4619      	mov	r1, r3
 8001186:	489a      	ldr	r0, [pc, #616]	; (80013f0 <ButtonsTask+0x328>)
 8001188:	f00b fc34 	bl	800c9f4 <siprintf>
			//TxPayload.data = tempString;
			TxPayload.data = TxData;
 800118c:	4b99      	ldr	r3, [pc, #612]	; (80013f4 <ButtonsTask+0x32c>)
 800118e:	4a98      	ldr	r2, [pc, #608]	; (80013f0 <ButtonsTask+0x328>)
 8001190:	60da      	str	r2, [r3, #12]
			TxPayload.UseAck = 1;
 8001192:	4b98      	ldr	r3, [pc, #608]	; (80013f4 <ButtonsTask+0x32c>)
 8001194:	2201      	movs	r2, #1
 8001196:	755a      	strb	r2, [r3, #21]
			TxPayload.length = strlen(tempString);
 8001198:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f817 	bl	80001d0 <strlen>
 80011a2:	4602      	mov	r2, r0
 80011a4:	4b93      	ldr	r3, [pc, #588]	; (80013f4 <ButtonsTask+0x32c>)
 80011a6:	611a      	str	r2, [r3, #16]
			Rxpayload.retransmitCount = 15;
 80011a8:	4b89      	ldr	r3, [pc, #548]	; (80013d0 <ButtonsTask+0x308>)
 80011aa:	220f      	movs	r2, #15
 80011ac:	751a      	strb	r2, [r3, #20]
			//TxPayload.length = strlen(tempString);
			TxPayload.address = 0x11223344EE;
 80011ae:	4a91      	ldr	r2, [pc, #580]	; (80013f4 <ButtonsTask+0x32c>)
 80011b0:	a485      	add	r4, pc, #532	; (adr r4, 80013c8 <ButtonsTask+0x300>)
 80011b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80011b6:	e9c2 3400 	strd	r3, r4, [r2]

			NRF24L01p_writePayload(&TxPayload);
 80011ba:	488e      	ldr	r0, [pc, #568]	; (80013f4 <ButtonsTask+0x32c>)
 80011bc:	f000 fc72 	bl	8001aa4 <NRF24L01p_writePayload>
			NRF24L01p_ErrorStatus_t ret = NRF24L01p_TransmitPayload(&TxPayload);
 80011c0:	488c      	ldr	r0, [pc, #560]	; (80013f4 <ButtonsTask+0x32c>)
 80011c2:	f000 fcdb 	bl	8001b7c <NRF24L01p_TransmitPayload>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

			if(ret == NRF24L01P_ERROR){
 80011cc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d104      	bne.n	80011de <ButtonsTask+0x116>
				graphic_lcd_write(3, 0, "Transmission Error");
 80011d4:	4a88      	ldr	r2, [pc, #544]	; (80013f8 <ButtonsTask+0x330>)
 80011d6:	2100      	movs	r1, #0
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f9c9 	bl	8001570 <graphic_lcd_write>
			}

		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0){
 80011de:	2104      	movs	r1, #4
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e4:	f002 fb7c 	bl	80038e0 <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d16c      	bne.n	80012c8 <ButtonsTask+0x200>
			float relativeHumidity = Si7006_relativeHumidity(&Si7006);
 80011ee:	487b      	ldr	r0, [pc, #492]	; (80013dc <ButtonsTask+0x314>)
 80011f0:	f001 fad0 	bl	8002794 <Si7006_relativeHumidity>
 80011f4:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
			int tempInteger = (int)relativeHumidity;
 80011f8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80011fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001200:	ee17 3a90 	vmov	r3, s15
 8001204:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			int tempDecimel = ((float)relativeHumidity - (int)relativeHumidity)*100;
 8001208:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800120c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001214:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80013e0 <ButtonsTask+0x318>
 8001220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001228:	ee17 3a90 	vmov	r3, s15
 800122c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			char tempString[30];
			char tempString2[30];
			sprintf(tempString, "Humidity: %d.%d %%", tempInteger,tempDecimel );
 8001230:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001234:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001238:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800123c:	496f      	ldr	r1, [pc, #444]	; (80013fc <ButtonsTask+0x334>)
 800123e:	f00b fbd9 	bl	800c9f4 <siprintf>
			sprintf(tempString2, "%d.%d percent", tempInteger,tempDecimel );
 8001242:	f107 0008 	add.w	r0, r7, #8
 8001246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800124a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800124e:	496c      	ldr	r1, [pc, #432]	; (8001400 <ButtonsTask+0x338>)
 8001250:	f00b fbd0 	bl	800c9f4 <siprintf>
			graphic_lcd_clear_screen();
 8001254:	f000 f964 	bl	8001520 <graphic_lcd_clear_screen>
			graphic_lcd_write(0, 0, "relative humidity:");
 8001258:	4a6a      	ldr	r2, [pc, #424]	; (8001404 <ButtonsTask+0x33c>)
 800125a:	2100      	movs	r1, #0
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f987 	bl	8001570 <graphic_lcd_write>
			graphic_lcd_write(1, 0,tempString2);
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	461a      	mov	r2, r3
 8001268:	2100      	movs	r1, #0
 800126a:	2001      	movs	r0, #1
 800126c:	f000 f980 	bl	8001570 <graphic_lcd_write>


			sprintf(TxData, tempString);
 8001270:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001274:	4619      	mov	r1, r3
 8001276:	485e      	ldr	r0, [pc, #376]	; (80013f0 <ButtonsTask+0x328>)
 8001278:	f00b fbbc 	bl	800c9f4 <siprintf>
			//TxPayload.data = tempString;
			TxPayload.data = TxData;
 800127c:	4b5d      	ldr	r3, [pc, #372]	; (80013f4 <ButtonsTask+0x32c>)
 800127e:	4a5c      	ldr	r2, [pc, #368]	; (80013f0 <ButtonsTask+0x328>)
 8001280:	60da      	str	r2, [r3, #12]
			TxPayload.UseAck = 1;
 8001282:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <ButtonsTask+0x32c>)
 8001284:	2201      	movs	r2, #1
 8001286:	755a      	strb	r2, [r3, #21]
			TxPayload.length = strlen(tempString);
 8001288:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128c:	4618      	mov	r0, r3
 800128e:	f7fe ff9f 	bl	80001d0 <strlen>
 8001292:	4602      	mov	r2, r0
 8001294:	4b57      	ldr	r3, [pc, #348]	; (80013f4 <ButtonsTask+0x32c>)
 8001296:	611a      	str	r2, [r3, #16]
			//TxPayload.length = strlen(tempString);
			TxPayload.address = 0x11223344EE;
 8001298:	4a56      	ldr	r2, [pc, #344]	; (80013f4 <ButtonsTask+0x32c>)
 800129a:	a44b      	add	r4, pc, #300	; (adr r4, 80013c8 <ButtonsTask+0x300>)
 800129c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012a0:	e9c2 3400 	strd	r3, r4, [r2]

			NRF24L01p_writePayload(&TxPayload);
 80012a4:	4853      	ldr	r0, [pc, #332]	; (80013f4 <ButtonsTask+0x32c>)
 80012a6:	f000 fbfd 	bl	8001aa4 <NRF24L01p_writePayload>
			NRF24L01p_ErrorStatus_t ret = NRF24L01p_TransmitPayload(&TxPayload);
 80012aa:	4852      	ldr	r0, [pc, #328]	; (80013f4 <ButtonsTask+0x32c>)
 80012ac:	f000 fc66 	bl	8001b7c <NRF24L01p_TransmitPayload>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

			if(ret == NRF24L01P_ERROR){
 80012b6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d104      	bne.n	80012c8 <ButtonsTask+0x200>
				graphic_lcd_write(3, 0, "Transmission Error");
 80012be:	4a4e      	ldr	r2, [pc, #312]	; (80013f8 <ButtonsTask+0x330>)
 80012c0:	2100      	movs	r1, #0
 80012c2:	2003      	movs	r0, #3
 80012c4:	f000 f954 	bl	8001570 <graphic_lcd_write>
			}

		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 80012c8:	2102      	movs	r1, #2
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ce:	f002 fb07 	bl	80038e0 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d135      	bne.n	8001344 <ButtonsTask+0x27c>
			sprintf(TxData, "button pressed: C");
 80012d8:	4a45      	ldr	r2, [pc, #276]	; (80013f0 <ButtonsTask+0x328>)
 80012da:	4b4b      	ldr	r3, [pc, #300]	; (8001408 <ButtonsTask+0x340>)
 80012dc:	4615      	mov	r5, r2
 80012de:	461c      	mov	r4, r3
 80012e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e2:	6028      	str	r0, [r5, #0]
 80012e4:	6069      	str	r1, [r5, #4]
 80012e6:	60aa      	str	r2, [r5, #8]
 80012e8:	60eb      	str	r3, [r5, #12]
 80012ea:	8823      	ldrh	r3, [r4, #0]
 80012ec:	822b      	strh	r3, [r5, #16]
			//TxPayload.data = tempString;
			TxPayload.data = TxData;
 80012ee:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <ButtonsTask+0x32c>)
 80012f0:	4a3f      	ldr	r2, [pc, #252]	; (80013f0 <ButtonsTask+0x328>)
 80012f2:	60da      	str	r2, [r3, #12]
			TxPayload.UseAck = 1;
 80012f4:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <ButtonsTask+0x32c>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	755a      	strb	r2, [r3, #21]
			TxPayload.length = strlen(TxData);
 80012fa:	483d      	ldr	r0, [pc, #244]	; (80013f0 <ButtonsTask+0x328>)
 80012fc:	f7fe ff68 	bl	80001d0 <strlen>
 8001300:	4602      	mov	r2, r0
 8001302:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <ButtonsTask+0x32c>)
 8001304:	611a      	str	r2, [r3, #16]
			//TxPayload.length = strlen(tempString);
			TxPayload.address = 0x11223344EE;
 8001306:	4a3b      	ldr	r2, [pc, #236]	; (80013f4 <ButtonsTask+0x32c>)
 8001308:	a42f      	add	r4, pc, #188	; (adr r4, 80013c8 <ButtonsTask+0x300>)
 800130a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800130e:	e9c2 3400 	strd	r3, r4, [r2]

			NRF24L01p_writePayload(&TxPayload);
 8001312:	4838      	ldr	r0, [pc, #224]	; (80013f4 <ButtonsTask+0x32c>)
 8001314:	f000 fbc6 	bl	8001aa4 <NRF24L01p_writePayload>
			NRF24L01p_ErrorStatus_t ret = NRF24L01p_TransmitPayload(&TxPayload);
 8001318:	4836      	ldr	r0, [pc, #216]	; (80013f4 <ButtonsTask+0x32c>)
 800131a:	f000 fc2f 	bl	8001b7c <NRF24L01p_TransmitPayload>
 800131e:	4603      	mov	r3, r0
 8001320:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

			graphic_lcd_clear_screen();
 8001324:	f000 f8fc 	bl	8001520 <graphic_lcd_clear_screen>
			graphic_lcd_write(0, 0, "pressed button: C");
 8001328:	4a38      	ldr	r2, [pc, #224]	; (800140c <ButtonsTask+0x344>)
 800132a:	2100      	movs	r1, #0
 800132c:	2000      	movs	r0, #0
 800132e:	f000 f91f 	bl	8001570 <graphic_lcd_write>

			if(ret == NRF24L01P_ERROR){
 8001332:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8001336:	2b00      	cmp	r3, #0
 8001338:	d104      	bne.n	8001344 <ButtonsTask+0x27c>
				graphic_lcd_write(3, 0, "Transmission Error");
 800133a:	4a2f      	ldr	r2, [pc, #188]	; (80013f8 <ButtonsTask+0x330>)
 800133c:	2100      	movs	r1, #0
 800133e:	2003      	movs	r0, #3
 8001340:	f000 f916 	bl	8001570 <graphic_lcd_write>
			}

		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0){
 8001344:	2101      	movs	r1, #1
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f002 fac9 	bl	80038e0 <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d135      	bne.n	80013c0 <ButtonsTask+0x2f8>
			//custom_print("you pressed button A\r\n");
			sprintf(TxData, "button pressed: D");
 8001354:	4a26      	ldr	r2, [pc, #152]	; (80013f0 <ButtonsTask+0x328>)
 8001356:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <ButtonsTask+0x348>)
 8001358:	4615      	mov	r5, r2
 800135a:	461c      	mov	r4, r3
 800135c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135e:	6028      	str	r0, [r5, #0]
 8001360:	6069      	str	r1, [r5, #4]
 8001362:	60aa      	str	r2, [r5, #8]
 8001364:	60eb      	str	r3, [r5, #12]
 8001366:	8823      	ldrh	r3, [r4, #0]
 8001368:	822b      	strh	r3, [r5, #16]
			//TxPayload.data = tempString;
			TxPayload.data = TxData;
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <ButtonsTask+0x32c>)
 800136c:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <ButtonsTask+0x328>)
 800136e:	60da      	str	r2, [r3, #12]
			TxPayload.UseAck = 1;
 8001370:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <ButtonsTask+0x32c>)
 8001372:	2201      	movs	r2, #1
 8001374:	755a      	strb	r2, [r3, #21]
			TxPayload.length = strlen(TxData);
 8001376:	481e      	ldr	r0, [pc, #120]	; (80013f0 <ButtonsTask+0x328>)
 8001378:	f7fe ff2a 	bl	80001d0 <strlen>
 800137c:	4602      	mov	r2, r0
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <ButtonsTask+0x32c>)
 8001380:	611a      	str	r2, [r3, #16]
			//TxPayload.length = strlen(tempString);
			TxPayload.address = 0x11223344EE;
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <ButtonsTask+0x32c>)
 8001384:	a410      	add	r4, pc, #64	; (adr r4, 80013c8 <ButtonsTask+0x300>)
 8001386:	e9d4 3400 	ldrd	r3, r4, [r4]
 800138a:	e9c2 3400 	strd	r3, r4, [r2]

			NRF24L01p_writePayload(&TxPayload);
 800138e:	4819      	ldr	r0, [pc, #100]	; (80013f4 <ButtonsTask+0x32c>)
 8001390:	f000 fb88 	bl	8001aa4 <NRF24L01p_writePayload>
			NRF24L01p_ErrorStatus_t ret = NRF24L01p_TransmitPayload(&TxPayload);
 8001394:	4817      	ldr	r0, [pc, #92]	; (80013f4 <ButtonsTask+0x32c>)
 8001396:	f000 fbf1 	bl	8001b7c <NRF24L01p_TransmitPayload>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89



			graphic_lcd_clear_screen();
 80013a0:	f000 f8be 	bl	8001520 <graphic_lcd_clear_screen>
			graphic_lcd_write(0, 0, "pressed button: D");
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <ButtonsTask+0x34c>)
 80013a6:	2100      	movs	r1, #0
 80013a8:	2000      	movs	r0, #0
 80013aa:	f000 f8e1 	bl	8001570 <graphic_lcd_write>

			if(ret == NRF24L01P_ERROR){
 80013ae:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d104      	bne.n	80013c0 <ButtonsTask+0x2f8>
				graphic_lcd_write(3, 0, "Transmission Error");
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <ButtonsTask+0x330>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	2003      	movs	r0, #3
 80013bc:	f000 f8d8 	bl	8001570 <graphic_lcd_write>
			}

		}
	    osDelay(1);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f008 fb7d 	bl	8009ac0 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0){
 80013c6:	e692      	b.n	80010ee <ButtonsTask+0x26>
 80013c8:	223344ee 	.word	0x223344ee
 80013cc:	00000011 	.word	0x00000011
 80013d0:	2000aae0 	.word	0x2000aae0
 80013d4:	0800db78 	.word	0x0800db78
 80013d8:	0800db8c 	.word	0x0800db8c
 80013dc:	2000aabc 	.word	0x2000aabc
 80013e0:	42c80000 	.word	0x42c80000
 80013e4:	0800dba0 	.word	0x0800dba0
 80013e8:	0800dbb4 	.word	0x0800dbb4
 80013ec:	0800dbc0 	.word	0x0800dbc0
 80013f0:	2000ab60 	.word	0x2000ab60
 80013f4:	2000ab28 	.word	0x2000ab28
 80013f8:	0800dbd0 	.word	0x0800dbd0
 80013fc:	0800dbe4 	.word	0x0800dbe4
 8001400:	0800dbf8 	.word	0x0800dbf8
 8001404:	0800dc08 	.word	0x0800dc08
 8001408:	0800dc1c 	.word	0x0800dc1c
 800140c:	0800dc30 	.word	0x0800dc30
 8001410:	0800dc44 	.word	0x0800dc44
 8001414:	0800dc58 	.word	0x0800dc58

08001418 <LEDsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDsTask */
void LEDsTask(void *argument)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDsTask */
  /* Infinite loop */
  for(;;)
 8001420:	e7fe      	b.n	8001420 <LEDsTask+0x8>

08001422 <SensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorsTask */
void SensorsTask(void *argument)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SensorsTask */
  /* Infinite loop */
  for(;;)
  {
	    osDelay(800);
 800142a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800142e:	f008 fb47 	bl	8009ac0 <osDelay>
	    HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143a:	f002 fa69 	bl	8003910 <HAL_GPIO_WritePin>
	    osDelay(800);
 800143e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001442:	f008 fb3d 	bl	8009ac0 <osDelay>
	    HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f002 fa5f 	bl	8003910 <HAL_GPIO_WritePin>
	    osDelay(800);
 8001452:	e7ea      	b.n	800142a <SensorsTask+0x8>

08001454 <LCDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCDTask */
void LCDTask(void *argument)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08c      	sub	sp, #48	; 0x30
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN LCDTask */
	uint32_t ulNotifiedValue;

	int dataCount = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
	char msg[30];
  /* Infinite loop */
  for(;;)
  {
		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 8001460:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	2000      	movs	r0, #0
 800146e:	f009 ffa5 	bl	800b3bc <xTaskNotifyWait>
 8001472:	4603      	mov	r3, r0
 8001474:	2b01      	cmp	r3, #1
 8001476:	d112      	bne.n	800149e <LCDTask+0x4a>
			dataCount++;
 8001478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147a:	3301      	adds	r3, #1
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
			sprintf(msg, "total messages: %d", dataCount);
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001484:	4908      	ldr	r1, [pc, #32]	; (80014a8 <LCDTask+0x54>)
 8001486:	4618      	mov	r0, r3
 8001488:	f00b fab4 	bl	800c9f4 <siprintf>
			graphic_lcd_clear_screen ();
 800148c:	f000 f848 	bl	8001520 <graphic_lcd_clear_screen>
			graphic_lcd_write(1, 0, msg);
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	461a      	mov	r2, r3
 8001496:	2100      	movs	r1, #0
 8001498:	2001      	movs	r0, #1
 800149a:	f000 f869 	bl	8001570 <graphic_lcd_write>
			//graphic_lcd_write(3, 0, cmdMsg);
						//DigitalPin_SetValue(&led1);
		}

		osDelay(100);
 800149e:	2064      	movs	r0, #100	; 0x64
 80014a0:	f008 fb0e 	bl	8009ac0 <osDelay>
		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 80014a4:	e7dc      	b.n	8001460 <LCDTask+0xc>
 80014a6:	bf00      	nop
 80014a8:	0800dc7c 	.word	0x0800dc7c

080014ac <NotificationsTask>:
}




void NotificationsTask( void *pvParameters ){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifiedValue;
	while(1){

		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 80014b4:	f107 020c 	add.w	r2, r7, #12
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	2000      	movs	r0, #0
 80014c2:	f009 ff7b 	bl	800b3bc <xTaskNotifyWait>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d10e      	bne.n	80014ea <NotificationsTask+0x3e>
			//DigitalPin_ClearValue(&led1);
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d2:	4808      	ldr	r0, [pc, #32]	; (80014f4 <NotificationsTask+0x48>)
 80014d4:	f002 fa1c 	bl	8003910 <HAL_GPIO_WritePin>
			vTaskDelay(200);
 80014d8:	20c8      	movs	r0, #200	; 0xc8
 80014da:	f009 fa79 	bl	800a9d0 <vTaskDelay>
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e4:	4803      	ldr	r0, [pc, #12]	; (80014f4 <NotificationsTask+0x48>)
 80014e6:	f002 fa13 	bl	8003910 <HAL_GPIO_WritePin>

						//DigitalPin_SetValue(&led1);
		}

		vTaskDelay(100);
 80014ea:	2064      	movs	r0, #100	; 0x64
 80014ec:	f009 fa70 	bl	800a9d0 <vTaskDelay>
		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 80014f0:	e7e0      	b.n	80014b4 <NotificationsTask+0x8>
 80014f2:	bf00      	nop
 80014f4:	48000400 	.word	0x48000400

080014f8 <c12832_hal_spi_write_read>:


}


int c12832_hal_spi_write_read (uint8_t *tx_data, uint8_t *rx_data, uint16_t lenght) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	4613      	mov	r3, r2
 8001504:	80fb      	strh	r3, [r7, #6]

	HAL_SPI_Transmit (&hspi2, tx_data, 1, 200);
 8001506:	23c8      	movs	r3, #200	; 0xc8
 8001508:	2201      	movs	r2, #1
 800150a:	68f9      	ldr	r1, [r7, #12]
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <c12832_hal_spi_write_read+0x24>)
 800150e:	f005 f823 	bl	8006558 <HAL_SPI_Transmit>
		//DEBUG_MESSAGE_AND_EXIT_FAILURE

	return EXIT_SUCCESS;
 8001512:	2300      	movs	r3, #0

}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000ac30 	.word	0x2000ac30

08001520 <graphic_lcd_clear_screen>:

#include "graphic_lcd.h"
#include "st7565r.h"
#include "font.h"

int graphic_lcd_clear_screen(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
	
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	e019      	b.n	8001560 <graphic_lcd_clear_screen+0x40>
		st7565r_set_page_address(i);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f8cd 	bl	80016d0 <st7565r_set_page_address>
		st7565r_set_column_address(0);
 8001536:	2000      	movs	r0, #0
 8001538:	f000 f8de 	bl	80016f8 <st7565r_set_column_address>
		st7565r_set_display_start_line_address(0);
 800153c:	2000      	movs	r0, #0
 800153e:	f000 f8f8 	bl	8001732 <st7565r_set_display_start_line_address>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	e005      	b.n	8001554 <graphic_lcd_clear_screen+0x34>
			st7565r_write_data(0);
 8001548:	2000      	movs	r0, #0
 800154a:	f000 f881 	bl	8001650 <st7565r_write_data>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2b84      	cmp	r3, #132	; 0x84
 8001558:	ddf6      	ble.n	8001548 <graphic_lcd_clear_screen+0x28>
	for (i=0; i<LINE_COUNT; i++) {
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3301      	adds	r3, #1
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b03      	cmp	r3, #3
 8001564:	dde2      	ble.n	800152c <graphic_lcd_clear_screen+0xc>
	}
	
	return EXIT_SUCCESS;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <graphic_lcd_write>:

int graphic_lcd_write(int line, int offset, char *text) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]

	int i, j;
	
	st7565r_set_page_address(line);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f000 f8a5 	bl	80016d0 <st7565r_set_page_address>
	st7565r_set_column_address(offset + FONT_SIZE);
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	3305      	adds	r3, #5
 800158c:	b2db      	uxtb	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f8b2 	bl	80016f8 <st7565r_set_column_address>
	
	for (i=0; i<strlen(text); i++) {
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e01e      	b.n	80015d8 <graphic_lcd_write+0x68>
	
		for (j=0; j<FONT_SIZE; j++) {
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	e012      	b.n	80015c6 <graphic_lcd_write+0x56>
			st7565r_write_data(font_5x8_table[(((text[i] - ASCII_FONT_FIRST) * FONT_SIZE) + j)]);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	f1a3 0220 	sub.w	r2, r3, #32
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	441a      	add	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <graphic_lcd_write+0x80>)
 80015b8:	5cd3      	ldrb	r3, [r2, r3]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f848 	bl	8001650 <st7565r_write_data>
		for (j=0; j<FONT_SIZE; j++) {
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	3301      	adds	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	dde9      	ble.n	80015a0 <graphic_lcd_write+0x30>
		}
		st7565r_write_data(0);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f000 f83f 	bl	8001650 <st7565r_write_data>
	for (i=0; i<strlen(text); i++) {
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7fe fdf9 	bl	80001d0 <strlen>
 80015de:	4602      	mov	r2, r0
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d8d9      	bhi.n	800159a <graphic_lcd_write+0x2a>
	}
		
	return EXIT_SUCCESS;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	0800dce0 	.word	0x0800dce0

080015f4 <graphic_lcd_initialize>:

int graphic_lcd_initialize (void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	
	return st7565r_init ();
 80015f8:	f000 f8de 	bl	80017b8 <st7565r_init>
 80015fc:	4603      	mov	r3, r0
	
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <st7565r_write_command>:
#include "C12832Port.h"


#define HUNDRED_MILLISECONDS  	(10 / portTICK_PERIOD_MS)

void st7565r_write_command(uint8_t command) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <st7565r_write_command+0x44>)
 8001616:	f002 f97b 	bl	8003910 <HAL_GPIO_WritePin>
        DISPLAY_A0_LOW;
 800161a:	2200      	movs	r2, #0
 800161c:	2140      	movs	r1, #64	; 0x40
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <st7565r_write_command+0x48>)
 8001620:	f002 f976 	bl	8003910 <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&command, &tmp, 1);
 8001624:	f107 010f 	add.w	r1, r7, #15
 8001628:	1dfb      	adds	r3, r7, #7
 800162a:	2201      	movs	r2, #1
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff63 	bl	80014f8 <c12832_hal_spi_write_read>
        DISPLAY_CHIP_SELECT_HIGH;
 8001632:	2201      	movs	r2, #1
 8001634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <st7565r_write_command+0x44>)
 800163a:	f002 f969 	bl	8003910 <HAL_GPIO_WritePin>
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	48000400 	.word	0x48000400
 800164c:	48000800 	.word	0x48000800

08001650 <st7565r_write_data>:

void st7565r_write_data(uint8_t data) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001660:	480e      	ldr	r0, [pc, #56]	; (800169c <st7565r_write_data+0x4c>)
 8001662:	f002 f955 	bl	8003910 <HAL_GPIO_WritePin>
        DISPLAY_A0_HIGH;
 8001666:	2201      	movs	r2, #1
 8001668:	2140      	movs	r1, #64	; 0x40
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <st7565r_write_data+0x50>)
 800166c:	f002 f950 	bl	8003910 <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&data, &tmp, 1);
 8001670:	f107 010f 	add.w	r1, r7, #15
 8001674:	1dfb      	adds	r3, r7, #7
 8001676:	2201      	movs	r2, #1
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff3d 	bl	80014f8 <c12832_hal_spi_write_read>
        DISPLAY_A0_LOW;
 800167e:	2200      	movs	r2, #0
 8001680:	2140      	movs	r1, #64	; 0x40
 8001682:	4807      	ldr	r0, [pc, #28]	; (80016a0 <st7565r_write_data+0x50>)
 8001684:	f002 f944 	bl	8003910 <HAL_GPIO_WritePin>
        DISPLAY_CHIP_SELECT_HIGH;
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800168e:	4803      	ldr	r0, [pc, #12]	; (800169c <st7565r_write_data+0x4c>)
 8001690:	f002 f93e 	bl	8003910 <HAL_GPIO_WritePin>
}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	48000400 	.word	0x48000400
 80016a0:	48000800 	.word	0x48000800

080016a4 <st7565r_hard_reset>:
 *
 * This functions will reset the LCD controller by setting the reset pin low.
 * \note this funtions should not be confused with the \ref st7565r_soft_reset()
 * function, this command will control the RST pin.
 */
void st7565r_hard_reset(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	
        DISPLAY_RESET_LOW;
 80016a8:	2200      	movs	r2, #0
 80016aa:	2120      	movs	r1, #32
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <st7565r_hard_reset+0x28>)
 80016ae:	f002 f92f 	bl	8003910 <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 80016b2:	200a      	movs	r0, #10
 80016b4:	f009 f98c 	bl	800a9d0 <vTaskDelay>
        DISPLAY_RESET_HIGH;
 80016b8:	2201      	movs	r2, #1
 80016ba:	2120      	movs	r1, #32
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <st7565r_hard_reset+0x28>)
 80016be:	f002 f927 	bl	8003910 <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 80016c2:	200a      	movs	r0, #10
 80016c4:	f009 f984 	bl	800a9d0 <vTaskDelay>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	48000800 	.word	0x48000800

080016d0 <st7565r_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
void st7565r_set_page_address(uint8_t address)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
        // Make sure that the address is 4 bits (only 8 pages)
        address &= 0x0F;
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff8a 	bl	8001604 <st7565r_write_command>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <st7565r_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void st7565r_set_column_address(uint8_t address)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
        // Make sure the address is 7 bits
        address &= 0x7F;
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001708:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f043 0310 	orr.w	r3, r3, #16
 8001714:	b2db      	uxtb	r3, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff74 	bl	8001604 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	b2db      	uxtb	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff6d 	bl	8001604 <st7565r_write_command>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <st7565r_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the LCD.
 */
void st7565r_set_display_start_line_address(uint8_t address)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
        // Make sure address is 6 bits
        address &= 0x3F;
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001742:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800174a:	b2db      	uxtb	r3, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff59 	bl	8001604 <st7565r_write_command>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <st7565r_display_on>:
 * \brief Turn the LCD display on
 *
 * This function will turn on the LCD.
 */
void st7565r_display_on(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_ON);
 800175e:	20af      	movs	r0, #175	; 0xaf
 8001760:	f7ff ff50 	bl	8001604 <st7565r_write_command>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <st7565r_set_contrast>:
 *                 the LCD.
 *
 * \retval contrast the contrast value written to the LCD controller
 */
uint8_t st7565r_set_contrast(uint8_t contrast)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
        if (contrast < ST7565R_DISPLAY_CONTRAST_MIN) {
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b1d      	cmp	r3, #29
 8001776:	d801      	bhi.n	800177c <st7565r_set_contrast+0x14>
                contrast = ST7565R_DISPLAY_CONTRAST_MIN;
 8001778:	231e      	movs	r3, #30
 800177a:	71fb      	strb	r3, [r7, #7]
        }
        if (contrast > ST7565R_DISPLAY_CONTRAST_MAX) {
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	2b28      	cmp	r3, #40	; 0x28
 8001780:	d901      	bls.n	8001786 <st7565r_set_contrast+0x1e>
                contrast = ST7565R_DISPLAY_CONTRAST_MAX;
 8001782:	2328      	movs	r3, #40	; 0x28
 8001784:	71fb      	strb	r3, [r7, #7]
        }
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME_MODE_SET);
 8001786:	2081      	movs	r0, #129	; 0x81
 8001788:	f7ff ff3c 	bl	8001604 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME(contrast));
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	43db      	mvns	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff33 	bl	8001604 <st7565r_write_command>
        return contrast;
 800179e:	79fb      	ldrb	r3, [r7, #7]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <st7565r_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the LCD
 *
 */
void st7565r_display_invert_disable(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_NORMAL);
 80017ac:	20a6      	movs	r0, #166	; 0xa6
 80017ae:	f7ff ff29 	bl	8001604 <st7565r_write_command>
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <st7565r_init>:

int st7565r_init(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	
        // Do a hard reset of the LCD display controller
        st7565r_hard_reset();
 80017bc:	f7ff ff72 	bl	80016a4 <st7565r_hard_reset>

        // Set the A0 pin to the default state (command)
        DISPLAY_A0_LOW;
 80017c0:	2200      	movs	r2, #0
 80017c2:	2140      	movs	r1, #64	; 0x40
 80017c4:	4810      	ldr	r0, [pc, #64]	; (8001808 <st7565r_init+0x50>)
 80017c6:	f002 f8a3 	bl	8003910 <HAL_GPIO_WritePin>

        // The column address
        st7565r_write_command(ST7565R_CMD_ADC_NORMAL);
 80017ca:	20a0      	movs	r0, #160	; 0xa0
 80017cc:	f7ff ff1a 	bl	8001604 <st7565r_write_command>

        // Non-inverted display
        st7565r_display_invert_disable();
 80017d0:	f7ff ffea 	bl	80017a8 <st7565r_display_invert_disable>

        // The common mode scan direction
        st7565r_write_command(ST7565R_CMD_REVERSE_SCAN_DIRECTION);
 80017d4:	20c8      	movs	r0, #200	; 0xc8
 80017d6:	f7ff ff15 	bl	8001604 <st7565r_write_command>

        // Set the voltage bias ratio to 1/6
        st7565r_write_command(ST7565R_CMD_LCD_BIAS_1_DIV_6_DUTY33);
 80017da:	20a2      	movs	r0, #162	; 0xa2
 80017dc:	f7ff ff12 	bl	8001604 <st7565r_write_command>

        // Set booster circuit, voltage regulator and voltage follower all to on
        st7565r_write_command(ST7565R_CMD_POWER_CTRL_ALL_ON);
 80017e0:	202f      	movs	r0, #47	; 0x2f
 80017e2:	f7ff ff0f 	bl	8001604 <st7565r_write_command>

        // Set the booster ratio to 2X,3X,4X
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_SET);
 80017e6:	20f8      	movs	r0, #248	; 0xf8
 80017e8:	f7ff ff0c 	bl	8001604 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_2X_3X_4X);
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff ff09 	bl	8001604 <st7565r_write_command>

        // Set voltage resistor ratio to 1
        st7565r_write_command(ST7565R_CMD_VOLTAGE_RESISTOR_RATIO_1);
 80017f2:	2021      	movs	r0, #33	; 0x21
 80017f4:	f7ff ff06 	bl	8001604 <st7565r_write_command>

        /* Set contrast to min value, no need to check return value as the contrast
        is set to the defined min*/
        st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);
 80017f8:	201e      	movs	r0, #30
 80017fa:	f7ff ffb5 	bl	8001768 <st7565r_set_contrast>

        // Turn on the display
        st7565r_display_on();
 80017fe:	f7ff ffac 	bl	800175a <st7565r_display_on>
		
		return EXIT_SUCCESS;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}
 8001808:	48000800 	.word	0x48000800

0800180c <NRF24L01p_ResetConfigValues>:

bool NRF24L01p_drFlag, NRF24L01p_dsFlag, NRF24L01p_mrFlag;



void NRF24L01p_ResetConfigValues(NRF24L01p_RadioConfig_t *_RadioConfig, NRF24L01p_RxPipeConfig_t *_RxPipeConfig){
 800180c:	b5b0      	push	{r4, r5, r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_Initialize();
 8001816:	f000 fe2d 	bl	8002474 <NRF24L01p_port_Initialize>
    //ResetConfigValues(_RadioConfig, _RxPipeConfig);


    NRF24L01p_port_write_Pin_CE(0);
 800181a:	2000      	movs	r0, #0
 800181c:	f000 fe70 	bl	8002500 <NRF24L01p_port_write_Pin_CE>
    NRF24L01p_port_write_Pin_CSN(0);
 8001820:	2000      	movs	r0, #0
 8001822:	f000 fe7f 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>

    NRF24L01p_port_DelayMs(_NRF24L01P_TIMING_PowerOnReset_ms);
 8001826:	2064      	movs	r0, #100	; 0x64
 8001828:	f000 ff34 	bl	8002694 <NRF24L01p_port_DelayMs>

    NRF24L01p_RadioMode(NRF24L01P_MODE_POWER_DOWN);
 800182c:	2001      	movs	r0, #1
 800182e:	f000 f8db 	bl	80019e8 <NRF24L01p_RadioMode>
    NRF24L01p_RadioMode(NRF24L01P_MODE_RX);
 8001832:	2003      	movs	r0, #3
 8001834:	f000 f8d8 	bl	80019e8 <NRF24L01p_RadioMode>

    NRF24L01p_clear_data_ready_flag();
 8001838:	f000 fcd4 	bl	80021e4 <NRF24L01p_clear_data_ready_flag>
    NRF24L01p_flush_rx();
 800183c:	f000 fb3b 	bl	8001eb6 <NRF24L01p_flush_rx>
    NRF24L01p_flush_tx();
 8001840:	f000 fb24 	bl	8001e8c <NRF24L01p_flush_tx>

    uint8_t status_rst_val = 0x70;//reset status
 8001844:	2370      	movs	r3, #112	; 0x70
 8001846:	72fb      	strb	r3, [r7, #11]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS, &status_rst_val,1);
 8001848:	f107 030b 	add.w	r3, r7, #11
 800184c:	2201      	movs	r2, #1
 800184e:	4619      	mov	r1, r3
 8001850:	2007      	movs	r0, #7
 8001852:	f000 fab4 	bl	8001dbe <NRF24L01p_write_register_buffer>
    uint8_t config_rst_val = 0x0b;//reset config
 8001856:	230b      	movs	r3, #11
 8001858:	72bb      	strb	r3, [r7, #10]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_CONFIG, &config_rst_val,1);
 800185a:	f107 030a 	add.w	r3, r7, #10
 800185e:	2201      	movs	r2, #1
 8001860:	4619      	mov	r1, r3
 8001862:	2000      	movs	r0, #0
 8001864:	f000 faab 	bl	8001dbe <NRF24L01p_write_register_buffer>


    RadioConfig.DataReadyInterruptEnabled = _RadioConfig->DataReadyInterruptEnabled;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	781a      	ldrb	r2, [r3, #0]
 800186c:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 800186e:	701a      	strb	r2, [r3, #0]
    RadioConfig.DataSentInterruptFlagEnabled = _RadioConfig->DataSentInterruptFlagEnabled;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	785a      	ldrb	r2, [r3, #1]
 8001874:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 8001876:	705a      	strb	r2, [r3, #1]
    RadioConfig.MaxRetryInterruptFlagEnabled = _RadioConfig->MaxRetryInterruptFlagEnabled;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	789a      	ldrb	r2, [r3, #2]
 800187c:	4b58      	ldr	r3, [pc, #352]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 800187e:	709a      	strb	r2, [r3, #2]
    RadioConfig.Crc = _RadioConfig->Crc;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	78da      	ldrb	r2, [r3, #3]
 8001884:	4b56      	ldr	r3, [pc, #344]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 8001886:	70da      	strb	r2, [r3, #3]
    RadioConfig.AutoReTransmissionCount = _RadioConfig->AutoReTransmissionCount;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	791a      	ldrb	r2, [r3, #4]
 800188c:	4b54      	ldr	r3, [pc, #336]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 800188e:	711a      	strb	r2, [r3, #4]
    RadioConfig.AutoReTransmitDelayX250us = _RadioConfig->AutoReTransmitDelayX250us;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	795a      	ldrb	r2, [r3, #5]
 8001894:	4b52      	ldr	r3, [pc, #328]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 8001896:	715a      	strb	r2, [r3, #5]
    RadioConfig.frequencyOffset = _RadioConfig->frequencyOffset;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	799a      	ldrb	r2, [r3, #6]
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 800189e:	719a      	strb	r2, [r3, #6]
    RadioConfig.datarate = _RadioConfig->datarate;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	79da      	ldrb	r2, [r3, #7]
 80018a4:	4b4e      	ldr	r3, [pc, #312]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 80018a6:	71da      	strb	r2, [r3, #7]
    RadioConfig.RfPower = _RadioConfig->RfPower;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7a1a      	ldrb	r2, [r3, #8]
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 80018ae:	721a      	strb	r2, [r3, #8]
    RadioConfig.PllLock = _RadioConfig->PllLock;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7a5a      	ldrb	r2, [r3, #9]
 80018b4:	4b4a      	ldr	r3, [pc, #296]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 80018b6:	725a      	strb	r2, [r3, #9]
    RadioConfig.ContWaveEnabled = _RadioConfig->ContWaveEnabled;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7a9a      	ldrb	r2, [r3, #10]
 80018bc:	4b48      	ldr	r3, [pc, #288]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 80018be:	729a      	strb	r2, [r3, #10]
    RadioConfig.FeatureDynamicPayloadEnabled = _RadioConfig->FeatureDynamicPayloadEnabled;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7ada      	ldrb	r2, [r3, #11]
 80018c4:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 80018c6:	72da      	strb	r2, [r3, #11]
    RadioConfig.FeaturePayloadWithAckEnabled = _RadioConfig->FeaturePayloadWithAckEnabled;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7b1a      	ldrb	r2, [r3, #12]
 80018cc:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 80018ce:	731a      	strb	r2, [r3, #12]
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = _RadioConfig->FeatureDynamicPayloadWithNoAckEnabled;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7b5a      	ldrb	r2, [r3, #13]
 80018d4:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 80018d6:	735a      	strb	r2, [r3, #13]

	int i;
    for(i=0;i<6;i++){
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e019      	b.n	8001912 <NRF24L01p_ResetConfigValues+0x106>
        RxPipeConfig[i] = _RxPipeConfig[i];
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	461a      	mov	r2, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	1898      	adds	r0, r3, r2
 80018ee:	493d      	ldr	r1, [pc, #244]	; (80019e4 <NRF24L01p_ResetConfigValues+0x1d8>)
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	461c      	mov	r4, r3
 80018fe:	4605      	mov	r5, r0
 8001900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001904:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001908:	e884 0003 	stmia.w	r4, {r0, r1}
    for(i=0;i<6;i++){
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b05      	cmp	r3, #5
 8001916:	dde2      	ble.n	80018de <NRF24L01p_ResetConfigValues+0xd2>
    }


    NRF24L01p_enable_dynamic_payload(RadioConfig.FeatureDynamicPayloadEnabled);
 8001918:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 800191a:	7adb      	ldrb	r3, [r3, #11]
 800191c:	4618      	mov	r0, r3
 800191e:	f000 fd3f 	bl	80023a0 <NRF24L01p_enable_dynamic_payload>
    NRF24L01p_enable_payload_with_ack(RadioConfig.FeaturePayloadWithAckEnabled);
 8001922:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 8001924:	7b1b      	ldrb	r3, [r3, #12]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fd5d 	bl	80023e6 <NRF24L01p_enable_payload_with_ack>
    NRF24L01p_enable_dynamic_payload_with_no_ack(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled);
 800192c:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 800192e:	7b5b      	ldrb	r3, [r3, #13]
 8001930:	4618      	mov	r0, r3
 8001932:	f000 fd7b 	bl	800242c <NRF24L01p_enable_dynamic_payload_with_no_ack>
    NRF24L01p_set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 8001938:	791b      	ldrb	r3, [r3, #4]
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fbd1 	bl	80020e2 <NRF24L01p_set_auto_retransmission_count>
    NRF24L01p_set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 8001942:	795b      	ldrb	r3, [r3, #5]
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fbe7 	bl	8002118 <NRF24L01p_set_auto_retransmission_delay>
    NRF24L01p_set_DataRate(RadioConfig.datarate);
 800194a:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <NRF24L01p_ResetConfigValues+0x1d4>)
 800194c:	79db      	ldrb	r3, [r3, #7]
 800194e:	4618      	mov	r0, r3
 8001950:	f000 fc01 	bl	8002156 <NRF24L01p_set_DataRate>

    for(i=0;i<6;i++){
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e03b      	b.n	80019d2 <NRF24L01p_ResetConfigValues+0x1c6>
    	NRF24L01p_enable_rx_on_pipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].PipeEnabled );
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	b2d8      	uxtb	r0, r3
 800195e:	4921      	ldr	r1, [pc, #132]	; (80019e4 <NRF24L01p_ResetConfigValues+0x1d8>)
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	f000 fb7d 	bl	800206e <NRF24L01p_enable_rx_on_pipe>
    	NRF24L01p_enable_auto_ack((NRF24L01p_pipe_t)i,RxPipeConfig[i].autoAckEnabled );
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	b2d8      	uxtb	r0, r3
 8001978:	491a      	ldr	r1, [pc, #104]	; (80019e4 <NRF24L01p_ResetConfigValues+0x1d8>)
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	3301      	adds	r3, #1
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	f000 fb35 	bl	8001ffa <NRF24L01p_enable_auto_ack>
    	NRF24L01p_enable_dynamic_payload_pipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	b2d8      	uxtb	r0, r3
 8001994:	4913      	ldr	r1, [pc, #76]	; (80019e4 <NRF24L01p_ResetConfigValues+0x1d8>)
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	3311      	adds	r3, #17
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	4619      	mov	r1, r3
 80019a8:	f000 fcc6 	bl	8002338 <NRF24L01p_enable_dynamic_payload_pipe>
    	NRF24L01p_set_RX_pipe_address((NRF24L01p_pipe_t)i,RxPipeConfig[i].address);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	b2d8      	uxtb	r0, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	; (80019e4 <NRF24L01p_ResetConfigValues+0x1d8>)
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	3308      	adds	r3, #8
 80019c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4623      	mov	r3, r4
 80019c8:	f000 fc26 	bl	8002218 <NRF24L01p_set_RX_pipe_address>
    for(i=0;i<6;i++){
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3301      	adds	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	ddc0      	ble.n	800195a <NRF24L01p_ResetConfigValues+0x14e>
    }
}
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bdb0      	pop	{r4, r5, r7, pc}
 80019e0:	2000aaac 	.word	0x2000aaac
 80019e4:	2000aba0 	.word	0x2000aba0

080019e8 <NRF24L01p_RadioMode>:

void NRF24L01p_RadioMode(NRF24L01p_RadioState_t mode){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
    switch(mode){
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d84e      	bhi.n	8001a98 <NRF24L01p_RadioMode+0xb0>
 80019fa:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <NRF24L01p_RadioMode+0x18>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a11 	.word	0x08001a11
 8001a04:	08001a23 	.word	0x08001a23
 8001a08:	08001a47 	.word	0x08001a47
 8001a0c:	08001a6d 	.word	0x08001a6d
        case NRF24L01P_MODE_POWER_DOWN: {
        	NRF24L01p_power_down();
 8001a10:	f000 fac6 	bl	8001fa0 <NRF24L01p_power_down>
            NRF24L01p_port_write_Pin_CE(0);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f000 fd73 	bl	8002500 <NRF24L01p_port_write_Pin_CE>
            RadioState = NRF24L01P_MODE_POWER_DOWN;
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <NRF24L01p_RadioMode+0xb8>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
            break;
 8001a20:	e03a      	b.n	8001a98 <NRF24L01p_RadioMode+0xb0>
        }
        case NRF24L01P_MODE_STANDBY: {
            if(RadioState == NRF24L01P_MODE_POWER_DOWN){
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <NRF24L01p_RadioMode+0xb8>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d106      	bne.n	8001a38 <NRF24L01p_RadioMode+0x50>
            	NRF24L01p_power_up();
 8001a2a:	f000 faaa 	bl	8001f82 <NRF24L01p_power_up>
                    NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tpd2stby_us);
 8001a2e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001a32:	f000 fe3b 	bl	80026ac <NRF24L01p_port_DelayUs>
 8001a36:	e002      	b.n	8001a3e <NRF24L01p_RadioMode+0x56>
            }
            else{
                    NRF24L01p_port_write_Pin_CE(0);
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f000 fd61 	bl	8002500 <NRF24L01p_port_write_Pin_CE>
            }
            RadioState = NRF24L01P_MODE_STANDBY;
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <NRF24L01p_RadioMode+0xb8>)
 8001a40:	2202      	movs	r2, #2
 8001a42:	701a      	strb	r2, [r3, #0]
            break;
 8001a44:	e028      	b.n	8001a98 <NRF24L01p_RadioMode+0xb0>
        }
        case NRF24L01P_MODE_RX: {
            if(RadioState != NRF24L01P_MODE_RX){
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <NRF24L01p_RadioMode+0xb8>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d021      	beq.n	8001a92 <NRF24L01p_RadioMode+0xaa>
                NRF24L01p_port_write_Pin_CE(0);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 fd56 	bl	8002500 <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_rx_mode();
 8001a54:	f000 fab3 	bl	8001fbe <NRF24L01p_rx_mode>
                NRF24L01p_port_write_Pin_CE(1);
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f000 fd51 	bl	8002500 <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 8001a5e:	2082      	movs	r0, #130	; 0x82
 8001a60:	f000 fe24 	bl	80026ac <NRF24L01p_port_DelayUs>
                RadioState = NRF24L01P_MODE_RX;
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <NRF24L01p_RadioMode+0xb8>)
 8001a66:	2203      	movs	r2, #3
 8001a68:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001a6a:	e012      	b.n	8001a92 <NRF24L01p_RadioMode+0xaa>
        }
        case NRF24L01P_MODE_TX: {
            if(RadioState != NRF24L01P_MODE_TX){
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <NRF24L01p_RadioMode+0xb8>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d010      	beq.n	8001a96 <NRF24L01p_RadioMode+0xae>
                NRF24L01p_port_write_Pin_CE(0);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f000 fd43 	bl	8002500 <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_tx_mode();
 8001a7a:	f000 faaf 	bl	8001fdc <NRF24L01p_tx_mode>
                NRF24L01p_port_write_Pin_CE(1);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f000 fd3e 	bl	8002500 <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 8001a84:	2082      	movs	r0, #130	; 0x82
 8001a86:	f000 fe11 	bl	80026ac <NRF24L01p_port_DelayUs>
                RadioState = NRF24L01P_MODE_TX;
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <NRF24L01p_RadioMode+0xb8>)
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001a90:	e001      	b.n	8001a96 <NRF24L01p_RadioMode+0xae>
            break;
 8001a92:	bf00      	nop
 8001a94:	e000      	b.n	8001a98 <NRF24L01p_RadioMode+0xb0>
            break;
 8001a96:	bf00      	nop
        }
    }
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	2000aaa8 	.word	0x2000aaa8

08001aa4 <NRF24L01p_writePayload>:
bool NRF24L01p_readableOnPipe(NRF24L01p_pipe_t pipe){

}


NRF24L01p_ErrorStatus_t NRF24L01p_writePayload(NRF24L01p_Payload_t *payload){
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	NRF24L01p_ErrorStatus_t error;
	NRF24L01p_set_TX_pipe_address(payload->address);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	f000 fbf7 	bl	80022a8 <NRF24L01p_set_TX_pipe_address>
    if(payload->UseAck == 1){
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7d5b      	ldrb	r3, [r3, #21]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00a      	beq.n	8001ad8 <NRF24L01p_writePayload+0x34>
    	NRF24L01p_write_tx_payload(payload->data,payload->length);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f000 f9be 	bl	8001e4e <NRF24L01p_write_tx_payload>
    	error = NRF24L01P_SUCCESS;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e010      	b.n	8001afa <NRF24L01p_writePayload+0x56>
    }else{
        if(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled == 1){
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <NRF24L01p_writePayload+0x60>)
 8001ada:	7b5b      	ldrb	r3, [r3, #13]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00a      	beq.n	8001af6 <NRF24L01p_writePayload+0x52>
        	NRF24L01p_write_tx_payload_noack(payload->data,payload->length);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4610      	mov	r0, r2
 8001aec:	f000 fa14 	bl	8001f18 <NRF24L01p_write_tx_payload_noack>
        	error = NRF24L01P_SUCCESS;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e001      	b.n	8001afa <NRF24L01p_writePayload+0x56>
        }
        else{
        	error = NRF24L01P_ERROR;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
        }
    }
    return error;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd90      	pop	{r4, r7, pc}
 8001b04:	2000aaac 	.word	0x2000aaac

08001b08 <NRF24L01p_readPayload>:

NRF24L01p_ErrorStatus_t NRF24L01p_writeAckPayload(NRF24L01p_Payload_t *payload){
	NRF24L01p_write_ack_payload(payload->pipe, payload->data, payload->length);
	return NRF24L01P_SUCCESS;
}
NRF24L01p_ErrorStatus_t NRF24L01p_readPayload(NRF24L01p_Payload_t *payload){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
    NRF24L01p_ErrorStatus_t error;
    payload->pipe = NRF24L01p_get_rx_payload_pipe();
 8001b10:	f000 fb77 	bl	8002202 <NRF24L01p_get_rx_payload_pipe>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	721a      	strb	r2, [r3, #8]

    if(payload->pipe>=0 && payload->pipe<=5){
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7a1b      	ldrb	r3, [r3, #8]
 8001b20:	2b05      	cmp	r3, #5
 8001b22:	d824      	bhi.n	8001b6e <NRF24L01p_readPayload+0x66>
        if(RadioConfig.FeatureDynamicPayloadEnabled == 1){
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <NRF24L01p_readPayload+0x70>)
 8001b26:	7adb      	ldrb	r3, [r3, #11]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <NRF24L01p_readPayload+0x32>
            payload->length = NRF24L01p_read_rx_payload_width();
 8001b2c:	f000 f9d8 	bl	8001ee0 <NRF24L01p_read_rx_payload_width>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	e008      	b.n	8001b4c <NRF24L01p_readPayload+0x44>
        }else{
            payload->length = NRF24L01p_get_RX_pipe_width(payload->pipe);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7a1b      	ldrb	r3, [r3, #8]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 fbe4 	bl	800230c <NRF24L01p_get_RX_pipe_width>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	611a      	str	r2, [r3, #16]
        }


        if(payload->length <= 32){
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b20      	cmp	r3, #32
 8001b52:	d80a      	bhi.n	8001b6a <NRF24L01p_readPayload+0x62>
        	NRF24L01p_read_rx_payload(payload->data,payload->length);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f000 f956 	bl	8001e10 <NRF24L01p_read_rx_payload>
            error = NRF24L01P_SUCCESS;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e001      	b.n	8001b6e <NRF24L01p_readPayload+0x66>
        }
        else{
            error = NRF24L01P_ERROR;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
        }

    }
    return error;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2000aaac 	.word	0x2000aaac

08001b7c <NRF24L01p_TransmitPayload>:


NRF24L01p_ErrorStatus_t NRF24L01p_TransmitPayload(NRF24L01p_Payload_t *payload){
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    NRF24L01p_ErrorStatus_t error;
    NRF24L01p_RadioState_t originalState = RadioState;
 8001b84:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <NRF24L01p_TransmitPayload+0x150>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	73bb      	strb	r3, [r7, #14]
    NRF24L01p_RadioMode(NRF24L01P_MODE_STANDBY);
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	f7ff ff2c 	bl	80019e8 <NRF24L01p_RadioMode>




    if(TxPipeAddress != payload->address){
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001b96:	4b4e      	ldr	r3, [pc, #312]	; (8001cd0 <NRF24L01p_TransmitPayload+0x154>)
 8001b98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b9c:	42a2      	cmp	r2, r4
 8001b9e:	bf08      	it	eq
 8001ba0:	4299      	cmpeq	r1, r3
 8001ba2:	d00c      	beq.n	8001bbe <NRF24L01p_TransmitPayload+0x42>
    	NRF24L01p_set_TX_pipe_address(payload->address);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001baa:	4618      	mov	r0, r3
 8001bac:	4621      	mov	r1, r4
 8001bae:	f000 fb7b 	bl	80022a8 <NRF24L01p_set_TX_pipe_address>
	    TxPipeAddress = payload->address;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bb8:	4a45      	ldr	r2, [pc, #276]	; (8001cd0 <NRF24L01p_TransmitPayload+0x154>)
 8001bba:	e9c2 3400 	strd	r3, r4, [r2]
    }



    if(payload->UseAck){
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7d5b      	ldrb	r3, [r3, #21]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d06a      	beq.n	8001c9c <NRF24L01p_TransmitPayload+0x120>
    	if(RxPipeConfig[PIPE_P0].autoAckEnabled == 0){
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <NRF24L01p_TransmitPayload+0x158>)
 8001bc8:	785b      	ldrb	r3, [r3, #1]
 8001bca:	f083 0301 	eor.w	r3, r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <NRF24L01p_TransmitPayload+0x60>
			NRF24L01p_enable_auto_ack(PIPE_P0, 1);
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f000 fa0f 	bl	8001ffa <NRF24L01p_enable_auto_ack>
		}
		if(RxPipeConfig[PIPE_P0].PipeEnabled == 0){
 8001bdc:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <NRF24L01p_TransmitPayload+0x158>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	f083 0301 	eor.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <NRF24L01p_TransmitPayload+0x76>
			NRF24L01p_enable_rx_on_pipe(PIPE_P0, 1);
 8001bea:	2101      	movs	r1, #1
 8001bec:	2000      	movs	r0, #0
 8001bee:	f000 fa3e 	bl	800206e <NRF24L01p_enable_rx_on_pipe>
		}
		NRF24L01p_set_RX_pipe_address(PIPE_P0, payload->address);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f000 fb0b 	bl	8002218 <NRF24L01p_set_RX_pipe_address>


		NRF24L01p_writePayload(payload);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ff4e 	bl	8001aa4 <NRF24L01p_writePayload>
		NRF24L01p_clear_data_sent_flag();
 8001c08:	f000 fadd 	bl	80021c6 <NRF24L01p_clear_data_sent_flag>
		NRF24L01p_clear_max_retry_flag();
 8001c0c:	f000 fabe 	bl	800218c <NRF24L01p_clear_max_retry_flag>
		payload->GotAck = 0;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		while(1){
			NRF24L01p_RadioMode(NRF24L01P_MODE_TX);
 8001c18:	2004      	movs	r0, #4
 8001c1a:	f7ff fee5 	bl	80019e8 <NRF24L01p_RadioMode>
			NRF24L01p_RadioMode(NRF24L01P_MODE_STANDBY);
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f7ff fee2 	bl	80019e8 <NRF24L01p_RadioMode>


			uint8_t status = NRF24L01p_get_status();
 8001c24:	f000 f997 	bl	8001f56 <NRF24L01p_get_status>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	737b      	strb	r3, [r7, #13]


			if( (status & (_NRF24L01P_STATUS_TX_DS))  &&   (status & (_NRF24L01P_STATUS_RX_DR))   ){
 8001c2c:	7b7b      	ldrb	r3, [r7, #13]
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d012      	beq.n	8001c5c <NRF24L01p_TransmitPayload+0xe0>
 8001c36:	7b7b      	ldrb	r3, [r7, #13]
 8001c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00d      	beq.n	8001c5c <NRF24L01p_TransmitPayload+0xe0>
					//printf("ACK with PAYLOAD\r\n");
					NRF24L01p_clear_data_sent_flag();
 8001c40:	f000 fac1 	bl	80021c6 <NRF24L01p_clear_data_sent_flag>
					NRF24L01p_clear_data_ready_flag();
 8001c44:	f000 face 	bl	80021e4 <NRF24L01p_clear_data_ready_flag>
					error = NRF24L01P_SUCCESS;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
					NRF24L01p_readPayload(payload);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff5b 	bl	8001b08 <NRF24L01p_readPayload>
					payload->GotAck = 1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

					break;
 8001c5a:	e02e      	b.n	8001cba <NRF24L01p_TransmitPayload+0x13e>
			}
			else if( (status & (_NRF24L01P_STATUS_TX_DS))  &&   !(status & (_NRF24L01P_STATUS_RX_DR))   ){
 8001c5c:	7b7b      	ldrb	r3, [r7, #13]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d010      	beq.n	8001c88 <NRF24L01p_TransmitPayload+0x10c>
 8001c66:	7b7b      	ldrb	r3, [r7, #13]
 8001c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10b      	bne.n	8001c88 <NRF24L01p_TransmitPayload+0x10c>
				//printf("ACK ONLY\r\n");
				NRF24L01p_clear_data_sent_flag();
 8001c70:	f000 faa9 	bl	80021c6 <NRF24L01p_clear_data_sent_flag>
				error = NRF24L01P_SUCCESS;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
				payload->GotAck = 1;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				payload->length = 0;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
				break;
 8001c86:	e018      	b.n	8001cba <NRF24L01p_TransmitPayload+0x13e>
			}

			else if((status & (_NRF24L01P_STATUS_MAX_RT))){
 8001c88:	7b7b      	ldrb	r3, [r7, #13]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0c2      	beq.n	8001c18 <NRF24L01p_TransmitPayload+0x9c>
				NRF24L01p_clear_max_retry_flag();
 8001c92:	f000 fa7b 	bl	800218c <NRF24L01p_clear_max_retry_flag>
				error = NRF24L01P_ERROR;
 8001c96:	2300      	movs	r3, #0
 8001c98:	73fb      	strb	r3, [r7, #15]
				break;
 8001c9a:	e00e      	b.n	8001cba <NRF24L01p_TransmitPayload+0x13e>
			}
		}
    }else{

		while(1){
			NRF24L01p_RadioMode(NRF24L01P_MODE_TX);
 8001c9c:	2004      	movs	r0, #4
 8001c9e:	f7ff fea3 	bl	80019e8 <NRF24L01p_RadioMode>
			NRF24L01p_RadioMode(NRF24L01P_MODE_STANDBY);
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	f7ff fea0 	bl	80019e8 <NRF24L01p_RadioMode>

			if(NRF24L01p_get_data_sent_flag()){
 8001ca8:	f000 fa7f 	bl	80021aa <NRF24L01p_get_data_sent_flag>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f4      	beq.n	8001c9c <NRF24L01p_TransmitPayload+0x120>
				NRF24L01p_clear_data_sent_flag();
 8001cb2:	f000 fa88 	bl	80021c6 <NRF24L01p_clear_data_sent_flag>
				error = NRF24L01P_SUCCESS;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]

    }



    NRF24L01p_RadioMode(originalState);
 8001cba:	7bbb      	ldrb	r3, [r7, #14]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fe93 	bl	80019e8 <NRF24L01p_RadioMode>
    return error;
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]


}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd90      	pop	{r4, r7, pc}
 8001ccc:	2000aaa8 	.word	0x2000aaa8
 8001cd0:	2000aad8 	.word	0x2000aad8
 8001cd4:	2000aba0 	.word	0x2000aba0

08001cd8 <NRF24L01p_read_register>:

#include "NRF24L01pDriver.h"



uint8_t NRF24L01p_read_register(uint8_t address){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_write_Pin_CSN(0);
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f000 fc1e 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	73fb      	strb	r3, [r7, #15]


    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001cf2:	f107 010f 	add.w	r1, r7, #15
 8001cf6:	f107 030f 	add.w	r3, r7, #15
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fcb1 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001d02:	f107 010f 	add.w	r1, r7, #15
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 fca9 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(&temp, 1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f000 fc06 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]

}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <NRF24L01p_read_register_buffer>:
void NRF24L01p_read_register_buffer(uint8_t address, uint8_t *dataout, int len){
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_write_Pin_CSN(0);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f000 fbf7 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	75fb      	strb	r3, [r7, #23]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001d40:	f107 0117 	add.w	r1, r7, #23
 8001d44:	f107 0317 	add.w	r3, r7, #23
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 fc8a 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(dataout, dataout,len);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	68b8      	ldr	r0, [r7, #8]
 8001d58:	f000 fc84 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(dataout, len);
    NRF24L01p_port_write_Pin_CSN(1);
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f000 fbe1 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <NRF24L01p_write_register>:
void NRF24L01p_write_register(uint8_t address, uint8_t datain){
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	460a      	mov	r2, r1
 8001d74:	71fb      	strb	r3, [r7, #7]
 8001d76:	4613      	mov	r3, r2
 8001d78:	71bb      	strb	r3, [r7, #6]
    NRF24L01p_port_write_Pin_CSN(0);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f000 fbd2 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	b25b      	sxtb	r3, r3
 8001d8a:	f043 0320 	orr.w	r3, r3, #32
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001d94:	f107 010f 	add.w	r1, r7, #15
 8001d98:	f107 030f 	add.w	r3, r7, #15
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fc60 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&datain, &datain,1);
 8001da4:	1db9      	adds	r1, r7, #6
 8001da6:	1dbb      	adds	r3, r7, #6
 8001da8:	2201      	movs	r2, #1
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fc5a 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(&datain, 1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001db0:	2001      	movs	r0, #1
 8001db2:	f000 fbb7 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <NRF24L01p_write_register_buffer>:
void NRF24L01p_write_register_buffer(uint8_t address, uint8_t *datain, int len){
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_write_Pin_CSN(0);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f000 fba9 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	75fb      	strb	r3, [r7, #23]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001de6:	f107 0117 	add.w	r1, r7, #23
 8001dea:	f107 0317 	add.w	r3, r7, #23
 8001dee:	2201      	movs	r2, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fc37 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(datain, datain,len);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	68b8      	ldr	r0, [r7, #8]
 8001dfe:	f000 fc31 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(datain, len);
    NRF24L01p_port_write_Pin_CSN(1);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f000 fb8e 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
}
 8001e08:	bf00      	nop
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <NRF24L01p_read_rx_payload>:
void NRF24L01p_read_rx_payload(uint8_t *dataout, int pay_len){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_write_Pin_CSN(0);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 fb82 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_RD_RX_PAYLOAD);
 8001e20:	2361      	movs	r3, #97	; 0x61
 8001e22:	73fb      	strb	r3, [r7, #15]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001e24:	f107 010f 	add.w	r1, r7, #15
 8001e28:	f107 030f 	add.w	r3, r7, #15
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fc18 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(dataout,dataout,pay_len);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fc12 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(dataout,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f000 fb6f 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <NRF24L01p_write_tx_payload>:
void NRF24L01p_write_tx_payload(uint8_t *datain, int pay_len){
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_write_Pin_CSN(0);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f000 fb63 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
 8001e5e:	23a0      	movs	r3, #160	; 0xa0
 8001e60:	73fb      	strb	r3, [r7, #15]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001e62:	f107 010f 	add.w	r1, r7, #15
 8001e66:	f107 030f 	add.w	r3, r7, #15
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fbf9 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(datain,datain,pay_len);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fbf3 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f000 fb50 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <NRF24L01p_flush_tx>:
void NRF24L01p_flush_tx(){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f000 fb46 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_TX);
 8001e98:	23e1      	movs	r3, #225	; 0xe1
 8001e9a:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001e9c:	1df9      	adds	r1, r7, #7
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fbde 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f000 fb3b 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <NRF24L01p_flush_rx>:
void NRF24L01p_flush_rx(){
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f000 fb31 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_RX);
 8001ec2:	23e2      	movs	r3, #226	; 0xe2
 8001ec4:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001ec6:	1df9      	adds	r1, r7, #7
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fbc9 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f000 fb26 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <NRF24L01p_read_rx_payload_width>:
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
    //port_SPI_Transcieve(&temp,1);

    NRF24L01p_port_write_Pin_CSN(1);
}
int NRF24L01p_read_rx_payload_width(){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f000 fb1c 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_R_RX_PL_WID);
 8001eec:	2360      	movs	r3, #96	; 0x60
 8001eee:	71fb      	strb	r3, [r7, #7]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001ef0:	1df9      	adds	r1, r7, #7
 8001ef2:	1dfb      	adds	r3, r7, #7
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fbb4 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001efc:	1df9      	adds	r1, r7, #7
 8001efe:	1dfb      	adds	r3, r7, #7
 8001f00:	2201      	movs	r2, #1
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fbae 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f000 fb0b 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <NRF24L01p_write_tx_payload_noack>:
    NRF24L01p_port_SPI_Transcieve(datain, datain, pay_len);
    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
}
void NRF24L01p_write_tx_payload_noack(uint8_t *datain, int pay_len){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_write_Pin_CSN(0);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f000 fafe 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_W_TX_PYLD_NO_ACK);
 8001f28:	23b0      	movs	r3, #176	; 0xb0
 8001f2a:	73fb      	strb	r3, [r7, #15]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001f2c:	f107 010f 	add.w	r1, r7, #15
 8001f30:	f107 030f 	add.w	r3, r7, #15
 8001f34:	2201      	movs	r2, #1
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fb94 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(datain, datain, pay_len);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fb8e 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f000 faeb 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <NRF24L01p_get_status>:
uint8_t NRF24L01p_get_status(){
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f000 fae1 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_NOP );
 8001f62:	23ff      	movs	r3, #255	; 0xff
 8001f64:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp, 1);
 8001f66:	1df9      	adds	r1, r7, #7
 8001f68:	1dfb      	adds	r3, r7, #7
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fb79 	bl	8002664 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001f72:	2001      	movs	r0, #1
 8001f74:	f000 fad6 	bl	8002524 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 8001f78:	79fb      	ldrb	r3, [r7, #7]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <NRF24L01p_power_up>:





void NRF24L01p_power_up(){
 8001f82:	b580      	push	{r7, lr}
 8001f84:	af00      	add	r7, sp, #0
	NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_PWR_UP);
 8001f86:	2000      	movs	r0, #0
 8001f88:	f7ff fea6 	bl	8001cd8 <NRF24L01p_read_register>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f043 0302 	orr.w	r3, r3, #2
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	4619      	mov	r1, r3
 8001f96:	2000      	movs	r0, #0
 8001f98:	f7ff fee7 	bl	8001d6a <NRF24L01p_write_register>
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <NRF24L01p_power_down>:
void NRF24L01p_power_down(){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_PWR_UP);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff fe97 	bl	8001cd8 <NRF24L01p_read_register>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f023 0302 	bic.w	r3, r3, #2
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7ff fed8 	bl	8001d6a <NRF24L01p_write_register>
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <NRF24L01p_rx_mode>:
void NRF24L01p_rx_mode(){
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	af00      	add	r7, sp, #0
	NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_PRIM_RX);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff fe88 	bl	8001cd8 <NRF24L01p_read_register>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7ff fec9 	bl	8001d6a <NRF24L01p_write_register>
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <NRF24L01p_tx_mode>:
void NRF24L01p_tx_mode(){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_PRIM_RX);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff fe79 	bl	8001cd8 <NRF24L01p_read_register>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4619      	mov	r1, r3
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7ff feba 	bl	8001d6a <NRF24L01p_write_register>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <NRF24L01p_enable_auto_ack>:
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_MASK_MAX_RT);
else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_MASK_MAX_RT);
}


void NRF24L01p_enable_auto_ack(NRF24L01p_pipe_t pipe, bool sel){
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	460a      	mov	r2, r1
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	4613      	mov	r3, r2
 8002008:	71bb      	strb	r3, [r7, #6]
    if (sel){
 800200a:	79bb      	ldrb	r3, [r7, #6]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d014      	beq.n	800203a <NRF24L01p_enable_auto_ack+0x40>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
 8002010:	2001      	movs	r0, #1
 8002012:	f7ff fe61 	bl	8001cd8 <NRF24L01p_read_register>
 8002016:	4603      	mov	r3, r0
 8002018:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_set_bit(temp,pipe);
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	2201      	movs	r2, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	b25a      	sxtb	r2, r3
 8002024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002028:	4313      	orrs	r3, r2
 800202a:	b25b      	sxtb	r3, r3
 800202c:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
 800202e:	7bbb      	ldrb	r3, [r7, #14]
 8002030:	4619      	mov	r1, r3
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff fe99 	bl	8001d6a <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
        _nrf24l01p_clr_bit(temp,pipe);
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
    }

}
 8002038:	e015      	b.n	8002066 <NRF24L01p_enable_auto_ack+0x6c>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
 800203a:	2001      	movs	r0, #1
 800203c:	f7ff fe4c 	bl	8001cd8 <NRF24L01p_read_register>
 8002040:	4603      	mov	r3, r0
 8002042:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_clr_bit(temp,pipe);
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	2201      	movs	r2, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	b25b      	sxtb	r3, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	b25a      	sxtb	r2, r3
 8002052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002056:	4013      	ands	r3, r2
 8002058:	b25b      	sxtb	r3, r3
 800205a:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	4619      	mov	r1, r3
 8002060:	2001      	movs	r0, #1
 8002062:	f7ff fe82 	bl	8001d6a <NRF24L01p_write_register>
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <NRF24L01p_enable_rx_on_pipe>:



void NRF24L01p_enable_rx_on_pipe(NRF24L01p_pipe_t pipe, bool sel){
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	460a      	mov	r2, r1
 8002078:	71fb      	strb	r3, [r7, #7]
 800207a:	4613      	mov	r3, r2
 800207c:	71bb      	strb	r3, [r7, #6]
    if(sel){
 800207e:	79bb      	ldrb	r3, [r7, #6]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d014      	beq.n	80020ae <NRF24L01p_enable_rx_on_pipe+0x40>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
 8002084:	2002      	movs	r0, #2
 8002086:	f7ff fe27 	bl	8001cd8 <NRF24L01p_read_register>
 800208a:	4603      	mov	r3, r0
 800208c:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_set_bit(temp,pipe);
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2201      	movs	r2, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	b25a      	sxtb	r2, r3
 8002098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800209c:	4313      	orrs	r3, r2
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 80020a2:	7bbb      	ldrb	r3, [r7, #14]
 80020a4:	4619      	mov	r1, r3
 80020a6:	2002      	movs	r0, #2
 80020a8:	f7ff fe5f 	bl	8001d6a <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
        _nrf24l01p_clr_bit(temp,pipe);
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
    }

}
 80020ac:	e015      	b.n	80020da <NRF24L01p_enable_rx_on_pipe+0x6c>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
 80020ae:	2002      	movs	r0, #2
 80020b0:	f7ff fe12 	bl	8001cd8 <NRF24L01p_read_register>
 80020b4:	4603      	mov	r3, r0
 80020b6:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_clr_bit(temp,pipe);
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	2201      	movs	r2, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	b25b      	sxtb	r3, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	b25a      	sxtb	r2, r3
 80020c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ca:	4013      	ands	r3, r2
 80020cc:	b25b      	sxtb	r3, r3
 80020ce:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	4619      	mov	r1, r3
 80020d4:	2002      	movs	r0, #2
 80020d6:	f7ff fe48 	bl	8001d6a <NRF24L01p_write_register>
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <NRF24L01p_set_auto_retransmission_count>:
}
NRF24L01p_aw_t NRF24L01p_get_address_width(){
    return (NRF24L01p_aw_t) NRF24L01p_read_register(_NRF24L01P_REG_SETUP_AW);
}

void NRF24L01p_set_auto_retransmission_count(uint8_t count){
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
 80020ec:	2004      	movs	r0, #4
 80020ee:	f7ff fdf3 	bl	8001cd8 <NRF24L01p_read_register>
 80020f2:	4603      	mov	r3, r0
 80020f4:	73fb      	strb	r3, [r7, #15]
    temp &= ~ 0x0F;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	f023 030f 	bic.w	r3, r3, #15
 80020fc:	73fb      	strb	r3, [r7, #15]
    temp |= (count<<0);
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	4313      	orrs	r3, r2
 8002104:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	4619      	mov	r1, r3
 800210a:	2004      	movs	r0, #4
 800210c:	f7ff fe2d 	bl	8001d6a <NRF24L01p_write_register>
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <NRF24L01p_set_auto_retransmission_delay>:
uint8_t NRF24L01p_read_auto_retransmission_count(){
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
    return temp & 0x0F;
}

void NRF24L01p_set_auto_retransmission_delay(uint8_t times250us){
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
 8002122:	2004      	movs	r0, #4
 8002124:	f7ff fdd8 	bl	8001cd8 <NRF24L01p_read_register>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]
    temp &= ~(0xF0);
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	73fb      	strb	r3, [r7, #15]
    temp |= (times250us<<4);
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	b25a      	sxtb	r2, r3
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	4313      	orrs	r3, r2
 8002140:	b25b      	sxtb	r3, r3
 8002142:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	4619      	mov	r1, r3
 8002148:	2004      	movs	r0, #4
 800214a:	f7ff fe0e 	bl	8001d6a <NRF24L01p_write_register>
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <NRF24L01p_set_DataRate>:
}
uint8_t NRF24L01p_get_frequency_offset(){
    return NRF24L01p_read_register(_NRF24L01P_REG_RF_CH);
}

void NRF24L01p_set_DataRate(NRF24L01p_datarate_t DataRate){
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_RF_SETUP);
 8002160:	2006      	movs	r0, #6
 8002162:	f7ff fdb9 	bl	8001cd8 <NRF24L01p_read_register>
 8002166:	4603      	mov	r3, r0
 8002168:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_RF_SETUP_RF_DR_MASK;
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002170:	73fb      	strb	r3, [r7, #15]
    temp |= DataRate;
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4313      	orrs	r3, r2
 8002178:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_RF_SETUP,temp);
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	4619      	mov	r1, r3
 800217e:	2006      	movs	r0, #6
 8002180:	f7ff fdf3 	bl	8001d6a <NRF24L01p_write_register>
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <NRF24L01p_clear_max_retry_flag>:
}
bool NRF24L01p_get_max_retry_flag(){
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_MAX_RT) return 1;
    else return 0;
}
void NRF24L01p_clear_max_retry_flag(){
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
    uint8_t temp = _NRF24L01P_STATUS_MAX_RT;
 8002192:	2310      	movs	r3, #16
 8002194:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 8002196:	1dfb      	adds	r3, r7, #7
 8002198:	2201      	movs	r2, #1
 800219a:	4619      	mov	r1, r3
 800219c:	2007      	movs	r0, #7
 800219e:	f7ff fe0e 	bl	8001dbe <NRF24L01p_write_register_buffer>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <NRF24L01p_get_data_sent_flag>:
bool NRF24L01p_get_data_sent_flag(){
 80021aa:	b580      	push	{r7, lr}
 80021ac:	af00      	add	r7, sp, #0
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_TX_DS) return 1;
 80021ae:	f7ff fed2 	bl	8001f56 <NRF24L01p_get_status>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <NRF24L01p_get_data_sent_flag+0x16>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <NRF24L01p_get_data_sent_flag+0x18>
    else return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <NRF24L01p_clear_data_sent_flag>:
void NRF24L01p_clear_data_sent_flag(){
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
    uint8_t temp = _NRF24L01P_STATUS_TX_DS;
 80021cc:	2320      	movs	r3, #32
 80021ce:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 80021d0:	1dfb      	adds	r3, r7, #7
 80021d2:	2201      	movs	r2, #1
 80021d4:	4619      	mov	r1, r3
 80021d6:	2007      	movs	r0, #7
 80021d8:	f7ff fdf1 	bl	8001dbe <NRF24L01p_write_register_buffer>
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <NRF24L01p_clear_data_ready_flag>:
bool NRF24L01p_get_data_ready_flag(){
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_RX_DR) return 1;
    else return 0;
}
void NRF24L01p_clear_data_ready_flag(){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
    uint8_t temp = _NRF24L01P_STATUS_RX_DR;
 80021ea:	2340      	movs	r3, #64	; 0x40
 80021ec:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 80021ee:	1dfb      	adds	r3, r7, #7
 80021f0:	2201      	movs	r2, #1
 80021f2:	4619      	mov	r1, r3
 80021f4:	2007      	movs	r0, #7
 80021f6:	f7ff fde2 	bl	8001dbe <NRF24L01p_write_register_buffer>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <NRF24L01p_get_rx_payload_pipe>:
NRF24L01p_pipe_t NRF24L01p_get_rx_payload_pipe(){
 8002202:	b580      	push	{r7, lr}
 8002204:	af00      	add	r7, sp, #0
    return (NRF24L01p_pipe_t) ((NRF24L01p_get_status()&_NRF24L01P_STATUS_RX_P_NO)>>1);
 8002206:	f7ff fea6 	bl	8001f56 <NRF24L01p_get_status>
 800220a:	4603      	mov	r3, r0
 800220c:	105b      	asrs	r3, r3, #1
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	b2db      	uxtb	r3, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}

08002218 <NRF24L01p_set_RX_pipe_address>:
bool NRF24L01p_get_rpd(){
    if(NRF24L01p_read_register(_NRF24L01P_REG_RPD)) return 1;
    else return 0;
}

void NRF24L01p_set_RX_pipe_address(NRF24L01p_pipe_t pipe,NRF24L01p_PipeAddr_t address){
 8002218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	4601      	mov	r1, r0
 8002220:	e9c7 2300 	strd	r2, r3, [r7]
 8002224:	460b      	mov	r3, r1
 8002226:	73fb      	strb	r3, [r7, #15]
    int max_pipe_addr_width = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
    if((pipe>=0) && (pipe<=1)   ){max_pipe_addr_width = 5;}
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d802      	bhi.n	8002238 <NRF24L01p_set_RX_pipe_address+0x20>
 8002232:	2305      	movs	r3, #5
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	e007      	b.n	8002248 <NRF24L01p_set_RX_pipe_address+0x30>
    else if ((pipe>=2) && (pipe<=5)   ){max_pipe_addr_width = 1;}
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d904      	bls.n	8002248 <NRF24L01p_set_RX_pipe_address+0x30>
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	2b05      	cmp	r3, #5
 8002242:	d801      	bhi.n	8002248 <NRF24L01p_set_RX_pipe_address+0x30>
 8002244:	2301      	movs	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
    uint8_t temp[5];
    int i;
    for(i=0;i<max_pipe_addr_width;i++){
 8002248:	2300      	movs	r3, #0
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	e01b      	b.n	8002286 <NRF24L01p_set_RX_pipe_address+0x6e>
            temp[i] = (address>>(8*i))&0xFF;
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	00d9      	lsls	r1, r3, #3
 8002252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002256:	f1c1 0620 	rsb	r6, r1, #32
 800225a:	f1a1 0020 	sub.w	r0, r1, #32
 800225e:	fa22 f401 	lsr.w	r4, r2, r1
 8002262:	fa03 f606 	lsl.w	r6, r3, r6
 8002266:	4334      	orrs	r4, r6
 8002268:	fa23 f000 	lsr.w	r0, r3, r0
 800226c:	4304      	orrs	r4, r0
 800226e:	fa23 f501 	lsr.w	r5, r3, r1
 8002272:	b2e1      	uxtb	r1, r4
 8002274:	f107 0210 	add.w	r2, r7, #16
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	4413      	add	r3, r2
 800227c:	460a      	mov	r2, r1
 800227e:	701a      	strb	r2, [r3, #0]
    for(i=0;i<max_pipe_addr_width;i++){
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	3301      	adds	r3, #1
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	429a      	cmp	r2, r3
 800228c:	dbdf      	blt.n	800224e <NRF24L01p_set_RX_pipe_address+0x36>
    }
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	330a      	adds	r3, #10
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f107 0110 	add.w	r1, r7, #16
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fd8f 	bl	8001dbe <NRF24L01p_write_register_buffer>
}
 80022a0:	bf00      	nop
 80022a2:	3724      	adds	r7, #36	; 0x24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022a8 <NRF24L01p_set_TX_pipe_address>:
    }

    return temp_addr;
}

void NRF24L01p_set_TX_pipe_address(NRF24L01p_PipeAddr_t address){
 80022a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t temp[5];
    int i;
    for( i=0;i<5;i++){
 80022b2:	2200      	movs	r2, #0
 80022b4:	617a      	str	r2, [r7, #20]
 80022b6:	e01b      	b.n	80022f0 <NRF24L01p_set_TX_pipe_address+0x48>
            temp[i] = (address>>(8*i))&0xFF;
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	00d0      	lsls	r0, r2, #3
 80022bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80022c0:	f1c0 0620 	rsb	r6, r0, #32
 80022c4:	f1a0 0520 	sub.w	r5, r0, #32
 80022c8:	fa21 f300 	lsr.w	r3, r1, r0
 80022cc:	fa02 f606 	lsl.w	r6, r2, r6
 80022d0:	4333      	orrs	r3, r6
 80022d2:	fa22 f505 	lsr.w	r5, r2, r5
 80022d6:	432b      	orrs	r3, r5
 80022d8:	fa22 f400 	lsr.w	r4, r2, r0
 80022dc:	b2d8      	uxtb	r0, r3
 80022de:	f107 010c 	add.w	r1, r7, #12
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	440a      	add	r2, r1
 80022e6:	4601      	mov	r1, r0
 80022e8:	7011      	strb	r1, [r2, #0]
    for( i=0;i<5;i++){
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	3201      	adds	r2, #1
 80022ee:	617a      	str	r2, [r7, #20]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	2a04      	cmp	r2, #4
 80022f4:	dde0      	ble.n	80022b8 <NRF24L01p_set_TX_pipe_address+0x10>
    }
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_TX_ADDR,temp,5);
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	2205      	movs	r2, #5
 80022fc:	4619      	mov	r1, r3
 80022fe:	2010      	movs	r0, #16
 8002300:	f7ff fd5d 	bl	8001dbe <NRF24L01p_write_register_buffer>
}
 8002304:	bf00      	nop
 8002306:	371c      	adds	r7, #28
 8002308:	46bd      	mov	sp, r7
 800230a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800230c <NRF24L01p_get_RX_pipe_width>:
            *(temp_addr_ptr+i)|= (temp[i]);
    }
    return temp_addr;
}

uint8_t NRF24L01p_get_RX_pipe_width(NRF24L01p_pipe_t pipe){
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
    uint8_t temp;
    NRF24L01p_read_register_buffer((_NRF24L01P_REG_RX_PW_P0+pipe),&temp,sizeof(temp));
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	3311      	adds	r3, #17
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f107 010f 	add.w	r1, r7, #15
 8002320:	2201      	movs	r2, #1
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fcfd 	bl	8001d22 <NRF24L01p_read_register_buffer>
    return (temp&(0x3F));
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800232e:	b2db      	uxtb	r3, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <NRF24L01p_enable_dynamic_payload_pipe>:
bool NRF24L01p_get_fifo_flag_tx_reuse(){
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_REUSE ) return 1;
    else return 0;
}

void NRF24L01p_enable_dynamic_payload_pipe(NRF24L01p_pipe_t pipe, bool sel){
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	460a      	mov	r2, r1
 8002342:	71fb      	strb	r3, [r7, #7]
 8002344:	4613      	mov	r3, r2
 8002346:	71bb      	strb	r3, [r7, #6]
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,NRF24L01p_read_register(_NRF24L01P_REG_DYNPD) | (1<<pipe));
 8002348:	79bb      	ldrb	r3, [r7, #6]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d011      	beq.n	8002372 <NRF24L01p_enable_dynamic_payload_pipe+0x3a>
 800234e:	201c      	movs	r0, #28
 8002350:	f7ff fcc2 	bl	8001cd8 <NRF24L01p_read_register>
 8002354:	4603      	mov	r3, r0
 8002356:	b25a      	sxtb	r2, r3
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	b25b      	sxtb	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b25b      	sxtb	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4619      	mov	r1, r3
 800236a:	201c      	movs	r0, #28
 800236c:	f7ff fcfd 	bl	8001d6a <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,NRF24L01p_read_register(_NRF24L01P_REG_DYNPD) & ~(1<<pipe));

}
 8002370:	e012      	b.n	8002398 <NRF24L01p_enable_dynamic_payload_pipe+0x60>
    else NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,NRF24L01p_read_register(_NRF24L01P_REG_DYNPD) & ~(1<<pipe));
 8002372:	201c      	movs	r0, #28
 8002374:	f7ff fcb0 	bl	8001cd8 <NRF24L01p_read_register>
 8002378:	4603      	mov	r3, r0
 800237a:	b25a      	sxtb	r2, r3
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	2101      	movs	r1, #1
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	b25b      	sxtb	r3, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	b25b      	sxtb	r3, r3
 800238a:	4013      	ands	r3, r2
 800238c:	b25b      	sxtb	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	4619      	mov	r1, r3
 8002392:	201c      	movs	r0, #28
 8002394:	f7ff fce9 	bl	8001d6a <NRF24L01p_write_register>
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <NRF24L01p_enable_dynamic_payload>:



void NRF24L01p_enable_dynamic_payload(bool sel){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) | (_NRF24L01_FEATURE_EN_DPL));
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00b      	beq.n	80023c8 <NRF24L01p_enable_dynamic_payload+0x28>
 80023b0:	201d      	movs	r0, #29
 80023b2:	f7ff fc91 	bl	8001cd8 <NRF24L01p_read_register>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	201d      	movs	r0, #29
 80023c2:	f7ff fcd2 	bl	8001d6a <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_DPL);

}
 80023c6:	e00a      	b.n	80023de <NRF24L01p_enable_dynamic_payload+0x3e>
    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_DPL);
 80023c8:	201d      	movs	r0, #29
 80023ca:	f7ff fc85 	bl	8001cd8 <NRF24L01p_read_register>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f023 0304 	bic.w	r3, r3, #4
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	4619      	mov	r1, r3
 80023d8:	201d      	movs	r0, #29
 80023da:	f7ff fcc6 	bl	8001d6a <NRF24L01p_write_register>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <NRF24L01p_enable_payload_with_ack>:



void NRF24L01p_enable_payload_with_ack(bool sel){
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
	if(sel) NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) | (_NRF24L01_FEATURE_EN_ACK_PAY));
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <NRF24L01p_enable_payload_with_ack+0x28>
 80023f6:	201d      	movs	r0, #29
 80023f8:	f7ff fc6e 	bl	8001cd8 <NRF24L01p_read_register>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f043 0302 	orr.w	r3, r3, #2
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4619      	mov	r1, r3
 8002406:	201d      	movs	r0, #29
 8002408:	f7ff fcaf 	bl	8001d6a <NRF24L01p_write_register>
	    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_ACK_PAY);

}
 800240c:	e00a      	b.n	8002424 <NRF24L01p_enable_payload_with_ack+0x3e>
	    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_ACK_PAY);
 800240e:	201d      	movs	r0, #29
 8002410:	f7ff fc62 	bl	8001cd8 <NRF24L01p_read_register>
 8002414:	4603      	mov	r3, r0
 8002416:	f023 0302 	bic.w	r3, r3, #2
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	201d      	movs	r0, #29
 8002420:	f7ff fca3 	bl	8001d6a <NRF24L01p_write_register>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <NRF24L01p_enable_dynamic_payload_with_no_ack>:



void NRF24L01p_enable_dynamic_payload_with_no_ack(bool sel){
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
	if(sel) NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) | (_NRF24L01_FEATURE_EN_DYN_ACK));
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00b      	beq.n	8002454 <NRF24L01p_enable_dynamic_payload_with_no_ack+0x28>
 800243c:	201d      	movs	r0, #29
 800243e:	f7ff fc4b 	bl	8001cd8 <NRF24L01p_read_register>
 8002442:	4603      	mov	r3, r0
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	4619      	mov	r1, r3
 800244c:	201d      	movs	r0, #29
 800244e:	f7ff fc8c 	bl	8001d6a <NRF24L01p_write_register>
	    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_DYN_ACK);

}
 8002452:	e00a      	b.n	800246a <NRF24L01p_enable_dynamic_payload_with_no_ack+0x3e>
	    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_DYN_ACK);
 8002454:	201d      	movs	r0, #29
 8002456:	f7ff fc3f 	bl	8001cd8 <NRF24L01p_read_register>
 800245a:	4603      	mov	r3, r0
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	201d      	movs	r0, #29
 8002466:	f7ff fc80 	bl	8001d6a <NRF24L01p_write_register>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <NRF24L01p_port_Initialize>:
static GPIO_InitTypeDef nrf24l01p_CSN_pin_Struct = {NRF24L01P_CSN_PIN,GPIO_MODE_OUTPUT_PP,GPIO_NOPULL,GPIO_SPEED_FREQ_LOW,};
static GPIO_InitTypeDef nrf24l01p_IRQ_pin_Struct = {NRF24L01P_IRQ_PIN,GPIO_MODE_IT_FALLING,GPIO_NOPULL,GPIO_SPEED_FREQ_LOW,};



void NRF24L01p_port_Initialize(){
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
	NRF24L01p_port_SPI_initialize();
 800247a:	f000 f865 	bl	8002548 <NRF24L01p_port_SPI_initialize>

	/* Enable GPIOA clock */
	//__HAL_RCC_GPIOA_CLK_ENABLE();
	//__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <NRF24L01p_port_Initialize+0x3c>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <NRF24L01p_port_Initialize+0x3c>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <NRF24L01p_port_Initialize+0x3c>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]


	HAL_SPI_Init(&nrf24l01p_SpiHandle);
 8002496:	4807      	ldr	r0, [pc, #28]	; (80024b4 <NRF24L01p_port_Initialize+0x40>)
 8002498:	f003 ffd4 	bl	8006444 <HAL_SPI_Init>

	NRF24L01p_port_Pin_CE_Initialize();
 800249c:	f000 f80c 	bl	80024b8 <NRF24L01p_port_Pin_CE_Initialize>
	NRF24L01p_port_Pin_CSN_Initialize();
 80024a0:	f000 f816 	bl	80024d0 <NRF24L01p_port_Pin_CSN_Initialize>
	NRF24L01p_port_Pin_IRQ_Initialize();
 80024a4:	f000 f820 	bl	80024e8 <NRF24L01p_port_Pin_IRQ_Initialize>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000
 80024b4:	200000e8 	.word	0x200000e8

080024b8 <NRF24L01p_port_Pin_CE_Initialize>:
void NRF24L01p_port_DeInitialize(){
	HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
}
void NRF24L01p_port_Pin_CE_Initialize(){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
 80024bc:	4902      	ldr	r1, [pc, #8]	; (80024c8 <NRF24L01p_port_Pin_CE_Initialize+0x10>)
 80024be:	4803      	ldr	r0, [pc, #12]	; (80024cc <NRF24L01p_port_Pin_CE_Initialize+0x14>)
 80024c0:	f001 f894 	bl	80035ec <HAL_GPIO_Init>
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000004 	.word	0x20000004
 80024cc:	48000800 	.word	0x48000800

080024d0 <NRF24L01p_port_Pin_CSN_Initialize>:
void NRF24L01p_port_Pin_CSN_Initialize(){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_CSN_PORT, &nrf24l01p_CSN_pin_Struct);
 80024d4:	4902      	ldr	r1, [pc, #8]	; (80024e0 <NRF24L01p_port_Pin_CSN_Initialize+0x10>)
 80024d6:	4803      	ldr	r0, [pc, #12]	; (80024e4 <NRF24L01p_port_Pin_CSN_Initialize+0x14>)
 80024d8:	f001 f888 	bl	80035ec <HAL_GPIO_Init>
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000018 	.word	0x20000018
 80024e4:	48000800 	.word	0x48000800

080024e8 <NRF24L01p_port_Pin_IRQ_Initialize>:
void NRF24L01p_port_Pin_IRQ_Initialize(){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_IRQ_PORT, &nrf24l01p_IRQ_pin_Struct);
 80024ec:	4902      	ldr	r1, [pc, #8]	; (80024f8 <NRF24L01p_port_Pin_IRQ_Initialize+0x10>)
 80024ee:	4803      	ldr	r0, [pc, #12]	; (80024fc <NRF24L01p_port_Pin_IRQ_Initialize+0x14>)
 80024f0:	f001 f87c 	bl	80035ec <HAL_GPIO_Init>

	//HAL_NVIC_SetPriority(EXTI9_5_IRQn, 10, 0);//------------------------------------------------
	//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//---------------------------------------------------------
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	2000002c 	.word	0x2000002c
 80024fc:	48000800 	.word	0x48000800

08002500 <NRF24L01p_port_write_Pin_CE>:
	return HAL_GPIO_ReadPin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN);
}
bool NRF24L01p_port_read_Pin_CSN(){
	return HAL_GPIO_ReadPin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN);
}
void NRF24L01p_port_write_Pin_CE(bool val){
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN, (GPIO_PinState)val);
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	461a      	mov	r2, r3
 800250e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002512:	4803      	ldr	r0, [pc, #12]	; (8002520 <NRF24L01p_port_write_Pin_CE+0x20>)
 8002514:	f001 f9fc 	bl	8003910 <HAL_GPIO_WritePin>
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	48000800 	.word	0x48000800

08002524 <NRF24L01p_port_write_Pin_CSN>:
void NRF24L01p_port_write_Pin_CSN(bool val){
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN, (GPIO_PinState)val);
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	461a      	mov	r2, r3
 8002532:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002536:	4803      	ldr	r0, [pc, #12]	; (8002544 <NRF24L01p_port_write_Pin_CSN+0x20>)
 8002538:	f001 f9ea 	bl	8003910 <HAL_GPIO_WritePin>
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	48000800 	.word	0x48000800

08002548 <NRF24L01p_port_SPI_initialize>:
void NRF24L01p_port_SPI_initialize(){
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
	// TODO Auto-generated destructor stub
	/*##-1- Configure the SPI peripheral #######################################*/
	/* Set the SPI parameters */
	nrf24l01p_SpiHandle.Instance               = NRF24L01P_SPIx;
 800254e:	4b41      	ldr	r3, [pc, #260]	; (8002654 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002550:	4a41      	ldr	r2, [pc, #260]	; (8002658 <NRF24L01p_port_SPI_initialize+0x110>)
 8002552:	601a      	str	r2, [r3, #0]
	nrf24l01p_SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002554:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002556:	2210      	movs	r2, #16
 8002558:	61da      	str	r2, [r3, #28]
	nrf24l01p_SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800255a:	4b3e      	ldr	r3, [pc, #248]	; (8002654 <NRF24L01p_port_SPI_initialize+0x10c>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
	nrf24l01p_SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002560:	4b3c      	ldr	r3, [pc, #240]	; (8002654 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002562:	2200      	movs	r2, #0
 8002564:	615a      	str	r2, [r3, #20]
	nrf24l01p_SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002566:	4b3b      	ldr	r3, [pc, #236]	; (8002654 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
	nrf24l01p_SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 800256c:	4b39      	ldr	r3, [pc, #228]	; (8002654 <NRF24L01p_port_SPI_initialize+0x10c>)
 800256e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002572:	60da      	str	r2, [r3, #12]
	nrf24l01p_SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002574:	4b37      	ldr	r3, [pc, #220]	; (8002654 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
	nrf24l01p_SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 800257a:	4b36      	ldr	r3, [pc, #216]	; (8002654 <NRF24L01p_port_SPI_initialize+0x10c>)
 800257c:	2200      	movs	r2, #0
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
	nrf24l01p_SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002580:	4b34      	ldr	r3, [pc, #208]	; (8002654 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002582:	2200      	movs	r2, #0
 8002584:	629a      	str	r2, [r3, #40]	; 0x28
	nrf24l01p_SpiHandle.Init.CRCPolynomial     = 7;
 8002586:	4b33      	ldr	r3, [pc, #204]	; (8002654 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002588:	2207      	movs	r2, #7
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c
	//nrf24l01p_SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
	nrf24l01p_SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 800258c:	4b31      	ldr	r3, [pc, #196]	; (8002654 <NRF24L01p_port_SPI_initialize+0x10c>)
 800258e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002592:	619a      	str	r2, [r3, #24]
	//nrf24l01p_SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

	nrf24l01p_SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8002594:	4b2f      	ldr	r3, [pc, #188]	; (8002654 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002596:	f44f 7282 	mov.w	r2, #260	; 0x104
 800259a:	605a      	str	r2, [r3, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	NRF24L01P_SPIx_SCK_GPIO_CLK_ENABLE();
 800259c:	4b2f      	ldr	r3, [pc, #188]	; (800265c <NRF24L01p_port_SPI_initialize+0x114>)
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a0:	4a2e      	ldr	r2, [pc, #184]	; (800265c <NRF24L01p_port_SPI_initialize+0x114>)
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a8:	4b2c      	ldr	r3, [pc, #176]	; (800265c <NRF24L01p_port_SPI_initialize+0x114>)
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]
	NRF24L01P_SPIx_MISO_GPIO_CLK_ENABLE();
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <NRF24L01p_port_SPI_initialize+0x114>)
 80025b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b8:	4a28      	ldr	r2, [pc, #160]	; (800265c <NRF24L01p_port_SPI_initialize+0x114>)
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c0:	4b26      	ldr	r3, [pc, #152]	; (800265c <NRF24L01p_port_SPI_initialize+0x114>)
 80025c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
	NRF24L01P_SPIx_MOSI_GPIO_CLK_ENABLE();
 80025cc:	4b23      	ldr	r3, [pc, #140]	; (800265c <NRF24L01p_port_SPI_initialize+0x114>)
 80025ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d0:	4a22      	ldr	r2, [pc, #136]	; (800265c <NRF24L01p_port_SPI_initialize+0x114>)
 80025d2:	f043 0304 	orr.w	r3, r3, #4
 80025d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025d8:	4b20      	ldr	r3, [pc, #128]	; (800265c <NRF24L01p_port_SPI_initialize+0x114>)
 80025da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
	/* Enable SPI clock */
	NRF24L01P_SPIx_CLK_ENABLE();
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <NRF24L01p_port_SPI_initialize+0x114>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	4a1c      	ldr	r2, [pc, #112]	; (800265c <NRF24L01p_port_SPI_initialize+0x114>)
 80025ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ee:	6593      	str	r3, [r2, #88]	; 0x58
 80025f0:	4b1a      	ldr	r3, [pc, #104]	; (800265c <NRF24L01p_port_SPI_initialize+0x114>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* SPI SCK GPIO pin configuration  */
	GPIO_InitStruct.Pin       = NRF24L01P_SPIx_SCK_PIN;
 80025fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002600:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8002606:	2302      	movs	r3, #2
 8002608:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800260a:	2302      	movs	r3, #2
 800260c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_SCK_AF;
 800260e:	2306      	movs	r3, #6
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	4811      	ldr	r0, [pc, #68]	; (8002660 <NRF24L01p_port_SPI_initialize+0x118>)
 800261a:	f000 ffe7 	bl	80035ec <HAL_GPIO_Init>

	/* SPI MISO GPIO pin configuration  */
	GPIO_InitStruct.Pin = NRF24L01P_SPIx_MISO_PIN;
 800261e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002622:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_MISO_AF;
 8002624:	2306      	movs	r3, #6
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4619      	mov	r1, r3
 800262e:	480c      	ldr	r0, [pc, #48]	; (8002660 <NRF24L01p_port_SPI_initialize+0x118>)
 8002630:	f000 ffdc 	bl	80035ec <HAL_GPIO_Init>

	/* SPI MOSI GPIO pin configuration  */
	GPIO_InitStruct.Pin = NRF24L01P_SPIx_MOSI_PIN;
 8002634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002638:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_MOSI_AF;
 800263a:	2306      	movs	r3, #6
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4619      	mov	r1, r3
 8002644:	4806      	ldr	r0, [pc, #24]	; (8002660 <NRF24L01p_port_SPI_initialize+0x118>)
 8002646:	f000 ffd1 	bl	80035ec <HAL_GPIO_Init>
}
 800264a:	bf00      	nop
 800264c:	3728      	adds	r7, #40	; 0x28
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200000e8 	.word	0x200000e8
 8002658:	40003c00 	.word	0x40003c00
 800265c:	40021000 	.word	0x40021000
 8002660:	48000800 	.word	0x48000800

08002664 <NRF24L01p_port_SPI_Transcieve>:
int NRF24L01p_port_SPI_Transcieve(uint8_t *dataOut, uint8_t *dataIn, unsigned int size){
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
	return HAL_SPI_TransmitReceive(&nrf24l01p_SpiHandle, dataOut, dataIn, size,1000);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	b29a      	uxth	r2, r3
 8002674:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	4613      	mov	r3, r2
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	68f9      	ldr	r1, [r7, #12]
 8002680:	4803      	ldr	r0, [pc, #12]	; (8002690 <NRF24L01p_port_SPI_Transcieve+0x2c>)
 8002682:	f004 f8cf 	bl	8006824 <HAL_SPI_TransmitReceive>
 8002686:	4603      	mov	r3, r0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200000e8 	.word	0x200000e8

08002694 <NRF24L01p_port_DelayMs>:
int NRF24L01p_port_SPI_Receive(uint8_t *data, unsigned int size){
	HAL_SPI_Receive(&nrf24l01p_SpiHandle, data, size, 1000);
}


void NRF24L01p_port_DelayMs(unsigned int ms){
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fea1 	bl	80033e4 <HAL_Delay>
	//vTaskDelay ((ms / portTICK_PERIOD_MS));

}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <NRF24L01p_port_DelayUs>:
void NRF24L01p_port_DelayUs(unsigned int us){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	unsigned int ms = us/1000;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <NRF24L01p_port_DelayUs+0x28>)
 80026b8:	fba2 2303 	umull	r2, r3, r2, r3
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	60fb      	str	r3, [r7, #12]
	HAL_Delay(ms + 1);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3301      	adds	r3, #1
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fe8d 	bl	80033e4 <HAL_Delay>
	//vTaskDelay (( ms / portTICK_PERIOD_MS));
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	10624dd3 	.word	0x10624dd3

080026d8 <Si7006_temperature>:
	unit->delay(ms);
}

/////////////////////////////////////////////////////////////////////////////////////

float Si7006_temperature(Si7006_t *unit){
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	uint8_t data[3] = {0xF3, 0, 0};
 80026e0:	23f3      	movs	r3, #243	; 0xf3
 80026e2:	723b      	strb	r3, [r7, #8]
 80026e4:	2300      	movs	r3, #0
 80026e6:	727b      	strb	r3, [r7, #9]
 80026e8:	2300      	movs	r3, #0
 80026ea:	72bb      	strb	r3, [r7, #10]
	unit->i2c_transmit(data, 1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f107 0208 	add.w	r2, r7, #8
 80026f4:	2101      	movs	r1, #1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4798      	blx	r3
	unit->delay(500);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002702:	4798      	blx	r3
	unit->i2c_receive(data,2);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f107 0208 	add.w	r2, r7, #8
 800270c:	2102      	movs	r1, #2
 800270e:	4610      	mov	r0, r2
 8002710:	4798      	blx	r3

	uint16_t Temp_Code = data[0]<<8 | data[1];
 8002712:	7a3b      	ldrb	r3, [r7, #8]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	b21a      	sxth	r2, r3
 8002718:	7a7b      	ldrb	r3, [r7, #9]
 800271a:	b21b      	sxth	r3, r3
 800271c:	4313      	orrs	r3, r2
 800271e:	b21b      	sxth	r3, r3
 8002720:	81fb      	strh	r3, [r7, #14]
	//printf("the data received is %d, %d\r\n", data[1], data[0]);
	//printf("temp code is is %d\r\n", tempCode );

	return ((175.72* (float)Temp_Code)/65536) - 46.85;
 8002722:	89fb      	ldrh	r3, [r7, #14]
 8002724:	ee07 3a90 	vmov	s15, r3
 8002728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800272c:	ee17 0a90 	vmov	r0, s15
 8002730:	f7fd ff0a 	bl	8000548 <__aeabi_f2d>
 8002734:	a315      	add	r3, pc, #84	; (adr r3, 800278c <Si7006_temperature+0xb4>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fd ff5d 	bl	80005f8 <__aeabi_dmul>
 800273e:	4603      	mov	r3, r0
 8002740:	460c      	mov	r4, r1
 8002742:	4618      	mov	r0, r3
 8002744:	4621      	mov	r1, r4
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <Si7006_temperature+0xb0>)
 800274c:	f7fe f87e 	bl	800084c <__aeabi_ddiv>
 8002750:	4603      	mov	r3, r0
 8002752:	460c      	mov	r4, r1
 8002754:	4618      	mov	r0, r3
 8002756:	4621      	mov	r1, r4
 8002758:	a309      	add	r3, pc, #36	; (adr r3, 8002780 <Si7006_temperature+0xa8>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fd fd93 	bl	8000288 <__aeabi_dsub>
 8002762:	4603      	mov	r3, r0
 8002764:	460c      	mov	r4, r1
 8002766:	4618      	mov	r0, r3
 8002768:	4621      	mov	r1, r4
 800276a:	f7fe f957 	bl	8000a1c <__aeabi_d2f>
 800276e:	4603      	mov	r3, r0
 8002770:	ee07 3a90 	vmov	s15, r3
}
 8002774:	eeb0 0a67 	vmov.f32	s0, s15
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bd90      	pop	{r4, r7, pc}
 800277e:	bf00      	nop
 8002780:	cccccccd 	.word	0xcccccccd
 8002784:	40476ccc 	.word	0x40476ccc
 8002788:	40f00000 	.word	0x40f00000
 800278c:	3d70a3d7 	.word	0x3d70a3d7
 8002790:	4065f70a 	.word	0x4065f70a

08002794 <Si7006_relativeHumidity>:

float Si7006_relativeHumidity(Si7006_t *unit){
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0xF5, 0};
 800279c:	23f5      	movs	r3, #245	; 0xf5
 800279e:	733b      	strb	r3, [r7, #12]
 80027a0:	2300      	movs	r3, #0
 80027a2:	737b      	strb	r3, [r7, #13]
	unit->i2c_transmit(data, 1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f107 020c 	add.w	r2, r7, #12
 80027ac:	2101      	movs	r1, #1
 80027ae:	4610      	mov	r0, r2
 80027b0:	4798      	blx	r3
	unit->delay(500);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027ba:	4798      	blx	r3
	unit->i2c_receive(data,2);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f107 020c 	add.w	r2, r7, #12
 80027c4:	2102      	movs	r1, #2
 80027c6:	4610      	mov	r0, r2
 80027c8:	4798      	blx	r3

	uint16_t RH_Code = data[0]<<8 | data[1];
 80027ca:	7b3b      	ldrb	r3, [r7, #12]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	b21a      	sxth	r2, r3
 80027d0:	7b7b      	ldrb	r3, [r7, #13]
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b21b      	sxth	r3, r3
 80027d8:	82fb      	strh	r3, [r7, #22]
	//printf("the data received is %d, %d\r\n", data[1], data[0]);
	printf("RH code is is %d\r\n", RH_Code );
 80027da:	8afb      	ldrh	r3, [r7, #22]
 80027dc:	4619      	mov	r1, r3
 80027de:	4819      	ldr	r0, [pc, #100]	; (8002844 <Si7006_relativeHumidity+0xb0>)
 80027e0:	f00a f88c 	bl	800c8fc <iprintf>

	//float step1 = ((float) RH_Code * 125.0 );
	//float step2 = (((float) RH_Code * 125.0 ) / 65536 ) - 6.0;

	float relativeHumidity = (((float) RH_Code * 125.0 ) / 65536 ) - 6.0;
 80027e4:	8afb      	ldrh	r3, [r7, #22]
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ee:	ee17 0a90 	vmov	r0, s15
 80027f2:	f7fd fea9 	bl	8000548 <__aeabi_f2d>
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <Si7006_relativeHumidity+0xb4>)
 80027fc:	f7fd fefc 	bl	80005f8 <__aeabi_dmul>
 8002800:	4603      	mov	r3, r0
 8002802:	460c      	mov	r4, r1
 8002804:	4618      	mov	r0, r3
 8002806:	4621      	mov	r1, r4
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <Si7006_relativeHumidity+0xb8>)
 800280e:	f7fe f81d 	bl	800084c <__aeabi_ddiv>
 8002812:	4603      	mov	r3, r0
 8002814:	460c      	mov	r4, r1
 8002816:	4618      	mov	r0, r3
 8002818:	4621      	mov	r1, r4
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <Si7006_relativeHumidity+0xbc>)
 8002820:	f7fd fd32 	bl	8000288 <__aeabi_dsub>
 8002824:	4603      	mov	r3, r0
 8002826:	460c      	mov	r4, r1
 8002828:	4618      	mov	r0, r3
 800282a:	4621      	mov	r1, r4
 800282c:	f7fe f8f6 	bl	8000a1c <__aeabi_d2f>
 8002830:	4603      	mov	r3, r0
 8002832:	613b      	str	r3, [r7, #16]
	return relativeHumidity;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	ee07 3a90 	vmov	s15, r3
}
 800283a:	eeb0 0a67 	vmov.f32	s0, s15
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	bd90      	pop	{r4, r7, pc}
 8002844:	0800dc90 	.word	0x0800dc90
 8002848:	405f4000 	.word	0x405f4000
 800284c:	40f00000 	.word	0x40f00000
 8002850:	40180000 	.word	0x40180000

08002854 <Si7006_port_i2c_init>:

extern I2C_HandleTypeDef  hi2c1;
extern Si7006_t Si7006;


Si7006_error_t Si7006_port_i2c_init(void){
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0

}
 8002858:	bf00      	nop
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <Si7006_port_i2c_transmit>:
Si7006_error_t Si7006_port_i2c_transmit(uint8_t *data, unsigned int size){
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af02      	add	r7, sp, #8
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1,(0x40<<1) ,data,size, 1000);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b29a      	uxth	r2, r3
 8002872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	4807      	ldr	r0, [pc, #28]	; (800289c <Si7006_port_i2c_transmit+0x38>)
 8002880:	f001 f8ee 	bl	8003a60 <HAL_I2C_Master_Transmit>
 8002884:	4603      	mov	r3, r0
 8002886:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <Si7006_port_i2c_transmit+0x2e>
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <Si7006_port_i2c_transmit+0x30>
	else return SI7006_ERROR;
 8002892:	2301      	movs	r3, #1
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	2000ac98 	.word	0x2000ac98

080028a0 <Si7006_port_i2c_receive>:
Si7006_error_t Si7006_port_i2c_receive(uint8_t *data, unsigned int size){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c1,(0x40<<1) ,data,size, 1000);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	2180      	movs	r1, #128	; 0x80
 80028ba:	4807      	ldr	r0, [pc, #28]	; (80028d8 <Si7006_port_i2c_receive+0x38>)
 80028bc:	f001 f9c4 	bl	8003c48 <HAL_I2C_Master_Receive>
 80028c0:	4603      	mov	r3, r0
 80028c2:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <Si7006_port_i2c_receive+0x2e>
 80028ca:	2300      	movs	r3, #0
 80028cc:	e000      	b.n	80028d0 <Si7006_port_i2c_receive+0x30>
	else return SI7006_ERROR;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	2000ac98 	.word	0x2000ac98

080028dc <Si7006_port_check_hardware>:
Si7006_error_t Si7006_port_check_hardware(){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1,(0x40<<1), 1000, 1000);
 80028e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028ea:	2180      	movs	r1, #128	; 0x80
 80028ec:	4807      	ldr	r0, [pc, #28]	; (800290c <Si7006_port_check_hardware+0x30>)
 80028ee:	f001 faa1 	bl	8003e34 <HAL_I2C_IsDeviceReady>
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <Si7006_port_check_hardware+0x24>
 80028fc:	2300      	movs	r3, #0
 80028fe:	e000      	b.n	8002902 <Si7006_port_check_hardware+0x26>
	else return SI7006_ERROR;
 8002900:	2301      	movs	r3, #1
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000ac98 	.word	0x2000ac98

08002910 <Si7006_port_delay>:
Si7006_error_t Si7006_port_delay(unsigned int ms){
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

	HAL_Delay(ms);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 fd63 	bl	80033e4 <HAL_Delay>
}
 800291e:	bf00      	nop
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <Si7006_port_init>:


Si7006_error_t Si7006_port_init(void){
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
	Si7006.init = Si7006_port_init;
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <Si7006_port_init+0x34>)
 800292e:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <Si7006_port_init+0x38>)
 8002930:	601a      	str	r2, [r3, #0]
	Si7006.i2c_init = Si7006_port_i2c_init;
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <Si7006_port_init+0x34>)
 8002934:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <Si7006_port_init+0x3c>)
 8002936:	605a      	str	r2, [r3, #4]
	Si7006.i2c_transmit = Si7006_port_i2c_transmit;
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <Si7006_port_init+0x34>)
 800293a:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <Si7006_port_init+0x40>)
 800293c:	609a      	str	r2, [r3, #8]
	Si7006.i2c_receive = Si7006_port_i2c_receive;
 800293e:	4b07      	ldr	r3, [pc, #28]	; (800295c <Si7006_port_init+0x34>)
 8002940:	4a0a      	ldr	r2, [pc, #40]	; (800296c <Si7006_port_init+0x44>)
 8002942:	60da      	str	r2, [r3, #12]
	Si7006.check_hardware = Si7006_port_check_hardware;
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <Si7006_port_init+0x34>)
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <Si7006_port_init+0x48>)
 8002948:	611a      	str	r2, [r3, #16]
	Si7006.delay = Si7006_port_delay;
 800294a:	4b04      	ldr	r3, [pc, #16]	; (800295c <Si7006_port_init+0x34>)
 800294c:	4a09      	ldr	r2, [pc, #36]	; (8002974 <Si7006_port_init+0x4c>)
 800294e:	615a      	str	r2, [r3, #20]

	return Si7006_port_check_hardware();
 8002950:	f7ff ffc4 	bl	80028dc <Si7006_port_check_hardware>
 8002954:	4603      	mov	r3, r0

}
 8002956:	4618      	mov	r0, r3
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2000aabc 	.word	0x2000aabc
 8002960:	08002929 	.word	0x08002929
 8002964:	08002855 	.word	0x08002855
 8002968:	08002865 	.word	0x08002865
 800296c:	080028a1 	.word	0x080028a1
 8002970:	080028dd 	.word	0x080028dd
 8002974:	08002911 	.word	0x08002911

08002978 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800298a:	f000 fcf4 	bl	8003376 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800298e:	f000 f80f 	bl	80029b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002992:	f000 f98f 	bl	8002cb4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002996:	f000 f8e1 	bl	8002b5c <MX_SPI2_Init>
  MX_SPI3_Init();
 800299a:	f000 f91d 	bl	8002bd8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800299e:	f000 f959 	bl	8002c54 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80029a2:	f000 f89b 	bl	8002adc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  cygnini();
 80029a6:	f7fe fa31 	bl	8000e0c <cygnini>
  return 0;
 80029aa:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b0ae      	sub	sp, #184	; 0xb8
 80029b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029ba:	2244      	movs	r2, #68	; 0x44
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f009 ff93 	bl	800c8ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029d4:	463b      	mov	r3, r7
 80029d6:	2260      	movs	r2, #96	; 0x60
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f009 ff85 	bl	800c8ea <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80029e0:	f002 fb22 	bl	8005028 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80029e4:	4b3c      	ldr	r3, [pc, #240]	; (8002ad8 <SystemClock_Config+0x128>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	4a3b      	ldr	r2, [pc, #236]	; (8002ad8 <SystemClock_Config+0x128>)
 80029ec:	f023 0318 	bic.w	r3, r3, #24
 80029f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80029f4:	2314      	movs	r3, #20
 80029f6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029f8:	2301      	movs	r3, #1
 80029fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002a08:	2360      	movs	r3, #96	; 0x60
 8002a0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 36;
 8002a20:	2324      	movs	r3, #36	; 0x24
 8002a22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002a26:	2307      	movs	r3, #7
 8002a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a32:	2302      	movs	r3, #2
 8002a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f002 fb67 	bl	8005110 <HAL_RCC_OscConfig>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002a48:	f000 f9e8 	bl	8002e1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a4c:	230f      	movs	r3, #15
 8002a4e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a50:	2303      	movs	r3, #3
 8002a52:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a54:	2300      	movs	r3, #0
 8002a56:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a60:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a64:	2104      	movs	r1, #4
 8002a66:	4618      	mov	r0, r3
 8002a68:	f002 ff72 	bl	8005950 <HAL_RCC_ClockConfig>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002a72:	f000 f9d3 	bl	8002e1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8002a76:	f242 0341 	movw	r3, #8257	; 0x2041
 8002a7a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a80:	2300      	movs	r3, #0
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002a84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a88:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002a92:	2318      	movs	r3, #24
 8002a94:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002a96:	2307      	movs	r3, #7
 8002a98:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002aa2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002aa6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 f986 	bl	8005dbc <HAL_RCCEx_PeriphCLKConfig>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8002ab6:	f000 f9b1 	bl	8002e1c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002aba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002abe:	f002 fad1 	bl	8005064 <HAL_PWREx_ControlVoltageScaling>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8002ac8:	f000 f9a8 	bl	8002e1c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002acc:	f003 fbba 	bl	8006244 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002ad0:	bf00      	nop
 8002ad2:	37b8      	adds	r7, #184	; 0xb8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000

08002adc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <MX_I2C1_Init+0x74>)
 8002ae2:	4a1c      	ldr	r2, [pc, #112]	; (8002b54 <MX_I2C1_Init+0x78>)
 8002ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <MX_I2C1_Init+0x74>)
 8002ae8:	4a1b      	ldr	r2, [pc, #108]	; (8002b58 <MX_I2C1_Init+0x7c>)
 8002aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <MX_I2C1_Init+0x74>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002af2:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <MX_I2C1_Init+0x74>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002af8:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <MX_I2C1_Init+0x74>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <MX_I2C1_Init+0x74>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <MX_I2C1_Init+0x74>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <MX_I2C1_Init+0x74>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <MX_I2C1_Init+0x74>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b16:	480e      	ldr	r0, [pc, #56]	; (8002b50 <MX_I2C1_Init+0x74>)
 8002b18:	f000 ff12 	bl	8003940 <HAL_I2C_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b22:	f000 f97b 	bl	8002e1c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b26:	2100      	movs	r1, #0
 8002b28:	4809      	ldr	r0, [pc, #36]	; (8002b50 <MX_I2C1_Init+0x74>)
 8002b2a:	f001 fc6b 	bl	8004404 <HAL_I2CEx_ConfigAnalogFilter>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b34:	f000 f972 	bl	8002e1c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4805      	ldr	r0, [pc, #20]	; (8002b50 <MX_I2C1_Init+0x74>)
 8002b3c:	f001 fcad 	bl	800449a <HAL_I2CEx_ConfigDigitalFilter>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b46:	f000 f969 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	2000ac98 	.word	0x2000ac98
 8002b54:	40005400 	.word	0x40005400
 8002b58:	00702681 	.word	0x00702681

08002b5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <MX_SPI2_Init+0x78>)
 8002b64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002b68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b6e:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b74:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002b76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b7a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b8e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ba8:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002baa:	2207      	movs	r2, #7
 8002bac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002bb6:	2208      	movs	r2, #8
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bba:	4805      	ldr	r0, [pc, #20]	; (8002bd0 <MX_SPI2_Init+0x74>)
 8002bbc:	f003 fc42 	bl	8006444 <HAL_SPI_Init>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002bc6:	f000 f929 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	2000ac30 	.word	0x2000ac30
 8002bd4:	40003800 	.word	0x40003800

08002bd8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002bde:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <MX_SPI3_Init+0x78>)
 8002be0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002be2:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002be4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002be8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002bea:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bf0:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002bf2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bf6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bf8:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bfe:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c0a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002c26:	2207      	movs	r2, #7
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002c32:	2208      	movs	r2, #8
 8002c34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002c36:	4805      	ldr	r0, [pc, #20]	; (8002c4c <MX_SPI3_Init+0x74>)
 8002c38:	f003 fc04 	bl	8006444 <HAL_SPI_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002c42:	f000 f8eb 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	2000ace4 	.word	0x2000ace4
 8002c50:	40003c00 	.word	0x40003c00

08002c54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c58:	4b14      	ldr	r3, [pc, #80]	; (8002cac <MX_USART1_UART_Init+0x58>)
 8002c5a:	4a15      	ldr	r2, [pc, #84]	; (8002cb0 <MX_USART1_UART_Init+0x5c>)
 8002c5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <MX_USART1_UART_Init+0x58>)
 8002c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c66:	4b11      	ldr	r3, [pc, #68]	; (8002cac <MX_USART1_UART_Init+0x58>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <MX_USART1_UART_Init+0x58>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <MX_USART1_UART_Init+0x58>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <MX_USART1_UART_Init+0x58>)
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <MX_USART1_UART_Init+0x58>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c84:	4b09      	ldr	r3, [pc, #36]	; (8002cac <MX_USART1_UART_Init+0x58>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <MX_USART1_UART_Init+0x58>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <MX_USART1_UART_Init+0x58>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c96:	4805      	ldr	r0, [pc, #20]	; (8002cac <MX_USART1_UART_Init+0x58>)
 8002c98:	f004 fb1e 	bl	80072d8 <HAL_UART_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002ca2:	f000 f8bb 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2000ad48 	.word	0x2000ad48
 8002cb0:	40013800 	.word	0x40013800

08002cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cba:	f107 030c 	add.w	r3, r7, #12
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	60da      	str	r2, [r3, #12]
 8002cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <MX_GPIO_Init+0x134>)
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	4a46      	ldr	r2, [pc, #280]	; (8002de8 <MX_GPIO_Init+0x134>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cd6:	4b44      	ldr	r3, [pc, #272]	; (8002de8 <MX_GPIO_Init+0x134>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce2:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <MX_GPIO_Init+0x134>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	4a40      	ldr	r2, [pc, #256]	; (8002de8 <MX_GPIO_Init+0x134>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cee:	4b3e      	ldr	r3, [pc, #248]	; (8002de8 <MX_GPIO_Init+0x134>)
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <MX_GPIO_Init+0x134>)
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfe:	4a3a      	ldr	r2, [pc, #232]	; (8002de8 <MX_GPIO_Init+0x134>)
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d06:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <MX_GPIO_Init+0x134>)
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 8002d12:	2200      	movs	r2, #0
 8002d14:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8002d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1c:	f000 fdf8 	bl	8003910 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002d20:	2200      	movs	r2, #0
 8002d22:	f44f 7158 	mov.w	r1, #864	; 0x360
 8002d26:	4831      	ldr	r0, [pc, #196]	; (8002dec <MX_GPIO_Init+0x138>)
 8002d28:	f000 fdf2 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002d32:	482f      	ldr	r0, [pc, #188]	; (8002df0 <MX_GPIO_Init+0x13c>)
 8002d34:	f000 fdec 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002d38:	230f      	movs	r3, #15
 8002d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	f107 030c 	add.w	r3, r7, #12
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d4e:	f000 fc4d 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 8002d52:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8002d56:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d6e:	f000 fc3d 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8002d72:	f44f 7358 	mov.w	r3, #864	; 0x360
 8002d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d84:	f107 030c 	add.w	r3, r7, #12
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4818      	ldr	r0, [pc, #96]	; (8002dec <MX_GPIO_Init+0x138>)
 8002d8c:	f000 fc2e 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d90:	2301      	movs	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d94:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <MX_GPIO_Init+0x140>)
 8002d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9c:	f107 030c 	add.w	r3, r7, #12
 8002da0:	4619      	mov	r1, r3
 8002da2:	4813      	ldr	r0, [pc, #76]	; (8002df0 <MX_GPIO_Init+0x13c>)
 8002da4:	f000 fc22 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8002da8:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8002dac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dae:	2301      	movs	r3, #1
 8002db0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dba:	f107 030c 	add.w	r3, r7, #12
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480b      	ldr	r0, [pc, #44]	; (8002df0 <MX_GPIO_Init+0x13c>)
 8002dc2:	f000 fc13 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <MX_GPIO_Init+0x140>)
 8002dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd2:	f107 030c 	add.w	r3, r7, #12
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4804      	ldr	r0, [pc, #16]	; (8002dec <MX_GPIO_Init+0x138>)
 8002dda:	f000 fc07 	bl	80035ec <HAL_GPIO_Init>

}
 8002dde:	bf00      	nop
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	48000800 	.word	0x48000800
 8002df0:	48000400 	.word	0x48000400
 8002df4:	10110000 	.word	0x10110000

08002df8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e0a:	f000 facd 	bl	80033a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40012c00 	.word	0x40012c00

08002e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e32:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <HAL_MspInit+0x4c>)
 8002e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e36:	4a10      	ldr	r2, [pc, #64]	; (8002e78 <HAL_MspInit+0x4c>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6613      	str	r3, [r2, #96]	; 0x60
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <HAL_MspInit+0x4c>)
 8002e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_MspInit+0x4c>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <HAL_MspInit+0x4c>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e54:	6593      	str	r3, [r2, #88]	; 0x58
 8002e56:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_MspInit+0x4c>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	210f      	movs	r1, #15
 8002e66:	f06f 0001 	mvn.w	r0, #1
 8002e6a:	f000 fb95 	bl	8003598 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000

08002e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a18      	ldr	r2, [pc, #96]	; (8002efc <HAL_I2C_MspInit+0x80>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d129      	bne.n	8002ef2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <HAL_I2C_MspInit+0x84>)
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	4a17      	ldr	r2, [pc, #92]	; (8002f00 <HAL_I2C_MspInit+0x84>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <HAL_I2C_MspInit+0x84>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002eb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ebc:	2312      	movs	r3, #18
 8002ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ec8:	2304      	movs	r3, #4
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ed6:	f000 fb89 	bl	80035ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_I2C_MspInit+0x84>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <HAL_I2C_MspInit+0x84>)
 8002ee0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_I2C_MspInit+0x84>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ef2:	bf00      	nop
 8002ef4:	3728      	adds	r7, #40	; 0x28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40005400 	.word	0x40005400
 8002f00:	40021000 	.word	0x40021000

08002f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08c      	sub	sp, #48	; 0x30
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 031c 	add.w	r3, r7, #28
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a2f      	ldr	r2, [pc, #188]	; (8002fe0 <HAL_SPI_MspInit+0xdc>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d129      	bne.n	8002f7a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f26:	4b2f      	ldr	r3, [pc, #188]	; (8002fe4 <HAL_SPI_MspInit+0xe0>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	4a2e      	ldr	r2, [pc, #184]	; (8002fe4 <HAL_SPI_MspInit+0xe0>)
 8002f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f30:	6593      	str	r3, [r2, #88]	; 0x58
 8002f32:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <HAL_SPI_MspInit+0xe0>)
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <HAL_SPI_MspInit+0xe0>)
 8002f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f42:	4a28      	ldr	r2, [pc, #160]	; (8002fe4 <HAL_SPI_MspInit+0xe0>)
 8002f44:	f043 0302 	orr.w	r3, r3, #2
 8002f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <HAL_SPI_MspInit+0xe0>)
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002f56:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f64:	2303      	movs	r3, #3
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f68:	2305      	movs	r3, #5
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6c:	f107 031c 	add.w	r3, r7, #28
 8002f70:	4619      	mov	r1, r3
 8002f72:	481d      	ldr	r0, [pc, #116]	; (8002fe8 <HAL_SPI_MspInit+0xe4>)
 8002f74:	f000 fb3a 	bl	80035ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f78:	e02d      	b.n	8002fd6 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <HAL_SPI_MspInit+0xe8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d128      	bne.n	8002fd6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <HAL_SPI_MspInit+0xe0>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <HAL_SPI_MspInit+0xe0>)
 8002f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_SPI_MspInit+0xe0>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_SPI_MspInit+0xe0>)
 8002f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa0:	4a10      	ldr	r2, [pc, #64]	; (8002fe4 <HAL_SPI_MspInit+0xe0>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_SPI_MspInit+0xe0>)
 8002faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002fb4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fc6:	2306      	movs	r3, #6
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fca:	f107 031c 	add.w	r3, r7, #28
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4807      	ldr	r0, [pc, #28]	; (8002ff0 <HAL_SPI_MspInit+0xec>)
 8002fd2:	f000 fb0b 	bl	80035ec <HAL_GPIO_Init>
}
 8002fd6:	bf00      	nop
 8002fd8:	3730      	adds	r7, #48	; 0x30
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40003800 	.word	0x40003800
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	48000400 	.word	0x48000400
 8002fec:	40003c00 	.word	0x40003c00
 8002ff0:	48000800 	.word	0x48000800

08002ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a17      	ldr	r2, [pc, #92]	; (8003070 <HAL_UART_MspInit+0x7c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d127      	bne.n	8003066 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003016:	4b17      	ldr	r3, [pc, #92]	; (8003074 <HAL_UART_MspInit+0x80>)
 8003018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301a:	4a16      	ldr	r2, [pc, #88]	; (8003074 <HAL_UART_MspInit+0x80>)
 800301c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003020:	6613      	str	r3, [r2, #96]	; 0x60
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <HAL_UART_MspInit+0x80>)
 8003024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <HAL_UART_MspInit+0x80>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	4a10      	ldr	r2, [pc, #64]	; (8003074 <HAL_UART_MspInit+0x80>)
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_UART_MspInit+0x80>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003046:	23c0      	movs	r3, #192	; 0xc0
 8003048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003052:	2303      	movs	r3, #3
 8003054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003056:	2307      	movs	r3, #7
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305a:	f107 0314 	add.w	r3, r7, #20
 800305e:	4619      	mov	r1, r3
 8003060:	4805      	ldr	r0, [pc, #20]	; (8003078 <HAL_UART_MspInit+0x84>)
 8003062:	f000 fac3 	bl	80035ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003066:	bf00      	nop
 8003068:	3728      	adds	r7, #40	; 0x28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40013800 	.word	0x40013800
 8003074:	40021000 	.word	0x40021000
 8003078:	48000400 	.word	0x48000400

0800307c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08c      	sub	sp, #48	; 0x30
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800308c:	2200      	movs	r2, #0
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	2019      	movs	r0, #25
 8003092:	f000 fa81 	bl	8003598 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8003096:	2019      	movs	r0, #25
 8003098:	f000 fa9a 	bl	80035d0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800309c:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <HAL_InitTick+0x9c>)
 800309e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a0:	4a1d      	ldr	r2, [pc, #116]	; (8003118 <HAL_InitTick+0x9c>)
 80030a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030a6:	6613      	str	r3, [r2, #96]	; 0x60
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_InitTick+0x9c>)
 80030aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030b4:	f107 0210 	add.w	r2, r7, #16
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fdea 	bl	8005c98 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80030c4:	f002 fdd2 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 80030c8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030cc:	4a13      	ldr	r2, [pc, #76]	; (800311c <HAL_InitTick+0xa0>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0c9b      	lsrs	r3, r3, #18
 80030d4:	3b01      	subs	r3, #1
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_InitTick+0xa4>)
 80030da:	4a12      	ldr	r2, [pc, #72]	; (8003124 <HAL_InitTick+0xa8>)
 80030dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_InitTick+0xa4>)
 80030e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030e4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80030e6:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_InitTick+0xa4>)
 80030e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <HAL_InitTick+0xa4>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_InitTick+0xa4>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80030f8:	4809      	ldr	r0, [pc, #36]	; (8003120 <HAL_InitTick+0xa4>)
 80030fa:	f003 fec3 	bl	8006e84 <HAL_TIM_Base_Init>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d104      	bne.n	800310e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003104:	4806      	ldr	r0, [pc, #24]	; (8003120 <HAL_InitTick+0xa4>)
 8003106:	f003 fef3 	bl	8006ef0 <HAL_TIM_Base_Start_IT>
 800310a:	4603      	mov	r3, r0
 800310c:	e000      	b.n	8003110 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
}
 8003110:	4618      	mov	r0, r3
 8003112:	3730      	adds	r7, #48	; 0x30
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	431bde83 	.word	0x431bde83
 8003120:	2000adc8 	.word	0x2000adc8
 8003124:	40012c00 	.word	0x40012c00

08003128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800313a:	e7fe      	b.n	800313a <HardFault_Handler+0x4>

0800313c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003140:	e7fe      	b.n	8003140 <MemManage_Handler+0x4>

08003142 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003146:	e7fe      	b.n	8003146 <BusFault_Handler+0x4>

08003148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800314c:	e7fe      	b.n	800314c <UsageFault_Handler+0x4>

0800314e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003160:	4802      	ldr	r0, [pc, #8]	; (800316c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003162:	f003 feef 	bl	8006f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	2000adc8 	.word	0x2000adc8

08003170 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <USB_IRQHandler+0x10>)
 8003176:	f001 f9dc 	bl	8004532 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	2000ae4c 	.word	0x2000ae4c

08003184 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	e00a      	b.n	80031ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003196:	f7fd fea4 	bl	8000ee2 <__io_getchar>
 800319a:	4601      	mov	r1, r0
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	60ba      	str	r2, [r7, #8]
 80031a2:	b2ca      	uxtb	r2, r1
 80031a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3301      	adds	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	dbf0      	blt.n	8003196 <_read+0x12>
	}

return len;
 80031b4:	687b      	ldr	r3, [r7, #4]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e009      	b.n	80031e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	60ba      	str	r2, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd fe75 	bl	8000ec8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3301      	adds	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	dbf1      	blt.n	80031d0 <_write+0x12>
	}
	return len;
 80031ec:	687b      	ldr	r3, [r7, #4]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <_close>:

int _close(int file)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
	return -1;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800321e:	605a      	str	r2, [r3, #4]
	return 0;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <_isatty>:

int _isatty(int file)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
	return 1;
 8003236:	2301      	movs	r3, #1
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
	return 0;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <_sbrk+0x50>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <_sbrk+0x16>
		heap_end = &end;
 8003270:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <_sbrk+0x50>)
 8003272:	4a10      	ldr	r2, [pc, #64]	; (80032b4 <_sbrk+0x54>)
 8003274:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <_sbrk+0x50>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <_sbrk+0x50>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4413      	add	r3, r2
 8003284:	466a      	mov	r2, sp
 8003286:	4293      	cmp	r3, r2
 8003288:	d907      	bls.n	800329a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800328a:	f009 faf9 	bl	800c880 <__errno>
 800328e:	4602      	mov	r2, r0
 8003290:	230c      	movs	r3, #12
 8003292:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003294:	f04f 33ff 	mov.w	r3, #4294967295
 8003298:	e006      	b.n	80032a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <_sbrk+0x50>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	4a03      	ldr	r2, [pc, #12]	; (80032b0 <_sbrk+0x50>)
 80032a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80032a6:	68fb      	ldr	r3, [r7, #12]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	2000014c 	.word	0x2000014c
 80032b4:	2000b0c8 	.word	0x2000b0c8

080032b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032bc:	4b17      	ldr	r3, [pc, #92]	; (800331c <SystemInit+0x64>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	4a16      	ldr	r2, [pc, #88]	; (800331c <SystemInit+0x64>)
 80032c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80032cc:	4b14      	ldr	r3, [pc, #80]	; (8003320 <SystemInit+0x68>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a13      	ldr	r2, [pc, #76]	; (8003320 <SystemInit+0x68>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80032d8:	4b11      	ldr	r3, [pc, #68]	; (8003320 <SystemInit+0x68>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <SystemInit+0x68>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a0f      	ldr	r2, [pc, #60]	; (8003320 <SystemInit+0x68>)
 80032e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80032e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80032ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <SystemInit+0x68>)
 80032f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <SystemInit+0x68>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <SystemInit+0x68>)
 80032fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003300:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <SystemInit+0x68>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <SystemInit+0x64>)
 800330a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800330e:	609a      	str	r2, [r3, #8]
#endif
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	e000ed00 	.word	0xe000ed00
 8003320:	40021000 	.word	0x40021000

08003324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800335c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003328:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800332a:	e003      	b.n	8003334 <LoopCopyDataInit>

0800332c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800332e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003330:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003332:	3104      	adds	r1, #4

08003334 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003334:	480b      	ldr	r0, [pc, #44]	; (8003364 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003338:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800333a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800333c:	d3f6      	bcc.n	800332c <CopyDataInit>
	ldr	r2, =_sbss
 800333e:	4a0b      	ldr	r2, [pc, #44]	; (800336c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003340:	e002      	b.n	8003348 <LoopFillZerobss>

08003342 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003342:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003344:	f842 3b04 	str.w	r3, [r2], #4

08003348 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <LoopForever+0x16>)
	cmp	r2, r3
 800334a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800334c:	d3f9      	bcc.n	8003342 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800334e:	f7ff ffb3 	bl	80032b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003352:	f009 fa9b 	bl	800c88c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003356:	f7ff fb16 	bl	8002986 <main>

0800335a <LoopForever>:

LoopForever:
    b LoopForever
 800335a:	e7fe      	b.n	800335a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800335c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003360:	0800df98 	.word	0x0800df98
	ldr	r0, =_sdata
 8003364:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003368:	200000b4 	.word	0x200000b4
	ldr	r2, =_sbss
 800336c:	200000b8 	.word	0x200000b8
	ldr	r3, = _ebss
 8003370:	2000b0c4 	.word	0x2000b0c4

08003374 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003374:	e7fe      	b.n	8003374 <ADC1_IRQHandler>

08003376 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003380:	2003      	movs	r0, #3
 8003382:	f000 f8fe 	bl	8003582 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003386:	2000      	movs	r0, #0
 8003388:	f7ff fe78 	bl	800307c <HAL_InitTick>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	71fb      	strb	r3, [r7, #7]
 8003396:	e001      	b.n	800339c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003398:	f7ff fd48 	bl	8002e2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800339c:	79fb      	ldrb	r3, [r7, #7]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_IncTick+0x1c>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_IncTick+0x20>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4413      	add	r3, r2
 80033b6:	4a03      	ldr	r2, [pc, #12]	; (80033c4 <HAL_IncTick+0x1c>)
 80033b8:	6013      	str	r3, [r2, #0]
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	2000ae08 	.word	0x2000ae08
 80033c8:	20000048 	.word	0x20000048

080033cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return uwTick;
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <HAL_GetTick+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	2000ae08 	.word	0x2000ae08

080033e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff ffee 	bl	80033cc <HAL_GetTick>
 80033f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d004      	beq.n	8003408 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_Delay+0x40>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4413      	add	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003408:	bf00      	nop
 800340a:	f7ff ffdf 	bl	80033cc <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	429a      	cmp	r2, r3
 8003418:	d8f7      	bhi.n	800340a <HAL_Delay+0x26>
  {
  }
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000048 	.word	0x20000048

08003428 <__NVIC_SetPriorityGrouping>:
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <__NVIC_SetPriorityGrouping+0x44>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003444:	4013      	ands	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345a:	4a04      	ldr	r2, [pc, #16]	; (800346c <__NVIC_SetPriorityGrouping+0x44>)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	60d3      	str	r3, [r2, #12]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <__NVIC_GetPriorityGrouping>:
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <__NVIC_GetPriorityGrouping+0x18>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	f003 0307 	and.w	r3, r3, #7
}
 800347e:	4618      	mov	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <__NVIC_EnableIRQ>:
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	2b00      	cmp	r3, #0
 800349c:	db0b      	blt.n	80034b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	f003 021f 	and.w	r2, r3, #31
 80034a4:	4907      	ldr	r1, [pc, #28]	; (80034c4 <__NVIC_EnableIRQ+0x38>)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	2001      	movs	r0, #1
 80034ae:	fa00 f202 	lsl.w	r2, r0, r2
 80034b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	e000e100 	.word	0xe000e100

080034c8 <__NVIC_SetPriority>:
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	6039      	str	r1, [r7, #0]
 80034d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	db0a      	blt.n	80034f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	490c      	ldr	r1, [pc, #48]	; (8003514 <__NVIC_SetPriority+0x4c>)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	0112      	lsls	r2, r2, #4
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	440b      	add	r3, r1
 80034ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034f0:	e00a      	b.n	8003508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	4908      	ldr	r1, [pc, #32]	; (8003518 <__NVIC_SetPriority+0x50>)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	3b04      	subs	r3, #4
 8003500:	0112      	lsls	r2, r2, #4
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	440b      	add	r3, r1
 8003506:	761a      	strb	r2, [r3, #24]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000e100 	.word	0xe000e100
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <NVIC_EncodePriority>:
{
 800351c:	b480      	push	{r7}
 800351e:	b089      	sub	sp, #36	; 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f1c3 0307 	rsb	r3, r3, #7
 8003536:	2b04      	cmp	r3, #4
 8003538:	bf28      	it	cs
 800353a:	2304      	movcs	r3, #4
 800353c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3304      	adds	r3, #4
 8003542:	2b06      	cmp	r3, #6
 8003544:	d902      	bls.n	800354c <NVIC_EncodePriority+0x30>
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3b03      	subs	r3, #3
 800354a:	e000      	b.n	800354e <NVIC_EncodePriority+0x32>
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	f04f 32ff 	mov.w	r2, #4294967295
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43da      	mvns	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	401a      	ands	r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003564:	f04f 31ff 	mov.w	r1, #4294967295
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	43d9      	mvns	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003574:	4313      	orrs	r3, r2
}
 8003576:	4618      	mov	r0, r3
 8003578:	3724      	adds	r7, #36	; 0x24
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ff4c 	bl	8003428 <__NVIC_SetPriorityGrouping>
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035aa:	f7ff ff61 	bl	8003470 <__NVIC_GetPriorityGrouping>
 80035ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	6978      	ldr	r0, [r7, #20]
 80035b6:	f7ff ffb1 	bl	800351c <NVIC_EncodePriority>
 80035ba:	4602      	mov	r2, r0
 80035bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff ff80 	bl	80034c8 <__NVIC_SetPriority>
}
 80035c8:	bf00      	nop
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff ff54 	bl	800348c <__NVIC_EnableIRQ>
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035fa:	e154      	b.n	80038a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	2101      	movs	r1, #1
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8146 	beq.w	80038a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d00b      	beq.n	8003634 <HAL_GPIO_Init+0x48>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d007      	beq.n	8003634 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003628:	2b11      	cmp	r3, #17
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b12      	cmp	r3, #18
 8003632:	d130      	bne.n	8003696 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2203      	movs	r2, #3
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800366a:	2201      	movs	r2, #1
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4013      	ands	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 0201 	and.w	r2, r3, #1
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_Init+0xea>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b12      	cmp	r3, #18
 80036d4:	d123      	bne.n	800371e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	08da      	lsrs	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3208      	adds	r2, #8
 80036de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	220f      	movs	r2, #15
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	08da      	lsrs	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3208      	adds	r2, #8
 8003718:	6939      	ldr	r1, [r7, #16]
 800371a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	2203      	movs	r2, #3
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0203 	and.w	r2, r3, #3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80a0 	beq.w	80038a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003760:	4b58      	ldr	r3, [pc, #352]	; (80038c4 <HAL_GPIO_Init+0x2d8>)
 8003762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003764:	4a57      	ldr	r2, [pc, #348]	; (80038c4 <HAL_GPIO_Init+0x2d8>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6613      	str	r3, [r2, #96]	; 0x60
 800376c:	4b55      	ldr	r3, [pc, #340]	; (80038c4 <HAL_GPIO_Init+0x2d8>)
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003778:	4a53      	ldr	r2, [pc, #332]	; (80038c8 <HAL_GPIO_Init+0x2dc>)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	089b      	lsrs	r3, r3, #2
 800377e:	3302      	adds	r3, #2
 8003780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	220f      	movs	r2, #15
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037a2:	d019      	beq.n	80037d8 <HAL_GPIO_Init+0x1ec>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a49      	ldr	r2, [pc, #292]	; (80038cc <HAL_GPIO_Init+0x2e0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <HAL_GPIO_Init+0x1e8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a48      	ldr	r2, [pc, #288]	; (80038d0 <HAL_GPIO_Init+0x2e4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00d      	beq.n	80037d0 <HAL_GPIO_Init+0x1e4>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a47      	ldr	r2, [pc, #284]	; (80038d4 <HAL_GPIO_Init+0x2e8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d007      	beq.n	80037cc <HAL_GPIO_Init+0x1e0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a46      	ldr	r2, [pc, #280]	; (80038d8 <HAL_GPIO_Init+0x2ec>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_GPIO_Init+0x1dc>
 80037c4:	2304      	movs	r3, #4
 80037c6:	e008      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037c8:	2307      	movs	r3, #7
 80037ca:	e006      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037cc:	2303      	movs	r3, #3
 80037ce:	e004      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e002      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037d8:	2300      	movs	r3, #0
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	f002 0203 	and.w	r2, r2, #3
 80037e0:	0092      	lsls	r2, r2, #2
 80037e2:	4093      	lsls	r3, r2
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037ea:	4937      	ldr	r1, [pc, #220]	; (80038c8 <HAL_GPIO_Init+0x2dc>)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	3302      	adds	r3, #2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037f8:	4b38      	ldr	r3, [pc, #224]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43db      	mvns	r3, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800381c:	4a2f      	ldr	r2, [pc, #188]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003822:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003846:	4a25      	ldr	r2, [pc, #148]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800384c:	4b23      	ldr	r3, [pc, #140]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003870:	4a1a      	ldr	r2, [pc, #104]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003876:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800389a:	4a10      	ldr	r2, [pc, #64]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3301      	adds	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f47f aea3 	bne.w	80035fc <HAL_GPIO_Init+0x10>
  }
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40010000 	.word	0x40010000
 80038cc:	48000400 	.word	0x48000400
 80038d0:	48000800 	.word	0x48000800
 80038d4:	48000c00 	.word	0x48000c00
 80038d8:	48001000 	.word	0x48001000
 80038dc:	40010400 	.word	0x40010400

080038e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e001      	b.n	8003902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
 800391c:	4613      	mov	r3, r2
 800391e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003920:	787b      	ldrb	r3, [r7, #1]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800392c:	e002      	b.n	8003934 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e081      	b.n	8003a56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fa88 	bl	8002e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	; 0x24
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003990:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d107      	bne.n	80039ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	e006      	b.n	80039c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d104      	bne.n	80039da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	ea42 0103 	orr.w	r1, r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	021a      	lsls	r2, r3, #8
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69d9      	ldr	r1, [r3, #28]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	817b      	strh	r3, [r7, #10]
 8003a70:	4613      	mov	r3, r2
 8003a72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	f040 80da 	bne.w	8003c36 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_I2C_Master_Transmit+0x30>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e0d3      	b.n	8003c38 <HAL_I2C_Master_Transmit+0x1d8>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a98:	f7ff fc98 	bl	80033cc <HAL_GetTick>
 8003a9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2319      	movs	r3, #25
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 faed 	bl	800408a <I2C_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e0be      	b.n	8003c38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2221      	movs	r2, #33	; 0x21
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	893a      	ldrh	r2, [r7, #8]
 8003ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2bff      	cmp	r3, #255	; 0xff
 8003aea:	d90e      	bls.n	8003b0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	22ff      	movs	r2, #255	; 0xff
 8003af0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	8979      	ldrh	r1, [r7, #10]
 8003afa:	4b51      	ldr	r3, [pc, #324]	; (8003c40 <HAL_I2C_Master_Transmit+0x1e0>)
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fc50 	bl	80043a8 <I2C_TransferConfig>
 8003b08:	e06c      	b.n	8003be4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	8979      	ldrh	r1, [r7, #10]
 8003b1c:	4b48      	ldr	r3, [pc, #288]	; (8003c40 <HAL_I2C_Master_Transmit+0x1e0>)
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fc3f 	bl	80043a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003b2a:	e05b      	b.n	8003be4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	6a39      	ldr	r1, [r7, #32]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 faea 	bl	800410a <I2C_WaitOnTXISFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e07b      	b.n	8003c38 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d034      	beq.n	8003be4 <HAL_I2C_Master_Transmit+0x184>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d130      	bne.n	8003be4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2180      	movs	r1, #128	; 0x80
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fa7c 	bl	800408a <I2C_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e04d      	b.n	8003c38 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2bff      	cmp	r3, #255	; 0xff
 8003ba4:	d90e      	bls.n	8003bc4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	22ff      	movs	r2, #255	; 0xff
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	8979      	ldrh	r1, [r7, #10]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fbf3 	bl	80043a8 <I2C_TransferConfig>
 8003bc2:	e00f      	b.n	8003be4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	8979      	ldrh	r1, [r7, #10]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 fbe2 	bl	80043a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d19e      	bne.n	8003b2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	6a39      	ldr	r1, [r7, #32]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fac9 	bl	800418a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e01a      	b.n	8003c38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2220      	movs	r2, #32
 8003c08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <HAL_I2C_Master_Transmit+0x1e4>)
 8003c16:	400b      	ands	r3, r1
 8003c18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
  }
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	80002000 	.word	0x80002000
 8003c44:	fe00e800 	.word	0xfe00e800

08003c48 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	461a      	mov	r2, r3
 8003c54:	460b      	mov	r3, r1
 8003c56:	817b      	strh	r3, [r7, #10]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	f040 80db 	bne.w	8003e20 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_I2C_Master_Receive+0x30>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e0d4      	b.n	8003e22 <HAL_I2C_Master_Receive+0x1da>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c80:	f7ff fba4 	bl	80033cc <HAL_GetTick>
 8003c84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	2319      	movs	r3, #25
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f9f9 	bl	800408a <I2C_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e0bf      	b.n	8003e22 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2222      	movs	r2, #34	; 0x22
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2210      	movs	r2, #16
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	893a      	ldrh	r2, [r7, #8]
 8003cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2bff      	cmp	r3, #255	; 0xff
 8003cd2:	d90e      	bls.n	8003cf2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	22ff      	movs	r2, #255	; 0xff
 8003cd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	8979      	ldrh	r1, [r7, #10]
 8003ce2:	4b52      	ldr	r3, [pc, #328]	; (8003e2c <HAL_I2C_Master_Receive+0x1e4>)
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fb5c 	bl	80043a8 <I2C_TransferConfig>
 8003cf0:	e06d      	b.n	8003dce <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	8979      	ldrh	r1, [r7, #10]
 8003d04:	4b49      	ldr	r3, [pc, #292]	; (8003e2c <HAL_I2C_Master_Receive+0x1e4>)
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fb4b 	bl	80043a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003d12:	e05c      	b.n	8003dce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	6a39      	ldr	r1, [r7, #32]
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 fa73 	bl	8004204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e07c      	b.n	8003e22 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d034      	beq.n	8003dce <HAL_I2C_Master_Receive+0x186>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d130      	bne.n	8003dce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	2200      	movs	r2, #0
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f987 	bl	800408a <I2C_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e04d      	b.n	8003e22 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2bff      	cmp	r3, #255	; 0xff
 8003d8e:	d90e      	bls.n	8003dae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	22ff      	movs	r2, #255	; 0xff
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	8979      	ldrh	r1, [r7, #10]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fafe 	bl	80043a8 <I2C_TransferConfig>
 8003dac:	e00f      	b.n	8003dce <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	8979      	ldrh	r1, [r7, #10]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 faed 	bl	80043a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d19d      	bne.n	8003d14 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	6a39      	ldr	r1, [r7, #32]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f9d4 	bl	800418a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e01a      	b.n	8003e22 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2220      	movs	r2, #32
 8003df2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6859      	ldr	r1, [r3, #4]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <HAL_I2C_Master_Receive+0x1e8>)
 8003e00:	400b      	ands	r3, r1
 8003e02:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e000      	b.n	8003e22 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
  }
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	80002400 	.word	0x80002400
 8003e30:	fe00e800 	.word	0xfe00e800

08003e34 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	; 0x28
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	460b      	mov	r3, r1
 8003e42:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	f040 80f1 	bne.w	8004038 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e64:	d101      	bne.n	8003e6a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
 8003e68:	e0e7      	b.n	800403a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_I2C_IsDeviceReady+0x44>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e0e0      	b.n	800403a <HAL_I2C_IsDeviceReady+0x206>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2224      	movs	r2, #36	; 0x24
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d107      	bne.n	8003ea6 <HAL_I2C_IsDeviceReady+0x72>
 8003e96:	897b      	ldrh	r3, [r7, #10]
 8003e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ea0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ea4:	e004      	b.n	8003eb0 <HAL_I2C_IsDeviceReady+0x7c>
 8003ea6:	897b      	ldrh	r3, [r7, #10]
 8003ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eac:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003eb6:	f7ff fa89 	bl	80033cc <HAL_GetTick>
 8003eba:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	bf0c      	ite	eq
 8003eca:	2301      	moveq	r3, #1
 8003ecc:	2300      	movne	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003ee8:	e034      	b.n	8003f54 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d01a      	beq.n	8003f28 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ef2:	f7ff fa6b 	bl	80033cc <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d302      	bcc.n	8003f08 <HAL_I2C_IsDeviceReady+0xd4>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10f      	bne.n	8003f28 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e088      	b.n	800403a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	bf0c      	ite	eq
 8003f36:	2301      	moveq	r3, #1
 8003f38:	2300      	movne	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f54:	7ffb      	ldrb	r3, [r7, #31]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d102      	bne.n	8003f60 <HAL_I2C_IsDeviceReady+0x12c>
 8003f5a:	7fbb      	ldrb	r3, [r7, #30]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0c4      	beq.n	8003eea <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d01a      	beq.n	8003fa4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2120      	movs	r1, #32
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f886 	bl	800408a <I2C_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e058      	b.n	800403a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e04a      	b.n	800403a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2200      	movs	r2, #0
 8003fac:	2120      	movs	r1, #32
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f86b 	bl	800408a <I2C_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e03d      	b.n	800403a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2210      	movs	r2, #16
 8003fc4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d118      	bne.n	8004008 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fe4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2200      	movs	r2, #0
 8003fee:	2120      	movs	r1, #32
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f84a 	bl	800408a <I2C_WaitOnFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e01c      	b.n	800403a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2220      	movs	r2, #32
 8004006:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	3301      	adds	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	429a      	cmp	r2, r3
 8004014:	f63f af3b 	bhi.w	8003e8e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	f043 0220 	orr.w	r2, r3, #32
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004038:	2302      	movs	r3, #2
  }
}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b02      	cmp	r3, #2
 8004056:	d103      	bne.n	8004060 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2200      	movs	r2, #0
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d007      	beq.n	800407e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0201 	orr.w	r2, r2, #1
 800407c:	619a      	str	r2, [r3, #24]
  }
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	4613      	mov	r3, r2
 8004098:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800409a:	e022      	b.n	80040e2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a2:	d01e      	beq.n	80040e2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a4:	f7ff f992 	bl	80033cc <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d302      	bcc.n	80040ba <I2C_WaitOnFlagUntilTimeout+0x30>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d113      	bne.n	80040e2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	f043 0220 	orr.w	r2, r3, #32
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e00f      	b.n	8004102 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699a      	ldr	r2, [r3, #24]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4013      	ands	r3, r2
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	bf0c      	ite	eq
 80040f2:	2301      	moveq	r3, #1
 80040f4:	2300      	movne	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	461a      	mov	r2, r3
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d0cd      	beq.n	800409c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004116:	e02c      	b.n	8004172 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f8dd 	bl	80042dc <I2C_IsAcknowledgeFailed>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e02a      	b.n	8004182 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d01e      	beq.n	8004172 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004134:	f7ff f94a 	bl	80033cc <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	429a      	cmp	r2, r3
 8004142:	d302      	bcc.n	800414a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d113      	bne.n	8004172 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	f043 0220 	orr.w	r2, r3, #32
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e007      	b.n	8004182 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b02      	cmp	r3, #2
 800417e:	d1cb      	bne.n	8004118 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004196:	e028      	b.n	80041ea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f89d 	bl	80042dc <I2C_IsAcknowledgeFailed>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e026      	b.n	80041fa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ac:	f7ff f90e 	bl	80033cc <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d302      	bcc.n	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d113      	bne.n	80041ea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e007      	b.n	80041fa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d1cf      	bne.n	8004198 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004210:	e055      	b.n	80042be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f860 	bl	80042dc <I2C_IsAcknowledgeFailed>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e053      	b.n	80042ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b20      	cmp	r3, #32
 8004232:	d129      	bne.n	8004288 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b04      	cmp	r3, #4
 8004240:	d105      	bne.n	800424e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e03f      	b.n	80042ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2220      	movs	r2, #32
 8004254:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6859      	ldr	r1, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004262:	400b      	ands	r3, r1
 8004264:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e022      	b.n	80042ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004288:	f7ff f8a0 	bl	80033cc <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	d302      	bcc.n	800429e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10f      	bne.n	80042be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f043 0220 	orr.w	r2, r3, #32
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e007      	b.n	80042ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d1a2      	bne.n	8004212 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	fe00e800 	.word	0xfe00e800

080042dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d151      	bne.n	800439a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042f6:	e022      	b.n	800433e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fe:	d01e      	beq.n	800433e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004300:	f7ff f864 	bl	80033cc <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	429a      	cmp	r2, r3
 800430e:	d302      	bcc.n	8004316 <I2C_IsAcknowledgeFailed+0x3a>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d113      	bne.n	800433e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	f043 0220 	orr.w	r2, r3, #32
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e02e      	b.n	800439c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b20      	cmp	r3, #32
 800434a:	d1d5      	bne.n	80042f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2210      	movs	r2, #16
 8004352:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2220      	movs	r2, #32
 800435a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7ff fe70 	bl	8004042 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6859      	ldr	r1, [r3, #4]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <I2C_IsAcknowledgeFailed+0xc8>)
 800436e:	400b      	ands	r3, r1
 8004370:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	f043 0204 	orr.w	r2, r3, #4
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	fe00e800 	.word	0xfe00e800

080043a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	817b      	strh	r3, [r7, #10]
 80043b6:	4613      	mov	r3, r2
 80043b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	0d5b      	lsrs	r3, r3, #21
 80043c4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80043c8:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <I2C_TransferConfig+0x58>)
 80043ca:	430b      	orrs	r3, r1
 80043cc:	43db      	mvns	r3, r3
 80043ce:	ea02 0103 	and.w	r1, r2, r3
 80043d2:	897b      	ldrh	r3, [r7, #10]
 80043d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043d8:	7a7b      	ldrb	r3, [r7, #9]
 80043da:	041b      	lsls	r3, r3, #16
 80043dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	03ff63ff 	.word	0x03ff63ff

08004404 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b20      	cmp	r3, #32
 8004418:	d138      	bne.n	800448c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004424:	2302      	movs	r3, #2
 8004426:	e032      	b.n	800448e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2224      	movs	r2, #36	; 0x24
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0201 	bic.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004456:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6819      	ldr	r1, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	e000      	b.n	800448e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800448c:	2302      	movs	r3, #2
  }
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d139      	bne.n	8004524 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e033      	b.n	8004526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2224      	movs	r2, #36	; 0x24
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f004 fa20 	bl	8008984 <USB_ReadInterrupts>
 8004544:	4603      	mov	r3, r0
 8004546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800454a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454e:	d102      	bne.n	8004556 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fadd 	bl	8004b10 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f004 fa12 	bl	8008984 <USB_ReadInterrupts>
 8004560:	4603      	mov	r3, r0
 8004562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456a:	d112      	bne.n	8004592 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004574:	b29a      	uxth	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457e:	b292      	uxth	r2, r2
 8004580:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f007 ff70 	bl	800c46a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800458a:	2100      	movs	r1, #0
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f91e 	bl	80047ce <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f004 f9f4 	bl	8008984 <USB_ReadInterrupts>
 800459c:	4603      	mov	r3, r0
 800459e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045a6:	d10b      	bne.n	80045c0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045ba:	b292      	uxth	r2, r2
 80045bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f004 f9dd 	bl	8008984 <USB_ReadInterrupts>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d4:	d10b      	bne.n	80045ee <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045de:	b29a      	uxth	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045e8:	b292      	uxth	r2, r2
 80045ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f004 f9c6 	bl	8008984 <USB_ReadInterrupts>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	d133      	bne.n	800466c <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	b292      	uxth	r2, r2
 8004618:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004624:	b29a      	uxth	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0208 	bic.w	r2, r2, #8
 800462e:	b292      	uxth	r2, r2
 8004630:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800463a:	2b01      	cmp	r3, #1
 800463c:	d107      	bne.n	800464e <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004646:	2100      	movs	r1, #0
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f008 f8dd 	bl	800c808 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f007 ff44 	bl	800c4dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800465c:	b29a      	uxth	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004666:	b292      	uxth	r2, r2
 8004668:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f004 f987 	bl	8008984 <USB_ReadInterrupts>
 8004676:	4603      	mov	r3, r0
 8004678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004680:	d126      	bne.n	80046d0 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800468a:	b29a      	uxth	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0208 	orr.w	r2, r2, #8
 8004694:	b292      	uxth	r2, r2
 8004696:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ac:	b292      	uxth	r2, r2
 80046ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0204 	orr.w	r2, r2, #4
 80046c4:	b292      	uxth	r2, r2
 80046c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f007 feec 	bl	800c4a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f004 f955 	bl	8008984 <USB_ReadInterrupts>
 80046da:	4603      	mov	r3, r0
 80046dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e0:	2b80      	cmp	r3, #128	; 0x80
 80046e2:	d13f      	bne.n	8004764 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f6:	b292      	uxth	r2, r2
 80046f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8004702:	2b00      	cmp	r3, #0
 8004704:	d12b      	bne.n	800475e <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0204 	orr.w	r2, r2, #4
 8004718:	b292      	uxth	r2, r2
 800471a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004726:	b29a      	uxth	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0208 	orr.w	r2, r2, #8
 8004730:	b292      	uxth	r2, r2
 8004732:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004746:	b29b      	uxth	r3, r3
 8004748:	089b      	lsrs	r3, r3, #2
 800474a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004754:	2101      	movs	r1, #1
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f008 f856 	bl	800c808 <HAL_PCDEx_LPM_Callback>
 800475c:	e002      	b.n	8004764 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f007 fea2 	bl	800c4a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f004 f90b 	bl	8008984 <USB_ReadInterrupts>
 800476e:	4603      	mov	r3, r0
 8004770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004778:	d10e      	bne.n	8004798 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004782:	b29a      	uxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800478c:	b292      	uxth	r2, r2
 800478e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f007 fe5b 	bl	800c44e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f004 f8f1 	bl	8008984 <USB_ReadInterrupts>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ac:	d10b      	bne.n	80047c6 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c0:	b292      	uxth	r2, r2
 80047c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	460b      	mov	r3, r1
 80047d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_PCD_SetAddress+0x1a>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e013      	b.n	8004810 <HAL_PCD_SetAddress+0x42>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	78fa      	ldrb	r2, [r7, #3]
 80047fe:	4611      	mov	r1, r2
 8004800:	4618      	mov	r0, r3
 8004802:	f004 f8ab 	bl	800895c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	4608      	mov	r0, r1
 8004822:	4611      	mov	r1, r2
 8004824:	461a      	mov	r2, r3
 8004826:	4603      	mov	r3, r0
 8004828:	70fb      	strb	r3, [r7, #3]
 800482a:	460b      	mov	r3, r1
 800482c:	803b      	strh	r3, [r7, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800483a:	2b00      	cmp	r3, #0
 800483c:	da0b      	bge.n	8004856 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	015b      	lsls	r3, r3, #5
 8004846:	3328      	adds	r3, #40	; 0x28
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	4413      	add	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	705a      	strb	r2, [r3, #1]
 8004854:	e00b      	b.n	800486e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004856:	78fb      	ldrb	r3, [r7, #3]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	015b      	lsls	r3, r3, #5
 800485e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4413      	add	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800486e:	78fb      	ldrb	r3, [r7, #3]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	b2da      	uxtb	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800487a:	883a      	ldrh	r2, [r7, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	78ba      	ldrb	r2, [r7, #2]
 8004884:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	785b      	ldrb	r3, [r3, #1]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d004      	beq.n	8004898 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004898:	78bb      	ldrb	r3, [r7, #2]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d102      	bne.n	80048a4 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_PCD_EP_Open+0x9a>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e00e      	b.n	80048d0 <HAL_PCD_EP_Open+0xb8>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68f9      	ldr	r1, [r7, #12]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f003 f9cd 	bl	8007c60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80048ce:	7afb      	ldrb	r3, [r7, #11]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	460b      	mov	r3, r1
 80048e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048e8:	7afb      	ldrb	r3, [r7, #11]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	015b      	lsls	r3, r3, #5
 80048f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2200      	movs	r2, #0
 800490a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2200      	movs	r2, #0
 8004910:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004912:	7afb      	ldrb	r3, [r7, #11]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	b2da      	uxtb	r2, r3
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800491e:	7afb      	ldrb	r3, [r7, #11]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	4618      	mov	r0, r3
 8004930:	f003 fc86 	bl	8008240 <USB_EPStartXfer>
 8004934:	e005      	b.n	8004942 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6979      	ldr	r1, [r7, #20]
 800493c:	4618      	mov	r0, r3
 800493e:	f003 fc7f 	bl	8008240 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	607a      	str	r2, [r7, #4]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	460b      	mov	r3, r1
 800495a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800495c:	7afb      	ldrb	r3, [r7, #11]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	015b      	lsls	r3, r3, #5
 8004964:	3328      	adds	r3, #40	; 0x28
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2200      	movs	r2, #0
 800497c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2201      	movs	r2, #1
 8004982:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004984:	7afb      	ldrb	r3, [r7, #11]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	b2da      	uxtb	r2, r3
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004990:	7afb      	ldrb	r3, [r7, #11]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6979      	ldr	r1, [r7, #20]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f003 fc4d 	bl	8008240 <USB_EPStartXfer>
 80049a6:	e005      	b.n	80049b4 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6979      	ldr	r1, [r7, #20]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f003 fc46 	bl	8008240 <USB_EPStartXfer>
  }

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	460b      	mov	r3, r1
 80049c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	f003 0207 	and.w	r2, r3, #7
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d901      	bls.n	80049dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e046      	b.n	8004a6a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	da0b      	bge.n	80049fc <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	015b      	lsls	r3, r3, #5
 80049ec:	3328      	adds	r3, #40	; 0x28
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4413      	add	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2201      	movs	r2, #1
 80049f8:	705a      	strb	r2, [r3, #1]
 80049fa:	e009      	b.n	8004a10 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	015b      	lsls	r3, r3, #5
 8004a00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_PCD_EP_SetStall+0x72>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e01c      	b.n	8004a6a <HAL_PCD_EP_SetStall+0xac>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68f9      	ldr	r1, [r7, #12]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f003 feb6 	bl	80087b0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d108      	bne.n	8004a60 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	f003 ffa2 	bl	80089a4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b084      	sub	sp, #16
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	f003 020f 	and.w	r2, r3, #15
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d901      	bls.n	8004a90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e03a      	b.n	8004b06 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	da0b      	bge.n	8004ab0 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	015b      	lsls	r3, r3, #5
 8004aa0:	3328      	adds	r3, #40	; 0x28
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	705a      	strb	r2, [r3, #1]
 8004aae:	e00b      	b.n	8004ac8 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	015b      	lsls	r3, r3, #5
 8004ab8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	4413      	add	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_PCD_EP_ClrStall+0x76>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e00e      	b.n	8004b06 <HAL_PCD_EP_ClrStall+0x94>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68f9      	ldr	r1, [r7, #12]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f003 fe9c 	bl	8008834 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b089      	sub	sp, #36	; 0x24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004b18:	e274      	b.n	8005004 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b22:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004b24:	8afb      	ldrh	r3, [r7, #22]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8004b2e:	7d7b      	ldrb	r3, [r7, #21]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f040 813c 	bne.w	8004dae <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004b36:	8afb      	ldrh	r3, [r7, #22]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d14f      	bne.n	8004be0 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b50:	b29c      	uxth	r4, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3328      	adds	r3, #40	; 0x28
 8004b66:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	4413      	add	r3, r2
 8004b82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	441a      	add	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f007 fc3d 	bl	800c420 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8228 	beq.w	8005004 <PCD_EP_ISR_Handler+0x4f4>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f040 8223 	bne.w	8005004 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004bde:	e211      	b.n	8005004 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004be6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004bf0:	8a7b      	ldrh	r3, [r7, #18]
 8004bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d031      	beq.n	8004c5e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6812      	ldr	r2, [r2, #0]
 8004c12:	4413      	add	r3, r2
 8004c14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f003 ff02 	bl	8008a3e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c46:	4013      	ands	r3, r2
 8004c48:	b29c      	uxth	r4, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004c52:	b292      	uxth	r2, r2
 8004c54:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f007 fbb8 	bl	800c3cc <HAL_PCD_SetupStageCallback>
 8004c5c:	e1d2      	b.n	8005004 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f280 81ce 	bge.w	8005004 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c74:	4013      	ands	r3, r2
 8004c76:	b29c      	uxth	r4, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004c80:	b292      	uxth	r2, r2
 8004c82:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	4413      	add	r3, r2
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d019      	beq.n	8004ce8 <PCD_EP_ISR_Handler+0x1d8>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d015      	beq.n	8004ce8 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6959      	ldr	r1, [r3, #20]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f003 feb6 	bl	8008a3e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	695a      	ldr	r2, [r3, #20]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	441a      	add	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f007 fb84 	bl	800c3f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461c      	mov	r4, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	441c      	add	r4, r3
 8004cfa:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8004cfe:	461c      	mov	r4, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10e      	bne.n	8004d26 <PCD_EP_ISR_Handler+0x216>
 8004d08:	8823      	ldrh	r3, [r4, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	8023      	strh	r3, [r4, #0]
 8004d14:	8823      	ldrh	r3, [r4, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	8023      	strh	r3, [r4, #0]
 8004d24:	e02d      	b.n	8004d82 <PCD_EP_ISR_Handler+0x272>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d2c:	d812      	bhi.n	8004d54 <PCD_EP_ISR_Handler+0x244>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <PCD_EP_ISR_Handler+0x238>
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	3301      	adds	r3, #1
 8004d46:	61bb      	str	r3, [r7, #24]
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	029b      	lsls	r3, r3, #10
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	8023      	strh	r3, [r4, #0]
 8004d52:	e016      	b.n	8004d82 <PCD_EP_ISR_Handler+0x272>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <PCD_EP_ISR_Handler+0x25e>
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	61bb      	str	r3, [r7, #24]
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	029b      	lsls	r3, r3, #10
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	b29c      	uxth	r4, r3
 8004d94:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004d98:	b29c      	uxth	r4, r3
 8004d9a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004d9e:	b29c      	uxth	r4, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	4b9e      	ldr	r3, [pc, #632]	; (8005020 <PCD_EP_ISR_Handler+0x510>)
 8004da6:	4323      	orrs	r3, r4
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	8013      	strh	r3, [r2, #0]
 8004dac:	e12a      	b.n	8005004 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	7d7b      	ldrb	r3, [r7, #21]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004dbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f280 80cb 	bge.w	8004f5e <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	7d7b      	ldrb	r3, [r7, #21]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ddc:	4013      	ands	r3, r2
 8004dde:	b29c      	uxth	r4, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	7d7b      	ldrb	r3, [r7, #21]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004df0:	b292      	uxth	r2, r2
 8004df2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004df4:	7d7b      	ldrb	r3, [r7, #21]
 8004df6:	015b      	lsls	r3, r3, #5
 8004df8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	4413      	add	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	7b1b      	ldrb	r3, [r3, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d11f      	bne.n	8004e4a <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4413      	add	r3, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	4413      	add	r3, r2
 8004e24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e2e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004e30:	8bfb      	ldrh	r3, [r7, #30]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d06e      	beq.n	8004f14 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6959      	ldr	r1, [r3, #20]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	88da      	ldrh	r2, [r3, #6]
 8004e42:	8bfb      	ldrh	r3, [r7, #30]
 8004e44:	f003 fdfb 	bl	8008a3e <USB_ReadPMA>
 8004e48:	e064      	b.n	8004f14 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e64:	b29c      	uxth	r4, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	441a      	add	r2, r3
 8004e74:	4b6b      	ldr	r3, [pc, #428]	; (8005024 <PCD_EP_ISR_Handler+0x514>)
 8004e76:	4323      	orrs	r3, r4
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	461a      	mov	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01f      	beq.n	8004ed6 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eba:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004ebc:	8bfb      	ldrh	r3, [r7, #30]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d028      	beq.n	8004f14 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6959      	ldr	r1, [r3, #20]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	891a      	ldrh	r2, [r3, #8]
 8004ece:	8bfb      	ldrh	r3, [r7, #30]
 8004ed0:	f003 fdb5 	bl	8008a3e <USB_ReadPMA>
 8004ed4:	e01e      	b.n	8004f14 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4413      	add	r3, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004efa:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004efc:	8bfb      	ldrh	r3, [r7, #30]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d008      	beq.n	8004f14 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6959      	ldr	r1, [r3, #20]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	895a      	ldrh	r2, [r3, #10]
 8004f0e:	8bfb      	ldrh	r3, [r7, #30]
 8004f10:	f003 fd95 	bl	8008a3e <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	8bfb      	ldrh	r3, [r7, #30]
 8004f1a:	441a      	add	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	695a      	ldr	r2, [r3, #20]
 8004f24:	8bfb      	ldrh	r3, [r7, #30]
 8004f26:	441a      	add	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <PCD_EP_ISR_Handler+0x42e>
 8004f34:	8bfa      	ldrh	r2, [r7, #30]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d206      	bcs.n	8004f4c <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	4619      	mov	r1, r3
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f007 fa53 	bl	800c3f0 <HAL_PCD_DataOutStageCallback>
 8004f4a:	e008      	b.n	8004f5e <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	7819      	ldrb	r1, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff fcbd 	bl	80048d8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004f5e:	8a7b      	ldrh	r3, [r7, #18]
 8004f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d04d      	beq.n	8005004 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004f68:	7d7b      	ldrb	r3, [r7, #21]
 8004f6a:	015b      	lsls	r3, r3, #5
 8004f6c:	3328      	adds	r3, #40	; 0x28
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	4413      	add	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	7d7b      	ldrb	r3, [r7, #21]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8c:	b29c      	uxth	r4, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	7d7b      	ldrb	r3, [r7, #21]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	441a      	add	r2, r3
 8004f9a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4413      	add	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	695a      	ldr	r2, [r3, #20]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	441a      	add	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d106      	bne.n	8004ff2 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f007 fa18 	bl	800c420 <HAL_PCD_DataInStageCallback>
 8004ff0:	e008      	b.n	8005004 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	7819      	ldrb	r1, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	695a      	ldr	r2, [r3, #20]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff fca4 	bl	800494c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800500c:	b29b      	uxth	r3, r3
 800500e:	b21b      	sxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	f6ff ad82 	blt.w	8004b1a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3724      	adds	r7, #36	; 0x24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd90      	pop	{r4, r7, pc}
 8005020:	ffff8080 	.word	0xffff8080
 8005024:	ffff80c0 	.word	0xffff80c0

08005028 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800502c:	4b05      	ldr	r3, [pc, #20]	; (8005044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a04      	ldr	r2, [pc, #16]	; (8005044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005036:	6013      	str	r3, [r2, #0]
}
 8005038:	bf00      	nop
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40007000 	.word	0x40007000

08005048 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800504c:	4b04      	ldr	r3, [pc, #16]	; (8005060 <HAL_PWREx_GetVoltageRange+0x18>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005054:	4618      	mov	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40007000 	.word	0x40007000

08005064 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005072:	d130      	bne.n	80050d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005074:	4b23      	ldr	r3, [pc, #140]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800507c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005080:	d038      	beq.n	80050f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005082:	4b20      	ldr	r3, [pc, #128]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800508a:	4a1e      	ldr	r2, [pc, #120]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800508c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005090:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005092:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2232      	movs	r2, #50	; 0x32
 8005098:	fb02 f303 	mul.w	r3, r2, r3
 800509c:	4a1b      	ldr	r2, [pc, #108]	; (800510c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800509e:	fba2 2303 	umull	r2, r3, r2, r3
 80050a2:	0c9b      	lsrs	r3, r3, #18
 80050a4:	3301      	adds	r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050a8:	e002      	b.n	80050b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050b0:	4b14      	ldr	r3, [pc, #80]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050bc:	d102      	bne.n	80050c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1f2      	bne.n	80050aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050c4:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d0:	d110      	bne.n	80050f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e00f      	b.n	80050f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80050d6:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e2:	d007      	beq.n	80050f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050e4:	4b07      	ldr	r3, [pc, #28]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050ec:	4a05      	ldr	r2, [pc, #20]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40007000 	.word	0x40007000
 8005108:	20000040 	.word	0x20000040
 800510c:	431bde83 	.word	0x431bde83

08005110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d102      	bne.n	8005124 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	f000 bc11 	b.w	8005946 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005124:	4ba0      	ldr	r3, [pc, #640]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 030c 	and.w	r3, r3, #12
 800512c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800512e:	4b9e      	ldr	r3, [pc, #632]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80e4 	beq.w	800530e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_RCC_OscConfig+0x4c>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b0c      	cmp	r3, #12
 8005150:	f040 808b 	bne.w	800526a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b01      	cmp	r3, #1
 8005158:	f040 8087 	bne.w	800526a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800515c:	4b92      	ldr	r3, [pc, #584]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_RCC_OscConfig+0x64>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e3e8      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1a      	ldr	r2, [r3, #32]
 8005178:	4b8b      	ldr	r3, [pc, #556]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d004      	beq.n	800518e <HAL_RCC_OscConfig+0x7e>
 8005184:	4b88      	ldr	r3, [pc, #544]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800518c:	e005      	b.n	800519a <HAL_RCC_OscConfig+0x8a>
 800518e:	4b86      	ldr	r3, [pc, #536]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005194:	091b      	lsrs	r3, r3, #4
 8005196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800519a:	4293      	cmp	r3, r2
 800519c:	d223      	bcs.n	80051e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fdaa 	bl	8005cfc <RCC_SetFlashLatencyFromMSIRange>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e3c9      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051b2:	4b7d      	ldr	r3, [pc, #500]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a7c      	ldr	r2, [pc, #496]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80051b8:	f043 0308 	orr.w	r3, r3, #8
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	4b7a      	ldr	r3, [pc, #488]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	4977      	ldr	r1, [pc, #476]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051d0:	4b75      	ldr	r3, [pc, #468]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	4972      	ldr	r1, [pc, #456]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	604b      	str	r3, [r1, #4]
 80051e4:	e025      	b.n	8005232 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051e6:	4b70      	ldr	r3, [pc, #448]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a6f      	ldr	r2, [pc, #444]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80051ec:	f043 0308 	orr.w	r3, r3, #8
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	4b6d      	ldr	r3, [pc, #436]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	496a      	ldr	r1, [pc, #424]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005204:	4b68      	ldr	r3, [pc, #416]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	021b      	lsls	r3, r3, #8
 8005212:	4965      	ldr	r1, [pc, #404]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005214:	4313      	orrs	r3, r2
 8005216:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d109      	bne.n	8005232 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fd6a 	bl	8005cfc <RCC_SetFlashLatencyFromMSIRange>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e389      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005232:	f000 fc6f 	bl	8005b14 <HAL_RCC_GetSysClockFreq>
 8005236:	4601      	mov	r1, r0
 8005238:	4b5b      	ldr	r3, [pc, #364]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	091b      	lsrs	r3, r3, #4
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	4a5a      	ldr	r2, [pc, #360]	; (80053ac <HAL_RCC_OscConfig+0x29c>)
 8005244:	5cd3      	ldrb	r3, [r2, r3]
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	fa21 f303 	lsr.w	r3, r1, r3
 800524e:	4a58      	ldr	r2, [pc, #352]	; (80053b0 <HAL_RCC_OscConfig+0x2a0>)
 8005250:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005252:	4b58      	ldr	r3, [pc, #352]	; (80053b4 <HAL_RCC_OscConfig+0x2a4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f7fd ff10 	bl	800307c <HAL_InitTick>
 800525c:	4603      	mov	r3, r0
 800525e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d052      	beq.n	800530c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	e36d      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d032      	beq.n	80052d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005272:	4b4d      	ldr	r3, [pc, #308]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a4c      	ldr	r2, [pc, #304]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800527e:	f7fe f8a5 	bl	80033cc <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005286:	f7fe f8a1 	bl	80033cc <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e356      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005298:	4b43      	ldr	r3, [pc, #268]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052a4:	4b40      	ldr	r3, [pc, #256]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a3f      	ldr	r2, [pc, #252]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80052aa:	f043 0308 	orr.w	r3, r3, #8
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	4b3d      	ldr	r3, [pc, #244]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	493a      	ldr	r1, [pc, #232]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052c2:	4b39      	ldr	r3, [pc, #228]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	4935      	ldr	r1, [pc, #212]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	604b      	str	r3, [r1, #4]
 80052d6:	e01a      	b.n	800530e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052d8:	4b33      	ldr	r3, [pc, #204]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a32      	ldr	r2, [pc, #200]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052e4:	f7fe f872 	bl	80033cc <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052ec:	f7fe f86e 	bl	80033cc <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e323      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052fe:	4b2a      	ldr	r3, [pc, #168]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x1dc>
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800530c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d073      	beq.n	8005402 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d005      	beq.n	800532c <HAL_RCC_OscConfig+0x21c>
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b0c      	cmp	r3, #12
 8005324:	d10e      	bne.n	8005344 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b03      	cmp	r3, #3
 800532a:	d10b      	bne.n	8005344 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800532c:	4b1e      	ldr	r3, [pc, #120]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d063      	beq.n	8005400 <HAL_RCC_OscConfig+0x2f0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d15f      	bne.n	8005400 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e300      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800534c:	d106      	bne.n	800535c <HAL_RCC_OscConfig+0x24c>
 800534e:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e01d      	b.n	8005398 <HAL_RCC_OscConfig+0x288>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005364:	d10c      	bne.n	8005380 <HAL_RCC_OscConfig+0x270>
 8005366:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a0f      	ldr	r2, [pc, #60]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 800536c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	4b0d      	ldr	r3, [pc, #52]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a0c      	ldr	r2, [pc, #48]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e00b      	b.n	8005398 <HAL_RCC_OscConfig+0x288>
 8005380:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a08      	ldr	r2, [pc, #32]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a05      	ldr	r2, [pc, #20]	; (80053a8 <HAL_RCC_OscConfig+0x298>)
 8005392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01b      	beq.n	80053d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fe f814 	bl	80033cc <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053a6:	e010      	b.n	80053ca <HAL_RCC_OscConfig+0x2ba>
 80053a8:	40021000 	.word	0x40021000
 80053ac:	0800dea8 	.word	0x0800dea8
 80053b0:	20000040 	.word	0x20000040
 80053b4:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b8:	f7fe f808 	bl	80033cc <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b64      	cmp	r3, #100	; 0x64
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e2bd      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ca:	4baf      	ldr	r3, [pc, #700]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f0      	beq.n	80053b8 <HAL_RCC_OscConfig+0x2a8>
 80053d6:	e014      	b.n	8005402 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d8:	f7fd fff8 	bl	80033cc <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e0:	f7fd fff4 	bl	80033cc <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	; 0x64
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e2a9      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053f2:	4ba5      	ldr	r3, [pc, #660]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f0      	bne.n	80053e0 <HAL_RCC_OscConfig+0x2d0>
 80053fe:	e000      	b.n	8005402 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d060      	beq.n	80054d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2b04      	cmp	r3, #4
 8005412:	d005      	beq.n	8005420 <HAL_RCC_OscConfig+0x310>
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	2b0c      	cmp	r3, #12
 8005418:	d119      	bne.n	800544e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b02      	cmp	r3, #2
 800541e:	d116      	bne.n	800544e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005420:	4b99      	ldr	r3, [pc, #612]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_OscConfig+0x328>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e286      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005438:	4b93      	ldr	r3, [pc, #588]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	061b      	lsls	r3, r3, #24
 8005446:	4990      	ldr	r1, [pc, #576]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 8005448:	4313      	orrs	r3, r2
 800544a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800544c:	e040      	b.n	80054d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d023      	beq.n	800549e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005456:	4b8c      	ldr	r3, [pc, #560]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a8b      	ldr	r2, [pc, #556]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 800545c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005462:	f7fd ffb3 	bl	80033cc <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800546a:	f7fd ffaf 	bl	80033cc <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e264      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800547c:	4b82      	ldr	r3, [pc, #520]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0f0      	beq.n	800546a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005488:	4b7f      	ldr	r3, [pc, #508]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	061b      	lsls	r3, r3, #24
 8005496:	497c      	ldr	r1, [pc, #496]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 8005498:	4313      	orrs	r3, r2
 800549a:	604b      	str	r3, [r1, #4]
 800549c:	e018      	b.n	80054d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800549e:	4b7a      	ldr	r3, [pc, #488]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a79      	ldr	r2, [pc, #484]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 80054a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054aa:	f7fd ff8f 	bl	80033cc <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054b2:	f7fd ff8b 	bl	80033cc <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e240      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054c4:	4b70      	ldr	r3, [pc, #448]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1f0      	bne.n	80054b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d03c      	beq.n	8005556 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01c      	beq.n	800551e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054e4:	4b68      	ldr	r3, [pc, #416]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 80054e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ea:	4a67      	ldr	r2, [pc, #412]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f4:	f7fd ff6a 	bl	80033cc <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054fc:	f7fd ff66 	bl	80033cc <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e21b      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800550e:	4b5e      	ldr	r3, [pc, #376]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 8005510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0ef      	beq.n	80054fc <HAL_RCC_OscConfig+0x3ec>
 800551c:	e01b      	b.n	8005556 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800551e:	4b5a      	ldr	r3, [pc, #360]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 8005520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005524:	4a58      	ldr	r2, [pc, #352]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552e:	f7fd ff4d 	bl	80033cc <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005536:	f7fd ff49 	bl	80033cc <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e1fe      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005548:	4b4f      	ldr	r3, [pc, #316]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 800554a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1ef      	bne.n	8005536 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 80a6 	beq.w	80056b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005564:	2300      	movs	r3, #0
 8005566:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005568:	4b47      	ldr	r3, [pc, #284]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 800556a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10d      	bne.n	8005590 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005574:	4b44      	ldr	r3, [pc, #272]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 8005576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005578:	4a43      	ldr	r2, [pc, #268]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 800557a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557e:	6593      	str	r3, [r2, #88]	; 0x58
 8005580:	4b41      	ldr	r3, [pc, #260]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 8005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800558c:	2301      	movs	r3, #1
 800558e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005590:	4b3e      	ldr	r3, [pc, #248]	; (800568c <HAL_RCC_OscConfig+0x57c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d118      	bne.n	80055ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800559c:	4b3b      	ldr	r3, [pc, #236]	; (800568c <HAL_RCC_OscConfig+0x57c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a3a      	ldr	r2, [pc, #232]	; (800568c <HAL_RCC_OscConfig+0x57c>)
 80055a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055a8:	f7fd ff10 	bl	80033cc <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b0:	f7fd ff0c 	bl	80033cc <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e1c1      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055c2:	4b32      	ldr	r3, [pc, #200]	; (800568c <HAL_RCC_OscConfig+0x57c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0f0      	beq.n	80055b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d108      	bne.n	80055e8 <HAL_RCC_OscConfig+0x4d8>
 80055d6:	4b2c      	ldr	r3, [pc, #176]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055dc:	4a2a      	ldr	r2, [pc, #168]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055e6:	e024      	b.n	8005632 <HAL_RCC_OscConfig+0x522>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b05      	cmp	r3, #5
 80055ee:	d110      	bne.n	8005612 <HAL_RCC_OscConfig+0x502>
 80055f0:	4b25      	ldr	r3, [pc, #148]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 80055f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f6:	4a24      	ldr	r2, [pc, #144]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 80055f8:	f043 0304 	orr.w	r3, r3, #4
 80055fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005600:	4b21      	ldr	r3, [pc, #132]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005606:	4a20      	ldr	r2, [pc, #128]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005610:	e00f      	b.n	8005632 <HAL_RCC_OscConfig+0x522>
 8005612:	4b1d      	ldr	r3, [pc, #116]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005618:	4a1b      	ldr	r2, [pc, #108]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005622:	4b19      	ldr	r3, [pc, #100]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 8005624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005628:	4a17      	ldr	r2, [pc, #92]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 800562a:	f023 0304 	bic.w	r3, r3, #4
 800562e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d016      	beq.n	8005668 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563a:	f7fd fec7 	bl	80033cc <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005640:	e00a      	b.n	8005658 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005642:	f7fd fec3 	bl	80033cc <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005650:	4293      	cmp	r3, r2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e176      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_RCC_OscConfig+0x578>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0ed      	beq.n	8005642 <HAL_RCC_OscConfig+0x532>
 8005666:	e01a      	b.n	800569e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005668:	f7fd feb0 	bl	80033cc <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800566e:	e00f      	b.n	8005690 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005670:	f7fd feac 	bl	80033cc <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f241 3288 	movw	r2, #5000	; 0x1388
 800567e:	4293      	cmp	r3, r2
 8005680:	d906      	bls.n	8005690 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e15f      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
 8005686:	bf00      	nop
 8005688:	40021000 	.word	0x40021000
 800568c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005690:	4baa      	ldr	r3, [pc, #680]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e8      	bne.n	8005670 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800569e:	7ffb      	ldrb	r3, [r7, #31]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d105      	bne.n	80056b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a4:	4ba5      	ldr	r3, [pc, #660]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80056a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a8:	4aa4      	ldr	r2, [pc, #656]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80056aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0320 	and.w	r3, r3, #32
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d03c      	beq.n	8005736 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01c      	beq.n	80056fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056c4:	4b9d      	ldr	r3, [pc, #628]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80056c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056ca:	4a9c      	ldr	r2, [pc, #624]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d4:	f7fd fe7a 	bl	80033cc <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056dc:	f7fd fe76 	bl	80033cc <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e12b      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056ee:	4b93      	ldr	r3, [pc, #588]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80056f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0ef      	beq.n	80056dc <HAL_RCC_OscConfig+0x5cc>
 80056fc:	e01b      	b.n	8005736 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056fe:	4b8f      	ldr	r3, [pc, #572]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 8005700:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005704:	4a8d      	ldr	r2, [pc, #564]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570e:	f7fd fe5d 	bl	80033cc <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005716:	f7fd fe59 	bl	80033cc <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e10e      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005728:	4b84      	ldr	r3, [pc, #528]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 800572a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1ef      	bne.n	8005716 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 8102 	beq.w	8005944 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	2b02      	cmp	r3, #2
 8005746:	f040 80c5 	bne.w	80058d4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800574a:	4b7c      	ldr	r3, [pc, #496]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f003 0203 	and.w	r2, r3, #3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	429a      	cmp	r2, r3
 800575c:	d12c      	bne.n	80057b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	3b01      	subs	r3, #1
 800576a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800576c:	429a      	cmp	r2, r3
 800576e:	d123      	bne.n	80057b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800577c:	429a      	cmp	r2, r3
 800577e:	d11b      	bne.n	80057b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800578c:	429a      	cmp	r2, r3
 800578e:	d113      	bne.n	80057b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	3b01      	subs	r3, #1
 800579e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d109      	bne.n	80057b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	085b      	lsrs	r3, r3, #1
 80057b0:	3b01      	subs	r3, #1
 80057b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d067      	beq.n	8005888 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2b0c      	cmp	r3, #12
 80057bc:	d062      	beq.n	8005884 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057be:	4b5f      	ldr	r3, [pc, #380]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e0bb      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057ce:	4b5b      	ldr	r3, [pc, #364]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a5a      	ldr	r2, [pc, #360]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80057d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057da:	f7fd fdf7 	bl	80033cc <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e2:	f7fd fdf3 	bl	80033cc <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e0a8      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057f4:	4b51      	ldr	r3, [pc, #324]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1f0      	bne.n	80057e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005800:	4b4e      	ldr	r3, [pc, #312]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	4b4e      	ldr	r3, [pc, #312]	; (8005940 <HAL_RCC_OscConfig+0x830>)
 8005806:	4013      	ands	r3, r2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005810:	3a01      	subs	r2, #1
 8005812:	0112      	lsls	r2, r2, #4
 8005814:	4311      	orrs	r1, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800581a:	0212      	lsls	r2, r2, #8
 800581c:	4311      	orrs	r1, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005822:	0852      	lsrs	r2, r2, #1
 8005824:	3a01      	subs	r2, #1
 8005826:	0552      	lsls	r2, r2, #21
 8005828:	4311      	orrs	r1, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800582e:	0852      	lsrs	r2, r2, #1
 8005830:	3a01      	subs	r2, #1
 8005832:	0652      	lsls	r2, r2, #25
 8005834:	4311      	orrs	r1, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800583a:	06d2      	lsls	r2, r2, #27
 800583c:	430a      	orrs	r2, r1
 800583e:	493f      	ldr	r1, [pc, #252]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 8005840:	4313      	orrs	r3, r2
 8005842:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005844:	4b3d      	ldr	r3, [pc, #244]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a3c      	ldr	r2, [pc, #240]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 800584a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800584e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005850:	4b3a      	ldr	r3, [pc, #232]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4a39      	ldr	r2, [pc, #228]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 8005856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800585a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800585c:	f7fd fdb6 	bl	80033cc <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005864:	f7fd fdb2 	bl	80033cc <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e067      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005876:	4b31      	ldr	r3, [pc, #196]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0f0      	beq.n	8005864 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005882:	e05f      	b.n	8005944 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e05e      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005888:	4b2c      	ldr	r3, [pc, #176]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d157      	bne.n	8005944 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005894:	4b29      	ldr	r3, [pc, #164]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a28      	ldr	r2, [pc, #160]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 800589a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800589e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058a0:	4b26      	ldr	r3, [pc, #152]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4a25      	ldr	r2, [pc, #148]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80058a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058ac:	f7fd fd8e 	bl	80033cc <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b4:	f7fd fd8a 	bl	80033cc <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e03f      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058c6:	4b1d      	ldr	r3, [pc, #116]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f0      	beq.n	80058b4 <HAL_RCC_OscConfig+0x7a4>
 80058d2:	e037      	b.n	8005944 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2b0c      	cmp	r3, #12
 80058d8:	d02d      	beq.n	8005936 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058da:	4b18      	ldr	r3, [pc, #96]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a17      	ldr	r2, [pc, #92]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80058e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058e4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058e6:	4b15      	ldr	r3, [pc, #84]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d105      	bne.n	80058fe <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80058f2:	4b12      	ldr	r3, [pc, #72]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	4a11      	ldr	r2, [pc, #68]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 80058f8:	f023 0303 	bic.w	r3, r3, #3
 80058fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80058fe:	4b0f      	ldr	r3, [pc, #60]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	4a0e      	ldr	r2, [pc, #56]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 8005904:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800590c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590e:	f7fd fd5d 	bl	80033cc <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005916:	f7fd fd59 	bl	80033cc <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e00e      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005928:	4b04      	ldr	r3, [pc, #16]	; (800593c <HAL_RCC_OscConfig+0x82c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1f0      	bne.n	8005916 <HAL_RCC_OscConfig+0x806>
 8005934:	e006      	b.n	8005944 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e005      	b.n	8005946 <HAL_RCC_OscConfig+0x836>
 800593a:	bf00      	nop
 800593c:	40021000 	.word	0x40021000
 8005940:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3720      	adds	r7, #32
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop

08005950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e0c8      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005964:	4b66      	ldr	r3, [pc, #408]	; (8005b00 <HAL_RCC_ClockConfig+0x1b0>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d910      	bls.n	8005994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005972:	4b63      	ldr	r3, [pc, #396]	; (8005b00 <HAL_RCC_ClockConfig+0x1b0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f023 0207 	bic.w	r2, r3, #7
 800597a:	4961      	ldr	r1, [pc, #388]	; (8005b00 <HAL_RCC_ClockConfig+0x1b0>)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	4313      	orrs	r3, r2
 8005980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005982:	4b5f      	ldr	r3, [pc, #380]	; (8005b00 <HAL_RCC_ClockConfig+0x1b0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d001      	beq.n	8005994 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e0b0      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d04c      	beq.n	8005a3a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d107      	bne.n	80059b8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059a8:	4b56      	ldr	r3, [pc, #344]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d121      	bne.n	80059f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e09e      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d107      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059c0:	4b50      	ldr	r3, [pc, #320]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d115      	bne.n	80059f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e092      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d107      	bne.n	80059e8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059d8:	4b4a      	ldr	r3, [pc, #296]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e086      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059e8:	4b46      	ldr	r3, [pc, #280]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e07e      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059f8:	4b42      	ldr	r3, [pc, #264]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f023 0203 	bic.w	r2, r3, #3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	493f      	ldr	r1, [pc, #252]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a0a:	f7fd fcdf 	bl	80033cc <HAL_GetTick>
 8005a0e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a10:	e00a      	b.n	8005a28 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a12:	f7fd fcdb 	bl	80033cc <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e066      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a28:	4b36      	ldr	r3, [pc, #216]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 020c 	and.w	r2, r3, #12
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d1eb      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a46:	4b2f      	ldr	r3, [pc, #188]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	492c      	ldr	r1, [pc, #176]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a58:	4b29      	ldr	r3, [pc, #164]	; (8005b00 <HAL_RCC_ClockConfig+0x1b0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d210      	bcs.n	8005a88 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a66:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <HAL_RCC_ClockConfig+0x1b0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 0207 	bic.w	r2, r3, #7
 8005a6e:	4924      	ldr	r1, [pc, #144]	; (8005b00 <HAL_RCC_ClockConfig+0x1b0>)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a76:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <HAL_RCC_ClockConfig+0x1b0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e036      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a94:	4b1b      	ldr	r3, [pc, #108]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4918      	ldr	r1, [pc, #96]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d009      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ab2:	4b14      	ldr	r3, [pc, #80]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	4910      	ldr	r1, [pc, #64]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ac6:	f000 f825 	bl	8005b14 <HAL_RCC_GetSysClockFreq>
 8005aca:	4601      	mov	r1, r0
 8005acc:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <HAL_RCC_ClockConfig+0x1b4>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	091b      	lsrs	r3, r3, #4
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	4a0c      	ldr	r2, [pc, #48]	; (8005b08 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad8:	5cd3      	ldrb	r3, [r2, r3]
 8005ada:	f003 031f 	and.w	r3, r3, #31
 8005ade:	fa21 f303 	lsr.w	r3, r1, r3
 8005ae2:	4a0a      	ldr	r2, [pc, #40]	; (8005b0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ae6:	4b0a      	ldr	r3, [pc, #40]	; (8005b10 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fd fac6 	bl	800307c <HAL_InitTick>
 8005af0:	4603      	mov	r3, r0
 8005af2:	72fb      	strb	r3, [r7, #11]

  return status;
 8005af4:	7afb      	ldrb	r3, [r7, #11]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40022000 	.word	0x40022000
 8005b04:	40021000 	.word	0x40021000
 8005b08:	0800dea8 	.word	0x0800dea8
 8005b0c:	20000040 	.word	0x20000040
 8005b10:	20000044 	.word	0x20000044

08005b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b089      	sub	sp, #36	; 0x24
 8005b18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b22:	4b3d      	ldr	r3, [pc, #244]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 030c 	and.w	r3, r3, #12
 8005b2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b2c:	4b3a      	ldr	r3, [pc, #232]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x34>
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b0c      	cmp	r3, #12
 8005b40:	d121      	bne.n	8005b86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d11e      	bne.n	8005b86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b48:	4b33      	ldr	r3, [pc, #204]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d107      	bne.n	8005b64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b54:	4b30      	ldr	r3, [pc, #192]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8005b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b5a:	0a1b      	lsrs	r3, r3, #8
 8005b5c:	f003 030f 	and.w	r3, r3, #15
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	e005      	b.n	8005b70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b64:	4b2c      	ldr	r3, [pc, #176]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	091b      	lsrs	r3, r3, #4
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b70:	4a2a      	ldr	r2, [pc, #168]	; (8005c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10d      	bne.n	8005b9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b84:	e00a      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d102      	bne.n	8005b92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b8c:	4b24      	ldr	r3, [pc, #144]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	e004      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d101      	bne.n	8005b9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b98:	4b22      	ldr	r3, [pc, #136]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b0c      	cmp	r3, #12
 8005ba0:	d133      	bne.n	8005c0a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ba2:	4b1d      	ldr	r3, [pc, #116]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d002      	beq.n	8005bb8 <HAL_RCC_GetSysClockFreq+0xa4>
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d003      	beq.n	8005bbe <HAL_RCC_GetSysClockFreq+0xaa>
 8005bb6:	e005      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005bb8:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005bba:	617b      	str	r3, [r7, #20]
      break;
 8005bbc:	e005      	b.n	8005bca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005bbe:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8005bc0:	617b      	str	r3, [r7, #20]
      break;
 8005bc2:	e002      	b.n	8005bca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	617b      	str	r3, [r7, #20]
      break;
 8005bc8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bca:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005bd8:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	0a1b      	lsrs	r3, r3, #8
 8005bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	fb02 f203 	mul.w	r2, r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bee:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bf0:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x104>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	0e5b      	lsrs	r3, r3, #25
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c08:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3724      	adds	r7, #36	; 0x24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	0800dec0 	.word	0x0800dec0
 8005c20:	00f42400 	.word	0x00f42400
 8005c24:	007a1200 	.word	0x007a1200

08005c28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c2c:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20000040 	.word	0x20000040

08005c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c44:	f7ff fff0 	bl	8005c28 <HAL_RCC_GetHCLKFreq>
 8005c48:	4601      	mov	r1, r0
 8005c4a:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	4a04      	ldr	r2, [pc, #16]	; (8005c68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c56:	5cd3      	ldrb	r3, [r2, r3]
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40021000 	.word	0x40021000
 8005c68:	0800deb8 	.word	0x0800deb8

08005c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c70:	f7ff ffda 	bl	8005c28 <HAL_RCC_GetHCLKFreq>
 8005c74:	4601      	mov	r1, r0
 8005c76:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	0adb      	lsrs	r3, r3, #11
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	4a04      	ldr	r2, [pc, #16]	; (8005c94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c82:	5cd3      	ldrb	r3, [r2, r3]
 8005c84:	f003 031f 	and.w	r3, r3, #31
 8005c88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40021000 	.word	0x40021000
 8005c94:	0800deb8 	.word	0x0800deb8

08005c98 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	220f      	movs	r2, #15
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005ca8:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0203 	and.w	r2, r3, #3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005ccc:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	08db      	lsrs	r3, r3, #3
 8005cd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005cda:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <HAL_RCC_GetClockConfig+0x60>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0207 	and.w	r2, r3, #7
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	601a      	str	r2, [r3, #0]
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40022000 	.word	0x40022000

08005cfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d04:	2300      	movs	r3, #0
 8005d06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d08:	4b2a      	ldr	r3, [pc, #168]	; (8005db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d14:	f7ff f998 	bl	8005048 <HAL_PWREx_GetVoltageRange>
 8005d18:	6178      	str	r0, [r7, #20]
 8005d1a:	e014      	b.n	8005d46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d1c:	4b25      	ldr	r3, [pc, #148]	; (8005db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d20:	4a24      	ldr	r2, [pc, #144]	; (8005db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d26:	6593      	str	r3, [r2, #88]	; 0x58
 8005d28:	4b22      	ldr	r3, [pc, #136]	; (8005db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d34:	f7ff f988 	bl	8005048 <HAL_PWREx_GetVoltageRange>
 8005d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d3a:	4b1e      	ldr	r3, [pc, #120]	; (8005db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3e:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4c:	d10b      	bne.n	8005d66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b80      	cmp	r3, #128	; 0x80
 8005d52:	d919      	bls.n	8005d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2ba0      	cmp	r3, #160	; 0xa0
 8005d58:	d902      	bls.n	8005d60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	e013      	b.n	8005d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d60:	2301      	movs	r3, #1
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	e010      	b.n	8005d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b80      	cmp	r3, #128	; 0x80
 8005d6a:	d902      	bls.n	8005d72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	613b      	str	r3, [r7, #16]
 8005d70:	e00a      	b.n	8005d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b80      	cmp	r3, #128	; 0x80
 8005d76:	d102      	bne.n	8005d7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d78:	2302      	movs	r3, #2
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	e004      	b.n	8005d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b70      	cmp	r3, #112	; 0x70
 8005d82:	d101      	bne.n	8005d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d84:	2301      	movs	r3, #1
 8005d86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d88:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f023 0207 	bic.w	r2, r3, #7
 8005d90:	4909      	ldr	r1, [pc, #36]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d98:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d001      	beq.n	8005daa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40021000 	.word	0x40021000
 8005db8:	40022000 	.word	0x40022000

08005dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005dc8:	2300      	movs	r3, #0
 8005dca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d02f      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ddc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005de0:	d005      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005de2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005de6:	d015      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005dec:	e00f      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005dee:	4b5d      	ldr	r3, [pc, #372]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	4a5c      	ldr	r2, [pc, #368]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005dfa:	e00c      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	2100      	movs	r1, #0
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fa2e 	bl	8006264 <RCCEx_PLLSAI1_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e0c:	e003      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	74fb      	strb	r3, [r7, #19]
      break;
 8005e12:	e000      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8005e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e16:	7cfb      	ldrb	r3, [r7, #19]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10b      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e1c:	4b51      	ldr	r3, [pc, #324]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2a:	494e      	ldr	r1, [pc, #312]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e32:	e001      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e34:	7cfb      	ldrb	r3, [r7, #19]
 8005e36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 809e 	beq.w	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e46:	2300      	movs	r3, #0
 8005e48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e4a:	4b46      	ldr	r3, [pc, #280]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00d      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e60:	4b40      	ldr	r3, [pc, #256]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e64:	4a3f      	ldr	r2, [pc, #252]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8005e6c:	4b3d      	ldr	r3, [pc, #244]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e74:	60bb      	str	r3, [r7, #8]
 8005e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e7c:	4b3a      	ldr	r3, [pc, #232]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a39      	ldr	r2, [pc, #228]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e88:	f7fd faa0 	bl	80033cc <HAL_GetTick>
 8005e8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005e8e:	e009      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e90:	f7fd fa9c 	bl	80033cc <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d902      	bls.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	74fb      	strb	r3, [r7, #19]
        break;
 8005ea2:	e005      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ea4:	4b30      	ldr	r3, [pc, #192]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0ef      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8005eb0:	7cfb      	ldrb	r3, [r7, #19]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d15a      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005eb6:	4b2b      	ldr	r3, [pc, #172]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01e      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d019      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ed2:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005edc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ede:	4b21      	ldr	r3, [pc, #132]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee4:	4a1f      	ldr	r2, [pc, #124]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005eee:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef4:	4a1b      	ldr	r2, [pc, #108]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005efe:	4a19      	ldr	r2, [pc, #100]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d016      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f10:	f7fd fa5c 	bl	80033cc <HAL_GetTick>
 8005f14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f16:	e00b      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f18:	f7fd fa58 	bl	80033cc <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d902      	bls.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	74fb      	strb	r3, [r7, #19]
            break;
 8005f2e:	e006      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f30:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0ec      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8005f3e:	7cfb      	ldrb	r3, [r7, #19]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10b      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f44:	4b07      	ldr	r3, [pc, #28]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f52:	4904      	ldr	r1, [pc, #16]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f5a:	e009      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f5c:	7cfb      	ldrb	r3, [r7, #19]
 8005f5e:	74bb      	strb	r3, [r7, #18]
 8005f60:	e006      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005f62:	bf00      	nop
 8005f64:	40021000 	.word	0x40021000
 8005f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6c:	7cfb      	ldrb	r3, [r7, #19]
 8005f6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f70:	7c7b      	ldrb	r3, [r7, #17]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d105      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f76:	4bb2      	ldr	r3, [pc, #712]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7a:	4ab1      	ldr	r2, [pc, #708]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f8e:	4bac      	ldr	r3, [pc, #688]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f94:	f023 0203 	bic.w	r2, r3, #3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	49a8      	ldr	r1, [pc, #672]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fb0:	4ba3      	ldr	r3, [pc, #652]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	f023 020c 	bic.w	r2, r3, #12
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	49a0      	ldr	r1, [pc, #640]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fd2:	4b9b      	ldr	r3, [pc, #620]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	4997      	ldr	r1, [pc, #604]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0320 	and.w	r3, r3, #32
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ff4:	4b92      	ldr	r3, [pc, #584]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	498f      	ldr	r1, [pc, #572]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006016:	4b8a      	ldr	r3, [pc, #552]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006024:	4986      	ldr	r1, [pc, #536]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006038:	4b81      	ldr	r3, [pc, #516]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	497e      	ldr	r1, [pc, #504]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800605a:	4b79      	ldr	r3, [pc, #484]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006060:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	4975      	ldr	r1, [pc, #468]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800607c:	4b70      	ldr	r3, [pc, #448]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608a:	496d      	ldr	r1, [pc, #436]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800609e:	4b68      	ldr	r3, [pc, #416]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	4964      	ldr	r1, [pc, #400]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d028      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060c0:	4b5f      	ldr	r3, [pc, #380]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ce:	495c      	ldr	r1, [pc, #368]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060de:	d106      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060e0:	4b57      	ldr	r3, [pc, #348]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	4a56      	ldr	r2, [pc, #344]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80060e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ea:	60d3      	str	r3, [r2, #12]
 80060ec:	e011      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060f6:	d10c      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3304      	adds	r3, #4
 80060fc:	2101      	movs	r1, #1
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 f8b0 	bl	8006264 <RCCEx_PLLSAI1_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006108:	7cfb      	ldrb	r3, [r7, #19]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 800610e:	7cfb      	ldrb	r3, [r7, #19]
 8006110:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d028      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800611e:	4b48      	ldr	r3, [pc, #288]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006124:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800612c:	4944      	ldr	r1, [pc, #272]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800613c:	d106      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800613e:	4b40      	ldr	r3, [pc, #256]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	4a3f      	ldr	r2, [pc, #252]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006148:	60d3      	str	r3, [r2, #12]
 800614a:	e011      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006154:	d10c      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3304      	adds	r3, #4
 800615a:	2101      	movs	r1, #1
 800615c:	4618      	mov	r0, r3
 800615e:	f000 f881 	bl	8006264 <RCCEx_PLLSAI1_Config>
 8006162:	4603      	mov	r3, r0
 8006164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006166:	7cfb      	ldrb	r3, [r7, #19]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 800616c:	7cfb      	ldrb	r3, [r7, #19]
 800616e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d028      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800617c:	4b30      	ldr	r3, [pc, #192]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618a:	492d      	ldr	r1, [pc, #180]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800619a:	d106      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800619c:	4b28      	ldr	r3, [pc, #160]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4a27      	ldr	r2, [pc, #156]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80061a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061a6:	60d3      	str	r3, [r2, #12]
 80061a8:	e011      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061b2:	d10c      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3304      	adds	r3, #4
 80061b8:	2101      	movs	r1, #1
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f852 	bl	8006264 <RCCEx_PLLSAI1_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061c4:	7cfb      	ldrb	r3, [r7, #19]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 80061ca:	7cfb      	ldrb	r3, [r7, #19]
 80061cc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01c      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061da:	4b19      	ldr	r3, [pc, #100]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e8:	4915      	ldr	r1, [pc, #84]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061f8:	d10c      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3304      	adds	r3, #4
 80061fe:	2102      	movs	r1, #2
 8006200:	4618      	mov	r0, r3
 8006202:	f000 f82f 	bl	8006264 <RCCEx_PLLSAI1_Config>
 8006206:	4603      	mov	r3, r0
 8006208:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800620a:	7cfb      	ldrb	r3, [r7, #19]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8006210:	7cfb      	ldrb	r3, [r7, #19]
 8006212:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006220:	4b07      	ldr	r3, [pc, #28]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006226:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622e:	4904      	ldr	r1, [pc, #16]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006230:	4313      	orrs	r3, r2
 8006232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006236:	7cbb      	ldrb	r3, [r7, #18]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40021000 	.word	0x40021000

08006244 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a04      	ldr	r2, [pc, #16]	; (8006260 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800624e:	f043 0304 	orr.w	r3, r3, #4
 8006252:	6013      	str	r3, [r2, #0]
}
 8006254:	bf00      	nop
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40021000 	.word	0x40021000

08006264 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006272:	4b73      	ldr	r3, [pc, #460]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d018      	beq.n	80062b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800627e:	4b70      	ldr	r3, [pc, #448]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f003 0203 	and.w	r2, r3, #3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d10d      	bne.n	80062aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
       ||
 8006292:	2b00      	cmp	r3, #0
 8006294:	d009      	beq.n	80062aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006296:	4b6a      	ldr	r3, [pc, #424]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	091b      	lsrs	r3, r3, #4
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
       ||
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d044      	beq.n	8006334 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	73fb      	strb	r3, [r7, #15]
 80062ae:	e041      	b.n	8006334 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d00c      	beq.n	80062d2 <RCCEx_PLLSAI1_Config+0x6e>
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d013      	beq.n	80062e4 <RCCEx_PLLSAI1_Config+0x80>
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d120      	bne.n	8006302 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062c0:	4b5f      	ldr	r3, [pc, #380]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d11d      	bne.n	8006308 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d0:	e01a      	b.n	8006308 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062d2:	4b5b      	ldr	r3, [pc, #364]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d116      	bne.n	800630c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062e2:	e013      	b.n	800630c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062e4:	4b56      	ldr	r3, [pc, #344]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10f      	bne.n	8006310 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062f0:	4b53      	ldr	r3, [pc, #332]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d109      	bne.n	8006310 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006300:	e006      	b.n	8006310 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	73fb      	strb	r3, [r7, #15]
      break;
 8006306:	e004      	b.n	8006312 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006308:	bf00      	nop
 800630a:	e002      	b.n	8006312 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800630c:	bf00      	nop
 800630e:	e000      	b.n	8006312 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006310:	bf00      	nop
    }

    if(status == HAL_OK)
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10d      	bne.n	8006334 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006318:	4b49      	ldr	r3, [pc, #292]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6819      	ldr	r1, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	3b01      	subs	r3, #1
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	430b      	orrs	r3, r1
 800632e:	4944      	ldr	r1, [pc, #272]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006330:	4313      	orrs	r3, r2
 8006332:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d17c      	bne.n	8006434 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800633a:	4b41      	ldr	r3, [pc, #260]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a40      	ldr	r2, [pc, #256]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006340:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006346:	f7fd f841 	bl	80033cc <HAL_GetTick>
 800634a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800634c:	e009      	b.n	8006362 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800634e:	f7fd f83d 	bl	80033cc <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d902      	bls.n	8006362 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	73fb      	strb	r3, [r7, #15]
        break;
 8006360:	e005      	b.n	800636e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006362:	4b37      	ldr	r3, [pc, #220]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1ef      	bne.n	800634e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d15f      	bne.n	8006434 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d110      	bne.n	800639c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800637a:	4b31      	ldr	r3, [pc, #196]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006382:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6892      	ldr	r2, [r2, #8]
 800638a:	0211      	lsls	r1, r2, #8
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	68d2      	ldr	r2, [r2, #12]
 8006390:	06d2      	lsls	r2, r2, #27
 8006392:	430a      	orrs	r2, r1
 8006394:	492a      	ldr	r1, [pc, #168]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006396:	4313      	orrs	r3, r2
 8006398:	610b      	str	r3, [r1, #16]
 800639a:	e027      	b.n	80063ec <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d112      	bne.n	80063c8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063a2:	4b27      	ldr	r3, [pc, #156]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80063aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6892      	ldr	r2, [r2, #8]
 80063b2:	0211      	lsls	r1, r2, #8
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6912      	ldr	r2, [r2, #16]
 80063b8:	0852      	lsrs	r2, r2, #1
 80063ba:	3a01      	subs	r2, #1
 80063bc:	0552      	lsls	r2, r2, #21
 80063be:	430a      	orrs	r2, r1
 80063c0:	491f      	ldr	r1, [pc, #124]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	610b      	str	r3, [r1, #16]
 80063c6:	e011      	b.n	80063ec <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063c8:	4b1d      	ldr	r3, [pc, #116]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80063d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6892      	ldr	r2, [r2, #8]
 80063d8:	0211      	lsls	r1, r2, #8
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6952      	ldr	r2, [r2, #20]
 80063de:	0852      	lsrs	r2, r2, #1
 80063e0:	3a01      	subs	r2, #1
 80063e2:	0652      	lsls	r2, r2, #25
 80063e4:	430a      	orrs	r2, r1
 80063e6:	4916      	ldr	r1, [pc, #88]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063ec:	4b14      	ldr	r3, [pc, #80]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a13      	ldr	r2, [pc, #76]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f8:	f7fc ffe8 	bl	80033cc <HAL_GetTick>
 80063fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063fe:	e009      	b.n	8006414 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006400:	f7fc ffe4 	bl	80033cc <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d902      	bls.n	8006414 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	73fb      	strb	r3, [r7, #15]
          break;
 8006412:	e005      	b.n	8006420 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006414:	4b0a      	ldr	r3, [pc, #40]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0ef      	beq.n	8006400 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006426:	4b06      	ldr	r3, [pc, #24]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	4904      	ldr	r1, [pc, #16]	; (8006440 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006430:	4313      	orrs	r3, r2
 8006432:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40021000 	.word	0x40021000

08006444 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e07c      	b.n	8006550 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d106      	bne.n	8006476 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7fc fd47 	bl	8002f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2202      	movs	r2, #2
 800647a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800648c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006496:	d902      	bls.n	800649e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	e002      	b.n	80064a4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800649e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064ac:	d007      	beq.n	80064be <HAL_SPI_Init+0x7a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064b6:	d002      	beq.n	80064be <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10b      	bne.n	80064de <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064ce:	d903      	bls.n	80064d8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	631a      	str	r2, [r3, #48]	; 0x30
 80064d6:	e002      	b.n	80064de <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	ea42 0103 	orr.w	r1, r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	0c1b      	lsrs	r3, r3, #16
 800651e:	f003 0204 	and.w	r2, r3, #4
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	ea42 0103 	orr.w	r1, r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	430a      	orrs	r2, r1
 800653e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	4613      	mov	r3, r2
 8006566:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_SPI_Transmit+0x22>
 8006576:	2302      	movs	r3, #2
 8006578:	e150      	b.n	800681c <HAL_SPI_Transmit+0x2c4>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006582:	f7fc ff23 	bl	80033cc <HAL_GetTick>
 8006586:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006588:	88fb      	ldrh	r3, [r7, #6]
 800658a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b01      	cmp	r3, #1
 8006596:	d002      	beq.n	800659e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006598:	2302      	movs	r3, #2
 800659a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800659c:	e135      	b.n	800680a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <HAL_SPI_Transmit+0x52>
 80065a4:	88fb      	ldrh	r3, [r7, #6]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d102      	bne.n	80065b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065ae:	e12c      	b.n	800680a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2203      	movs	r2, #3
 80065b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	88fa      	ldrh	r2, [r7, #6]
 80065c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	88fa      	ldrh	r2, [r7, #6]
 80065ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fa:	d107      	bne.n	800660c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800660a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	d007      	beq.n	800662a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006628:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006632:	d94b      	bls.n	80066cc <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_SPI_Transmit+0xea>
 800663c:	8afb      	ldrh	r3, [r7, #22]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d13e      	bne.n	80066c0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	881a      	ldrh	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	1c9a      	adds	r2, r3, #2
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006666:	e02b      	b.n	80066c0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b02      	cmp	r3, #2
 8006674:	d112      	bne.n	800669c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	881a      	ldrh	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006686:	1c9a      	adds	r2, r3, #2
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	87da      	strh	r2, [r3, #62]	; 0x3e
 800669a:	e011      	b.n	80066c0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800669c:	f7fc fe96 	bl	80033cc <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d803      	bhi.n	80066b4 <HAL_SPI_Transmit+0x15c>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d102      	bne.n	80066ba <HAL_SPI_Transmit+0x162>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066be:	e0a4      	b.n	800680a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1ce      	bne.n	8006668 <HAL_SPI_Transmit+0x110>
 80066ca:	e07c      	b.n	80067c6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_SPI_Transmit+0x182>
 80066d4:	8afb      	ldrh	r3, [r7, #22]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d170      	bne.n	80067bc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066de:	b29b      	uxth	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d912      	bls.n	800670a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	881a      	ldrh	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	1c9a      	adds	r2, r3, #2
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b02      	subs	r3, #2
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006708:	e058      	b.n	80067bc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	7812      	ldrb	r2, [r2, #0]
 8006716:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006726:	b29b      	uxth	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	b29a      	uxth	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006730:	e044      	b.n	80067bc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b02      	cmp	r3, #2
 800673e:	d12b      	bne.n	8006798 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b01      	cmp	r3, #1
 8006748:	d912      	bls.n	8006770 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	881a      	ldrh	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	1c9a      	adds	r2, r3, #2
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006764:	b29b      	uxth	r3, r3
 8006766:	3b02      	subs	r3, #2
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800676e:	e025      	b.n	80067bc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	330c      	adds	r3, #12
 800677a:	7812      	ldrb	r2, [r2, #0]
 800677c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800678c:	b29b      	uxth	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006796:	e011      	b.n	80067bc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006798:	f7fc fe18 	bl	80033cc <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d803      	bhi.n	80067b0 <HAL_SPI_Transmit+0x258>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ae:	d102      	bne.n	80067b6 <HAL_SPI_Transmit+0x25e>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067ba:	e026      	b.n	800680a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1b5      	bne.n	8006732 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 fb14 	bl	8006df8 <SPI_EndRxTxTransaction>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10a      	bne.n	80067fa <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067e4:	2300      	movs	r3, #0
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	77fb      	strb	r3, [r7, #31]
 8006806:	e000      	b.n	800680a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006808:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800681a:	7ffb      	ldrb	r3, [r7, #31]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3720      	adds	r7, #32
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08a      	sub	sp, #40	; 0x28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006832:	2301      	movs	r3, #1
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_SPI_TransmitReceive+0x26>
 8006846:	2302      	movs	r3, #2
 8006848:	e1fb      	b.n	8006c42 <HAL_SPI_TransmitReceive+0x41e>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006852:	f7fc fdbb 	bl	80033cc <HAL_GetTick>
 8006856:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800685e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006866:	887b      	ldrh	r3, [r7, #2]
 8006868:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800686a:	887b      	ldrh	r3, [r7, #2]
 800686c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800686e:	7efb      	ldrb	r3, [r7, #27]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d00e      	beq.n	8006892 <HAL_SPI_TransmitReceive+0x6e>
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800687a:	d106      	bne.n	800688a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d102      	bne.n	800688a <HAL_SPI_TransmitReceive+0x66>
 8006884:	7efb      	ldrb	r3, [r7, #27]
 8006886:	2b04      	cmp	r3, #4
 8006888:	d003      	beq.n	8006892 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800688a:	2302      	movs	r3, #2
 800688c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006890:	e1cd      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x80>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x80>
 800689e:	887b      	ldrh	r3, [r7, #2]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d103      	bne.n	80068ac <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80068aa:	e1c0      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d003      	beq.n	80068c0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2205      	movs	r2, #5
 80068bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	887a      	ldrh	r2, [r7, #2]
 80068d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	887a      	ldrh	r2, [r7, #2]
 80068d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	887a      	ldrh	r2, [r7, #2]
 80068e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	887a      	ldrh	r2, [r7, #2]
 80068ec:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006902:	d802      	bhi.n	800690a <HAL_SPI_TransmitReceive+0xe6>
 8006904:	8a3b      	ldrh	r3, [r7, #16]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d908      	bls.n	800691c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006918:	605a      	str	r2, [r3, #4]
 800691a:	e007      	b.n	800692c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800692a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b40      	cmp	r3, #64	; 0x40
 8006938:	d007      	beq.n	800694a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006948:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006952:	d97c      	bls.n	8006a4e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <HAL_SPI_TransmitReceive+0x13e>
 800695c:	8a7b      	ldrh	r3, [r7, #18]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d169      	bne.n	8006a36 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	881a      	ldrh	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006972:	1c9a      	adds	r2, r3, #2
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006986:	e056      	b.n	8006a36 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b02      	cmp	r3, #2
 8006994:	d11b      	bne.n	80069ce <HAL_SPI_TransmitReceive+0x1aa>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d016      	beq.n	80069ce <HAL_SPI_TransmitReceive+0x1aa>
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d113      	bne.n	80069ce <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	881a      	ldrh	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	1c9a      	adds	r2, r3, #2
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d11c      	bne.n	8006a16 <HAL_SPI_TransmitReceive+0x1f2>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d016      	beq.n	8006a16 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	b292      	uxth	r2, r2
 80069f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	1c9a      	adds	r2, r3, #2
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a12:	2301      	movs	r3, #1
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a16:	f7fc fcd9 	bl	80033cc <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d807      	bhi.n	8006a36 <HAL_SPI_TransmitReceive+0x212>
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2c:	d003      	beq.n	8006a36 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006a34:	e0fb      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1a3      	bne.n	8006988 <HAL_SPI_TransmitReceive+0x164>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d19d      	bne.n	8006988 <HAL_SPI_TransmitReceive+0x164>
 8006a4c:	e0df      	b.n	8006c0e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_SPI_TransmitReceive+0x23a>
 8006a56:	8a7b      	ldrh	r3, [r7, #18]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	f040 80cb 	bne.w	8006bf4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d912      	bls.n	8006a8e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	881a      	ldrh	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a78:	1c9a      	adds	r2, r3, #2
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b02      	subs	r3, #2
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a8c:	e0b2      	b.n	8006bf4 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	330c      	adds	r3, #12
 8006a98:	7812      	ldrb	r2, [r2, #0]
 8006a9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ab4:	e09e      	b.n	8006bf4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d134      	bne.n	8006b2e <HAL_SPI_TransmitReceive+0x30a>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d02f      	beq.n	8006b2e <HAL_SPI_TransmitReceive+0x30a>
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d12c      	bne.n	8006b2e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d912      	bls.n	8006b04 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	881a      	ldrh	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	1c9a      	adds	r2, r3, #2
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3b02      	subs	r3, #2
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b02:	e012      	b.n	8006b2a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	7812      	ldrb	r2, [r2, #0]
 8006b10:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d148      	bne.n	8006bce <HAL_SPI_TransmitReceive+0x3aa>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d042      	beq.n	8006bce <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d923      	bls.n	8006b9c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	b292      	uxth	r2, r2
 8006b60:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	1c9a      	adds	r2, r3, #2
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b02      	subs	r3, #2
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d81f      	bhi.n	8006bca <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b98:	605a      	str	r2, [r3, #4]
 8006b9a:	e016      	b.n	8006bca <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f103 020c 	add.w	r2, r3, #12
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	7812      	ldrb	r2, [r2, #0]
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bce:	f7fc fbfd 	bl	80033cc <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d803      	bhi.n	8006be6 <HAL_SPI_TransmitReceive+0x3c2>
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d102      	bne.n	8006bec <HAL_SPI_TransmitReceive+0x3c8>
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d103      	bne.n	8006bf4 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006bf2:	e01c      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f47f af5b 	bne.w	8006ab6 <HAL_SPI_TransmitReceive+0x292>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f47f af54 	bne.w	8006ab6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f8f0 	bl	8006df8 <SPI_EndRxTxTransaction>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d006      	beq.n	8006c2c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	661a      	str	r2, [r3, #96]	; 0x60
 8006c2a:	e000      	b.n	8006c2e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006c2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3728      	adds	r7, #40	; 0x28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	603b      	str	r3, [r7, #0]
 8006c56:	4613      	mov	r3, r2
 8006c58:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c5a:	e04c      	b.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	d048      	beq.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006c64:	f7fc fbb2 	bl	80033cc <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d902      	bls.n	8006c7a <SPI_WaitFlagStateUntilTimeout+0x30>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d13d      	bne.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c92:	d111      	bne.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9c:	d004      	beq.n	8006ca8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca6:	d107      	bne.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cc0:	d10f      	bne.n	8006ce2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ce0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e00f      	b.n	8006d16 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	bf0c      	ite	eq
 8006d06:	2301      	moveq	r3, #1
 8006d08:	2300      	movne	r3, #0
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d1a3      	bne.n	8006c5c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
 8006d2a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006d2c:	e057      	b.n	8006dde <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d34:	d106      	bne.n	8006d44 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d103      	bne.n	8006d44 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	330c      	adds	r3, #12
 8006d42:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4a:	d048      	beq.n	8006dde <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006d4c:	f7fc fb3e 	bl	80033cc <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d902      	bls.n	8006d62 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d13d      	bne.n	8006dde <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d7a:	d111      	bne.n	8006da0 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d84:	d004      	beq.n	8006d90 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d8e:	d107      	bne.n	8006da0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da8:	d10f      	bne.n	8006dca <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e008      	b.n	8006df0 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4013      	ands	r3, r2
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d19f      	bne.n	8006d2e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f7ff ff84 	bl	8006d1e <SPI_WaitFifoStateUntilTimeout>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d007      	beq.n	8006e2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e20:	f043 0220 	orr.w	r2, r3, #32
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e027      	b.n	8006e7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2200      	movs	r2, #0
 8006e34:	2180      	movs	r1, #128	; 0x80
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7ff ff07 	bl	8006c4a <SPI_WaitFlagStateUntilTimeout>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e46:	f043 0220 	orr.w	r2, r3, #32
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e014      	b.n	8006e7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff ff5d 	bl	8006d1e <SPI_WaitFifoStateUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d007      	beq.n	8006e7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e6e:	f043 0220 	orr.w	r2, r3, #32
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e000      	b.n	8006e7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e01d      	b.n	8006ed2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d106      	bne.n	8006eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f815 	bl	8006eda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	f000 f986 	bl	80071d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
	...

08006ef0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0201 	orr.w	r2, r2, #1
 8006f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <HAL_TIM_Base_Start_IT+0x50>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b06      	cmp	r3, #6
 8006f18:	d00b      	beq.n	8006f32 <HAL_TIM_Base_Start_IT+0x42>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f20:	d007      	beq.n	8006f32 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0201 	orr.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	00010007 	.word	0x00010007

08006f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d122      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d11b      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0202 	mvn.w	r2, #2
 8006f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f905 	bl	8007196 <HAL_TIM_IC_CaptureCallback>
 8006f8c:	e005      	b.n	8006f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f8f7 	bl	8007182 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f908 	bl	80071aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 0304 	and.w	r3, r3, #4
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d122      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d11b      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0204 	mvn.w	r2, #4
 8006fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f8db 	bl	8007196 <HAL_TIM_IC_CaptureCallback>
 8006fe0:	e005      	b.n	8006fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f8cd 	bl	8007182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f8de 	bl	80071aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b08      	cmp	r3, #8
 8007000:	d122      	bne.n	8007048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b08      	cmp	r3, #8
 800700e:	d11b      	bne.n	8007048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f06f 0208 	mvn.w	r2, #8
 8007018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2204      	movs	r2, #4
 800701e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f8b1 	bl	8007196 <HAL_TIM_IC_CaptureCallback>
 8007034:	e005      	b.n	8007042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f8a3 	bl	8007182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f8b4 	bl	80071aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f003 0310 	and.w	r3, r3, #16
 8007052:	2b10      	cmp	r3, #16
 8007054:	d122      	bne.n	800709c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f003 0310 	and.w	r3, r3, #16
 8007060:	2b10      	cmp	r3, #16
 8007062:	d11b      	bne.n	800709c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0210 	mvn.w	r2, #16
 800706c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2208      	movs	r2, #8
 8007072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f887 	bl	8007196 <HAL_TIM_IC_CaptureCallback>
 8007088:	e005      	b.n	8007096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f879 	bl	8007182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f88a 	bl	80071aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d10e      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d107      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f06f 0201 	mvn.w	r2, #1
 80070c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fb fe98 	bl	8002df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d2:	2b80      	cmp	r3, #128	; 0x80
 80070d4:	d10e      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e0:	2b80      	cmp	r3, #128	; 0x80
 80070e2:	d107      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f8de 	bl	80072b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007102:	d10e      	bne.n	8007122 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710e:	2b80      	cmp	r3, #128	; 0x80
 8007110:	d107      	bne.n	8007122 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800711a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f8d1 	bl	80072c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d10e      	bne.n	800714e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d107      	bne.n	800714e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f838 	bl	80071be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f003 0320 	and.w	r3, r3, #32
 8007158:	2b20      	cmp	r3, #32
 800715a:	d10e      	bne.n	800717a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b20      	cmp	r3, #32
 8007168:	d107      	bne.n	800717a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f06f 0220 	mvn.w	r2, #32
 8007172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f891 	bl	800729c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800717a:	bf00      	nop
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
	...

080071d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a2a      	ldr	r2, [pc, #168]	; (8007290 <TIM_Base_SetConfig+0xbc>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d003      	beq.n	80071f4 <TIM_Base_SetConfig+0x20>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f2:	d108      	bne.n	8007206 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a21      	ldr	r2, [pc, #132]	; (8007290 <TIM_Base_SetConfig+0xbc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00b      	beq.n	8007226 <TIM_Base_SetConfig+0x52>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007214:	d007      	beq.n	8007226 <TIM_Base_SetConfig+0x52>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a1e      	ldr	r2, [pc, #120]	; (8007294 <TIM_Base_SetConfig+0xc0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d003      	beq.n	8007226 <TIM_Base_SetConfig+0x52>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a1d      	ldr	r2, [pc, #116]	; (8007298 <TIM_Base_SetConfig+0xc4>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d108      	bne.n	8007238 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800722c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4313      	orrs	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a0c      	ldr	r2, [pc, #48]	; (8007290 <TIM_Base_SetConfig+0xbc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d007      	beq.n	8007274 <TIM_Base_SetConfig+0xa0>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a0b      	ldr	r2, [pc, #44]	; (8007294 <TIM_Base_SetConfig+0xc0>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d003      	beq.n	8007274 <TIM_Base_SetConfig+0xa0>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a0a      	ldr	r2, [pc, #40]	; (8007298 <TIM_Base_SetConfig+0xc4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d103      	bne.n	800727c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	691a      	ldr	r2, [r3, #16]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	615a      	str	r2, [r3, #20]
}
 8007282:	bf00      	nop
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	40012c00 	.word	0x40012c00
 8007294:	40014000 	.word	0x40014000
 8007298:	40014400 	.word	0x40014400

0800729c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e040      	b.n	800736c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fb fe7a 	bl	8002ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2224      	movs	r2, #36	; 0x24
 8007304:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0201 	bic.w	r2, r2, #1
 8007314:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f82c 	bl	8007374 <UART_SetConfig>
 800731c:	4603      	mov	r3, r0
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e022      	b.n	800736c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fb34 	bl	800799c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007342:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007352:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fbbb 	bl	8007ae0 <UART_CheckIdleState>
 800736a:	4603      	mov	r3, r0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007374:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007378:	b08a      	sub	sp, #40	; 0x28
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800737e:	2300      	movs	r3, #0
 8007380:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007386:	2300      	movs	r3, #0
 8007388:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	431a      	orrs	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	4313      	orrs	r3, r2
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	4bbc      	ldr	r3, [pc, #752]	; (800769c <UART_SetConfig+0x328>)
 80073aa:	4013      	ands	r3, r2
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073b2:	430b      	orrs	r3, r1
 80073b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4ab2      	ldr	r2, [pc, #712]	; (80076a0 <UART_SetConfig+0x32c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d004      	beq.n	80073e6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e2:	4313      	orrs	r3, r2
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f6:	430a      	orrs	r2, r1
 80073f8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4aa9      	ldr	r2, [pc, #676]	; (80076a4 <UART_SetConfig+0x330>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d126      	bne.n	8007452 <UART_SetConfig+0xde>
 8007404:	4ba8      	ldr	r3, [pc, #672]	; (80076a8 <UART_SetConfig+0x334>)
 8007406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	2b03      	cmp	r3, #3
 8007410:	d81a      	bhi.n	8007448 <UART_SetConfig+0xd4>
 8007412:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <UART_SetConfig+0xa4>)
 8007414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007418:	08007429 	.word	0x08007429
 800741c:	08007439 	.word	0x08007439
 8007420:	08007431 	.word	0x08007431
 8007424:	08007441 	.word	0x08007441
 8007428:	2301      	movs	r3, #1
 800742a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800742e:	e0ab      	b.n	8007588 <UART_SetConfig+0x214>
 8007430:	2302      	movs	r3, #2
 8007432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007436:	e0a7      	b.n	8007588 <UART_SetConfig+0x214>
 8007438:	2304      	movs	r3, #4
 800743a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800743e:	e0a3      	b.n	8007588 <UART_SetConfig+0x214>
 8007440:	2308      	movs	r3, #8
 8007442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007446:	e09f      	b.n	8007588 <UART_SetConfig+0x214>
 8007448:	2310      	movs	r3, #16
 800744a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800744e:	bf00      	nop
 8007450:	e09a      	b.n	8007588 <UART_SetConfig+0x214>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a95      	ldr	r2, [pc, #596]	; (80076ac <UART_SetConfig+0x338>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d138      	bne.n	80074ce <UART_SetConfig+0x15a>
 800745c:	4b92      	ldr	r3, [pc, #584]	; (80076a8 <UART_SetConfig+0x334>)
 800745e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007462:	f003 030c 	and.w	r3, r3, #12
 8007466:	2b0c      	cmp	r3, #12
 8007468:	d82c      	bhi.n	80074c4 <UART_SetConfig+0x150>
 800746a:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <UART_SetConfig+0xfc>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	080074a5 	.word	0x080074a5
 8007474:	080074c5 	.word	0x080074c5
 8007478:	080074c5 	.word	0x080074c5
 800747c:	080074c5 	.word	0x080074c5
 8007480:	080074b5 	.word	0x080074b5
 8007484:	080074c5 	.word	0x080074c5
 8007488:	080074c5 	.word	0x080074c5
 800748c:	080074c5 	.word	0x080074c5
 8007490:	080074ad 	.word	0x080074ad
 8007494:	080074c5 	.word	0x080074c5
 8007498:	080074c5 	.word	0x080074c5
 800749c:	080074c5 	.word	0x080074c5
 80074a0:	080074bd 	.word	0x080074bd
 80074a4:	2300      	movs	r3, #0
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074aa:	e06d      	b.n	8007588 <UART_SetConfig+0x214>
 80074ac:	2302      	movs	r3, #2
 80074ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b2:	e069      	b.n	8007588 <UART_SetConfig+0x214>
 80074b4:	2304      	movs	r3, #4
 80074b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ba:	e065      	b.n	8007588 <UART_SetConfig+0x214>
 80074bc:	2308      	movs	r3, #8
 80074be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c2:	e061      	b.n	8007588 <UART_SetConfig+0x214>
 80074c4:	2310      	movs	r3, #16
 80074c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ca:	bf00      	nop
 80074cc:	e05c      	b.n	8007588 <UART_SetConfig+0x214>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a77      	ldr	r2, [pc, #476]	; (80076b0 <UART_SetConfig+0x33c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d125      	bne.n	8007524 <UART_SetConfig+0x1b0>
 80074d8:	4b73      	ldr	r3, [pc, #460]	; (80076a8 <UART_SetConfig+0x334>)
 80074da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074e2:	2b10      	cmp	r3, #16
 80074e4:	d011      	beq.n	800750a <UART_SetConfig+0x196>
 80074e6:	2b10      	cmp	r3, #16
 80074e8:	d802      	bhi.n	80074f0 <UART_SetConfig+0x17c>
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d005      	beq.n	80074fa <UART_SetConfig+0x186>
 80074ee:	e014      	b.n	800751a <UART_SetConfig+0x1a6>
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	d006      	beq.n	8007502 <UART_SetConfig+0x18e>
 80074f4:	2b30      	cmp	r3, #48	; 0x30
 80074f6:	d00c      	beq.n	8007512 <UART_SetConfig+0x19e>
 80074f8:	e00f      	b.n	800751a <UART_SetConfig+0x1a6>
 80074fa:	2300      	movs	r3, #0
 80074fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007500:	e042      	b.n	8007588 <UART_SetConfig+0x214>
 8007502:	2302      	movs	r3, #2
 8007504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007508:	e03e      	b.n	8007588 <UART_SetConfig+0x214>
 800750a:	2304      	movs	r3, #4
 800750c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007510:	e03a      	b.n	8007588 <UART_SetConfig+0x214>
 8007512:	2308      	movs	r3, #8
 8007514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007518:	e036      	b.n	8007588 <UART_SetConfig+0x214>
 800751a:	2310      	movs	r3, #16
 800751c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007520:	bf00      	nop
 8007522:	e031      	b.n	8007588 <UART_SetConfig+0x214>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a5d      	ldr	r2, [pc, #372]	; (80076a0 <UART_SetConfig+0x32c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d129      	bne.n	8007582 <UART_SetConfig+0x20e>
 800752e:	4b5e      	ldr	r3, [pc, #376]	; (80076a8 <UART_SetConfig+0x334>)
 8007530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800753c:	d014      	beq.n	8007568 <UART_SetConfig+0x1f4>
 800753e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007542:	d802      	bhi.n	800754a <UART_SetConfig+0x1d6>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <UART_SetConfig+0x1e4>
 8007548:	e016      	b.n	8007578 <UART_SetConfig+0x204>
 800754a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800754e:	d007      	beq.n	8007560 <UART_SetConfig+0x1ec>
 8007550:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007554:	d00c      	beq.n	8007570 <UART_SetConfig+0x1fc>
 8007556:	e00f      	b.n	8007578 <UART_SetConfig+0x204>
 8007558:	2300      	movs	r3, #0
 800755a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800755e:	e013      	b.n	8007588 <UART_SetConfig+0x214>
 8007560:	2302      	movs	r3, #2
 8007562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007566:	e00f      	b.n	8007588 <UART_SetConfig+0x214>
 8007568:	2304      	movs	r3, #4
 800756a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756e:	e00b      	b.n	8007588 <UART_SetConfig+0x214>
 8007570:	2308      	movs	r3, #8
 8007572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007576:	e007      	b.n	8007588 <UART_SetConfig+0x214>
 8007578:	2310      	movs	r3, #16
 800757a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800757e:	bf00      	nop
 8007580:	e002      	b.n	8007588 <UART_SetConfig+0x214>
 8007582:	2310      	movs	r3, #16
 8007584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a44      	ldr	r2, [pc, #272]	; (80076a0 <UART_SetConfig+0x32c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	f040 80fb 	bne.w	800778a <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007594:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007598:	2b08      	cmp	r3, #8
 800759a:	d824      	bhi.n	80075e6 <UART_SetConfig+0x272>
 800759c:	a201      	add	r2, pc, #4	; (adr r2, 80075a4 <UART_SetConfig+0x230>)
 800759e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a2:	bf00      	nop
 80075a4:	080075c9 	.word	0x080075c9
 80075a8:	080075e7 	.word	0x080075e7
 80075ac:	080075d1 	.word	0x080075d1
 80075b0:	080075e7 	.word	0x080075e7
 80075b4:	080075d7 	.word	0x080075d7
 80075b8:	080075e7 	.word	0x080075e7
 80075bc:	080075e7 	.word	0x080075e7
 80075c0:	080075e7 	.word	0x080075e7
 80075c4:	080075df 	.word	0x080075df
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80075c8:	f7fe fb3a 	bl	8005c40 <HAL_RCC_GetPCLK1Freq>
 80075cc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075ce:	e00d      	b.n	80075ec <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80075d0:	4b38      	ldr	r3, [pc, #224]	; (80076b4 <UART_SetConfig+0x340>)
 80075d2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075d4:	e00a      	b.n	80075ec <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80075d6:	f7fe fa9d 	bl	8005b14 <HAL_RCC_GetSysClockFreq>
 80075da:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075dc:	e006      	b.n	80075ec <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80075de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075e2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075e4:	e002      	b.n	80075ec <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	76fb      	strb	r3, [r7, #27]
        break;
 80075ea:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 81c8 	beq.w	8007984 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	4613      	mov	r3, r2
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	4413      	add	r3, r2
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	429a      	cmp	r2, r3
 8007602:	d305      	bcc.n	8007610 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	429a      	cmp	r2, r3
 800760e:	d902      	bls.n	8007616 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	76fb      	strb	r3, [r7, #27]
 8007614:	e1b6      	b.n	8007984 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8007616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800761a:	2b08      	cmp	r3, #8
 800761c:	f200 80a2 	bhi.w	8007764 <UART_SetConfig+0x3f0>
 8007620:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <UART_SetConfig+0x2b4>)
 8007622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007626:	bf00      	nop
 8007628:	0800764d 	.word	0x0800764d
 800762c:	08007765 	.word	0x08007765
 8007630:	080076b9 	.word	0x080076b9
 8007634:	08007765 	.word	0x08007765
 8007638:	080076ed 	.word	0x080076ed
 800763c:	08007765 	.word	0x08007765
 8007640:	08007765 	.word	0x08007765
 8007644:	08007765 	.word	0x08007765
 8007648:	0800773b 	.word	0x0800773b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800764c:	f7fe faf8 	bl	8005c40 <HAL_RCC_GetPCLK1Freq>
 8007650:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	4619      	mov	r1, r3
 8007656:	f04f 0200 	mov.w	r2, #0
 800765a:	f04f 0300 	mov.w	r3, #0
 800765e:	f04f 0400 	mov.w	r4, #0
 8007662:	0214      	lsls	r4, r2, #8
 8007664:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007668:	020b      	lsls	r3, r1, #8
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	6852      	ldr	r2, [r2, #4]
 800766e:	0852      	lsrs	r2, r2, #1
 8007670:	4611      	mov	r1, r2
 8007672:	f04f 0200 	mov.w	r2, #0
 8007676:	eb13 0b01 	adds.w	fp, r3, r1
 800767a:	eb44 0c02 	adc.w	ip, r4, r2
 800767e:	4658      	mov	r0, fp
 8007680:	4661      	mov	r1, ip
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f04f 0400 	mov.w	r4, #0
 800768a:	461a      	mov	r2, r3
 800768c:	4623      	mov	r3, r4
 800768e:	f7f9 fa15 	bl	8000abc <__aeabi_uldivmod>
 8007692:	4603      	mov	r3, r0
 8007694:	460c      	mov	r4, r1
 8007696:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007698:	e067      	b.n	800776a <UART_SetConfig+0x3f6>
 800769a:	bf00      	nop
 800769c:	efff69f3 	.word	0xefff69f3
 80076a0:	40008000 	.word	0x40008000
 80076a4:	40013800 	.word	0x40013800
 80076a8:	40021000 	.word	0x40021000
 80076ac:	40004400 	.word	0x40004400
 80076b0:	40004800 	.word	0x40004800
 80076b4:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	085b      	lsrs	r3, r3, #1
 80076be:	f04f 0400 	mov.w	r4, #0
 80076c2:	49ae      	ldr	r1, [pc, #696]	; (800797c <UART_SetConfig+0x608>)
 80076c4:	f04f 0200 	mov.w	r2, #0
 80076c8:	eb13 0b01 	adds.w	fp, r3, r1
 80076cc:	eb44 0c02 	adc.w	ip, r4, r2
 80076d0:	4658      	mov	r0, fp
 80076d2:	4661      	mov	r1, ip
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f04f 0400 	mov.w	r4, #0
 80076dc:	461a      	mov	r2, r3
 80076de:	4623      	mov	r3, r4
 80076e0:	f7f9 f9ec 	bl	8000abc <__aeabi_uldivmod>
 80076e4:	4603      	mov	r3, r0
 80076e6:	460c      	mov	r4, r1
 80076e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80076ea:	e03e      	b.n	800776a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80076ec:	f7fe fa12 	bl	8005b14 <HAL_RCC_GetSysClockFreq>
 80076f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	4619      	mov	r1, r3
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	f04f 0400 	mov.w	r4, #0
 8007702:	0214      	lsls	r4, r2, #8
 8007704:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007708:	020b      	lsls	r3, r1, #8
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	6852      	ldr	r2, [r2, #4]
 800770e:	0852      	lsrs	r2, r2, #1
 8007710:	4611      	mov	r1, r2
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	eb13 0b01 	adds.w	fp, r3, r1
 800771a:	eb44 0c02 	adc.w	ip, r4, r2
 800771e:	4658      	mov	r0, fp
 8007720:	4661      	mov	r1, ip
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f04f 0400 	mov.w	r4, #0
 800772a:	461a      	mov	r2, r3
 800772c:	4623      	mov	r3, r4
 800772e:	f7f9 f9c5 	bl	8000abc <__aeabi_uldivmod>
 8007732:	4603      	mov	r3, r0
 8007734:	460c      	mov	r4, r1
 8007736:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007738:	e017      	b.n	800776a <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	085b      	lsrs	r3, r3, #1
 8007740:	f04f 0400 	mov.w	r4, #0
 8007744:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8007748:	f144 0100 	adc.w	r1, r4, #0
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f04f 0400 	mov.w	r4, #0
 8007754:	461a      	mov	r2, r3
 8007756:	4623      	mov	r3, r4
 8007758:	f7f9 f9b0 	bl	8000abc <__aeabi_uldivmod>
 800775c:	4603      	mov	r3, r0
 800775e:	460c      	mov	r4, r1
 8007760:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007762:	e002      	b.n	800776a <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	76fb      	strb	r3, [r7, #27]
            break;
 8007768:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007770:	d308      	bcc.n	8007784 <UART_SetConfig+0x410>
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007778:	d204      	bcs.n	8007784 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	60da      	str	r2, [r3, #12]
 8007782:	e0ff      	b.n	8007984 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	76fb      	strb	r3, [r7, #27]
 8007788:	e0fc      	b.n	8007984 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007792:	f040 8083 	bne.w	800789c <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8007796:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800779a:	2b08      	cmp	r3, #8
 800779c:	d85e      	bhi.n	800785c <UART_SetConfig+0x4e8>
 800779e:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <UART_SetConfig+0x430>)
 80077a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a4:	080077c9 	.word	0x080077c9
 80077a8:	080077e9 	.word	0x080077e9
 80077ac:	08007809 	.word	0x08007809
 80077b0:	0800785d 	.word	0x0800785d
 80077b4:	08007825 	.word	0x08007825
 80077b8:	0800785d 	.word	0x0800785d
 80077bc:	0800785d 	.word	0x0800785d
 80077c0:	0800785d 	.word	0x0800785d
 80077c4:	08007845 	.word	0x08007845
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077c8:	f7fe fa3a 	bl	8005c40 <HAL_RCC_GetPCLK1Freq>
 80077cc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	005a      	lsls	r2, r3, #1
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	085b      	lsrs	r3, r3, #1
 80077d8:	441a      	add	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80077e6:	e03c      	b.n	8007862 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077e8:	f7fe fa40 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 80077ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	005a      	lsls	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	085b      	lsrs	r3, r3, #1
 80077f8:	441a      	add	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007802:	b29b      	uxth	r3, r3
 8007804:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007806:	e02c      	b.n	8007862 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	085b      	lsrs	r3, r3, #1
 800780e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007812:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6852      	ldr	r2, [r2, #4]
 800781a:	fbb3 f3f2 	udiv	r3, r3, r2
 800781e:	b29b      	uxth	r3, r3
 8007820:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007822:	e01e      	b.n	8007862 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007824:	f7fe f976 	bl	8005b14 <HAL_RCC_GetSysClockFreq>
 8007828:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	005a      	lsls	r2, r3, #1
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	085b      	lsrs	r3, r3, #1
 8007834:	441a      	add	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	fbb2 f3f3 	udiv	r3, r2, r3
 800783e:	b29b      	uxth	r3, r3
 8007840:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007842:	e00e      	b.n	8007862 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	085b      	lsrs	r3, r3, #1
 800784a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	fbb2 f3f3 	udiv	r3, r2, r3
 8007856:	b29b      	uxth	r3, r3
 8007858:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800785a:	e002      	b.n	8007862 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	76fb      	strb	r3, [r7, #27]
        break;
 8007860:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	2b0f      	cmp	r3, #15
 8007866:	d916      	bls.n	8007896 <UART_SetConfig+0x522>
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786e:	d212      	bcs.n	8007896 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	b29b      	uxth	r3, r3
 8007874:	f023 030f 	bic.w	r3, r3, #15
 8007878:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	b29b      	uxth	r3, r3
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	b29a      	uxth	r2, r3
 8007886:	89fb      	ldrh	r3, [r7, #14]
 8007888:	4313      	orrs	r3, r2
 800788a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	89fa      	ldrh	r2, [r7, #14]
 8007892:	60da      	str	r2, [r3, #12]
 8007894:	e076      	b.n	8007984 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	76fb      	strb	r3, [r7, #27]
 800789a:	e073      	b.n	8007984 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 800789c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d85c      	bhi.n	800795e <UART_SetConfig+0x5ea>
 80078a4:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <UART_SetConfig+0x538>)
 80078a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078aa:	bf00      	nop
 80078ac:	080078d1 	.word	0x080078d1
 80078b0:	080078ef 	.word	0x080078ef
 80078b4:	0800790d 	.word	0x0800790d
 80078b8:	0800795f 	.word	0x0800795f
 80078bc:	08007929 	.word	0x08007929
 80078c0:	0800795f 	.word	0x0800795f
 80078c4:	0800795f 	.word	0x0800795f
 80078c8:	0800795f 	.word	0x0800795f
 80078cc:	08007947 	.word	0x08007947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078d0:	f7fe f9b6 	bl	8005c40 <HAL_RCC_GetPCLK1Freq>
 80078d4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	085a      	lsrs	r2, r3, #1
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	441a      	add	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80078ec:	e03a      	b.n	8007964 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ee:	f7fe f9bd 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 80078f2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	085a      	lsrs	r2, r3, #1
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	441a      	add	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	fbb2 f3f3 	udiv	r3, r2, r3
 8007906:	b29b      	uxth	r3, r3
 8007908:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800790a:	e02b      	b.n	8007964 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	085b      	lsrs	r3, r3, #1
 8007912:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007916:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6852      	ldr	r2, [r2, #4]
 800791e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007922:	b29b      	uxth	r3, r3
 8007924:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007926:	e01d      	b.n	8007964 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007928:	f7fe f8f4 	bl	8005b14 <HAL_RCC_GetSysClockFreq>
 800792c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	085a      	lsrs	r2, r3, #1
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	441a      	add	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007940:	b29b      	uxth	r3, r3
 8007942:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007944:	e00e      	b.n	8007964 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	085b      	lsrs	r3, r3, #1
 800794c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	fbb2 f3f3 	udiv	r3, r2, r3
 8007958:	b29b      	uxth	r3, r3
 800795a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800795c:	e002      	b.n	8007964 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	76fb      	strb	r3, [r7, #27]
        break;
 8007962:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	2b0f      	cmp	r3, #15
 8007968:	d90a      	bls.n	8007980 <UART_SetConfig+0x60c>
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007970:	d206      	bcs.n	8007980 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	60da      	str	r2, [r3, #12]
 800797a:	e003      	b.n	8007984 <UART_SetConfig+0x610>
 800797c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007990:	7efb      	ldrb	r3, [r7, #27]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3728      	adds	r7, #40	; 0x28
 8007996:	46bd      	mov	sp, r7
 8007998:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800799c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	f003 0308 	and.w	r3, r3, #8
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00a      	beq.n	8007a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01a      	beq.n	8007ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a9a:	d10a      	bne.n	8007ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	605a      	str	r2, [r3, #4]
  }
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007aee:	f7fb fc6d 	bl	80033cc <HAL_GetTick>
 8007af2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0308 	and.w	r3, r3, #8
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	d10e      	bne.n	8007b20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f82a 	bl	8007b6a <UART_WaitOnFlagUntilTimeout>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e020      	b.n	8007b62 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0304 	and.w	r3, r3, #4
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d10e      	bne.n	8007b4c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f814 	bl	8007b6a <UART_WaitOnFlagUntilTimeout>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e00a      	b.n	8007b62 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	603b      	str	r3, [r7, #0]
 8007b76:	4613      	mov	r3, r2
 8007b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b7a:	e05d      	b.n	8007c38 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b82:	d059      	beq.n	8007c38 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b84:	f7fb fc22 	bl	80033cc <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d302      	bcc.n	8007b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d11b      	bne.n	8007bd2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ba8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0201 	bic.w	r2, r2, #1
 8007bb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e042      	b.n	8007c58 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d02b      	beq.n	8007c38 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bee:	d123      	bne.n	8007c38 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bf8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c08:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0201 	bic.w	r2, r2, #1
 8007c18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2220      	movs	r2, #32
 8007c24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e00f      	b.n	8007c58 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	69da      	ldr	r2, [r3, #28]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	4013      	ands	r3, r2
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	bf0c      	ite	eq
 8007c48:	2301      	moveq	r3, #1
 8007c4a:	2300      	movne	r3, #0
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	461a      	mov	r2, r3
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d092      	beq.n	8007b7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c60:	b490      	push	{r4, r7}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c84:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	78db      	ldrb	r3, [r3, #3]
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d819      	bhi.n	8007cc2 <USB_ActivateEndpoint+0x62>
 8007c8e:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <USB_ActivateEndpoint+0x34>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007ca5 	.word	0x08007ca5
 8007c98:	08007cb9 	.word	0x08007cb9
 8007c9c:	08007cc9 	.word	0x08007cc9
 8007ca0:	08007caf 	.word	0x08007caf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007ca4:	89bb      	ldrh	r3, [r7, #12]
 8007ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007caa:	81bb      	strh	r3, [r7, #12]
      break;
 8007cac:	e00d      	b.n	8007cca <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007cae:	89bb      	ldrh	r3, [r7, #12]
 8007cb0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007cb4:	81bb      	strh	r3, [r7, #12]
      break;
 8007cb6:	e008      	b.n	8007cca <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007cb8:	89bb      	ldrh	r3, [r7, #12]
 8007cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cbe:	81bb      	strh	r3, [r7, #12]
      break;
 8007cc0:	e003      	b.n	8007cca <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc6:	e000      	b.n	8007cca <USB_ActivateEndpoint+0x6a>
      break;
 8007cc8:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	441a      	add	r2, r3
 8007cd4:	89bb      	ldrh	r3, [r7, #12]
 8007cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	b21b      	sxth	r3, r3
 8007cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d02:	b21a      	sxth	r2, r3
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	b21b      	sxth	r3, r3
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	b21b      	sxth	r3, r3
 8007d0e:	b29c      	uxth	r4, r3
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	441a      	add	r2, r3
 8007d1a:	4b8a      	ldr	r3, [pc, #552]	; (8007f44 <USB_ActivateEndpoint+0x2e4>)
 8007d1c:	4323      	orrs	r3, r4
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	7b1b      	ldrb	r3, [r3, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 8112 	bne.w	8007f50 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	785b      	ldrb	r3, [r3, #1]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d067      	beq.n	8007e04 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007d34:	687c      	ldr	r4, [r7, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	441c      	add	r4, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	00db      	lsls	r3, r3, #3
 8007d46:	4423      	add	r3, r4
 8007d48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d4c:	461c      	mov	r4, r3
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	88db      	ldrh	r3, [r3, #6]
 8007d52:	085b      	lsrs	r3, r3, #1
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	b29c      	uxth	r4, r3
 8007d6a:	4623      	mov	r3, r4
 8007d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d014      	beq.n	8007d9e <USB_ActivateEndpoint+0x13e>
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8a:	b29c      	uxth	r4, r3
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	441a      	add	r2, r3
 8007d96:	4b6c      	ldr	r3, [pc, #432]	; (8007f48 <USB_ActivateEndpoint+0x2e8>)
 8007d98:	4323      	orrs	r3, r4
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	78db      	ldrb	r3, [r3, #3]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d018      	beq.n	8007dd8 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dbc:	b29c      	uxth	r4, r3
 8007dbe:	f084 0320 	eor.w	r3, r4, #32
 8007dc2:	b29c      	uxth	r4, r3
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	441a      	add	r2, r3
 8007dce:	4b5d      	ldr	r3, [pc, #372]	; (8007f44 <USB_ActivateEndpoint+0x2e4>)
 8007dd0:	4323      	orrs	r3, r4
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	8013      	strh	r3, [r2, #0]
 8007dd6:	e22b      	b.n	8008230 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dee:	b29c      	uxth	r4, r3
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	441a      	add	r2, r3
 8007dfa:	4b52      	ldr	r3, [pc, #328]	; (8007f44 <USB_ActivateEndpoint+0x2e4>)
 8007dfc:	4323      	orrs	r3, r4
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	8013      	strh	r3, [r2, #0]
 8007e02:	e215      	b.n	8008230 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e04:	687c      	ldr	r4, [r7, #4]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	441c      	add	r4, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	00db      	lsls	r3, r3, #3
 8007e16:	4423      	add	r3, r4
 8007e18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e1c:	461c      	mov	r4, r3
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	88db      	ldrh	r3, [r3, #6]
 8007e22:	085b      	lsrs	r3, r3, #1
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007e2c:	687c      	ldr	r4, [r7, #4]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	441c      	add	r4, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4423      	add	r3, r4
 8007e40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e44:	461c      	mov	r4, r3
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10e      	bne.n	8007e6c <USB_ActivateEndpoint+0x20c>
 8007e4e:	8823      	ldrh	r3, [r4, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	8023      	strh	r3, [r4, #0]
 8007e5a:	8823      	ldrh	r3, [r4, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	8023      	strh	r3, [r4, #0]
 8007e6a:	e02d      	b.n	8007ec8 <USB_ActivateEndpoint+0x268>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	2b3e      	cmp	r3, #62	; 0x3e
 8007e72:	d812      	bhi.n	8007e9a <USB_ActivateEndpoint+0x23a>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	085b      	lsrs	r3, r3, #1
 8007e7a:	60bb      	str	r3, [r7, #8]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <USB_ActivateEndpoint+0x22e>
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	60bb      	str	r3, [r7, #8]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	029b      	lsls	r3, r3, #10
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	8023      	strh	r3, [r4, #0]
 8007e98:	e016      	b.n	8007ec8 <USB_ActivateEndpoint+0x268>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	095b      	lsrs	r3, r3, #5
 8007ea0:	60bb      	str	r3, [r7, #8]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f003 031f 	and.w	r3, r3, #31
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d102      	bne.n	8007eb4 <USB_ActivateEndpoint+0x254>
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	60bb      	str	r3, [r7, #8]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	029b      	lsls	r3, r3, #10
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29c      	uxth	r4, r3
 8007ed6:	4623      	mov	r3, r4
 8007ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d014      	beq.n	8007f0a <USB_ActivateEndpoint+0x2aa>
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef6:	b29c      	uxth	r4, r3
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	441a      	add	r2, r3
 8007f02:	4b12      	ldr	r3, [pc, #72]	; (8007f4c <USB_ActivateEndpoint+0x2ec>)
 8007f04:	4323      	orrs	r3, r4
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f20:	b29c      	uxth	r4, r3
 8007f22:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007f26:	b29c      	uxth	r4, r3
 8007f28:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007f2c:	b29c      	uxth	r4, r3
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	441a      	add	r2, r3
 8007f38:	4b02      	ldr	r3, [pc, #8]	; (8007f44 <USB_ActivateEndpoint+0x2e4>)
 8007f3a:	4323      	orrs	r3, r4
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	8013      	strh	r3, [r2, #0]
 8007f40:	e176      	b.n	8008230 <USB_ActivateEndpoint+0x5d0>
 8007f42:	bf00      	nop
 8007f44:	ffff8080 	.word	0xffff8080
 8007f48:	ffff80c0 	.word	0xffff80c0
 8007f4c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f66:	b29c      	uxth	r4, r3
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	441a      	add	r2, r3
 8007f72:	4b96      	ldr	r3, [pc, #600]	; (80081cc <USB_ActivateEndpoint+0x56c>)
 8007f74:	4323      	orrs	r3, r4
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007f7a:	687c      	ldr	r4, [r7, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	441c      	add	r4, r3
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4423      	add	r3, r4
 8007f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f92:	461c      	mov	r4, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	891b      	ldrh	r3, [r3, #8]
 8007f98:	085b      	lsrs	r3, r3, #1
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	005b      	lsls	r3, r3, #1
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	8023      	strh	r3, [r4, #0]
 8007fa2:	687c      	ldr	r4, [r7, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	441c      	add	r4, r3
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4423      	add	r3, r4
 8007fb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fba:	461c      	mov	r4, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	895b      	ldrh	r3, [r3, #10]
 8007fc0:	085b      	lsrs	r3, r3, #1
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	785b      	ldrb	r3, [r3, #1]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f040 8088 	bne.w	80080e4 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	b29c      	uxth	r4, r3
 8007fe2:	4623      	mov	r3, r4
 8007fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d014      	beq.n	8008016 <USB_ActivateEndpoint+0x3b6>
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008002:	b29c      	uxth	r4, r3
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	441a      	add	r2, r3
 800800e:	4b70      	ldr	r3, [pc, #448]	; (80081d0 <USB_ActivateEndpoint+0x570>)
 8008010:	4323      	orrs	r3, r4
 8008012:	b29b      	uxth	r3, r3
 8008014:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	b29c      	uxth	r4, r3
 8008024:	4623      	mov	r3, r4
 8008026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802a:	2b00      	cmp	r3, #0
 800802c:	d014      	beq.n	8008058 <USB_ActivateEndpoint+0x3f8>
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	b29b      	uxth	r3, r3
 800803c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008044:	b29c      	uxth	r4, r3
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	441a      	add	r2, r3
 8008050:	4b60      	ldr	r3, [pc, #384]	; (80081d4 <USB_ActivateEndpoint+0x574>)
 8008052:	4323      	orrs	r3, r4
 8008054:	b29b      	uxth	r3, r3
 8008056:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4413      	add	r3, r2
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	b29b      	uxth	r3, r3
 8008066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800806a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800806e:	b29c      	uxth	r4, r3
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	441a      	add	r2, r3
 800807a:	4b56      	ldr	r3, [pc, #344]	; (80081d4 <USB_ActivateEndpoint+0x574>)
 800807c:	4323      	orrs	r3, r4
 800807e:	b29b      	uxth	r3, r3
 8008080:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	b29b      	uxth	r3, r3
 8008090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008098:	b29c      	uxth	r4, r3
 800809a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800809e:	b29c      	uxth	r4, r3
 80080a0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80080a4:	b29c      	uxth	r4, r3
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	441a      	add	r2, r3
 80080b0:	4b49      	ldr	r3, [pc, #292]	; (80081d8 <USB_ActivateEndpoint+0x578>)
 80080b2:	4323      	orrs	r3, r4
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ce:	b29c      	uxth	r4, r3
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	441a      	add	r2, r3
 80080da:	4b3f      	ldr	r3, [pc, #252]	; (80081d8 <USB_ActivateEndpoint+0x578>)
 80080dc:	4323      	orrs	r3, r4
 80080de:	b29b      	uxth	r3, r3
 80080e0:	8013      	strh	r3, [r2, #0]
 80080e2:	e0a5      	b.n	8008230 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	b29c      	uxth	r4, r3
 80080f2:	4623      	mov	r3, r4
 80080f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d014      	beq.n	8008126 <USB_ActivateEndpoint+0x4c6>
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800810e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008112:	b29c      	uxth	r4, r3
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	441a      	add	r2, r3
 800811e:	4b2c      	ldr	r3, [pc, #176]	; (80081d0 <USB_ActivateEndpoint+0x570>)
 8008120:	4323      	orrs	r3, r4
 8008122:	b29b      	uxth	r3, r3
 8008124:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	b29c      	uxth	r4, r3
 8008134:	4623      	mov	r3, r4
 8008136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d014      	beq.n	8008168 <USB_ActivateEndpoint+0x508>
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	b29b      	uxth	r3, r3
 800814c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008154:	b29c      	uxth	r4, r3
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	441a      	add	r2, r3
 8008160:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <USB_ActivateEndpoint+0x574>)
 8008162:	4323      	orrs	r3, r4
 8008164:	b29b      	uxth	r3, r3
 8008166:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800817a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800817e:	b29c      	uxth	r4, r3
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	441a      	add	r2, r3
 800818a:	4b11      	ldr	r3, [pc, #68]	; (80081d0 <USB_ActivateEndpoint+0x570>)
 800818c:	4323      	orrs	r3, r4
 800818e:	b29b      	uxth	r3, r3
 8008190:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	78db      	ldrb	r3, [r3, #3]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d020      	beq.n	80081dc <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b0:	b29c      	uxth	r4, r3
 80081b2:	f084 0320 	eor.w	r3, r4, #32
 80081b6:	b29c      	uxth	r4, r3
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	441a      	add	r2, r3
 80081c2:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <USB_ActivateEndpoint+0x578>)
 80081c4:	4323      	orrs	r3, r4
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	8013      	strh	r3, [r2, #0]
 80081ca:	e01c      	b.n	8008206 <USB_ActivateEndpoint+0x5a6>
 80081cc:	ffff8180 	.word	0xffff8180
 80081d0:	ffffc080 	.word	0xffffc080
 80081d4:	ffff80c0 	.word	0xffff80c0
 80081d8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f2:	b29c      	uxth	r4, r3
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	441a      	add	r2, r3
 80081fe:	4b0f      	ldr	r3, [pc, #60]	; (800823c <USB_ActivateEndpoint+0x5dc>)
 8008200:	4323      	orrs	r3, r4
 8008202:	b29b      	uxth	r3, r3
 8008204:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800821c:	b29c      	uxth	r4, r3
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	441a      	add	r2, r3
 8008228:	4b04      	ldr	r3, [pc, #16]	; (800823c <USB_ActivateEndpoint+0x5dc>)
 800822a:	4323      	orrs	r3, r4
 800822c:	b29b      	uxth	r3, r3
 800822e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bc90      	pop	{r4, r7}
 800823a:	4770      	bx	lr
 800823c:	ffff8080 	.word	0xffff8080

08008240 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008240:	b590      	push	{r4, r7, lr}
 8008242:	b08d      	sub	sp, #52	; 0x34
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	2b01      	cmp	r3, #1
 8008250:	f040 8160 	bne.w	8008514 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	699a      	ldr	r2, [r3, #24]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	429a      	cmp	r2, r3
 800825e:	d909      	bls.n	8008274 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	699a      	ldr	r2, [r3, #24]
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	1ad2      	subs	r2, r2, r3
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	619a      	str	r2, [r3, #24]
 8008272:	e005      	b.n	8008280 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2200      	movs	r2, #0
 800827e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	7b1b      	ldrb	r3, [r3, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d119      	bne.n	80082bc <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	6959      	ldr	r1, [r3, #20]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	88da      	ldrh	r2, [r3, #6]
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	b29b      	uxth	r3, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fb91 	bl	80089bc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800829a:	687c      	ldr	r4, [r7, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	441c      	add	r4, r3
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	4423      	add	r3, r4
 80082ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082b2:	461c      	mov	r4, r3
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	8023      	strh	r3, [r4, #0]
 80082ba:	e10f      	b.n	80084dc <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	881b      	ldrh	r3, [r3, #0]
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d065      	beq.n	800839e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80082d2:	687c      	ldr	r4, [r7, #4]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d148      	bne.n	800836e <USB_EPStartXfer+0x12e>
 80082dc:	687c      	ldr	r4, [r7, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	441c      	add	r4, r3
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	4423      	add	r3, r4
 80082f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082f4:	461c      	mov	r4, r3
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10e      	bne.n	800831a <USB_EPStartXfer+0xda>
 80082fc:	8823      	ldrh	r3, [r4, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008304:	b29b      	uxth	r3, r3
 8008306:	8023      	strh	r3, [r4, #0]
 8008308:	8823      	ldrh	r3, [r4, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008314:	b29b      	uxth	r3, r3
 8008316:	8023      	strh	r3, [r4, #0]
 8008318:	e03d      	b.n	8008396 <USB_EPStartXfer+0x156>
 800831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831c:	2b3e      	cmp	r3, #62	; 0x3e
 800831e:	d810      	bhi.n	8008342 <USB_EPStartXfer+0x102>
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	085b      	lsrs	r3, r3, #1
 8008324:	627b      	str	r3, [r7, #36]	; 0x24
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <USB_EPStartXfer+0xf6>
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	3301      	adds	r3, #1
 8008334:	627b      	str	r3, [r7, #36]	; 0x24
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	b29b      	uxth	r3, r3
 800833a:	029b      	lsls	r3, r3, #10
 800833c:	b29b      	uxth	r3, r3
 800833e:	8023      	strh	r3, [r4, #0]
 8008340:	e029      	b.n	8008396 <USB_EPStartXfer+0x156>
 8008342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008344:	095b      	lsrs	r3, r3, #5
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	f003 031f 	and.w	r3, r3, #31
 800834e:	2b00      	cmp	r3, #0
 8008350:	d102      	bne.n	8008358 <USB_EPStartXfer+0x118>
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	3b01      	subs	r3, #1
 8008356:	627b      	str	r3, [r7, #36]	; 0x24
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	b29b      	uxth	r3, r3
 800835c:	029b      	lsls	r3, r3, #10
 800835e:	b29b      	uxth	r3, r3
 8008360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008368:	b29b      	uxth	r3, r3
 800836a:	8023      	strh	r3, [r4, #0]
 800836c:	e013      	b.n	8008396 <USB_EPStartXfer+0x156>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	785b      	ldrb	r3, [r3, #1]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d10f      	bne.n	8008396 <USB_EPStartXfer+0x156>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800837c:	b29b      	uxth	r3, r3
 800837e:	441c      	add	r4, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	00db      	lsls	r3, r3, #3
 8008386:	4423      	add	r3, r4
 8008388:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	b29a      	uxth	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	895b      	ldrh	r3, [r3, #10]
 800839a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800839c:	e063      	b.n	8008466 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d148      	bne.n	8008438 <USB_EPStartXfer+0x1f8>
 80083a6:	687c      	ldr	r4, [r7, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	441c      	add	r4, r3
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	4423      	add	r3, r4
 80083ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083be:	461c      	mov	r4, r3
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10e      	bne.n	80083e4 <USB_EPStartXfer+0x1a4>
 80083c6:	8823      	ldrh	r3, [r4, #0]
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	8023      	strh	r3, [r4, #0]
 80083d2:	8823      	ldrh	r3, [r4, #0]
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083de:	b29b      	uxth	r3, r3
 80083e0:	8023      	strh	r3, [r4, #0]
 80083e2:	e03d      	b.n	8008460 <USB_EPStartXfer+0x220>
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	2b3e      	cmp	r3, #62	; 0x3e
 80083e8:	d810      	bhi.n	800840c <USB_EPStartXfer+0x1cc>
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	085b      	lsrs	r3, r3, #1
 80083ee:	623b      	str	r3, [r7, #32]
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <USB_EPStartXfer+0x1c0>
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	3301      	adds	r3, #1
 80083fe:	623b      	str	r3, [r7, #32]
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	b29b      	uxth	r3, r3
 8008404:	029b      	lsls	r3, r3, #10
 8008406:	b29b      	uxth	r3, r3
 8008408:	8023      	strh	r3, [r4, #0]
 800840a:	e029      	b.n	8008460 <USB_EPStartXfer+0x220>
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	623b      	str	r3, [r7, #32]
 8008412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008414:	f003 031f 	and.w	r3, r3, #31
 8008418:	2b00      	cmp	r3, #0
 800841a:	d102      	bne.n	8008422 <USB_EPStartXfer+0x1e2>
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	3b01      	subs	r3, #1
 8008420:	623b      	str	r3, [r7, #32]
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	b29b      	uxth	r3, r3
 8008426:	029b      	lsls	r3, r3, #10
 8008428:	b29b      	uxth	r3, r3
 800842a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800842e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008432:	b29b      	uxth	r3, r3
 8008434:	8023      	strh	r3, [r4, #0]
 8008436:	e013      	b.n	8008460 <USB_EPStartXfer+0x220>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	785b      	ldrb	r3, [r3, #1]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d10f      	bne.n	8008460 <USB_EPStartXfer+0x220>
 8008440:	687c      	ldr	r4, [r7, #4]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008448:	b29b      	uxth	r3, r3
 800844a:	441c      	add	r4, r3
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	00db      	lsls	r3, r3, #3
 8008452:	4423      	add	r3, r4
 8008454:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008458:	461c      	mov	r4, r3
 800845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845c:	b29b      	uxth	r3, r3
 800845e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	891b      	ldrh	r3, [r3, #8]
 8008464:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	6959      	ldr	r1, [r3, #20]
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	b29b      	uxth	r3, r3
 800846e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 faa3 	bl	80089bc <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	785b      	ldrb	r3, [r3, #1]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d115      	bne.n	80084aa <USB_EPStartXfer+0x26a>
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	b29b      	uxth	r3, r3
 800848c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008494:	b29c      	uxth	r4, r3
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	441a      	add	r2, r3
 80084a0:	4b9a      	ldr	r3, [pc, #616]	; (800870c <USB_EPStartXfer+0x4cc>)
 80084a2:	4323      	orrs	r3, r4
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	8013      	strh	r3, [r2, #0]
 80084a8:	e018      	b.n	80084dc <USB_EPStartXfer+0x29c>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d114      	bne.n	80084dc <USB_EPStartXfer+0x29c>
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c8:	b29c      	uxth	r4, r3
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	441a      	add	r2, r3
 80084d4:	4b8e      	ldr	r3, [pc, #568]	; (8008710 <USB_EPStartXfer+0x4d0>)
 80084d6:	4323      	orrs	r3, r4
 80084d8:	b29b      	uxth	r3, r3
 80084da:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084f2:	b29c      	uxth	r4, r3
 80084f4:	f084 0310 	eor.w	r3, r4, #16
 80084f8:	b29c      	uxth	r4, r3
 80084fa:	f084 0320 	eor.w	r3, r4, #32
 80084fe:	b29c      	uxth	r4, r3
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	441a      	add	r2, r3
 800850a:	4b82      	ldr	r3, [pc, #520]	; (8008714 <USB_EPStartXfer+0x4d4>)
 800850c:	4323      	orrs	r3, r4
 800850e:	b29b      	uxth	r3, r3
 8008510:	8013      	strh	r3, [r2, #0]
 8008512:	e146      	b.n	80087a2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	699a      	ldr	r2, [r3, #24]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	429a      	cmp	r2, r3
 800851e:	d909      	bls.n	8008534 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	699a      	ldr	r2, [r3, #24]
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	1ad2      	subs	r2, r2, r3
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	619a      	str	r2, [r3, #24]
 8008532:	e005      	b.n	8008540 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2200      	movs	r2, #0
 800853e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	7b1b      	ldrb	r3, [r3, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d148      	bne.n	80085da <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008548:	687c      	ldr	r4, [r7, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008550:	b29b      	uxth	r3, r3
 8008552:	441c      	add	r4, r3
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	4423      	add	r3, r4
 800855c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008560:	461c      	mov	r4, r3
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10e      	bne.n	8008586 <USB_EPStartXfer+0x346>
 8008568:	8823      	ldrh	r3, [r4, #0]
 800856a:	b29b      	uxth	r3, r3
 800856c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008570:	b29b      	uxth	r3, r3
 8008572:	8023      	strh	r3, [r4, #0]
 8008574:	8823      	ldrh	r3, [r4, #0]
 8008576:	b29b      	uxth	r3, r3
 8008578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800857c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008580:	b29b      	uxth	r3, r3
 8008582:	8023      	strh	r3, [r4, #0]
 8008584:	e0f2      	b.n	800876c <USB_EPStartXfer+0x52c>
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	2b3e      	cmp	r3, #62	; 0x3e
 800858a:	d810      	bhi.n	80085ae <USB_EPStartXfer+0x36e>
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	085b      	lsrs	r3, r3, #1
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <USB_EPStartXfer+0x362>
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	3301      	adds	r3, #1
 80085a0:	61fb      	str	r3, [r7, #28]
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	029b      	lsls	r3, r3, #10
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	8023      	strh	r3, [r4, #0]
 80085ac:	e0de      	b.n	800876c <USB_EPStartXfer+0x52c>
 80085ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b0:	095b      	lsrs	r3, r3, #5
 80085b2:	61fb      	str	r3, [r7, #28]
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	f003 031f 	and.w	r3, r3, #31
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d102      	bne.n	80085c4 <USB_EPStartXfer+0x384>
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	61fb      	str	r3, [r7, #28]
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	029b      	lsls	r3, r3, #10
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	8023      	strh	r3, [r4, #0]
 80085d8:	e0c8      	b.n	800876c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d148      	bne.n	8008674 <USB_EPStartXfer+0x434>
 80085e2:	687c      	ldr	r4, [r7, #4]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	441c      	add	r4, r3
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	00db      	lsls	r3, r3, #3
 80085f4:	4423      	add	r3, r4
 80085f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085fa:	461c      	mov	r4, r3
 80085fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10e      	bne.n	8008620 <USB_EPStartXfer+0x3e0>
 8008602:	8823      	ldrh	r3, [r4, #0]
 8008604:	b29b      	uxth	r3, r3
 8008606:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800860a:	b29b      	uxth	r3, r3
 800860c:	8023      	strh	r3, [r4, #0]
 800860e:	8823      	ldrh	r3, [r4, #0]
 8008610:	b29b      	uxth	r3, r3
 8008612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800861a:	b29b      	uxth	r3, r3
 800861c:	8023      	strh	r3, [r4, #0]
 800861e:	e03d      	b.n	800869c <USB_EPStartXfer+0x45c>
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	2b3e      	cmp	r3, #62	; 0x3e
 8008624:	d810      	bhi.n	8008648 <USB_EPStartXfer+0x408>
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	085b      	lsrs	r3, r3, #1
 800862a:	61bb      	str	r3, [r7, #24]
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <USB_EPStartXfer+0x3fc>
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	3301      	adds	r3, #1
 800863a:	61bb      	str	r3, [r7, #24]
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	b29b      	uxth	r3, r3
 8008640:	029b      	lsls	r3, r3, #10
 8008642:	b29b      	uxth	r3, r3
 8008644:	8023      	strh	r3, [r4, #0]
 8008646:	e029      	b.n	800869c <USB_EPStartXfer+0x45c>
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	61bb      	str	r3, [r7, #24]
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	f003 031f 	and.w	r3, r3, #31
 8008654:	2b00      	cmp	r3, #0
 8008656:	d102      	bne.n	800865e <USB_EPStartXfer+0x41e>
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	3b01      	subs	r3, #1
 800865c:	61bb      	str	r3, [r7, #24]
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	b29b      	uxth	r3, r3
 8008662:	029b      	lsls	r3, r3, #10
 8008664:	b29b      	uxth	r3, r3
 8008666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800866a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800866e:	b29b      	uxth	r3, r3
 8008670:	8023      	strh	r3, [r4, #0]
 8008672:	e013      	b.n	800869c <USB_EPStartXfer+0x45c>
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	785b      	ldrb	r3, [r3, #1]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d10f      	bne.n	800869c <USB_EPStartXfer+0x45c>
 800867c:	687c      	ldr	r4, [r7, #4]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008684:	b29b      	uxth	r3, r3
 8008686:	441c      	add	r4, r3
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	4423      	add	r3, r4
 8008690:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008694:	461c      	mov	r4, r3
 8008696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008698:	b29b      	uxth	r3, r3
 800869a:	8023      	strh	r3, [r4, #0]
 800869c:	687c      	ldr	r4, [r7, #4]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	785b      	ldrb	r3, [r3, #1]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d14e      	bne.n	8008744 <USB_EPStartXfer+0x504>
 80086a6:	687c      	ldr	r4, [r7, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	441c      	add	r4, r3
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	4423      	add	r3, r4
 80086ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086be:	461c      	mov	r4, r3
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10e      	bne.n	80086e4 <USB_EPStartXfer+0x4a4>
 80086c6:	8823      	ldrh	r3, [r4, #0]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	8023      	strh	r3, [r4, #0]
 80086d2:	8823      	ldrh	r3, [r4, #0]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086de:	b29b      	uxth	r3, r3
 80086e0:	8023      	strh	r3, [r4, #0]
 80086e2:	e043      	b.n	800876c <USB_EPStartXfer+0x52c>
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	2b3e      	cmp	r3, #62	; 0x3e
 80086e8:	d816      	bhi.n	8008718 <USB_EPStartXfer+0x4d8>
 80086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ec:	085b      	lsrs	r3, r3, #1
 80086ee:	617b      	str	r3, [r7, #20]
 80086f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <USB_EPStartXfer+0x4c0>
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	3301      	adds	r3, #1
 80086fe:	617b      	str	r3, [r7, #20]
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	b29b      	uxth	r3, r3
 8008704:	029b      	lsls	r3, r3, #10
 8008706:	b29b      	uxth	r3, r3
 8008708:	8023      	strh	r3, [r4, #0]
 800870a:	e02f      	b.n	800876c <USB_EPStartXfer+0x52c>
 800870c:	ffff80c0 	.word	0xffff80c0
 8008710:	ffffc080 	.word	0xffffc080
 8008714:	ffff8080 	.word	0xffff8080
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	617b      	str	r3, [r7, #20]
 800871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	2b00      	cmp	r3, #0
 8008726:	d102      	bne.n	800872e <USB_EPStartXfer+0x4ee>
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	3b01      	subs	r3, #1
 800872c:	617b      	str	r3, [r7, #20]
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	b29b      	uxth	r3, r3
 8008732:	029b      	lsls	r3, r3, #10
 8008734:	b29b      	uxth	r3, r3
 8008736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800873a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800873e:	b29b      	uxth	r3, r3
 8008740:	8023      	strh	r3, [r4, #0]
 8008742:	e013      	b.n	800876c <USB_EPStartXfer+0x52c>
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d10f      	bne.n	800876c <USB_EPStartXfer+0x52c>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008752:	b29b      	uxth	r3, r3
 8008754:	441c      	add	r4, r3
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	4423      	add	r3, r4
 800875e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008762:	613b      	str	r3, [r7, #16]
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	b29a      	uxth	r2, r3
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	b29b      	uxth	r3, r3
 800877a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800877e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008782:	b29c      	uxth	r4, r3
 8008784:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008788:	b29c      	uxth	r4, r3
 800878a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800878e:	b29c      	uxth	r4, r3
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	441a      	add	r2, r3
 800879a:	4b04      	ldr	r3, [pc, #16]	; (80087ac <USB_EPStartXfer+0x56c>)
 800879c:	4323      	orrs	r3, r4
 800879e:	b29b      	uxth	r3, r3
 80087a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3734      	adds	r7, #52	; 0x34
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd90      	pop	{r4, r7, pc}
 80087ac:	ffff8080 	.word	0xffff8080

080087b0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087b0:	b490      	push	{r4, r7}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d018      	beq.n	80087f4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087d8:	b29c      	uxth	r4, r3
 80087da:	f084 0310 	eor.w	r3, r4, #16
 80087de:	b29c      	uxth	r4, r3
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	441a      	add	r2, r3
 80087ea:	4b11      	ldr	r3, [pc, #68]	; (8008830 <USB_EPSetStall+0x80>)
 80087ec:	4323      	orrs	r3, r4
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	8013      	strh	r3, [r2, #0]
 80087f2:	e017      	b.n	8008824 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	b29b      	uxth	r3, r3
 8008802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880a:	b29c      	uxth	r4, r3
 800880c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008810:	b29c      	uxth	r4, r3
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	441a      	add	r2, r3
 800881c:	4b04      	ldr	r3, [pc, #16]	; (8008830 <USB_EPSetStall+0x80>)
 800881e:	4323      	orrs	r3, r4
 8008820:	b29b      	uxth	r3, r3
 8008822:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bc90      	pop	{r4, r7}
 800882e:	4770      	bx	lr
 8008830:	ffff8080 	.word	0xffff8080

08008834 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008834:	b490      	push	{r4, r7}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	7b1b      	ldrb	r3, [r3, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d17d      	bne.n	8008942 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	785b      	ldrb	r3, [r3, #1]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d03d      	beq.n	80088ca <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	b29c      	uxth	r4, r3
 800885c:	4623      	mov	r3, r4
 800885e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008862:	2b00      	cmp	r3, #0
 8008864:	d014      	beq.n	8008890 <USB_EPClearStall+0x5c>
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	b29b      	uxth	r3, r3
 8008874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887c:	b29c      	uxth	r4, r3
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	441a      	add	r2, r3
 8008888:	4b31      	ldr	r3, [pc, #196]	; (8008950 <USB_EPClearStall+0x11c>)
 800888a:	4323      	orrs	r3, r4
 800888c:	b29b      	uxth	r3, r3
 800888e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	78db      	ldrb	r3, [r3, #3]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d054      	beq.n	8008942 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088ae:	b29c      	uxth	r4, r3
 80088b0:	f084 0320 	eor.w	r3, r4, #32
 80088b4:	b29c      	uxth	r4, r3
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	441a      	add	r2, r3
 80088c0:	4b24      	ldr	r3, [pc, #144]	; (8008954 <USB_EPClearStall+0x120>)
 80088c2:	4323      	orrs	r3, r4
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	8013      	strh	r3, [r2, #0]
 80088c8:	e03b      	b.n	8008942 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29c      	uxth	r4, r3
 80088d8:	4623      	mov	r3, r4
 80088da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d014      	beq.n	800890c <USB_EPClearStall+0xd8>
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f8:	b29c      	uxth	r4, r3
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	441a      	add	r2, r3
 8008904:	4b14      	ldr	r3, [pc, #80]	; (8008958 <USB_EPClearStall+0x124>)
 8008906:	4323      	orrs	r3, r4
 8008908:	b29b      	uxth	r3, r3
 800890a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b29b      	uxth	r3, r3
 800891a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800891e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008922:	b29c      	uxth	r4, r3
 8008924:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008928:	b29c      	uxth	r4, r3
 800892a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800892e:	b29c      	uxth	r4, r3
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	441a      	add	r2, r3
 800893a:	4b06      	ldr	r3, [pc, #24]	; (8008954 <USB_EPClearStall+0x120>)
 800893c:	4323      	orrs	r3, r4
 800893e:	b29b      	uxth	r3, r3
 8008940:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bc90      	pop	{r4, r7}
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	ffff80c0 	.word	0xffff80c0
 8008954:	ffff8080 	.word	0xffff8080
 8008958:	ffffc080 	.word	0xffffc080

0800895c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d103      	bne.n	8008976 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2280      	movs	r2, #128	; 0x80
 8008972:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008992:	b29b      	uxth	r3, r3
 8008994:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008996:	68fb      	ldr	r3, [r7, #12]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3714      	adds	r7, #20
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089bc:	b480      	push	{r7}
 80089be:	b08d      	sub	sp, #52	; 0x34
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	4611      	mov	r1, r2
 80089c8:	461a      	mov	r2, r3
 80089ca:	460b      	mov	r3, r1
 80089cc:	80fb      	strh	r3, [r7, #6]
 80089ce:	4613      	mov	r3, r2
 80089d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80089d2:	88bb      	ldrh	r3, [r7, #4]
 80089d4:	3301      	adds	r3, #1
 80089d6:	085b      	lsrs	r3, r3, #1
 80089d8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089e2:	88fa      	ldrh	r2, [r7, #6]
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089ec:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80089ee:	6a3b      	ldr	r3, [r7, #32]
 80089f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089f2:	e01b      	b.n	8008a2c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	3301      	adds	r3, #1
 80089fe:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	021b      	lsls	r3, r3, #8
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a18:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	3302      	adds	r3, #2
 8008a1e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	3301      	adds	r3, #1
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e0      	bne.n	80089f4 <USB_WritePMA+0x38>
  }
}
 8008a32:	bf00      	nop
 8008a34:	3734      	adds	r7, #52	; 0x34
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b08b      	sub	sp, #44	; 0x2c
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	4611      	mov	r1, r2
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	80fb      	strh	r3, [r7, #6]
 8008a50:	4613      	mov	r3, r2
 8008a52:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008a54:	88bb      	ldrh	r3, [r7, #4]
 8008a56:	085b      	lsrs	r3, r3, #1
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a64:	88fa      	ldrh	r2, [r7, #6]
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a6e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
 8008a74:	e018      	b.n	8008aa8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	3302      	adds	r3, #2
 8008a82:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	0a1b      	lsrs	r3, r3, #8
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e3      	bne.n	8008a76 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008aae:	88bb      	ldrh	r3, [r7, #4]
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d007      	beq.n	8008aca <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	701a      	strb	r2, [r3, #0]
  }
}
 8008aca:	bf00      	nop
 8008acc:	372c      	adds	r7, #44	; 0x2c
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008af8:	2302      	movs	r3, #2
 8008afa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00c      	beq.n	8008b20 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	78fa      	ldrb	r2, [r7, #3]
 8008b10:	4611      	mov	r1, r2
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	4798      	blx	r3
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b082      	sub	sp, #8
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	460b      	mov	r3, r1
 8008b34:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	78fa      	ldrb	r2, [r7, #3]
 8008b40:	4611      	mov	r1, r2
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	4798      	blx	r3

  return USBD_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 fef8 	bl	8009958 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b76:	461a      	mov	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008b84:	f003 031f 	and.w	r3, r3, #31
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d00c      	beq.n	8008ba6 <USBD_LL_SetupStage+0x56>
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d302      	bcc.n	8008b96 <USBD_LL_SetupStage+0x46>
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d010      	beq.n	8008bb6 <USBD_LL_SetupStage+0x66>
 8008b94:	e017      	b.n	8008bc6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f9ce 	bl	8008f40 <USBD_StdDevReq>
      break;
 8008ba4:	e01a      	b.n	8008bdc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa30 	bl	8009014 <USBD_StdItfReq>
      break;
 8008bb4:	e012      	b.n	8008bdc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fa6e 	bl	80090a0 <USBD_StdEPReq>
      break;
 8008bc4:	e00a      	b.n	8008bdc <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008bcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f003 fcdb 	bl	800c590 <USBD_LL_StallEP>
      break;
 8008bda:	bf00      	nop
  }

  return USBD_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b086      	sub	sp, #24
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	607a      	str	r2, [r7, #4]
 8008bf2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008bf4:	7afb      	ldrb	r3, [r7, #11]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d14b      	bne.n	8008c92 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c00:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	d134      	bne.n	8008c76 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d919      	bls.n	8008c4c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	1ad2      	subs	r2, r2, r3
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	68da      	ldr	r2, [r3, #12]
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d203      	bcs.n	8008c3a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	e002      	b.n	8008c40 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	461a      	mov	r2, r3
 8008c42:	6879      	ldr	r1, [r7, #4]
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 ff03 	bl	8009a50 <USBD_CtlContinueRx>
 8008c4a:	e038      	b.n	8008cbe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00a      	beq.n	8008c6e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d105      	bne.n	8008c6e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 ff00 	bl	8009a74 <USBD_CtlSendStatus>
 8008c74:	e023      	b.n	8008cbe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c7c:	2b05      	cmp	r3, #5
 8008c7e:	d11e      	bne.n	8008cbe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008c88:	2100      	movs	r1, #0
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f003 fc80 	bl	800c590 <USBD_LL_StallEP>
 8008c90:	e015      	b.n	8008cbe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00d      	beq.n	8008cba <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d108      	bne.n	8008cba <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	7afa      	ldrb	r2, [r7, #11]
 8008cb2:	4611      	mov	r1, r2
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	4798      	blx	r3
 8008cb8:	e001      	b.n	8008cbe <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e000      	b.n	8008cc0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008cd6:	7afb      	ldrb	r3, [r7, #11]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d17f      	bne.n	8008ddc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	3314      	adds	r3, #20
 8008ce0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d15c      	bne.n	8008da6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	68da      	ldr	r2, [r3, #12]
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d915      	bls.n	8008d24 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	1ad2      	subs	r2, r2, r3
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 fe8b 	bl	8009a2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d16:	2300      	movs	r3, #0
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f003 fd39 	bl	800c794 <USBD_LL_PrepareReceive>
 8008d22:	e04e      	b.n	8008dc2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	6912      	ldr	r2, [r2, #16]
 8008d2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d30:	fb02 f201 	mul.w	r2, r2, r1
 8008d34:	1a9b      	subs	r3, r3, r2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d11c      	bne.n	8008d74 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	689a      	ldr	r2, [r3, #8]
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d316      	bcc.n	8008d74 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d20f      	bcs.n	8008d74 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d54:	2200      	movs	r2, #0
 8008d56:	2100      	movs	r1, #0
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 fe67 	bl	8009a2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d66:	2300      	movs	r3, #0
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f003 fd11 	bl	800c794 <USBD_LL_PrepareReceive>
 8008d72:	e026      	b.n	8008dc2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00a      	beq.n	8008d96 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d105      	bne.n	8008d96 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008d96:	2180      	movs	r1, #128	; 0x80
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f003 fbf9 	bl	800c590 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 fe7b 	bl	8009a9a <USBD_CtlReceiveStatus>
 8008da4:	e00d      	b.n	8008dc2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dac:	2b04      	cmp	r3, #4
 8008dae:	d004      	beq.n	8008dba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d103      	bne.n	8008dc2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008dba:	2180      	movs	r1, #128	; 0x80
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f003 fbe7 	bl	800c590 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d11d      	bne.n	8008e08 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7ff fe82 	bl	8008ad6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008dda:	e015      	b.n	8008e08 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00d      	beq.n	8008e04 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d108      	bne.n	8008e04 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	7afa      	ldrb	r2, [r7, #11]
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	4798      	blx	r3
 8008e02:	e001      	b.n	8008e08 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e04:	2302      	movs	r3, #2
 8008e06:	e000      	b.n	8008e0a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b082      	sub	sp, #8
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e1a:	2340      	movs	r3, #64	; 0x40
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2100      	movs	r1, #0
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f003 fb77 	bl	800c514 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2240      	movs	r2, #64	; 0x40
 8008e32:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e36:	2340      	movs	r3, #64	; 0x40
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2180      	movs	r1, #128	; 0x80
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f003 fb69 	bl	800c514 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2240      	movs	r2, #64	; 0x40
 8008e4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d009      	beq.n	8008e8a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	6852      	ldr	r2, [r2, #4]
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	4611      	mov	r1, r2
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	4798      	blx	r3
  }

  return USBD_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2204      	movs	r2, #4
 8008ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b083      	sub	sp, #12
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eec:	2b04      	cmp	r3, #4
 8008eee:	d105      	bne.n	8008efc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d10b      	bne.n	8008f34 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d005      	beq.n	8008f34 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
	...

08008f40 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f56:	2b20      	cmp	r3, #32
 8008f58:	d004      	beq.n	8008f64 <USBD_StdDevReq+0x24>
 8008f5a:	2b40      	cmp	r3, #64	; 0x40
 8008f5c:	d002      	beq.n	8008f64 <USBD_StdDevReq+0x24>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d008      	beq.n	8008f74 <USBD_StdDevReq+0x34>
 8008f62:	e04c      	b.n	8008ffe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	4798      	blx	r3
      break;
 8008f72:	e049      	b.n	8009008 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	2b09      	cmp	r3, #9
 8008f7a:	d83a      	bhi.n	8008ff2 <USBD_StdDevReq+0xb2>
 8008f7c:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <USBD_StdDevReq+0x44>)
 8008f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f82:	bf00      	nop
 8008f84:	08008fd5 	.word	0x08008fd5
 8008f88:	08008fe9 	.word	0x08008fe9
 8008f8c:	08008ff3 	.word	0x08008ff3
 8008f90:	08008fdf 	.word	0x08008fdf
 8008f94:	08008ff3 	.word	0x08008ff3
 8008f98:	08008fb7 	.word	0x08008fb7
 8008f9c:	08008fad 	.word	0x08008fad
 8008fa0:	08008ff3 	.word	0x08008ff3
 8008fa4:	08008fcb 	.word	0x08008fcb
 8008fa8:	08008fc1 	.word	0x08008fc1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f9d4 	bl	800935c <USBD_GetDescriptor>
          break;
 8008fb4:	e022      	b.n	8008ffc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fb61 	bl	8009680 <USBD_SetAddress>
          break;
 8008fbe:	e01d      	b.n	8008ffc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fb9e 	bl	8009704 <USBD_SetConfig>
          break;
 8008fc8:	e018      	b.n	8008ffc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008fca:	6839      	ldr	r1, [r7, #0]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fc27 	bl	8009820 <USBD_GetConfig>
          break;
 8008fd2:	e013      	b.n	8008ffc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fc56 	bl	8009888 <USBD_GetStatus>
          break;
 8008fdc:	e00e      	b.n	8008ffc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fc84 	bl	80098ee <USBD_SetFeature>
          break;
 8008fe6:	e009      	b.n	8008ffc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fc93 	bl	8009916 <USBD_ClrFeature>
          break;
 8008ff0:	e004      	b.n	8008ffc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fcec 	bl	80099d2 <USBD_CtlError>
          break;
 8008ffa:	bf00      	nop
      }
      break;
 8008ffc:	e004      	b.n	8009008 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fce6 	bl	80099d2 <USBD_CtlError>
      break;
 8009006:	bf00      	nop
  }

  return ret;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop

08009014 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800902a:	2b20      	cmp	r3, #32
 800902c:	d003      	beq.n	8009036 <USBD_StdItfReq+0x22>
 800902e:	2b40      	cmp	r3, #64	; 0x40
 8009030:	d001      	beq.n	8009036 <USBD_StdItfReq+0x22>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d12a      	bne.n	800908c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800903c:	3b01      	subs	r3, #1
 800903e:	2b02      	cmp	r3, #2
 8009040:	d81d      	bhi.n	800907e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	889b      	ldrh	r3, [r3, #4]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b01      	cmp	r3, #1
 800904a:	d813      	bhi.n	8009074 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	4798      	blx	r3
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	88db      	ldrh	r3, [r3, #6]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d110      	bne.n	8009088 <USBD_StdItfReq+0x74>
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10d      	bne.n	8009088 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fd01 	bl	8009a74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009072:	e009      	b.n	8009088 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fcab 	bl	80099d2 <USBD_CtlError>
          break;
 800907c:	e004      	b.n	8009088 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fca6 	bl	80099d2 <USBD_CtlError>
          break;
 8009086:	e000      	b.n	800908a <USBD_StdItfReq+0x76>
          break;
 8009088:	bf00      	nop
      }
      break;
 800908a:	e004      	b.n	8009096 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fc9f 	bl	80099d2 <USBD_CtlError>
      break;
 8009094:	bf00      	nop
  }

  return USBD_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	889b      	ldrh	r3, [r3, #4]
 80090b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090bc:	2b20      	cmp	r3, #32
 80090be:	d004      	beq.n	80090ca <USBD_StdEPReq+0x2a>
 80090c0:	2b40      	cmp	r3, #64	; 0x40
 80090c2:	d002      	beq.n	80090ca <USBD_StdEPReq+0x2a>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d008      	beq.n	80090da <USBD_StdEPReq+0x3a>
 80090c8:	e13d      	b.n	8009346 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	4798      	blx	r3
      break;
 80090d8:	e13a      	b.n	8009350 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090e2:	2b20      	cmp	r3, #32
 80090e4:	d10a      	bne.n	80090fc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	4798      	blx	r3
 80090f4:	4603      	mov	r3, r0
 80090f6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	e12a      	b.n	8009352 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d03e      	beq.n	8009182 <USBD_StdEPReq+0xe2>
 8009104:	2b03      	cmp	r3, #3
 8009106:	d002      	beq.n	800910e <USBD_StdEPReq+0x6e>
 8009108:	2b00      	cmp	r3, #0
 800910a:	d070      	beq.n	80091ee <USBD_StdEPReq+0x14e>
 800910c:	e115      	b.n	800933a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009114:	2b02      	cmp	r3, #2
 8009116:	d002      	beq.n	800911e <USBD_StdEPReq+0x7e>
 8009118:	2b03      	cmp	r3, #3
 800911a:	d015      	beq.n	8009148 <USBD_StdEPReq+0xa8>
 800911c:	e02b      	b.n	8009176 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00c      	beq.n	800913e <USBD_StdEPReq+0x9e>
 8009124:	7bbb      	ldrb	r3, [r7, #14]
 8009126:	2b80      	cmp	r3, #128	; 0x80
 8009128:	d009      	beq.n	800913e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800912a:	7bbb      	ldrb	r3, [r7, #14]
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f003 fa2e 	bl	800c590 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009134:	2180      	movs	r1, #128	; 0x80
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f003 fa2a 	bl	800c590 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800913c:	e020      	b.n	8009180 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fc46 	bl	80099d2 <USBD_CtlError>
              break;
 8009146:	e01b      	b.n	8009180 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	885b      	ldrh	r3, [r3, #2]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10e      	bne.n	800916e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009150:	7bbb      	ldrb	r3, [r7, #14]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00b      	beq.n	800916e <USBD_StdEPReq+0xce>
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	2b80      	cmp	r3, #128	; 0x80
 800915a:	d008      	beq.n	800916e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	88db      	ldrh	r3, [r3, #6]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d104      	bne.n	800916e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f003 fa11 	bl	800c590 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fc80 	bl	8009a74 <USBD_CtlSendStatus>

              break;
 8009174:	e004      	b.n	8009180 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fc2a 	bl	80099d2 <USBD_CtlError>
              break;
 800917e:	bf00      	nop
          }
          break;
 8009180:	e0e0      	b.n	8009344 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009188:	2b02      	cmp	r3, #2
 800918a:	d002      	beq.n	8009192 <USBD_StdEPReq+0xf2>
 800918c:	2b03      	cmp	r3, #3
 800918e:	d015      	beq.n	80091bc <USBD_StdEPReq+0x11c>
 8009190:	e026      	b.n	80091e0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009192:	7bbb      	ldrb	r3, [r7, #14]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00c      	beq.n	80091b2 <USBD_StdEPReq+0x112>
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	2b80      	cmp	r3, #128	; 0x80
 800919c:	d009      	beq.n	80091b2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	4619      	mov	r1, r3
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f003 f9f4 	bl	800c590 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80091a8:	2180      	movs	r1, #128	; 0x80
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f003 f9f0 	bl	800c590 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091b0:	e01c      	b.n	80091ec <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fc0c 	bl	80099d2 <USBD_CtlError>
              break;
 80091ba:	e017      	b.n	80091ec <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	885b      	ldrh	r3, [r3, #2]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d112      	bne.n	80091ea <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
 80091c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d004      	beq.n	80091d8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f003 fa12 	bl	800c5fc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fc4b 	bl	8009a74 <USBD_CtlSendStatus>
              }
              break;
 80091de:	e004      	b.n	80091ea <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fbf5 	bl	80099d2 <USBD_CtlError>
              break;
 80091e8:	e000      	b.n	80091ec <USBD_StdEPReq+0x14c>
              break;
 80091ea:	bf00      	nop
          }
          break;
 80091ec:	e0aa      	b.n	8009344 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d002      	beq.n	80091fe <USBD_StdEPReq+0x15e>
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d032      	beq.n	8009262 <USBD_StdEPReq+0x1c2>
 80091fc:	e097      	b.n	800932e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d007      	beq.n	8009214 <USBD_StdEPReq+0x174>
 8009204:	7bbb      	ldrb	r3, [r7, #14]
 8009206:	2b80      	cmp	r3, #128	; 0x80
 8009208:	d004      	beq.n	8009214 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fbe0 	bl	80099d2 <USBD_CtlError>
                break;
 8009212:	e091      	b.n	8009338 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009218:	2b00      	cmp	r3, #0
 800921a:	da0b      	bge.n	8009234 <USBD_StdEPReq+0x194>
 800921c:	7bbb      	ldrb	r3, [r7, #14]
 800921e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009222:	4613      	mov	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	3310      	adds	r3, #16
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	4413      	add	r3, r2
 8009230:	3304      	adds	r3, #4
 8009232:	e00b      	b.n	800924c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800923a:	4613      	mov	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	4413      	add	r3, r2
 800924a:	3304      	adds	r3, #4
 800924c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	2200      	movs	r2, #0
 8009252:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2202      	movs	r2, #2
 8009258:	4619      	mov	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fbca 	bl	80099f4 <USBD_CtlSendData>
              break;
 8009260:	e06a      	b.n	8009338 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009266:	2b00      	cmp	r3, #0
 8009268:	da11      	bge.n	800928e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	f003 020f 	and.w	r2, r3, #15
 8009270:	6879      	ldr	r1, [r7, #4]
 8009272:	4613      	mov	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	440b      	add	r3, r1
 800927c:	3318      	adds	r3, #24
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d117      	bne.n	80092b4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fba3 	bl	80099d2 <USBD_CtlError>
                  break;
 800928c:	e054      	b.n	8009338 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800928e:	7bbb      	ldrb	r3, [r7, #14]
 8009290:	f003 020f 	and.w	r2, r3, #15
 8009294:	6879      	ldr	r1, [r7, #4]
 8009296:	4613      	mov	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	440b      	add	r3, r1
 80092a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d104      	bne.n	80092b4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fb90 	bl	80099d2 <USBD_CtlError>
                  break;
 80092b2:	e041      	b.n	8009338 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	da0b      	bge.n	80092d4 <USBD_StdEPReq+0x234>
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092c2:	4613      	mov	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	3310      	adds	r3, #16
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	4413      	add	r3, r2
 80092d0:	3304      	adds	r3, #4
 80092d2:	e00b      	b.n	80092ec <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092da:	4613      	mov	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	4413      	add	r3, r2
 80092ea:	3304      	adds	r3, #4
 80092ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <USBD_StdEPReq+0x25a>
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
 80092f6:	2b80      	cmp	r3, #128	; 0x80
 80092f8:	d103      	bne.n	8009302 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2200      	movs	r2, #0
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	e00e      	b.n	8009320 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f003 f9ae 	bl	800c668 <USBD_LL_IsStallEP>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2201      	movs	r2, #1
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	e002      	b.n	8009320 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2200      	movs	r2, #0
 800931e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2202      	movs	r2, #2
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fb64 	bl	80099f4 <USBD_CtlSendData>
              break;
 800932c:	e004      	b.n	8009338 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fb4e 	bl	80099d2 <USBD_CtlError>
              break;
 8009336:	bf00      	nop
          }
          break;
 8009338:	e004      	b.n	8009344 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fb48 	bl	80099d2 <USBD_CtlError>
          break;
 8009342:	bf00      	nop
      }
      break;
 8009344:	e004      	b.n	8009350 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fb42 	bl	80099d2 <USBD_CtlError>
      break;
 800934e:	bf00      	nop
  }

  return ret;
 8009350:	7bfb      	ldrb	r3, [r7, #15]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
	...

0800935c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009366:	2300      	movs	r3, #0
 8009368:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800936a:	2300      	movs	r3, #0
 800936c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	885b      	ldrh	r3, [r3, #2]
 8009376:	0a1b      	lsrs	r3, r3, #8
 8009378:	b29b      	uxth	r3, r3
 800937a:	3b01      	subs	r3, #1
 800937c:	2b0e      	cmp	r3, #14
 800937e:	f200 8152 	bhi.w	8009626 <USBD_GetDescriptor+0x2ca>
 8009382:	a201      	add	r2, pc, #4	; (adr r2, 8009388 <USBD_GetDescriptor+0x2c>)
 8009384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009388:	080093f9 	.word	0x080093f9
 800938c:	08009411 	.word	0x08009411
 8009390:	08009451 	.word	0x08009451
 8009394:	08009627 	.word	0x08009627
 8009398:	08009627 	.word	0x08009627
 800939c:	080095c7 	.word	0x080095c7
 80093a0:	080095f3 	.word	0x080095f3
 80093a4:	08009627 	.word	0x08009627
 80093a8:	08009627 	.word	0x08009627
 80093ac:	08009627 	.word	0x08009627
 80093b0:	08009627 	.word	0x08009627
 80093b4:	08009627 	.word	0x08009627
 80093b8:	08009627 	.word	0x08009627
 80093bc:	08009627 	.word	0x08009627
 80093c0:	080093c5 	.word	0x080093c5
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093ca:	69db      	ldr	r3, [r3, #28]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093d6:	69db      	ldr	r3, [r3, #28]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	7c12      	ldrb	r2, [r2, #16]
 80093dc:	f107 0108 	add.w	r1, r7, #8
 80093e0:	4610      	mov	r0, r2
 80093e2:	4798      	blx	r3
 80093e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093e6:	e126      	b.n	8009636 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 faf1 	bl	80099d2 <USBD_CtlError>
        err++;
 80093f0:	7afb      	ldrb	r3, [r7, #11]
 80093f2:	3301      	adds	r3, #1
 80093f4:	72fb      	strb	r3, [r7, #11]
      break;
 80093f6:	e11e      	b.n	8009636 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	7c12      	ldrb	r2, [r2, #16]
 8009404:	f107 0108 	add.w	r1, r7, #8
 8009408:	4610      	mov	r0, r2
 800940a:	4798      	blx	r3
 800940c:	60f8      	str	r0, [r7, #12]
      break;
 800940e:	e112      	b.n	8009636 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	7c1b      	ldrb	r3, [r3, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10d      	bne.n	8009434 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800941e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009420:	f107 0208 	add.w	r2, r7, #8
 8009424:	4610      	mov	r0, r2
 8009426:	4798      	blx	r3
 8009428:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3301      	adds	r3, #1
 800942e:	2202      	movs	r2, #2
 8009430:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009432:	e100      	b.n	8009636 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943c:	f107 0208 	add.w	r2, r7, #8
 8009440:	4610      	mov	r0, r2
 8009442:	4798      	blx	r3
 8009444:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3301      	adds	r3, #1
 800944a:	2202      	movs	r2, #2
 800944c:	701a      	strb	r2, [r3, #0]
      break;
 800944e:	e0f2      	b.n	8009636 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	885b      	ldrh	r3, [r3, #2]
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b05      	cmp	r3, #5
 8009458:	f200 80ac 	bhi.w	80095b4 <USBD_GetDescriptor+0x258>
 800945c:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <USBD_GetDescriptor+0x108>)
 800945e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009462:	bf00      	nop
 8009464:	0800947d 	.word	0x0800947d
 8009468:	080094b1 	.word	0x080094b1
 800946c:	080094e5 	.word	0x080094e5
 8009470:	08009519 	.word	0x08009519
 8009474:	0800954d 	.word	0x0800954d
 8009478:	08009581 	.word	0x08009581
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00b      	beq.n	80094a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	7c12      	ldrb	r2, [r2, #16]
 8009494:	f107 0108 	add.w	r1, r7, #8
 8009498:	4610      	mov	r0, r2
 800949a:	4798      	blx	r3
 800949c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800949e:	e091      	b.n	80095c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fa95 	bl	80099d2 <USBD_CtlError>
            err++;
 80094a8:	7afb      	ldrb	r3, [r7, #11]
 80094aa:	3301      	adds	r3, #1
 80094ac:	72fb      	strb	r3, [r7, #11]
          break;
 80094ae:	e089      	b.n	80095c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00b      	beq.n	80094d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	7c12      	ldrb	r2, [r2, #16]
 80094c8:	f107 0108 	add.w	r1, r7, #8
 80094cc:	4610      	mov	r0, r2
 80094ce:	4798      	blx	r3
 80094d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094d2:	e077      	b.n	80095c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fa7b 	bl	80099d2 <USBD_CtlError>
            err++;
 80094dc:	7afb      	ldrb	r3, [r7, #11]
 80094de:	3301      	adds	r3, #1
 80094e0:	72fb      	strb	r3, [r7, #11]
          break;
 80094e2:	e06f      	b.n	80095c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00b      	beq.n	8009508 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	7c12      	ldrb	r2, [r2, #16]
 80094fc:	f107 0108 	add.w	r1, r7, #8
 8009500:	4610      	mov	r0, r2
 8009502:	4798      	blx	r3
 8009504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009506:	e05d      	b.n	80095c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fa61 	bl	80099d2 <USBD_CtlError>
            err++;
 8009510:	7afb      	ldrb	r3, [r7, #11]
 8009512:	3301      	adds	r3, #1
 8009514:	72fb      	strb	r3, [r7, #11]
          break;
 8009516:	e055      	b.n	80095c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00b      	beq.n	800953c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	7c12      	ldrb	r2, [r2, #16]
 8009530:	f107 0108 	add.w	r1, r7, #8
 8009534:	4610      	mov	r0, r2
 8009536:	4798      	blx	r3
 8009538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800953a:	e043      	b.n	80095c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fa47 	bl	80099d2 <USBD_CtlError>
            err++;
 8009544:	7afb      	ldrb	r3, [r7, #11]
 8009546:	3301      	adds	r3, #1
 8009548:	72fb      	strb	r3, [r7, #11]
          break;
 800954a:	e03b      	b.n	80095c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00b      	beq.n	8009570 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	7c12      	ldrb	r2, [r2, #16]
 8009564:	f107 0108 	add.w	r1, r7, #8
 8009568:	4610      	mov	r0, r2
 800956a:	4798      	blx	r3
 800956c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800956e:	e029      	b.n	80095c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa2d 	bl	80099d2 <USBD_CtlError>
            err++;
 8009578:	7afb      	ldrb	r3, [r7, #11]
 800957a:	3301      	adds	r3, #1
 800957c:	72fb      	strb	r3, [r7, #11]
          break;
 800957e:	e021      	b.n	80095c4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	7c12      	ldrb	r2, [r2, #16]
 8009598:	f107 0108 	add.w	r1, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095a2:	e00f      	b.n	80095c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fa13 	bl	80099d2 <USBD_CtlError>
            err++;
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	3301      	adds	r3, #1
 80095b0:	72fb      	strb	r3, [r7, #11]
          break;
 80095b2:	e007      	b.n	80095c4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fa0b 	bl	80099d2 <USBD_CtlError>
          err++;
 80095bc:	7afb      	ldrb	r3, [r7, #11]
 80095be:	3301      	adds	r3, #1
 80095c0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80095c2:	e038      	b.n	8009636 <USBD_GetDescriptor+0x2da>
 80095c4:	e037      	b.n	8009636 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	7c1b      	ldrb	r3, [r3, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d109      	bne.n	80095e2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d6:	f107 0208 	add.w	r2, r7, #8
 80095da:	4610      	mov	r0, r2
 80095dc:	4798      	blx	r3
 80095de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095e0:	e029      	b.n	8009636 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f9f4 	bl	80099d2 <USBD_CtlError>
        err++;
 80095ea:	7afb      	ldrb	r3, [r7, #11]
 80095ec:	3301      	adds	r3, #1
 80095ee:	72fb      	strb	r3, [r7, #11]
      break;
 80095f0:	e021      	b.n	8009636 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	7c1b      	ldrb	r3, [r3, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10d      	bne.n	8009616 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009602:	f107 0208 	add.w	r2, r7, #8
 8009606:	4610      	mov	r0, r2
 8009608:	4798      	blx	r3
 800960a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	3301      	adds	r3, #1
 8009610:	2207      	movs	r2, #7
 8009612:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009614:	e00f      	b.n	8009636 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f9da 	bl	80099d2 <USBD_CtlError>
        err++;
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	3301      	adds	r3, #1
 8009622:	72fb      	strb	r3, [r7, #11]
      break;
 8009624:	e007      	b.n	8009636 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f9d2 	bl	80099d2 <USBD_CtlError>
      err++;
 800962e:	7afb      	ldrb	r3, [r7, #11]
 8009630:	3301      	adds	r3, #1
 8009632:	72fb      	strb	r3, [r7, #11]
      break;
 8009634:	bf00      	nop
  }

  if (err != 0U)
 8009636:	7afb      	ldrb	r3, [r7, #11]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d11c      	bne.n	8009676 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800963c:	893b      	ldrh	r3, [r7, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d011      	beq.n	8009666 <USBD_GetDescriptor+0x30a>
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	88db      	ldrh	r3, [r3, #6]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00d      	beq.n	8009666 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	88da      	ldrh	r2, [r3, #6]
 800964e:	893b      	ldrh	r3, [r7, #8]
 8009650:	4293      	cmp	r3, r2
 8009652:	bf28      	it	cs
 8009654:	4613      	movcs	r3, r2
 8009656:	b29b      	uxth	r3, r3
 8009658:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800965a:	893b      	ldrh	r3, [r7, #8]
 800965c:	461a      	mov	r2, r3
 800965e:	68f9      	ldr	r1, [r7, #12]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f9c7 	bl	80099f4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	88db      	ldrh	r3, [r3, #6]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d104      	bne.n	8009678 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fa00 	bl	8009a74 <USBD_CtlSendStatus>
 8009674:	e000      	b.n	8009678 <USBD_GetDescriptor+0x31c>
    return;
 8009676:	bf00      	nop
    }
  }
}
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop

08009680 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	889b      	ldrh	r3, [r3, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d130      	bne.n	80096f4 <USBD_SetAddress+0x74>
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	88db      	ldrh	r3, [r3, #6]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d12c      	bne.n	80096f4 <USBD_SetAddress+0x74>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	885b      	ldrh	r3, [r3, #2]
 800969e:	2b7f      	cmp	r3, #127	; 0x7f
 80096a0:	d828      	bhi.n	80096f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	885b      	ldrh	r3, [r3, #2]
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b4:	2b03      	cmp	r3, #3
 80096b6:	d104      	bne.n	80096c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f989 	bl	80099d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c0:	e01c      	b.n	80096fc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	7bfa      	ldrb	r2, [r7, #15]
 80096c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f002 fff0 	bl	800c6b4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f9cd 	bl	8009a74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80096da:	7bfb      	ldrb	r3, [r7, #15]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d004      	beq.n	80096ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096e8:	e008      	b.n	80096fc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096f2:	e003      	b.n	80096fc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f96b 	bl	80099d2 <USBD_CtlError>
  }
}
 80096fc:	bf00      	nop
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	885b      	ldrh	r3, [r3, #2]
 8009712:	b2da      	uxtb	r2, r3
 8009714:	4b41      	ldr	r3, [pc, #260]	; (800981c <USBD_SetConfig+0x118>)
 8009716:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009718:	4b40      	ldr	r3, [pc, #256]	; (800981c <USBD_SetConfig+0x118>)
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d904      	bls.n	800972a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009720:	6839      	ldr	r1, [r7, #0]
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f955 	bl	80099d2 <USBD_CtlError>
 8009728:	e075      	b.n	8009816 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009730:	2b02      	cmp	r3, #2
 8009732:	d002      	beq.n	800973a <USBD_SetConfig+0x36>
 8009734:	2b03      	cmp	r3, #3
 8009736:	d023      	beq.n	8009780 <USBD_SetConfig+0x7c>
 8009738:	e062      	b.n	8009800 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800973a:	4b38      	ldr	r3, [pc, #224]	; (800981c <USBD_SetConfig+0x118>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d01a      	beq.n	8009778 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009742:	4b36      	ldr	r3, [pc, #216]	; (800981c <USBD_SetConfig+0x118>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2203      	movs	r2, #3
 8009750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009754:	4b31      	ldr	r3, [pc, #196]	; (800981c <USBD_SetConfig+0x118>)
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff f9c6 	bl	8008aec <USBD_SetClassConfig>
 8009760:	4603      	mov	r3, r0
 8009762:	2b02      	cmp	r3, #2
 8009764:	d104      	bne.n	8009770 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f932 	bl	80099d2 <USBD_CtlError>
            return;
 800976e:	e052      	b.n	8009816 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f97f 	bl	8009a74 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009776:	e04e      	b.n	8009816 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f97b 	bl	8009a74 <USBD_CtlSendStatus>
        break;
 800977e:	e04a      	b.n	8009816 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009780:	4b26      	ldr	r3, [pc, #152]	; (800981c <USBD_SetConfig+0x118>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d112      	bne.n	80097ae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009790:	4b22      	ldr	r3, [pc, #136]	; (800981c <USBD_SetConfig+0x118>)
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	461a      	mov	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800979a:	4b20      	ldr	r3, [pc, #128]	; (800981c <USBD_SetConfig+0x118>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7ff f9c2 	bl	8008b2a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f964 	bl	8009a74 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80097ac:	e033      	b.n	8009816 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80097ae:	4b1b      	ldr	r3, [pc, #108]	; (800981c <USBD_SetConfig+0x118>)
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d01d      	beq.n	80097f8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff f9b0 	bl	8008b2a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80097ca:	4b14      	ldr	r3, [pc, #80]	; (800981c <USBD_SetConfig+0x118>)
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80097d4:	4b11      	ldr	r3, [pc, #68]	; (800981c <USBD_SetConfig+0x118>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7ff f986 	bl	8008aec <USBD_SetClassConfig>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d104      	bne.n	80097f0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f8f2 	bl	80099d2 <USBD_CtlError>
            return;
 80097ee:	e012      	b.n	8009816 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f93f 	bl	8009a74 <USBD_CtlSendStatus>
        break;
 80097f6:	e00e      	b.n	8009816 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f93b 	bl	8009a74 <USBD_CtlSendStatus>
        break;
 80097fe:	e00a      	b.n	8009816 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f8e5 	bl	80099d2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009808:	4b04      	ldr	r3, [pc, #16]	; (800981c <USBD_SetConfig+0x118>)
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	4619      	mov	r1, r3
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7ff f98b 	bl	8008b2a <USBD_ClrClassConfig>
        break;
 8009814:	bf00      	nop
    }
  }
}
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	20000150 	.word	0x20000150

08009820 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	88db      	ldrh	r3, [r3, #6]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d004      	beq.n	800983c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f8cc 	bl	80099d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800983a:	e021      	b.n	8009880 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009842:	2b01      	cmp	r3, #1
 8009844:	db17      	blt.n	8009876 <USBD_GetConfig+0x56>
 8009846:	2b02      	cmp	r3, #2
 8009848:	dd02      	ble.n	8009850 <USBD_GetConfig+0x30>
 800984a:	2b03      	cmp	r3, #3
 800984c:	d00b      	beq.n	8009866 <USBD_GetConfig+0x46>
 800984e:	e012      	b.n	8009876 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	3308      	adds	r3, #8
 800985a:	2201      	movs	r2, #1
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f8c8 	bl	80099f4 <USBD_CtlSendData>
        break;
 8009864:	e00c      	b.n	8009880 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3304      	adds	r3, #4
 800986a:	2201      	movs	r2, #1
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f8c0 	bl	80099f4 <USBD_CtlSendData>
        break;
 8009874:	e004      	b.n	8009880 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f8aa 	bl	80099d2 <USBD_CtlError>
        break;
 800987e:	bf00      	nop
}
 8009880:	bf00      	nop
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009898:	3b01      	subs	r3, #1
 800989a:	2b02      	cmp	r3, #2
 800989c:	d81e      	bhi.n	80098dc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	88db      	ldrh	r3, [r3, #6]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d004      	beq.n	80098b0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f892 	bl	80099d2 <USBD_CtlError>
        break;
 80098ae:	e01a      	b.n	80098e6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d005      	beq.n	80098cc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f043 0202 	orr.w	r2, r3, #2
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	330c      	adds	r3, #12
 80098d0:	2202      	movs	r2, #2
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f88d 	bl	80099f4 <USBD_CtlSendData>
      break;
 80098da:	e004      	b.n	80098e6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f877 	bl	80099d2 <USBD_CtlError>
      break;
 80098e4:	bf00      	nop
  }
}
 80098e6:	bf00      	nop
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b082      	sub	sp, #8
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	885b      	ldrh	r3, [r3, #2]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d106      	bne.n	800990e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f8b3 	bl	8009a74 <USBD_CtlSendStatus>
  }
}
 800990e:	bf00      	nop
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009926:	3b01      	subs	r3, #1
 8009928:	2b02      	cmp	r3, #2
 800992a:	d80b      	bhi.n	8009944 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	885b      	ldrh	r3, [r3, #2]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d10c      	bne.n	800994e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f899 	bl	8009a74 <USBD_CtlSendStatus>
      }
      break;
 8009942:	e004      	b.n	800994e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009944:	6839      	ldr	r1, [r7, #0]
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f843 	bl	80099d2 <USBD_CtlError>
      break;
 800994c:	e000      	b.n	8009950 <USBD_ClrFeature+0x3a>
      break;
 800994e:	bf00      	nop
  }
}
 8009950:	bf00      	nop
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	781a      	ldrb	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	785a      	ldrb	r2, [r3, #1]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	3302      	adds	r3, #2
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	b29a      	uxth	r2, r3
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	3303      	adds	r3, #3
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	b29b      	uxth	r3, r3
 8009982:	021b      	lsls	r3, r3, #8
 8009984:	b29b      	uxth	r3, r3
 8009986:	4413      	add	r3, r2
 8009988:	b29a      	uxth	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	3304      	adds	r3, #4
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	b29a      	uxth	r2, r3
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	3305      	adds	r3, #5
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	b29b      	uxth	r3, r3
 800999e:	021b      	lsls	r3, r3, #8
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	4413      	add	r3, r2
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	3306      	adds	r3, #6
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	3307      	adds	r3, #7
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	021b      	lsls	r3, r3, #8
 80099bc:	b29b      	uxth	r3, r3
 80099be:	4413      	add	r3, r2
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	80da      	strh	r2, [r3, #6]

}
 80099c6:	bf00      	nop
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80099dc:	2180      	movs	r1, #128	; 0x80
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f002 fdd6 	bl	800c590 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80099e4:	2100      	movs	r1, #0
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f002 fdd2 	bl	800c590 <USBD_LL_StallEP>
}
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	4613      	mov	r3, r2
 8009a00:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2202      	movs	r2, #2
 8009a06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a0a:	88fa      	ldrh	r2, [r7, #6]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009a10:	88fa      	ldrh	r2, [r7, #6]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f002 fe7f 	bl	800c720 <USBD_LL_Transmit>

  return USBD_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	4613      	mov	r3, r2
 8009a38:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a3a:	88fb      	ldrh	r3, [r7, #6]
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	2100      	movs	r1, #0
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f002 fe6d 	bl	800c720 <USBD_LL_Transmit>

  return USBD_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a5e:	88fb      	ldrh	r3, [r7, #6]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	2100      	movs	r1, #0
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f002 fe95 	bl	800c794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2204      	movs	r2, #4
 8009a80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a84:	2300      	movs	r3, #0
 8009a86:	2200      	movs	r2, #0
 8009a88:	2100      	movs	r1, #0
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f002 fe48 	bl	800c720 <USBD_LL_Transmit>

  return USBD_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b082      	sub	sp, #8
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2205      	movs	r2, #5
 8009aa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009aaa:	2300      	movs	r3, #0
 8009aac:	2200      	movs	r2, #0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f002 fe6f 	bl	800c794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ac8:	f3ef 8305 	mrs	r3, IPSR
 8009acc:	613b      	str	r3, [r7, #16]
  return(result);
 8009ace:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10f      	bne.n	8009af4 <osDelay+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ad8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d105      	bne.n	8009aec <osDelay+0x2c>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ae0:	f3ef 8311 	mrs	r3, BASEPRI
 8009ae4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d007      	beq.n	8009afc <osDelay+0x3c>
 8009aec:	4b0a      	ldr	r3, [pc, #40]	; (8009b18 <osDelay+0x58>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d103      	bne.n	8009afc <osDelay+0x3c>
    stat = osErrorISR;
 8009af4:	f06f 0305 	mvn.w	r3, #5
 8009af8:	617b      	str	r3, [r7, #20]
 8009afa:	e007      	b.n	8009b0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009afc:	2300      	movs	r3, #0
 8009afe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <osDelay+0x4c>
      vTaskDelay(ticks);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 ff62 	bl	800a9d0 <vTaskDelay>
    }
  }

  return (stat);
 8009b0c:	697b      	ldr	r3, [r7, #20]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	20000154 	.word	0x20000154

08009b1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	4a07      	ldr	r2, [pc, #28]	; (8009b48 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	4a06      	ldr	r2, [pc, #24]	; (8009b4c <vApplicationGetIdleTaskMemory+0x30>)
 8009b32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2280      	movs	r2, #128	; 0x80
 8009b38:	601a      	str	r2, [r3, #0]
}
 8009b3a:	bf00      	nop
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	20000158 	.word	0x20000158
 8009b4c:	200001b4 	.word	0x200001b4

08009b50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4a07      	ldr	r2, [pc, #28]	; (8009b7c <vApplicationGetTimerTaskMemory+0x2c>)
 8009b60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	4a06      	ldr	r2, [pc, #24]	; (8009b80 <vApplicationGetTimerTaskMemory+0x30>)
 8009b66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b6e:	601a      	str	r2, [r3, #0]
}
 8009b70:	bf00      	nop
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	200003b4 	.word	0x200003b4
 8009b80:	20000410 	.word	0x20000410

08009b84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f103 0208 	add.w	r2, r3, #8
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f103 0208 	add.w	r2, r3, #8
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f103 0208 	add.w	r2, r3, #8
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bd2:	bf00      	nop
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bde:	b480      	push	{r7}
 8009be0:	b085      	sub	sp, #20
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	689a      	ldr	r2, [r3, #8]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	683a      	ldr	r2, [r7, #0]
 8009c02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	1c5a      	adds	r2, r3, #1
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	601a      	str	r2, [r3, #0]
}
 8009c1a:	bf00      	nop
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c26:	b480      	push	{r7}
 8009c28:	b085      	sub	sp, #20
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3c:	d103      	bne.n	8009c46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	e00c      	b.n	8009c60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3308      	adds	r3, #8
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	e002      	b.n	8009c54 <vListInsert+0x2e>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d2f6      	bcs.n	8009c4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	1c5a      	adds	r2, r3, #1
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	601a      	str	r2, [r3, #0]
}
 8009c8c:	bf00      	nop
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	6892      	ldr	r2, [r2, #8]
 8009cae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	6852      	ldr	r2, [r2, #4]
 8009cb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d103      	bne.n	8009ccc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689a      	ldr	r2, [r3, #8]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	1e5a      	subs	r2, r3, #1
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3714      	adds	r7, #20
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d109      	bne.n	8009d14 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	60bb      	str	r3, [r7, #8]
 8009d12:	e7fe      	b.n	8009d12 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009d14:	f002 f86a 	bl	800bdec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d20:	68f9      	ldr	r1, [r7, #12]
 8009d22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d24:	fb01 f303 	mul.w	r3, r1, r3
 8009d28:	441a      	add	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d44:	3b01      	subs	r3, #1
 8009d46:	68f9      	ldr	r1, [r7, #12]
 8009d48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d4a:	fb01 f303 	mul.w	r3, r1, r3
 8009d4e:	441a      	add	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	22ff      	movs	r2, #255	; 0xff
 8009d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	22ff      	movs	r2, #255	; 0xff
 8009d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d114      	bne.n	8009d94 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d01a      	beq.n	8009da8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3310      	adds	r3, #16
 8009d76:	4618      	mov	r0, r3
 8009d78:	f001 f8de 	bl	800af38 <xTaskRemoveFromEventList>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d012      	beq.n	8009da8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d82:	4b0d      	ldr	r3, [pc, #52]	; (8009db8 <xQueueGenericReset+0xcc>)
 8009d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d88:	601a      	str	r2, [r3, #0]
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	e009      	b.n	8009da8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	3310      	adds	r3, #16
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7ff fef3 	bl	8009b84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3324      	adds	r3, #36	; 0x24
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7ff feee 	bl	8009b84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009da8:	f002 f84e 	bl	800be48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009dac:	2301      	movs	r3, #1
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	e000ed04 	.word	0xe000ed04

08009dbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b08e      	sub	sp, #56	; 0x38
 8009dc0:	af02      	add	r7, sp, #8
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d109      	bne.n	8009de4 <xQueueGenericCreateStatic+0x28>
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009de2:	e7fe      	b.n	8009de2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d109      	bne.n	8009dfe <xQueueGenericCreateStatic+0x42>
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8009dfc:	e7fe      	b.n	8009dfc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d002      	beq.n	8009e0a <xQueueGenericCreateStatic+0x4e>
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <xQueueGenericCreateStatic+0x52>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e000      	b.n	8009e10 <xQueueGenericCreateStatic+0x54>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d109      	bne.n	8009e28 <xQueueGenericCreateStatic+0x6c>
 8009e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	623b      	str	r3, [r7, #32]
 8009e26:	e7fe      	b.n	8009e26 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d102      	bne.n	8009e34 <xQueueGenericCreateStatic+0x78>
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d101      	bne.n	8009e38 <xQueueGenericCreateStatic+0x7c>
 8009e34:	2301      	movs	r3, #1
 8009e36:	e000      	b.n	8009e3a <xQueueGenericCreateStatic+0x7e>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d109      	bne.n	8009e52 <xQueueGenericCreateStatic+0x96>
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	61fb      	str	r3, [r7, #28]
 8009e50:	e7fe      	b.n	8009e50 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e52:	2350      	movs	r3, #80	; 0x50
 8009e54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2b50      	cmp	r3, #80	; 0x50
 8009e5a:	d009      	beq.n	8009e70 <xQueueGenericCreateStatic+0xb4>
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	61bb      	str	r3, [r7, #24]
 8009e6e:	e7fe      	b.n	8009e6e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00d      	beq.n	8009e98 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e84:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	68b9      	ldr	r1, [r7, #8]
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f000 f805 	bl	8009ea2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3730      	adds	r7, #48	; 0x30
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	60f8      	str	r0, [r7, #12]
 8009eaa:	60b9      	str	r1, [r7, #8]
 8009eac:	607a      	str	r2, [r7, #4]
 8009eae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d103      	bne.n	8009ebe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	69ba      	ldr	r2, [r7, #24]
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	e002      	b.n	8009ec4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	69b8      	ldr	r0, [r7, #24]
 8009ed4:	f7ff ff0a 	bl	8009cec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	78fa      	ldrb	r2, [r7, #3]
 8009edc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ee0:	bf00      	nop
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b08e      	sub	sp, #56	; 0x38
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d109      	bne.n	8009f18 <xQueueGenericSend+0x30>
 8009f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f16:	e7fe      	b.n	8009f16 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d103      	bne.n	8009f26 <xQueueGenericSend+0x3e>
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <xQueueGenericSend+0x42>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e000      	b.n	8009f2c <xQueueGenericSend+0x44>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d109      	bne.n	8009f44 <xQueueGenericSend+0x5c>
 8009f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	627b      	str	r3, [r7, #36]	; 0x24
 8009f42:	e7fe      	b.n	8009f42 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d103      	bne.n	8009f52 <xQueueGenericSend+0x6a>
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d101      	bne.n	8009f56 <xQueueGenericSend+0x6e>
 8009f52:	2301      	movs	r3, #1
 8009f54:	e000      	b.n	8009f58 <xQueueGenericSend+0x70>
 8009f56:	2300      	movs	r3, #0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d109      	bne.n	8009f70 <xQueueGenericSend+0x88>
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	623b      	str	r3, [r7, #32]
 8009f6e:	e7fe      	b.n	8009f6e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f70:	f001 f99a 	bl	800b2a8 <xTaskGetSchedulerState>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d102      	bne.n	8009f80 <xQueueGenericSend+0x98>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <xQueueGenericSend+0x9c>
 8009f80:	2301      	movs	r3, #1
 8009f82:	e000      	b.n	8009f86 <xQueueGenericSend+0x9e>
 8009f84:	2300      	movs	r3, #0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d109      	bne.n	8009f9e <xQueueGenericSend+0xb6>
 8009f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	61fb      	str	r3, [r7, #28]
 8009f9c:	e7fe      	b.n	8009f9c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f9e:	f001 ff25 	bl	800bdec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d302      	bcc.n	8009fb4 <xQueueGenericSend+0xcc>
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d129      	bne.n	800a008 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	68b9      	ldr	r1, [r7, #8]
 8009fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fba:	f000 f9ff 	bl	800a3bc <prvCopyDataToQueue>
 8009fbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d010      	beq.n	8009fea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fca:	3324      	adds	r3, #36	; 0x24
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f000 ffb3 	bl	800af38 <xTaskRemoveFromEventList>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d013      	beq.n	800a000 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009fd8:	4b3f      	ldr	r3, [pc, #252]	; (800a0d8 <xQueueGenericSend+0x1f0>)
 8009fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	e00a      	b.n	800a000 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d007      	beq.n	800a000 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ff0:	4b39      	ldr	r3, [pc, #228]	; (800a0d8 <xQueueGenericSend+0x1f0>)
 8009ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff6:	601a      	str	r2, [r3, #0]
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a000:	f001 ff22 	bl	800be48 <vPortExitCritical>
				return pdPASS;
 800a004:	2301      	movs	r3, #1
 800a006:	e063      	b.n	800a0d0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d103      	bne.n	800a016 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a00e:	f001 ff1b 	bl	800be48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a012:	2300      	movs	r3, #0
 800a014:	e05c      	b.n	800a0d0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d106      	bne.n	800a02a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a01c:	f107 0314 	add.w	r3, r7, #20
 800a020:	4618      	mov	r0, r3
 800a022:	f000 ffeb 	bl	800affc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a026:	2301      	movs	r3, #1
 800a028:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a02a:	f001 ff0d 	bl	800be48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a02e:	f000 fd67 	bl	800ab00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a032:	f001 fedb 	bl	800bdec <vPortEnterCritical>
 800a036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a03c:	b25b      	sxtb	r3, r3
 800a03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a042:	d103      	bne.n	800a04c <xQueueGenericSend+0x164>
 800a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a046:	2200      	movs	r2, #0
 800a048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a052:	b25b      	sxtb	r3, r3
 800a054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a058:	d103      	bne.n	800a062 <xQueueGenericSend+0x17a>
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a062:	f001 fef1 	bl	800be48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a066:	1d3a      	adds	r2, r7, #4
 800a068:	f107 0314 	add.w	r3, r7, #20
 800a06c:	4611      	mov	r1, r2
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 ffda 	bl	800b028 <xTaskCheckForTimeOut>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d124      	bne.n	800a0c4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a07a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a07c:	f000 fa96 	bl	800a5ac <prvIsQueueFull>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d018      	beq.n	800a0b8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	3310      	adds	r3, #16
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	4611      	mov	r1, r2
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 ff04 	bl	800ae9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a096:	f000 fa21 	bl	800a4dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a09a:	f000 fd3f 	bl	800ab1c <xTaskResumeAll>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f47f af7c 	bne.w	8009f9e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a0a6:	4b0c      	ldr	r3, [pc, #48]	; (800a0d8 <xQueueGenericSend+0x1f0>)
 800a0a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	e772      	b.n	8009f9e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a0b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0ba:	f000 fa0f 	bl	800a4dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0be:	f000 fd2d 	bl	800ab1c <xTaskResumeAll>
 800a0c2:	e76c      	b.n	8009f9e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a0c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0c6:	f000 fa09 	bl	800a4dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0ca:	f000 fd27 	bl	800ab1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a0ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3738      	adds	r7, #56	; 0x38
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	e000ed04 	.word	0xe000ed04

0800a0dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b08e      	sub	sp, #56	; 0x38
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
 800a0e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d109      	bne.n	800a108 <xQueueGenericSendFromISR+0x2c>
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	627b      	str	r3, [r7, #36]	; 0x24
 800a106:	e7fe      	b.n	800a106 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d103      	bne.n	800a116 <xQueueGenericSendFromISR+0x3a>
 800a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <xQueueGenericSendFromISR+0x3e>
 800a116:	2301      	movs	r3, #1
 800a118:	e000      	b.n	800a11c <xQueueGenericSendFromISR+0x40>
 800a11a:	2300      	movs	r3, #0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d109      	bne.n	800a134 <xQueueGenericSendFromISR+0x58>
 800a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	623b      	str	r3, [r7, #32]
 800a132:	e7fe      	b.n	800a132 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2b02      	cmp	r3, #2
 800a138:	d103      	bne.n	800a142 <xQueueGenericSendFromISR+0x66>
 800a13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d101      	bne.n	800a146 <xQueueGenericSendFromISR+0x6a>
 800a142:	2301      	movs	r3, #1
 800a144:	e000      	b.n	800a148 <xQueueGenericSendFromISR+0x6c>
 800a146:	2300      	movs	r3, #0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d109      	bne.n	800a160 <xQueueGenericSendFromISR+0x84>
 800a14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	61fb      	str	r3, [r7, #28]
 800a15e:	e7fe      	b.n	800a15e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a160:	f001 ff20 	bl	800bfa4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a164:	f3ef 8211 	mrs	r2, BASEPRI
 800a168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16c:	f383 8811 	msr	BASEPRI, r3
 800a170:	f3bf 8f6f 	isb	sy
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	61ba      	str	r2, [r7, #24]
 800a17a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a17c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a17e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a188:	429a      	cmp	r2, r3
 800a18a:	d302      	bcc.n	800a192 <xQueueGenericSendFromISR+0xb6>
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d12c      	bne.n	800a1ec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	68b9      	ldr	r1, [r7, #8]
 800a1a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1a2:	f000 f90b 	bl	800a3bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ae:	d112      	bne.n	800a1d6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d016      	beq.n	800a1e6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ba:	3324      	adds	r3, #36	; 0x24
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 febb 	bl	800af38 <xTaskRemoveFromEventList>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00e      	beq.n	800a1e6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00b      	beq.n	800a1e6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	e007      	b.n	800a1e6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a1da:	3301      	adds	r3, #1
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	b25a      	sxtb	r2, r3
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a1ea:	e001      	b.n	800a1f0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3738      	adds	r7, #56	; 0x38
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b08c      	sub	sp, #48	; 0x30
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a210:	2300      	movs	r3, #0
 800a212:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d109      	bne.n	800a232 <xQueueReceive+0x2e>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	623b      	str	r3, [r7, #32]
 800a230:	e7fe      	b.n	800a230 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d103      	bne.n	800a240 <xQueueReceive+0x3c>
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <xQueueReceive+0x40>
 800a240:	2301      	movs	r3, #1
 800a242:	e000      	b.n	800a246 <xQueueReceive+0x42>
 800a244:	2300      	movs	r3, #0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d109      	bne.n	800a25e <xQueueReceive+0x5a>
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	61fb      	str	r3, [r7, #28]
 800a25c:	e7fe      	b.n	800a25c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a25e:	f001 f823 	bl	800b2a8 <xTaskGetSchedulerState>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d102      	bne.n	800a26e <xQueueReceive+0x6a>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <xQueueReceive+0x6e>
 800a26e:	2301      	movs	r3, #1
 800a270:	e000      	b.n	800a274 <xQueueReceive+0x70>
 800a272:	2300      	movs	r3, #0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d109      	bne.n	800a28c <xQueueReceive+0x88>
 800a278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	61bb      	str	r3, [r7, #24]
 800a28a:	e7fe      	b.n	800a28a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a28c:	f001 fdae 	bl	800bdec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a294:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d01f      	beq.n	800a2dc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a29c:	68b9      	ldr	r1, [r7, #8]
 800a29e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2a0:	f000 f8f6 	bl	800a490 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	1e5a      	subs	r2, r3, #1
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00f      	beq.n	800a2d4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b6:	3310      	adds	r3, #16
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 fe3d 	bl	800af38 <xTaskRemoveFromEventList>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d007      	beq.n	800a2d4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2c4:	4b3c      	ldr	r3, [pc, #240]	; (800a3b8 <xQueueReceive+0x1b4>)
 800a2c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2d4:	f001 fdb8 	bl	800be48 <vPortExitCritical>
				return pdPASS;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e069      	b.n	800a3b0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d103      	bne.n	800a2ea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2e2:	f001 fdb1 	bl	800be48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	e062      	b.n	800a3b0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d106      	bne.n	800a2fe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2f0:	f107 0310 	add.w	r3, r7, #16
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 fe81 	bl	800affc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2fe:	f001 fda3 	bl	800be48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a302:	f000 fbfd 	bl	800ab00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a306:	f001 fd71 	bl	800bdec <vPortEnterCritical>
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a310:	b25b      	sxtb	r3, r3
 800a312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a316:	d103      	bne.n	800a320 <xQueueReceive+0x11c>
 800a318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a326:	b25b      	sxtb	r3, r3
 800a328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32c:	d103      	bne.n	800a336 <xQueueReceive+0x132>
 800a32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a336:	f001 fd87 	bl	800be48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a33a:	1d3a      	adds	r2, r7, #4
 800a33c:	f107 0310 	add.w	r3, r7, #16
 800a340:	4611      	mov	r1, r2
 800a342:	4618      	mov	r0, r3
 800a344:	f000 fe70 	bl	800b028 <xTaskCheckForTimeOut>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d123      	bne.n	800a396 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a34e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a350:	f000 f916 	bl	800a580 <prvIsQueueEmpty>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d017      	beq.n	800a38a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	3324      	adds	r3, #36	; 0x24
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	4611      	mov	r1, r2
 800a362:	4618      	mov	r0, r3
 800a364:	f000 fd9a 	bl	800ae9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a36a:	f000 f8b7 	bl	800a4dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a36e:	f000 fbd5 	bl	800ab1c <xTaskResumeAll>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d189      	bne.n	800a28c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a378:	4b0f      	ldr	r3, [pc, #60]	; (800a3b8 <xQueueReceive+0x1b4>)
 800a37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	e780      	b.n	800a28c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a38a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a38c:	f000 f8a6 	bl	800a4dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a390:	f000 fbc4 	bl	800ab1c <xTaskResumeAll>
 800a394:	e77a      	b.n	800a28c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a398:	f000 f8a0 	bl	800a4dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a39c:	f000 fbbe 	bl	800ab1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3a2:	f000 f8ed 	bl	800a580 <prvIsQueueEmpty>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f43f af6f 	beq.w	800a28c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3730      	adds	r7, #48	; 0x30
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	e000ed04 	.word	0xe000ed04

0800a3bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b086      	sub	sp, #24
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10d      	bne.n	800a3f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d14d      	bne.n	800a47e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 ff7c 	bl	800b2e4 <xTaskPriorityDisinherit>
 800a3ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	609a      	str	r2, [r3, #8]
 800a3f4:	e043      	b.n	800a47e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d119      	bne.n	800a430 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6858      	ldr	r0, [r3, #4]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a404:	461a      	mov	r2, r3
 800a406:	68b9      	ldr	r1, [r7, #8]
 800a408:	f002 fa64 	bl	800c8d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a414:	441a      	add	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	429a      	cmp	r2, r3
 800a424:	d32b      	bcc.n	800a47e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	605a      	str	r2, [r3, #4]
 800a42e:	e026      	b.n	800a47e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	68d8      	ldr	r0, [r3, #12]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a438:	461a      	mov	r2, r3
 800a43a:	68b9      	ldr	r1, [r7, #8]
 800a43c:	f002 fa4a 	bl	800c8d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	68da      	ldr	r2, [r3, #12]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a448:	425b      	negs	r3, r3
 800a44a:	441a      	add	r2, r3
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	68da      	ldr	r2, [r3, #12]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d207      	bcs.n	800a46c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a464:	425b      	negs	r3, r3
 800a466:	441a      	add	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d105      	bne.n	800a47e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	3b01      	subs	r3, #1
 800a47c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	1c5a      	adds	r2, r3, #1
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a486:	697b      	ldr	r3, [r7, #20]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d018      	beq.n	800a4d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	68da      	ldr	r2, [r3, #12]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4aa:	441a      	add	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	68da      	ldr	r2, [r3, #12]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d303      	bcc.n	800a4c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	68d9      	ldr	r1, [r3, #12]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	6838      	ldr	r0, [r7, #0]
 800a4d0:	f002 fa00 	bl	800c8d4 <memcpy>
	}
}
 800a4d4:	bf00      	nop
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a4e4:	f001 fc82 	bl	800bdec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4f0:	e011      	b.n	800a516 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d012      	beq.n	800a520 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	3324      	adds	r3, #36	; 0x24
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 fd1a 	bl	800af38 <xTaskRemoveFromEventList>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d001      	beq.n	800a50e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a50a:	f000 fded 	bl	800b0e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
 800a510:	3b01      	subs	r3, #1
 800a512:	b2db      	uxtb	r3, r3
 800a514:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	dce9      	bgt.n	800a4f2 <prvUnlockQueue+0x16>
 800a51e:	e000      	b.n	800a522 <prvUnlockQueue+0x46>
					break;
 800a520:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	22ff      	movs	r2, #255	; 0xff
 800a526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a52a:	f001 fc8d 	bl	800be48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a52e:	f001 fc5d 	bl	800bdec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a538:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a53a:	e011      	b.n	800a560 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d012      	beq.n	800a56a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3310      	adds	r3, #16
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 fcf5 	bl	800af38 <xTaskRemoveFromEventList>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d001      	beq.n	800a558 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a554:	f000 fdc8 	bl	800b0e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a558:	7bbb      	ldrb	r3, [r7, #14]
 800a55a:	3b01      	subs	r3, #1
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a564:	2b00      	cmp	r3, #0
 800a566:	dce9      	bgt.n	800a53c <prvUnlockQueue+0x60>
 800a568:	e000      	b.n	800a56c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a56a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	22ff      	movs	r2, #255	; 0xff
 800a570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a574:	f001 fc68 	bl	800be48 <vPortExitCritical>
}
 800a578:	bf00      	nop
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a588:	f001 fc30 	bl	800bdec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a590:	2b00      	cmp	r3, #0
 800a592:	d102      	bne.n	800a59a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a594:	2301      	movs	r3, #1
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	e001      	b.n	800a59e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a59a:	2300      	movs	r3, #0
 800a59c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a59e:	f001 fc53 	bl	800be48 <vPortExitCritical>

	return xReturn;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a5b4:	f001 fc1a 	bl	800bdec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d102      	bne.n	800a5ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	60fb      	str	r3, [r7, #12]
 800a5c8:	e001      	b.n	800a5ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5ce:	f001 fc3b 	bl	800be48 <vPortExitCritical>

	return xReturn;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60fb      	str	r3, [r7, #12]
 800a5ea:	e014      	b.n	800a616 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a5ec:	4a0e      	ldr	r2, [pc, #56]	; (800a628 <vQueueAddToRegistry+0x4c>)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10b      	bne.n	800a610 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a5f8:	490b      	ldr	r1, [pc, #44]	; (800a628 <vQueueAddToRegistry+0x4c>)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a602:	4a09      	ldr	r2, [pc, #36]	; (800a628 <vQueueAddToRegistry+0x4c>)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	00db      	lsls	r3, r3, #3
 800a608:	4413      	add	r3, r2
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a60e:	e005      	b.n	800a61c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3301      	adds	r3, #1
 800a614:	60fb      	str	r3, [r7, #12]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2b07      	cmp	r3, #7
 800a61a:	d9e7      	bls.n	800a5ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a61c:	bf00      	nop
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	2000ae0c 	.word	0x2000ae0c

0800a62c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b086      	sub	sp, #24
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a63c:	f001 fbd6 	bl	800bdec <vPortEnterCritical>
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a646:	b25b      	sxtb	r3, r3
 800a648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64c:	d103      	bne.n	800a656 <vQueueWaitForMessageRestricted+0x2a>
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a65c:	b25b      	sxtb	r3, r3
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a662:	d103      	bne.n	800a66c <vQueueWaitForMessageRestricted+0x40>
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a66c:	f001 fbec 	bl	800be48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a674:	2b00      	cmp	r3, #0
 800a676:	d106      	bne.n	800a686 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	3324      	adds	r3, #36	; 0x24
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	68b9      	ldr	r1, [r7, #8]
 800a680:	4618      	mov	r0, r3
 800a682:	f000 fc2f 	bl	800aee4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a686:	6978      	ldr	r0, [r7, #20]
 800a688:	f7ff ff28 	bl	800a4dc <prvUnlockQueue>
	}
 800a68c:	bf00      	nop
 800a68e:	3718      	adds	r7, #24
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a694:	b580      	push	{r7, lr}
 800a696:	b08e      	sub	sp, #56	; 0x38
 800a698:	af04      	add	r7, sp, #16
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d109      	bne.n	800a6bc <xTaskCreateStatic+0x28>
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	623b      	str	r3, [r7, #32]
 800a6ba:	e7fe      	b.n	800a6ba <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d109      	bne.n	800a6d6 <xTaskCreateStatic+0x42>
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	61fb      	str	r3, [r7, #28]
 800a6d4:	e7fe      	b.n	800a6d4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a6d6:	235c      	movs	r3, #92	; 0x5c
 800a6d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	2b5c      	cmp	r3, #92	; 0x5c
 800a6de:	d009      	beq.n	800a6f4 <xTaskCreateStatic+0x60>
 800a6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	61bb      	str	r3, [r7, #24]
 800a6f2:	e7fe      	b.n	800a6f2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a6f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d01e      	beq.n	800a73a <xTaskCreateStatic+0xa6>
 800a6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d01b      	beq.n	800a73a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a70a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	2202      	movs	r2, #2
 800a710:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a714:	2300      	movs	r3, #0
 800a716:	9303      	str	r3, [sp, #12]
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	9302      	str	r3, [sp, #8]
 800a71c:	f107 0314 	add.w	r3, r7, #20
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	68b9      	ldr	r1, [r7, #8]
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f000 f850 	bl	800a7d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a732:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a734:	f000 f8dc 	bl	800a8f0 <prvAddNewTaskToReadyList>
 800a738:	e001      	b.n	800a73e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a73a:	2300      	movs	r3, #0
 800a73c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a73e:	697b      	ldr	r3, [r7, #20]
	}
 800a740:	4618      	mov	r0, r3
 800a742:	3728      	adds	r7, #40	; 0x28
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b08c      	sub	sp, #48	; 0x30
 800a74c:	af04      	add	r7, sp, #16
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	603b      	str	r3, [r7, #0]
 800a754:	4613      	mov	r3, r2
 800a756:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a758:	88fb      	ldrh	r3, [r7, #6]
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4618      	mov	r0, r3
 800a75e:	f001 fc5f 	bl	800c020 <pvPortMalloc>
 800a762:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00e      	beq.n	800a788 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a76a:	205c      	movs	r0, #92	; 0x5c
 800a76c:	f001 fc58 	bl	800c020 <pvPortMalloc>
 800a770:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d003      	beq.n	800a780 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	631a      	str	r2, [r3, #48]	; 0x30
 800a77e:	e005      	b.n	800a78c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a780:	6978      	ldr	r0, [r7, #20]
 800a782:	f001 fd0f 	bl	800c1a4 <vPortFree>
 800a786:	e001      	b.n	800a78c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a788:	2300      	movs	r3, #0
 800a78a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d017      	beq.n	800a7c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a79a:	88fa      	ldrh	r2, [r7, #6]
 800a79c:	2300      	movs	r3, #0
 800a79e:	9303      	str	r3, [sp, #12]
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	9302      	str	r3, [sp, #8]
 800a7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a6:	9301      	str	r3, [sp, #4]
 800a7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	68b9      	ldr	r1, [r7, #8]
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 f80e 	bl	800a7d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7b6:	69f8      	ldr	r0, [r7, #28]
 800a7b8:	f000 f89a 	bl	800a8f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	61bb      	str	r3, [r7, #24]
 800a7c0:	e002      	b.n	800a7c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a7c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a7c8:	69bb      	ldr	r3, [r7, #24]
	}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3720      	adds	r7, #32
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b088      	sub	sp, #32
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	60f8      	str	r0, [r7, #12]
 800a7da:	60b9      	str	r1, [r7, #8]
 800a7dc:	607a      	str	r2, [r7, #4]
 800a7de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	21a5      	movs	r1, #165	; 0xa5
 800a7ec:	f002 f87d 	bl	800c8ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	f023 0307 	bic.w	r3, r3, #7
 800a808:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	f003 0307 	and.w	r3, r3, #7
 800a810:	2b00      	cmp	r3, #0
 800a812:	d009      	beq.n	800a828 <prvInitialiseNewTask+0x56>
 800a814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	617b      	str	r3, [r7, #20]
 800a826:	e7fe      	b.n	800a826 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d01f      	beq.n	800a86e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a82e:	2300      	movs	r3, #0
 800a830:	61fb      	str	r3, [r7, #28]
 800a832:	e012      	b.n	800a85a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	4413      	add	r3, r2
 800a83a:	7819      	ldrb	r1, [r3, #0]
 800a83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	4413      	add	r3, r2
 800a842:	3334      	adds	r3, #52	; 0x34
 800a844:	460a      	mov	r2, r1
 800a846:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	4413      	add	r3, r2
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d006      	beq.n	800a862 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	3301      	adds	r3, #1
 800a858:	61fb      	str	r3, [r7, #28]
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	2b0f      	cmp	r3, #15
 800a85e:	d9e9      	bls.n	800a834 <prvInitialiseNewTask+0x62>
 800a860:	e000      	b.n	800a864 <prvInitialiseNewTask+0x92>
			{
				break;
 800a862:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a86c:	e003      	b.n	800a876 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a878:	2b37      	cmp	r3, #55	; 0x37
 800a87a:	d901      	bls.n	800a880 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a87c:	2337      	movs	r3, #55	; 0x37
 800a87e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a884:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a88a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	2200      	movs	r2, #0
 800a890:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a894:	3304      	adds	r3, #4
 800a896:	4618      	mov	r0, r3
 800a898:	f7ff f994 	bl	8009bc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89e:	3318      	adds	r3, #24
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff f98f 	bl	8009bc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8be:	2200      	movs	r2, #0
 800a8c0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	68f9      	ldr	r1, [r7, #12]
 800a8ce:	69b8      	ldr	r0, [r7, #24]
 800a8d0:	f001 f968 	bl	800bba4 <pxPortInitialiseStack>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d002      	beq.n	800a8e6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8e6:	bf00      	nop
 800a8e8:	3720      	adds	r7, #32
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
	...

0800a8f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8f8:	f001 fa78 	bl	800bdec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8fc:	4b2d      	ldr	r3, [pc, #180]	; (800a9b4 <prvAddNewTaskToReadyList+0xc4>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3301      	adds	r3, #1
 800a902:	4a2c      	ldr	r2, [pc, #176]	; (800a9b4 <prvAddNewTaskToReadyList+0xc4>)
 800a904:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a906:	4b2c      	ldr	r3, [pc, #176]	; (800a9b8 <prvAddNewTaskToReadyList+0xc8>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d109      	bne.n	800a922 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a90e:	4a2a      	ldr	r2, [pc, #168]	; (800a9b8 <prvAddNewTaskToReadyList+0xc8>)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a914:	4b27      	ldr	r3, [pc, #156]	; (800a9b4 <prvAddNewTaskToReadyList+0xc4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d110      	bne.n	800a93e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a91c:	f000 fc0a 	bl	800b134 <prvInitialiseTaskLists>
 800a920:	e00d      	b.n	800a93e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a922:	4b26      	ldr	r3, [pc, #152]	; (800a9bc <prvAddNewTaskToReadyList+0xcc>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d109      	bne.n	800a93e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a92a:	4b23      	ldr	r3, [pc, #140]	; (800a9b8 <prvAddNewTaskToReadyList+0xc8>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a934:	429a      	cmp	r2, r3
 800a936:	d802      	bhi.n	800a93e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a938:	4a1f      	ldr	r2, [pc, #124]	; (800a9b8 <prvAddNewTaskToReadyList+0xc8>)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a93e:	4b20      	ldr	r3, [pc, #128]	; (800a9c0 <prvAddNewTaskToReadyList+0xd0>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	3301      	adds	r3, #1
 800a944:	4a1e      	ldr	r2, [pc, #120]	; (800a9c0 <prvAddNewTaskToReadyList+0xd0>)
 800a946:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a948:	4b1d      	ldr	r3, [pc, #116]	; (800a9c0 <prvAddNewTaskToReadyList+0xd0>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a954:	4b1b      	ldr	r3, [pc, #108]	; (800a9c4 <prvAddNewTaskToReadyList+0xd4>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d903      	bls.n	800a964 <prvAddNewTaskToReadyList+0x74>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a960:	4a18      	ldr	r2, [pc, #96]	; (800a9c4 <prvAddNewTaskToReadyList+0xd4>)
 800a962:	6013      	str	r3, [r2, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a968:	4613      	mov	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4a15      	ldr	r2, [pc, #84]	; (800a9c8 <prvAddNewTaskToReadyList+0xd8>)
 800a972:	441a      	add	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	3304      	adds	r3, #4
 800a978:	4619      	mov	r1, r3
 800a97a:	4610      	mov	r0, r2
 800a97c:	f7ff f92f 	bl	8009bde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a980:	f001 fa62 	bl	800be48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a984:	4b0d      	ldr	r3, [pc, #52]	; (800a9bc <prvAddNewTaskToReadyList+0xcc>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00e      	beq.n	800a9aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a98c:	4b0a      	ldr	r3, [pc, #40]	; (800a9b8 <prvAddNewTaskToReadyList+0xc8>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a996:	429a      	cmp	r2, r3
 800a998:	d207      	bcs.n	800a9aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a99a:	4b0c      	ldr	r3, [pc, #48]	; (800a9cc <prvAddNewTaskToReadyList+0xdc>)
 800a99c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20000ce4 	.word	0x20000ce4
 800a9b8:	20000810 	.word	0x20000810
 800a9bc:	20000cf0 	.word	0x20000cf0
 800a9c0:	20000d00 	.word	0x20000d00
 800a9c4:	20000cec 	.word	0x20000cec
 800a9c8:	20000814 	.word	0x20000814
 800a9cc:	e000ed04 	.word	0xe000ed04

0800a9d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d016      	beq.n	800aa10 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a9e2:	4b13      	ldr	r3, [pc, #76]	; (800aa30 <vTaskDelay+0x60>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d009      	beq.n	800a9fe <vTaskDelay+0x2e>
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	60bb      	str	r3, [r7, #8]
 800a9fc:	e7fe      	b.n	800a9fc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a9fe:	f000 f87f 	bl	800ab00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aa02:	2100      	movs	r1, #0
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fd33 	bl	800b470 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aa0a:	f000 f887 	bl	800ab1c <xTaskResumeAll>
 800aa0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d107      	bne.n	800aa26 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800aa16:	4b07      	ldr	r3, [pc, #28]	; (800aa34 <vTaskDelay+0x64>)
 800aa18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa26:	bf00      	nop
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	20000d0c 	.word	0x20000d0c
 800aa34:	e000ed04 	.word	0xe000ed04

0800aa38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b08a      	sub	sp, #40	; 0x28
 800aa3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa42:	2300      	movs	r3, #0
 800aa44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa46:	463a      	mov	r2, r7
 800aa48:	1d39      	adds	r1, r7, #4
 800aa4a:	f107 0308 	add.w	r3, r7, #8
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7ff f864 	bl	8009b1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	9202      	str	r2, [sp, #8]
 800aa5c:	9301      	str	r3, [sp, #4]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	2300      	movs	r3, #0
 800aa64:	460a      	mov	r2, r1
 800aa66:	4920      	ldr	r1, [pc, #128]	; (800aae8 <vTaskStartScheduler+0xb0>)
 800aa68:	4820      	ldr	r0, [pc, #128]	; (800aaec <vTaskStartScheduler+0xb4>)
 800aa6a:	f7ff fe13 	bl	800a694 <xTaskCreateStatic>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	4b1f      	ldr	r3, [pc, #124]	; (800aaf0 <vTaskStartScheduler+0xb8>)
 800aa72:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa74:	4b1e      	ldr	r3, [pc, #120]	; (800aaf0 <vTaskStartScheduler+0xb8>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d002      	beq.n	800aa82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	617b      	str	r3, [r7, #20]
 800aa80:	e001      	b.n	800aa86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa82:	2300      	movs	r3, #0
 800aa84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d102      	bne.n	800aa92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa8c:	f000 fd44 	bl	800b518 <xTimerCreateTimerTask>
 800aa90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d115      	bne.n	800aac4 <vTaskStartScheduler+0x8c>
 800aa98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9c:	f383 8811 	msr	BASEPRI, r3
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aaaa:	4b12      	ldr	r3, [pc, #72]	; (800aaf4 <vTaskStartScheduler+0xbc>)
 800aaac:	f04f 32ff 	mov.w	r2, #4294967295
 800aab0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aab2:	4b11      	ldr	r3, [pc, #68]	; (800aaf8 <vTaskStartScheduler+0xc0>)
 800aab4:	2201      	movs	r2, #1
 800aab6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aab8:	4b10      	ldr	r3, [pc, #64]	; (800aafc <vTaskStartScheduler+0xc4>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aabe:	f001 f8f7 	bl	800bcb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aac2:	e00d      	b.n	800aae0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaca:	d109      	bne.n	800aae0 <vTaskStartScheduler+0xa8>
 800aacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad0:	f383 8811 	msr	BASEPRI, r3
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	60fb      	str	r3, [r7, #12]
 800aade:	e7fe      	b.n	800aade <vTaskStartScheduler+0xa6>
}
 800aae0:	bf00      	nop
 800aae2:	3718      	adds	r7, #24
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	0800dcc8 	.word	0x0800dcc8
 800aaec:	0800b101 	.word	0x0800b101
 800aaf0:	20000d08 	.word	0x20000d08
 800aaf4:	20000d04 	.word	0x20000d04
 800aaf8:	20000cf0 	.word	0x20000cf0
 800aafc:	20000ce8 	.word	0x20000ce8

0800ab00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ab00:	b480      	push	{r7}
 800ab02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ab04:	4b04      	ldr	r3, [pc, #16]	; (800ab18 <vTaskSuspendAll+0x18>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	4a03      	ldr	r2, [pc, #12]	; (800ab18 <vTaskSuspendAll+0x18>)
 800ab0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ab0e:	bf00      	nop
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr
 800ab18:	20000d0c 	.word	0x20000d0c

0800ab1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ab22:	2300      	movs	r3, #0
 800ab24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ab2a:	4b41      	ldr	r3, [pc, #260]	; (800ac30 <xTaskResumeAll+0x114>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d109      	bne.n	800ab46 <xTaskResumeAll+0x2a>
 800ab32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab36:	f383 8811 	msr	BASEPRI, r3
 800ab3a:	f3bf 8f6f 	isb	sy
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	603b      	str	r3, [r7, #0]
 800ab44:	e7fe      	b.n	800ab44 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab46:	f001 f951 	bl	800bdec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab4a:	4b39      	ldr	r3, [pc, #228]	; (800ac30 <xTaskResumeAll+0x114>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	4a37      	ldr	r2, [pc, #220]	; (800ac30 <xTaskResumeAll+0x114>)
 800ab52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab54:	4b36      	ldr	r3, [pc, #216]	; (800ac30 <xTaskResumeAll+0x114>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d162      	bne.n	800ac22 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab5c:	4b35      	ldr	r3, [pc, #212]	; (800ac34 <xTaskResumeAll+0x118>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d05e      	beq.n	800ac22 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab64:	e02f      	b.n	800abc6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab66:	4b34      	ldr	r3, [pc, #208]	; (800ac38 <xTaskResumeAll+0x11c>)
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	3318      	adds	r3, #24
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7ff f890 	bl	8009c98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	3304      	adds	r3, #4
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7ff f88b 	bl	8009c98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab86:	4b2d      	ldr	r3, [pc, #180]	; (800ac3c <xTaskResumeAll+0x120>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d903      	bls.n	800ab96 <xTaskResumeAll+0x7a>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab92:	4a2a      	ldr	r2, [pc, #168]	; (800ac3c <xTaskResumeAll+0x120>)
 800ab94:	6013      	str	r3, [r2, #0]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4a27      	ldr	r2, [pc, #156]	; (800ac40 <xTaskResumeAll+0x124>)
 800aba4:	441a      	add	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	3304      	adds	r3, #4
 800abaa:	4619      	mov	r1, r3
 800abac:	4610      	mov	r0, r2
 800abae:	f7ff f816 	bl	8009bde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb6:	4b23      	ldr	r3, [pc, #140]	; (800ac44 <xTaskResumeAll+0x128>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d302      	bcc.n	800abc6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800abc0:	4b21      	ldr	r3, [pc, #132]	; (800ac48 <xTaskResumeAll+0x12c>)
 800abc2:	2201      	movs	r2, #1
 800abc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abc6:	4b1c      	ldr	r3, [pc, #112]	; (800ac38 <xTaskResumeAll+0x11c>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1cb      	bne.n	800ab66 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d001      	beq.n	800abd8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800abd4:	f000 fb48 	bl	800b268 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800abd8:	4b1c      	ldr	r3, [pc, #112]	; (800ac4c <xTaskResumeAll+0x130>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d010      	beq.n	800ac06 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800abe4:	f000 f846 	bl	800ac74 <xTaskIncrementTick>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d002      	beq.n	800abf4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800abee:	4b16      	ldr	r3, [pc, #88]	; (800ac48 <xTaskResumeAll+0x12c>)
 800abf0:	2201      	movs	r2, #1
 800abf2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1f1      	bne.n	800abe4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800ac00:	4b12      	ldr	r3, [pc, #72]	; (800ac4c <xTaskResumeAll+0x130>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ac06:	4b10      	ldr	r3, [pc, #64]	; (800ac48 <xTaskResumeAll+0x12c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d009      	beq.n	800ac22 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ac12:	4b0f      	ldr	r3, [pc, #60]	; (800ac50 <xTaskResumeAll+0x134>)
 800ac14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac18:	601a      	str	r2, [r3, #0]
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac22:	f001 f911 	bl	800be48 <vPortExitCritical>

	return xAlreadyYielded;
 800ac26:	68bb      	ldr	r3, [r7, #8]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	20000d0c 	.word	0x20000d0c
 800ac34:	20000ce4 	.word	0x20000ce4
 800ac38:	20000ca4 	.word	0x20000ca4
 800ac3c:	20000cec 	.word	0x20000cec
 800ac40:	20000814 	.word	0x20000814
 800ac44:	20000810 	.word	0x20000810
 800ac48:	20000cf8 	.word	0x20000cf8
 800ac4c:	20000cf4 	.word	0x20000cf4
 800ac50:	e000ed04 	.word	0xe000ed04

0800ac54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ac5a:	4b05      	ldr	r3, [pc, #20]	; (800ac70 <xTaskGetTickCount+0x1c>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ac60:	687b      	ldr	r3, [r7, #4]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	20000ce8 	.word	0x20000ce8

0800ac74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac7e:	4b4e      	ldr	r3, [pc, #312]	; (800adb8 <xTaskIncrementTick+0x144>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	f040 8088 	bne.w	800ad98 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac88:	4b4c      	ldr	r3, [pc, #304]	; (800adbc <xTaskIncrementTick+0x148>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac90:	4a4a      	ldr	r2, [pc, #296]	; (800adbc <xTaskIncrementTick+0x148>)
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d11f      	bne.n	800acdc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac9c:	4b48      	ldr	r3, [pc, #288]	; (800adc0 <xTaskIncrementTick+0x14c>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d009      	beq.n	800acba <xTaskIncrementTick+0x46>
 800aca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	603b      	str	r3, [r7, #0]
 800acb8:	e7fe      	b.n	800acb8 <xTaskIncrementTick+0x44>
 800acba:	4b41      	ldr	r3, [pc, #260]	; (800adc0 <xTaskIncrementTick+0x14c>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	4b40      	ldr	r3, [pc, #256]	; (800adc4 <xTaskIncrementTick+0x150>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a3e      	ldr	r2, [pc, #248]	; (800adc0 <xTaskIncrementTick+0x14c>)
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	4a3e      	ldr	r2, [pc, #248]	; (800adc4 <xTaskIncrementTick+0x150>)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6013      	str	r3, [r2, #0]
 800acce:	4b3e      	ldr	r3, [pc, #248]	; (800adc8 <xTaskIncrementTick+0x154>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3301      	adds	r3, #1
 800acd4:	4a3c      	ldr	r2, [pc, #240]	; (800adc8 <xTaskIncrementTick+0x154>)
 800acd6:	6013      	str	r3, [r2, #0]
 800acd8:	f000 fac6 	bl	800b268 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acdc:	4b3b      	ldr	r3, [pc, #236]	; (800adcc <xTaskIncrementTick+0x158>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d349      	bcc.n	800ad7a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ace6:	4b36      	ldr	r3, [pc, #216]	; (800adc0 <xTaskIncrementTick+0x14c>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d104      	bne.n	800acfa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf0:	4b36      	ldr	r3, [pc, #216]	; (800adcc <xTaskIncrementTick+0x158>)
 800acf2:	f04f 32ff 	mov.w	r2, #4294967295
 800acf6:	601a      	str	r2, [r3, #0]
					break;
 800acf8:	e03f      	b.n	800ad7a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acfa:	4b31      	ldr	r3, [pc, #196]	; (800adc0 <xTaskIncrementTick+0x14c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d203      	bcs.n	800ad1a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ad12:	4a2e      	ldr	r2, [pc, #184]	; (800adcc <xTaskIncrementTick+0x158>)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ad18:	e02f      	b.n	800ad7a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fe ffba 	bl	8009c98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d004      	beq.n	800ad36 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	3318      	adds	r3, #24
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fe ffb1 	bl	8009c98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3a:	4b25      	ldr	r3, [pc, #148]	; (800add0 <xTaskIncrementTick+0x15c>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d903      	bls.n	800ad4a <xTaskIncrementTick+0xd6>
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad46:	4a22      	ldr	r2, [pc, #136]	; (800add0 <xTaskIncrementTick+0x15c>)
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad4e:	4613      	mov	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4a1f      	ldr	r2, [pc, #124]	; (800add4 <xTaskIncrementTick+0x160>)
 800ad58:	441a      	add	r2, r3
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4610      	mov	r0, r2
 800ad62:	f7fe ff3c 	bl	8009bde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6a:	4b1b      	ldr	r3, [pc, #108]	; (800add8 <xTaskIncrementTick+0x164>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d3b8      	bcc.n	800ace6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ad74:	2301      	movs	r3, #1
 800ad76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad78:	e7b5      	b.n	800ace6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad7a:	4b17      	ldr	r3, [pc, #92]	; (800add8 <xTaskIncrementTick+0x164>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad80:	4914      	ldr	r1, [pc, #80]	; (800add4 <xTaskIncrementTick+0x160>)
 800ad82:	4613      	mov	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	440b      	add	r3, r1
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d907      	bls.n	800ada2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800ad92:	2301      	movs	r3, #1
 800ad94:	617b      	str	r3, [r7, #20]
 800ad96:	e004      	b.n	800ada2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ad98:	4b10      	ldr	r3, [pc, #64]	; (800addc <xTaskIncrementTick+0x168>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	4a0f      	ldr	r2, [pc, #60]	; (800addc <xTaskIncrementTick+0x168>)
 800ada0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ada2:	4b0f      	ldr	r3, [pc, #60]	; (800ade0 <xTaskIncrementTick+0x16c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800adaa:	2301      	movs	r3, #1
 800adac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800adae:	697b      	ldr	r3, [r7, #20]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3718      	adds	r7, #24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	20000d0c 	.word	0x20000d0c
 800adbc:	20000ce8 	.word	0x20000ce8
 800adc0:	20000c9c 	.word	0x20000c9c
 800adc4:	20000ca0 	.word	0x20000ca0
 800adc8:	20000cfc 	.word	0x20000cfc
 800adcc:	20000d04 	.word	0x20000d04
 800add0:	20000cec 	.word	0x20000cec
 800add4:	20000814 	.word	0x20000814
 800add8:	20000810 	.word	0x20000810
 800addc:	20000cf4 	.word	0x20000cf4
 800ade0:	20000cf8 	.word	0x20000cf8

0800ade4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800adea:	4b27      	ldr	r3, [pc, #156]	; (800ae88 <vTaskSwitchContext+0xa4>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800adf2:	4b26      	ldr	r3, [pc, #152]	; (800ae8c <vTaskSwitchContext+0xa8>)
 800adf4:	2201      	movs	r2, #1
 800adf6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800adf8:	e040      	b.n	800ae7c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800adfa:	4b24      	ldr	r3, [pc, #144]	; (800ae8c <vTaskSwitchContext+0xa8>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae00:	4b23      	ldr	r3, [pc, #140]	; (800ae90 <vTaskSwitchContext+0xac>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	60fb      	str	r3, [r7, #12]
 800ae06:	e00f      	b.n	800ae28 <vTaskSwitchContext+0x44>
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d109      	bne.n	800ae22 <vTaskSwitchContext+0x3e>
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	607b      	str	r3, [r7, #4]
 800ae20:	e7fe      	b.n	800ae20 <vTaskSwitchContext+0x3c>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3b01      	subs	r3, #1
 800ae26:	60fb      	str	r3, [r7, #12]
 800ae28:	491a      	ldr	r1, [pc, #104]	; (800ae94 <vTaskSwitchContext+0xb0>)
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4413      	add	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	440b      	add	r3, r1
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d0e5      	beq.n	800ae08 <vTaskSwitchContext+0x24>
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4a13      	ldr	r2, [pc, #76]	; (800ae94 <vTaskSwitchContext+0xb0>)
 800ae48:	4413      	add	r3, r2
 800ae4a:	60bb      	str	r3, [r7, #8]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	605a      	str	r2, [r3, #4]
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	685a      	ldr	r2, [r3, #4]
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	3308      	adds	r3, #8
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d104      	bne.n	800ae6c <vTaskSwitchContext+0x88>
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	605a      	str	r2, [r3, #4]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	4a09      	ldr	r2, [pc, #36]	; (800ae98 <vTaskSwitchContext+0xb4>)
 800ae74:	6013      	str	r3, [r2, #0]
 800ae76:	4a06      	ldr	r2, [pc, #24]	; (800ae90 <vTaskSwitchContext+0xac>)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6013      	str	r3, [r2, #0]
}
 800ae7c:	bf00      	nop
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	20000d0c 	.word	0x20000d0c
 800ae8c:	20000cf8 	.word	0x20000cf8
 800ae90:	20000cec 	.word	0x20000cec
 800ae94:	20000814 	.word	0x20000814
 800ae98:	20000810 	.word	0x20000810

0800ae9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d109      	bne.n	800aec0 <vTaskPlaceOnEventList+0x24>
 800aeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	60fb      	str	r3, [r7, #12]
 800aebe:	e7fe      	b.n	800aebe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aec0:	4b07      	ldr	r3, [pc, #28]	; (800aee0 <vTaskPlaceOnEventList+0x44>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	3318      	adds	r3, #24
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7fe feac 	bl	8009c26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aece:	2101      	movs	r1, #1
 800aed0:	6838      	ldr	r0, [r7, #0]
 800aed2:	f000 facd 	bl	800b470 <prvAddCurrentTaskToDelayedList>
}
 800aed6:	bf00      	nop
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20000810 	.word	0x20000810

0800aee4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d109      	bne.n	800af0a <vTaskPlaceOnEventListRestricted+0x26>
 800aef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	617b      	str	r3, [r7, #20]
 800af08:	e7fe      	b.n	800af08 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af0a:	4b0a      	ldr	r3, [pc, #40]	; (800af34 <vTaskPlaceOnEventListRestricted+0x50>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3318      	adds	r3, #24
 800af10:	4619      	mov	r1, r3
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7fe fe63 	bl	8009bde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d002      	beq.n	800af24 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800af1e:	f04f 33ff 	mov.w	r3, #4294967295
 800af22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af24:	6879      	ldr	r1, [r7, #4]
 800af26:	68b8      	ldr	r0, [r7, #8]
 800af28:	f000 faa2 	bl	800b470 <prvAddCurrentTaskToDelayedList>
	}
 800af2c:	bf00      	nop
 800af2e:	3718      	adds	r7, #24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	20000810 	.word	0x20000810

0800af38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d109      	bne.n	800af62 <xTaskRemoveFromEventList+0x2a>
 800af4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af52:	f383 8811 	msr	BASEPRI, r3
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	60fb      	str	r3, [r7, #12]
 800af60:	e7fe      	b.n	800af60 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	3318      	adds	r3, #24
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe fe96 	bl	8009c98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af6c:	4b1d      	ldr	r3, [pc, #116]	; (800afe4 <xTaskRemoveFromEventList+0xac>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d11d      	bne.n	800afb0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	3304      	adds	r3, #4
 800af78:	4618      	mov	r0, r3
 800af7a:	f7fe fe8d 	bl	8009c98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af82:	4b19      	ldr	r3, [pc, #100]	; (800afe8 <xTaskRemoveFromEventList+0xb0>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	429a      	cmp	r2, r3
 800af88:	d903      	bls.n	800af92 <xTaskRemoveFromEventList+0x5a>
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8e:	4a16      	ldr	r2, [pc, #88]	; (800afe8 <xTaskRemoveFromEventList+0xb0>)
 800af90:	6013      	str	r3, [r2, #0]
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af96:	4613      	mov	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	4413      	add	r3, r2
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4a13      	ldr	r2, [pc, #76]	; (800afec <xTaskRemoveFromEventList+0xb4>)
 800afa0:	441a      	add	r2, r3
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	3304      	adds	r3, #4
 800afa6:	4619      	mov	r1, r3
 800afa8:	4610      	mov	r0, r2
 800afaa:	f7fe fe18 	bl	8009bde <vListInsertEnd>
 800afae:	e005      	b.n	800afbc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	3318      	adds	r3, #24
 800afb4:	4619      	mov	r1, r3
 800afb6:	480e      	ldr	r0, [pc, #56]	; (800aff0 <xTaskRemoveFromEventList+0xb8>)
 800afb8:	f7fe fe11 	bl	8009bde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc0:	4b0c      	ldr	r3, [pc, #48]	; (800aff4 <xTaskRemoveFromEventList+0xbc>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d905      	bls.n	800afd6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800afca:	2301      	movs	r3, #1
 800afcc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800afce:	4b0a      	ldr	r3, [pc, #40]	; (800aff8 <xTaskRemoveFromEventList+0xc0>)
 800afd0:	2201      	movs	r2, #1
 800afd2:	601a      	str	r2, [r3, #0]
 800afd4:	e001      	b.n	800afda <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800afd6:	2300      	movs	r3, #0
 800afd8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800afda:	697b      	ldr	r3, [r7, #20]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	20000d0c 	.word	0x20000d0c
 800afe8:	20000cec 	.word	0x20000cec
 800afec:	20000814 	.word	0x20000814
 800aff0:	20000ca4 	.word	0x20000ca4
 800aff4:	20000810 	.word	0x20000810
 800aff8:	20000cf8 	.word	0x20000cf8

0800affc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b004:	4b06      	ldr	r3, [pc, #24]	; (800b020 <vTaskInternalSetTimeOutState+0x24>)
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b00c:	4b05      	ldr	r3, [pc, #20]	; (800b024 <vTaskInternalSetTimeOutState+0x28>)
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	605a      	str	r2, [r3, #4]
}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	20000cfc 	.word	0x20000cfc
 800b024:	20000ce8 	.word	0x20000ce8

0800b028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b088      	sub	sp, #32
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d109      	bne.n	800b04c <xTaskCheckForTimeOut+0x24>
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	613b      	str	r3, [r7, #16]
 800b04a:	e7fe      	b.n	800b04a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d109      	bne.n	800b066 <xTaskCheckForTimeOut+0x3e>
 800b052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	60fb      	str	r3, [r7, #12]
 800b064:	e7fe      	b.n	800b064 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b066:	f000 fec1 	bl	800bdec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b06a:	4b1d      	ldr	r3, [pc, #116]	; (800b0e0 <xTaskCheckForTimeOut+0xb8>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	69ba      	ldr	r2, [r7, #24]
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b082:	d102      	bne.n	800b08a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b084:	2300      	movs	r3, #0
 800b086:	61fb      	str	r3, [r7, #28]
 800b088:	e023      	b.n	800b0d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	4b15      	ldr	r3, [pc, #84]	; (800b0e4 <xTaskCheckForTimeOut+0xbc>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	429a      	cmp	r2, r3
 800b094:	d007      	beq.n	800b0a6 <xTaskCheckForTimeOut+0x7e>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	69ba      	ldr	r2, [r7, #24]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d302      	bcc.n	800b0a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	61fb      	str	r3, [r7, #28]
 800b0a4:	e015      	b.n	800b0d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	697a      	ldr	r2, [r7, #20]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d20b      	bcs.n	800b0c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	1ad2      	subs	r2, r2, r3
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f7ff ff9d 	bl	800affc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	61fb      	str	r3, [r7, #28]
 800b0c6:	e004      	b.n	800b0d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b0d2:	f000 feb9 	bl	800be48 <vPortExitCritical>

	return xReturn;
 800b0d6:	69fb      	ldr	r3, [r7, #28]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3720      	adds	r7, #32
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	20000ce8 	.word	0x20000ce8
 800b0e4:	20000cfc 	.word	0x20000cfc

0800b0e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b0ec:	4b03      	ldr	r3, [pc, #12]	; (800b0fc <vTaskMissedYield+0x14>)
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	601a      	str	r2, [r3, #0]
}
 800b0f2:	bf00      	nop
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr
 800b0fc:	20000cf8 	.word	0x20000cf8

0800b100 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b108:	f000 f854 	bl	800b1b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b10c:	4b07      	ldr	r3, [pc, #28]	; (800b12c <prvIdleTask+0x2c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d907      	bls.n	800b124 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b114:	4b06      	ldr	r3, [pc, #24]	; (800b130 <prvIdleTask+0x30>)
 800b116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b11a:	601a      	str	r2, [r3, #0]
 800b11c:	f3bf 8f4f 	dsb	sy
 800b120:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b124:	f7f7 fc28 	bl	8002978 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b128:	e7ee      	b.n	800b108 <prvIdleTask+0x8>
 800b12a:	bf00      	nop
 800b12c:	20000814 	.word	0x20000814
 800b130:	e000ed04 	.word	0xe000ed04

0800b134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b13a:	2300      	movs	r3, #0
 800b13c:	607b      	str	r3, [r7, #4]
 800b13e:	e00c      	b.n	800b15a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	4613      	mov	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4a12      	ldr	r2, [pc, #72]	; (800b194 <prvInitialiseTaskLists+0x60>)
 800b14c:	4413      	add	r3, r2
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe fd18 	bl	8009b84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3301      	adds	r3, #1
 800b158:	607b      	str	r3, [r7, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b37      	cmp	r3, #55	; 0x37
 800b15e:	d9ef      	bls.n	800b140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b160:	480d      	ldr	r0, [pc, #52]	; (800b198 <prvInitialiseTaskLists+0x64>)
 800b162:	f7fe fd0f 	bl	8009b84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b166:	480d      	ldr	r0, [pc, #52]	; (800b19c <prvInitialiseTaskLists+0x68>)
 800b168:	f7fe fd0c 	bl	8009b84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b16c:	480c      	ldr	r0, [pc, #48]	; (800b1a0 <prvInitialiseTaskLists+0x6c>)
 800b16e:	f7fe fd09 	bl	8009b84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b172:	480c      	ldr	r0, [pc, #48]	; (800b1a4 <prvInitialiseTaskLists+0x70>)
 800b174:	f7fe fd06 	bl	8009b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b178:	480b      	ldr	r0, [pc, #44]	; (800b1a8 <prvInitialiseTaskLists+0x74>)
 800b17a:	f7fe fd03 	bl	8009b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b17e:	4b0b      	ldr	r3, [pc, #44]	; (800b1ac <prvInitialiseTaskLists+0x78>)
 800b180:	4a05      	ldr	r2, [pc, #20]	; (800b198 <prvInitialiseTaskLists+0x64>)
 800b182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b184:	4b0a      	ldr	r3, [pc, #40]	; (800b1b0 <prvInitialiseTaskLists+0x7c>)
 800b186:	4a05      	ldr	r2, [pc, #20]	; (800b19c <prvInitialiseTaskLists+0x68>)
 800b188:	601a      	str	r2, [r3, #0]
}
 800b18a:	bf00      	nop
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000814 	.word	0x20000814
 800b198:	20000c74 	.word	0x20000c74
 800b19c:	20000c88 	.word	0x20000c88
 800b1a0:	20000ca4 	.word	0x20000ca4
 800b1a4:	20000cb8 	.word	0x20000cb8
 800b1a8:	20000cd0 	.word	0x20000cd0
 800b1ac:	20000c9c 	.word	0x20000c9c
 800b1b0:	20000ca0 	.word	0x20000ca0

0800b1b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1ba:	e019      	b.n	800b1f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1bc:	f000 fe16 	bl	800bdec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1c0:	4b0f      	ldr	r3, [pc, #60]	; (800b200 <prvCheckTasksWaitingTermination+0x4c>)
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fe fd63 	bl	8009c98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1d2:	4b0c      	ldr	r3, [pc, #48]	; (800b204 <prvCheckTasksWaitingTermination+0x50>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	4a0a      	ldr	r2, [pc, #40]	; (800b204 <prvCheckTasksWaitingTermination+0x50>)
 800b1da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b1dc:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <prvCheckTasksWaitingTermination+0x54>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	4a09      	ldr	r2, [pc, #36]	; (800b208 <prvCheckTasksWaitingTermination+0x54>)
 800b1e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1e6:	f000 fe2f 	bl	800be48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f80e 	bl	800b20c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1f0:	4b05      	ldr	r3, [pc, #20]	; (800b208 <prvCheckTasksWaitingTermination+0x54>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1e1      	bne.n	800b1bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b1f8:	bf00      	nop
 800b1fa:	3708      	adds	r7, #8
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	20000cb8 	.word	0x20000cb8
 800b204:	20000ce4 	.word	0x20000ce4
 800b208:	20000ccc 	.word	0x20000ccc

0800b20c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d108      	bne.n	800b230 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b222:	4618      	mov	r0, r3
 800b224:	f000 ffbe 	bl	800c1a4 <vPortFree>
				vPortFree( pxTCB );
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 ffbb 	bl	800c1a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b22e:	e017      	b.n	800b260 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b236:	2b01      	cmp	r3, #1
 800b238:	d103      	bne.n	800b242 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 ffb2 	bl	800c1a4 <vPortFree>
	}
 800b240:	e00e      	b.n	800b260 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b248:	2b02      	cmp	r3, #2
 800b24a:	d009      	beq.n	800b260 <prvDeleteTCB+0x54>
 800b24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	60fb      	str	r3, [r7, #12]
 800b25e:	e7fe      	b.n	800b25e <prvDeleteTCB+0x52>
	}
 800b260:	bf00      	nop
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b26e:	4b0c      	ldr	r3, [pc, #48]	; (800b2a0 <prvResetNextTaskUnblockTime+0x38>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d104      	bne.n	800b282 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b278:	4b0a      	ldr	r3, [pc, #40]	; (800b2a4 <prvResetNextTaskUnblockTime+0x3c>)
 800b27a:	f04f 32ff 	mov.w	r2, #4294967295
 800b27e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b280:	e008      	b.n	800b294 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b282:	4b07      	ldr	r3, [pc, #28]	; (800b2a0 <prvResetNextTaskUnblockTime+0x38>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	4a04      	ldr	r2, [pc, #16]	; (800b2a4 <prvResetNextTaskUnblockTime+0x3c>)
 800b292:	6013      	str	r3, [r2, #0]
}
 800b294:	bf00      	nop
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	20000c9c 	.word	0x20000c9c
 800b2a4:	20000d04 	.word	0x20000d04

0800b2a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2ae:	4b0b      	ldr	r3, [pc, #44]	; (800b2dc <xTaskGetSchedulerState+0x34>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d102      	bne.n	800b2bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	607b      	str	r3, [r7, #4]
 800b2ba:	e008      	b.n	800b2ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2bc:	4b08      	ldr	r3, [pc, #32]	; (800b2e0 <xTaskGetSchedulerState+0x38>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d102      	bne.n	800b2ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	607b      	str	r3, [r7, #4]
 800b2c8:	e001      	b.n	800b2ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b2ce:	687b      	ldr	r3, [r7, #4]
	}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	20000cf0 	.word	0x20000cf0
 800b2e0:	20000d0c 	.word	0x20000d0c

0800b2e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d054      	beq.n	800b3a4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b2fa:	4b2d      	ldr	r3, [pc, #180]	; (800b3b0 <xTaskPriorityDisinherit+0xcc>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	693a      	ldr	r2, [r7, #16]
 800b300:	429a      	cmp	r2, r3
 800b302:	d009      	beq.n	800b318 <xTaskPriorityDisinherit+0x34>
 800b304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	60fb      	str	r3, [r7, #12]
 800b316:	e7fe      	b.n	800b316 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d109      	bne.n	800b334 <xTaskPriorityDisinherit+0x50>
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	60bb      	str	r3, [r7, #8]
 800b332:	e7fe      	b.n	800b332 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b338:	1e5a      	subs	r2, r3, #1
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b346:	429a      	cmp	r2, r3
 800b348:	d02c      	beq.n	800b3a4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d128      	bne.n	800b3a4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	3304      	adds	r3, #4
 800b356:	4618      	mov	r0, r3
 800b358:	f7fe fc9e 	bl	8009c98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b368:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b374:	4b0f      	ldr	r3, [pc, #60]	; (800b3b4 <xTaskPriorityDisinherit+0xd0>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d903      	bls.n	800b384 <xTaskPriorityDisinherit+0xa0>
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b380:	4a0c      	ldr	r2, [pc, #48]	; (800b3b4 <xTaskPriorityDisinherit+0xd0>)
 800b382:	6013      	str	r3, [r2, #0]
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b388:	4613      	mov	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4a09      	ldr	r2, [pc, #36]	; (800b3b8 <xTaskPriorityDisinherit+0xd4>)
 800b392:	441a      	add	r2, r3
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	3304      	adds	r3, #4
 800b398:	4619      	mov	r1, r3
 800b39a:	4610      	mov	r0, r2
 800b39c:	f7fe fc1f 	bl	8009bde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3a4:	697b      	ldr	r3, [r7, #20]
	}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	20000810 	.word	0x20000810
 800b3b4:	20000cec 	.word	0x20000cec
 800b3b8:	20000814 	.word	0x20000814

0800b3bc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
 800b3c8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b3ca:	f000 fd0f 	bl	800bdec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b3ce:	4b26      	ldr	r3, [pc, #152]	; (800b468 <xTaskNotifyWait+0xac>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	d01a      	beq.n	800b412 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b3dc:	4b22      	ldr	r3, [pc, #136]	; (800b468 <xTaskNotifyWait+0xac>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	43d2      	mvns	r2, r2
 800b3e6:	400a      	ands	r2, r1
 800b3e8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b3ea:	4b1f      	ldr	r3, [pc, #124]	; (800b468 <xTaskNotifyWait+0xac>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00b      	beq.n	800b412 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	6838      	ldr	r0, [r7, #0]
 800b3fe:	f000 f837 	bl	800b470 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b402:	4b1a      	ldr	r3, [pc, #104]	; (800b46c <xTaskNotifyWait+0xb0>)
 800b404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b408:	601a      	str	r2, [r3, #0]
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b412:	f000 fd19 	bl	800be48 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b416:	f000 fce9 	bl	800bdec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d004      	beq.n	800b42a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b420:	4b11      	ldr	r3, [pc, #68]	; (800b468 <xTaskNotifyWait+0xac>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b42a:	4b0f      	ldr	r3, [pc, #60]	; (800b468 <xTaskNotifyWait+0xac>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2b02      	cmp	r3, #2
 800b436:	d002      	beq.n	800b43e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b438:	2300      	movs	r3, #0
 800b43a:	617b      	str	r3, [r7, #20]
 800b43c:	e008      	b.n	800b450 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b43e:	4b0a      	ldr	r3, [pc, #40]	; (800b468 <xTaskNotifyWait+0xac>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	43d2      	mvns	r2, r2
 800b448:	400a      	ands	r2, r1
 800b44a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800b44c:	2301      	movs	r3, #1
 800b44e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b450:	4b05      	ldr	r3, [pc, #20]	; (800b468 <xTaskNotifyWait+0xac>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2200      	movs	r2, #0
 800b456:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800b45a:	f000 fcf5 	bl	800be48 <vPortExitCritical>

		return xReturn;
 800b45e:	697b      	ldr	r3, [r7, #20]
	}
 800b460:	4618      	mov	r0, r3
 800b462:	3718      	adds	r7, #24
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	20000810 	.word	0x20000810
 800b46c:	e000ed04 	.word	0xe000ed04

0800b470 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b47a:	4b21      	ldr	r3, [pc, #132]	; (800b500 <prvAddCurrentTaskToDelayedList+0x90>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b480:	4b20      	ldr	r3, [pc, #128]	; (800b504 <prvAddCurrentTaskToDelayedList+0x94>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3304      	adds	r3, #4
 800b486:	4618      	mov	r0, r3
 800b488:	f7fe fc06 	bl	8009c98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b492:	d10a      	bne.n	800b4aa <prvAddCurrentTaskToDelayedList+0x3a>
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d007      	beq.n	800b4aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b49a:	4b1a      	ldr	r3, [pc, #104]	; (800b504 <prvAddCurrentTaskToDelayedList+0x94>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	3304      	adds	r3, #4
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	4819      	ldr	r0, [pc, #100]	; (800b508 <prvAddCurrentTaskToDelayedList+0x98>)
 800b4a4:	f7fe fb9b 	bl	8009bde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4a8:	e026      	b.n	800b4f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4b2:	4b14      	ldr	r3, [pc, #80]	; (800b504 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d209      	bcs.n	800b4d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4c2:	4b12      	ldr	r3, [pc, #72]	; (800b50c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	4b0f      	ldr	r3, [pc, #60]	; (800b504 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3304      	adds	r3, #4
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	4610      	mov	r0, r2
 800b4d0:	f7fe fba9 	bl	8009c26 <vListInsert>
}
 800b4d4:	e010      	b.n	800b4f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4d6:	4b0e      	ldr	r3, [pc, #56]	; (800b510 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3304      	adds	r3, #4
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4610      	mov	r0, r2
 800b4e4:	f7fe fb9f 	bl	8009c26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4e8:	4b0a      	ldr	r3, [pc, #40]	; (800b514 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d202      	bcs.n	800b4f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b4f2:	4a08      	ldr	r2, [pc, #32]	; (800b514 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	6013      	str	r3, [r2, #0]
}
 800b4f8:	bf00      	nop
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	20000ce8 	.word	0x20000ce8
 800b504:	20000810 	.word	0x20000810
 800b508:	20000cd0 	.word	0x20000cd0
 800b50c:	20000ca0 	.word	0x20000ca0
 800b510:	20000c9c 	.word	0x20000c9c
 800b514:	20000d04 	.word	0x20000d04

0800b518 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08a      	sub	sp, #40	; 0x28
 800b51c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b51e:	2300      	movs	r3, #0
 800b520:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b522:	f000 faff 	bl	800bb24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b526:	4b1c      	ldr	r3, [pc, #112]	; (800b598 <xTimerCreateTimerTask+0x80>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d021      	beq.n	800b572 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b52e:	2300      	movs	r3, #0
 800b530:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b532:	2300      	movs	r3, #0
 800b534:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b536:	1d3a      	adds	r2, r7, #4
 800b538:	f107 0108 	add.w	r1, r7, #8
 800b53c:	f107 030c 	add.w	r3, r7, #12
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe fb05 	bl	8009b50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b546:	6879      	ldr	r1, [r7, #4]
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	9202      	str	r2, [sp, #8]
 800b54e:	9301      	str	r3, [sp, #4]
 800b550:	2302      	movs	r3, #2
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	2300      	movs	r3, #0
 800b556:	460a      	mov	r2, r1
 800b558:	4910      	ldr	r1, [pc, #64]	; (800b59c <xTimerCreateTimerTask+0x84>)
 800b55a:	4811      	ldr	r0, [pc, #68]	; (800b5a0 <xTimerCreateTimerTask+0x88>)
 800b55c:	f7ff f89a 	bl	800a694 <xTaskCreateStatic>
 800b560:	4602      	mov	r2, r0
 800b562:	4b10      	ldr	r3, [pc, #64]	; (800b5a4 <xTimerCreateTimerTask+0x8c>)
 800b564:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b566:	4b0f      	ldr	r3, [pc, #60]	; (800b5a4 <xTimerCreateTimerTask+0x8c>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d001      	beq.n	800b572 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b56e:	2301      	movs	r3, #1
 800b570:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d109      	bne.n	800b58c <xTimerCreateTimerTask+0x74>
 800b578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	613b      	str	r3, [r7, #16]
 800b58a:	e7fe      	b.n	800b58a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b58c:	697b      	ldr	r3, [r7, #20]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3718      	adds	r7, #24
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20000d40 	.word	0x20000d40
 800b59c:	0800dcd0 	.word	0x0800dcd0
 800b5a0:	0800b6d9 	.word	0x0800b6d9
 800b5a4:	20000d44 	.word	0x20000d44

0800b5a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08a      	sub	sp, #40	; 0x28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
 800b5b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d109      	bne.n	800b5d4 <xTimerGenericCommand+0x2c>
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	623b      	str	r3, [r7, #32]
 800b5d2:	e7fe      	b.n	800b5d2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b5d4:	4b19      	ldr	r3, [pc, #100]	; (800b63c <xTimerGenericCommand+0x94>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d02a      	beq.n	800b632 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	2b05      	cmp	r3, #5
 800b5ec:	dc18      	bgt.n	800b620 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b5ee:	f7ff fe5b 	bl	800b2a8 <xTaskGetSchedulerState>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d109      	bne.n	800b60c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b5f8:	4b10      	ldr	r3, [pc, #64]	; (800b63c <xTimerGenericCommand+0x94>)
 800b5fa:	6818      	ldr	r0, [r3, #0]
 800b5fc:	f107 0110 	add.w	r1, r7, #16
 800b600:	2300      	movs	r3, #0
 800b602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b604:	f7fe fc70 	bl	8009ee8 <xQueueGenericSend>
 800b608:	6278      	str	r0, [r7, #36]	; 0x24
 800b60a:	e012      	b.n	800b632 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b60c:	4b0b      	ldr	r3, [pc, #44]	; (800b63c <xTimerGenericCommand+0x94>)
 800b60e:	6818      	ldr	r0, [r3, #0]
 800b610:	f107 0110 	add.w	r1, r7, #16
 800b614:	2300      	movs	r3, #0
 800b616:	2200      	movs	r2, #0
 800b618:	f7fe fc66 	bl	8009ee8 <xQueueGenericSend>
 800b61c:	6278      	str	r0, [r7, #36]	; 0x24
 800b61e:	e008      	b.n	800b632 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b620:	4b06      	ldr	r3, [pc, #24]	; (800b63c <xTimerGenericCommand+0x94>)
 800b622:	6818      	ldr	r0, [r3, #0]
 800b624:	f107 0110 	add.w	r1, r7, #16
 800b628:	2300      	movs	r3, #0
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	f7fe fd56 	bl	800a0dc <xQueueGenericSendFromISR>
 800b630:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b634:	4618      	mov	r0, r3
 800b636:	3728      	adds	r7, #40	; 0x28
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	20000d40 	.word	0x20000d40

0800b640 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af02      	add	r7, sp, #8
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b64a:	4b22      	ldr	r3, [pc, #136]	; (800b6d4 <prvProcessExpiredTimer+0x94>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	3304      	adds	r3, #4
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fe fb1d 	bl	8009c98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b664:	f003 0304 	and.w	r3, r3, #4
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d021      	beq.n	800b6b0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	699a      	ldr	r2, [r3, #24]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	18d1      	adds	r1, r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	6978      	ldr	r0, [r7, #20]
 800b67a:	f000 f8d1 	bl	800b820 <prvInsertTimerInActiveList>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d01e      	beq.n	800b6c2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b684:	2300      	movs	r3, #0
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	2300      	movs	r3, #0
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	2100      	movs	r1, #0
 800b68e:	6978      	ldr	r0, [r7, #20]
 800b690:	f7ff ff8a 	bl	800b5a8 <xTimerGenericCommand>
 800b694:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d112      	bne.n	800b6c2 <prvProcessExpiredTimer+0x82>
 800b69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a0:	f383 8811 	msr	BASEPRI, r3
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	60fb      	str	r3, [r7, #12]
 800b6ae:	e7fe      	b.n	800b6ae <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6b6:	f023 0301 	bic.w	r3, r3, #1
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	6a1b      	ldr	r3, [r3, #32]
 800b6c6:	6978      	ldr	r0, [r7, #20]
 800b6c8:	4798      	blx	r3
}
 800b6ca:	bf00      	nop
 800b6cc:	3718      	adds	r7, #24
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	20000d38 	.word	0x20000d38

0800b6d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6e0:	f107 0308 	add.w	r3, r7, #8
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 f857 	bl	800b798 <prvGetNextExpireTime>
 800b6ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f000 f803 	bl	800b6fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b6f6:	f000 f8d5 	bl	800b8a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6fa:	e7f1      	b.n	800b6e0 <prvTimerTask+0x8>

0800b6fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b706:	f7ff f9fb 	bl	800ab00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b70a:	f107 0308 	add.w	r3, r7, #8
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 f866 	bl	800b7e0 <prvSampleTimeNow>
 800b714:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d130      	bne.n	800b77e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10a      	bne.n	800b738 <prvProcessTimerOrBlockTask+0x3c>
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	429a      	cmp	r2, r3
 800b728:	d806      	bhi.n	800b738 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b72a:	f7ff f9f7 	bl	800ab1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b72e:	68f9      	ldr	r1, [r7, #12]
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7ff ff85 	bl	800b640 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b736:	e024      	b.n	800b782 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d008      	beq.n	800b750 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b73e:	4b13      	ldr	r3, [pc, #76]	; (800b78c <prvProcessTimerOrBlockTask+0x90>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d101      	bne.n	800b74c <prvProcessTimerOrBlockTask+0x50>
 800b748:	2301      	movs	r3, #1
 800b74a:	e000      	b.n	800b74e <prvProcessTimerOrBlockTask+0x52>
 800b74c:	2300      	movs	r3, #0
 800b74e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b750:	4b0f      	ldr	r3, [pc, #60]	; (800b790 <prvProcessTimerOrBlockTask+0x94>)
 800b752:	6818      	ldr	r0, [r3, #0]
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	4619      	mov	r1, r3
 800b75e:	f7fe ff65 	bl	800a62c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b762:	f7ff f9db 	bl	800ab1c <xTaskResumeAll>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10a      	bne.n	800b782 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b76c:	4b09      	ldr	r3, [pc, #36]	; (800b794 <prvProcessTimerOrBlockTask+0x98>)
 800b76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	f3bf 8f4f 	dsb	sy
 800b778:	f3bf 8f6f 	isb	sy
}
 800b77c:	e001      	b.n	800b782 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b77e:	f7ff f9cd 	bl	800ab1c <xTaskResumeAll>
}
 800b782:	bf00      	nop
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	20000d3c 	.word	0x20000d3c
 800b790:	20000d40 	.word	0x20000d40
 800b794:	e000ed04 	.word	0xe000ed04

0800b798 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7a0:	4b0e      	ldr	r3, [pc, #56]	; (800b7dc <prvGetNextExpireTime+0x44>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d101      	bne.n	800b7ae <prvGetNextExpireTime+0x16>
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	e000      	b.n	800b7b0 <prvGetNextExpireTime+0x18>
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d105      	bne.n	800b7c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7bc:	4b07      	ldr	r3, [pc, #28]	; (800b7dc <prvGetNextExpireTime+0x44>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	60fb      	str	r3, [r7, #12]
 800b7c6:	e001      	b.n	800b7cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	20000d38 	.word	0x20000d38

0800b7e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b7e8:	f7ff fa34 	bl	800ac54 <xTaskGetTickCount>
 800b7ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b7ee:	4b0b      	ldr	r3, [pc, #44]	; (800b81c <prvSampleTimeNow+0x3c>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d205      	bcs.n	800b804 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b7f8:	f000 f930 	bl	800ba5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	601a      	str	r2, [r3, #0]
 800b802:	e002      	b.n	800b80a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b80a:	4a04      	ldr	r2, [pc, #16]	; (800b81c <prvSampleTimeNow+0x3c>)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b810:	68fb      	ldr	r3, [r7, #12]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	20000d48 	.word	0x20000d48

0800b820 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
 800b82c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b82e:	2300      	movs	r3, #0
 800b830:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b83e:	68ba      	ldr	r2, [r7, #8]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	429a      	cmp	r2, r3
 800b844:	d812      	bhi.n	800b86c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	1ad2      	subs	r2, r2, r3
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	429a      	cmp	r2, r3
 800b852:	d302      	bcc.n	800b85a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b854:	2301      	movs	r3, #1
 800b856:	617b      	str	r3, [r7, #20]
 800b858:	e01b      	b.n	800b892 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b85a:	4b10      	ldr	r3, [pc, #64]	; (800b89c <prvInsertTimerInActiveList+0x7c>)
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	3304      	adds	r3, #4
 800b862:	4619      	mov	r1, r3
 800b864:	4610      	mov	r0, r2
 800b866:	f7fe f9de 	bl	8009c26 <vListInsert>
 800b86a:	e012      	b.n	800b892 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	429a      	cmp	r2, r3
 800b872:	d206      	bcs.n	800b882 <prvInsertTimerInActiveList+0x62>
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d302      	bcc.n	800b882 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b87c:	2301      	movs	r3, #1
 800b87e:	617b      	str	r3, [r7, #20]
 800b880:	e007      	b.n	800b892 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b882:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <prvInsertTimerInActiveList+0x80>)
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3304      	adds	r3, #4
 800b88a:	4619      	mov	r1, r3
 800b88c:	4610      	mov	r0, r2
 800b88e:	f7fe f9ca 	bl	8009c26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b892:	697b      	ldr	r3, [r7, #20]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3718      	adds	r7, #24
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	20000d3c 	.word	0x20000d3c
 800b8a0:	20000d38 	.word	0x20000d38

0800b8a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b08e      	sub	sp, #56	; 0x38
 800b8a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8aa:	e0c6      	b.n	800ba3a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	da17      	bge.n	800b8e2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8b2:	1d3b      	adds	r3, r7, #4
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d109      	bne.n	800b8d2 <prvProcessReceivedCommands+0x2e>
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	61fb      	str	r3, [r7, #28]
 800b8d0:	e7fe      	b.n	800b8d0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8d8:	6850      	ldr	r0, [r2, #4]
 800b8da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8dc:	6892      	ldr	r2, [r2, #8]
 800b8de:	4611      	mov	r1, r2
 800b8e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f2c0 80a7 	blt.w	800ba38 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d004      	beq.n	800b900 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	3304      	adds	r3, #4
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fe f9cc 	bl	8009c98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b900:	463b      	mov	r3, r7
 800b902:	4618      	mov	r0, r3
 800b904:	f7ff ff6c 	bl	800b7e0 <prvSampleTimeNow>
 800b908:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b09      	cmp	r3, #9
 800b90e:	f200 8094 	bhi.w	800ba3a <prvProcessReceivedCommands+0x196>
 800b912:	a201      	add	r2, pc, #4	; (adr r2, 800b918 <prvProcessReceivedCommands+0x74>)
 800b914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b918:	0800b941 	.word	0x0800b941
 800b91c:	0800b941 	.word	0x0800b941
 800b920:	0800b941 	.word	0x0800b941
 800b924:	0800b9b3 	.word	0x0800b9b3
 800b928:	0800b9c7 	.word	0x0800b9c7
 800b92c:	0800ba0f 	.word	0x0800ba0f
 800b930:	0800b941 	.word	0x0800b941
 800b934:	0800b941 	.word	0x0800b941
 800b938:	0800b9b3 	.word	0x0800b9b3
 800b93c:	0800b9c7 	.word	0x0800b9c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b946:	f043 0301 	orr.w	r3, r3, #1
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	699b      	ldr	r3, [r3, #24]
 800b958:	18d1      	adds	r1, r2, r3
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b960:	f7ff ff5e 	bl	800b820 <prvInsertTimerInActiveList>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d067      	beq.n	800ba3a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96c:	6a1b      	ldr	r3, [r3, #32]
 800b96e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b970:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d05c      	beq.n	800ba3a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b984:	699b      	ldr	r3, [r3, #24]
 800b986:	441a      	add	r2, r3
 800b988:	2300      	movs	r3, #0
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	2300      	movs	r3, #0
 800b98e:	2100      	movs	r1, #0
 800b990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b992:	f7ff fe09 	bl	800b5a8 <xTimerGenericCommand>
 800b996:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b998:	6a3b      	ldr	r3, [r7, #32]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d14d      	bne.n	800ba3a <prvProcessReceivedCommands+0x196>
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	61bb      	str	r3, [r7, #24]
 800b9b0:	e7fe      	b.n	800b9b0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9b8:	f023 0301 	bic.w	r3, r3, #1
 800b9bc:	b2da      	uxtb	r2, r3
 800b9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b9c4:	e039      	b.n	800ba3a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9cc:	f043 0301 	orr.w	r3, r3, #1
 800b9d0:	b2da      	uxtb	r2, r3
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9d8:	68ba      	ldr	r2, [r7, #8]
 800b9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e0:	699b      	ldr	r3, [r3, #24]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d109      	bne.n	800b9fa <prvProcessReceivedCommands+0x156>
 800b9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ea:	f383 8811 	msr	BASEPRI, r3
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	f3bf 8f4f 	dsb	sy
 800b9f6:	617b      	str	r3, [r7, #20]
 800b9f8:	e7fe      	b.n	800b9f8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fc:	699a      	ldr	r2, [r3, #24]
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	18d1      	adds	r1, r2, r3
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba08:	f7ff ff0a 	bl	800b820 <prvInsertTimerInActiveList>
					break;
 800ba0c:	e015      	b.n	800ba3a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba14:	f003 0302 	and.w	r3, r3, #2
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d103      	bne.n	800ba24 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800ba1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba1e:	f000 fbc1 	bl	800c1a4 <vPortFree>
 800ba22:	e00a      	b.n	800ba3a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba2a:	f023 0301 	bic.w	r3, r3, #1
 800ba2e:	b2da      	uxtb	r2, r3
 800ba30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba36:	e000      	b.n	800ba3a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ba38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba3a:	4b07      	ldr	r3, [pc, #28]	; (800ba58 <prvProcessReceivedCommands+0x1b4>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	1d39      	adds	r1, r7, #4
 800ba40:	2200      	movs	r2, #0
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fe fbde 	bl	800a204 <xQueueReceive>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	f47f af2e 	bne.w	800b8ac <prvProcessReceivedCommands+0x8>
	}
}
 800ba50:	bf00      	nop
 800ba52:	3730      	adds	r7, #48	; 0x30
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	20000d40 	.word	0x20000d40

0800ba5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b088      	sub	sp, #32
 800ba60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba62:	e047      	b.n	800baf4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba64:	4b2d      	ldr	r3, [pc, #180]	; (800bb1c <prvSwitchTimerLists+0xc0>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba6e:	4b2b      	ldr	r3, [pc, #172]	; (800bb1c <prvSwitchTimerLists+0xc0>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fe f90b 	bl	8009c98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6a1b      	ldr	r3, [r3, #32]
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba90:	f003 0304 	and.w	r3, r3, #4
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d02d      	beq.n	800baf4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	4413      	add	r3, r2
 800baa0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d90e      	bls.n	800bac8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	68fa      	ldr	r2, [r7, #12]
 800bab4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bab6:	4b19      	ldr	r3, [pc, #100]	; (800bb1c <prvSwitchTimerLists+0xc0>)
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	3304      	adds	r3, #4
 800babe:	4619      	mov	r1, r3
 800bac0:	4610      	mov	r0, r2
 800bac2:	f7fe f8b0 	bl	8009c26 <vListInsert>
 800bac6:	e015      	b.n	800baf4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bac8:	2300      	movs	r3, #0
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	2300      	movs	r3, #0
 800bace:	693a      	ldr	r2, [r7, #16]
 800bad0:	2100      	movs	r1, #0
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7ff fd68 	bl	800b5a8 <xTimerGenericCommand>
 800bad8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d109      	bne.n	800baf4 <prvSwitchTimerLists+0x98>
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	603b      	str	r3, [r7, #0]
 800baf2:	e7fe      	b.n	800baf2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800baf4:	4b09      	ldr	r3, [pc, #36]	; (800bb1c <prvSwitchTimerLists+0xc0>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1b2      	bne.n	800ba64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bafe:	4b07      	ldr	r3, [pc, #28]	; (800bb1c <prvSwitchTimerLists+0xc0>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb04:	4b06      	ldr	r3, [pc, #24]	; (800bb20 <prvSwitchTimerLists+0xc4>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a04      	ldr	r2, [pc, #16]	; (800bb1c <prvSwitchTimerLists+0xc0>)
 800bb0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb0c:	4a04      	ldr	r2, [pc, #16]	; (800bb20 <prvSwitchTimerLists+0xc4>)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	6013      	str	r3, [r2, #0]
}
 800bb12:	bf00      	nop
 800bb14:	3718      	adds	r7, #24
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	20000d38 	.word	0x20000d38
 800bb20:	20000d3c 	.word	0x20000d3c

0800bb24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb2a:	f000 f95f 	bl	800bdec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb2e:	4b15      	ldr	r3, [pc, #84]	; (800bb84 <prvCheckForValidListAndQueue+0x60>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d120      	bne.n	800bb78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb36:	4814      	ldr	r0, [pc, #80]	; (800bb88 <prvCheckForValidListAndQueue+0x64>)
 800bb38:	f7fe f824 	bl	8009b84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb3c:	4813      	ldr	r0, [pc, #76]	; (800bb8c <prvCheckForValidListAndQueue+0x68>)
 800bb3e:	f7fe f821 	bl	8009b84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb42:	4b13      	ldr	r3, [pc, #76]	; (800bb90 <prvCheckForValidListAndQueue+0x6c>)
 800bb44:	4a10      	ldr	r2, [pc, #64]	; (800bb88 <prvCheckForValidListAndQueue+0x64>)
 800bb46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb48:	4b12      	ldr	r3, [pc, #72]	; (800bb94 <prvCheckForValidListAndQueue+0x70>)
 800bb4a:	4a10      	ldr	r2, [pc, #64]	; (800bb8c <prvCheckForValidListAndQueue+0x68>)
 800bb4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb4e:	2300      	movs	r3, #0
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	4b11      	ldr	r3, [pc, #68]	; (800bb98 <prvCheckForValidListAndQueue+0x74>)
 800bb54:	4a11      	ldr	r2, [pc, #68]	; (800bb9c <prvCheckForValidListAndQueue+0x78>)
 800bb56:	2110      	movs	r1, #16
 800bb58:	200a      	movs	r0, #10
 800bb5a:	f7fe f92f 	bl	8009dbc <xQueueGenericCreateStatic>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	4b08      	ldr	r3, [pc, #32]	; (800bb84 <prvCheckForValidListAndQueue+0x60>)
 800bb62:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb64:	4b07      	ldr	r3, [pc, #28]	; (800bb84 <prvCheckForValidListAndQueue+0x60>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d005      	beq.n	800bb78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb6c:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <prvCheckForValidListAndQueue+0x60>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	490b      	ldr	r1, [pc, #44]	; (800bba0 <prvCheckForValidListAndQueue+0x7c>)
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe fd32 	bl	800a5dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb78:	f000 f966 	bl	800be48 <vPortExitCritical>
}
 800bb7c:	bf00      	nop
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	20000d40 	.word	0x20000d40
 800bb88:	20000d10 	.word	0x20000d10
 800bb8c:	20000d24 	.word	0x20000d24
 800bb90:	20000d38 	.word	0x20000d38
 800bb94:	20000d3c 	.word	0x20000d3c
 800bb98:	20000dec 	.word	0x20000dec
 800bb9c:	20000d4c 	.word	0x20000d4c
 800bba0:	0800dcd8 	.word	0x0800dcd8

0800bba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	3b04      	subs	r3, #4
 800bbb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bbbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	3b04      	subs	r3, #4
 800bbc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	f023 0201 	bic.w	r2, r3, #1
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	3b04      	subs	r3, #4
 800bbd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bbd4:	4a0c      	ldr	r2, [pc, #48]	; (800bc08 <pxPortInitialiseStack+0x64>)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	3b14      	subs	r3, #20
 800bbde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3b04      	subs	r3, #4
 800bbea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f06f 0202 	mvn.w	r2, #2
 800bbf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	3b20      	subs	r3, #32
 800bbf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3714      	adds	r7, #20
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr
 800bc08:	0800bc0d 	.word	0x0800bc0d

0800bc0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b085      	sub	sp, #20
 800bc10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc12:	2300      	movs	r3, #0
 800bc14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc16:	4b11      	ldr	r3, [pc, #68]	; (800bc5c <prvTaskExitError+0x50>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1e:	d009      	beq.n	800bc34 <prvTaskExitError+0x28>
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	60fb      	str	r3, [r7, #12]
 800bc32:	e7fe      	b.n	800bc32 <prvTaskExitError+0x26>
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc46:	bf00      	nop
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d0fc      	beq.n	800bc48 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc4e:	bf00      	nop
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	2000004c 	.word	0x2000004c

0800bc60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc60:	4b07      	ldr	r3, [pc, #28]	; (800bc80 <pxCurrentTCBConst2>)
 800bc62:	6819      	ldr	r1, [r3, #0]
 800bc64:	6808      	ldr	r0, [r1, #0]
 800bc66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6a:	f380 8809 	msr	PSP, r0
 800bc6e:	f3bf 8f6f 	isb	sy
 800bc72:	f04f 0000 	mov.w	r0, #0
 800bc76:	f380 8811 	msr	BASEPRI, r0
 800bc7a:	4770      	bx	lr
 800bc7c:	f3af 8000 	nop.w

0800bc80 <pxCurrentTCBConst2>:
 800bc80:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc84:	bf00      	nop
 800bc86:	bf00      	nop

0800bc88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc88:	4808      	ldr	r0, [pc, #32]	; (800bcac <prvPortStartFirstTask+0x24>)
 800bc8a:	6800      	ldr	r0, [r0, #0]
 800bc8c:	6800      	ldr	r0, [r0, #0]
 800bc8e:	f380 8808 	msr	MSP, r0
 800bc92:	f04f 0000 	mov.w	r0, #0
 800bc96:	f380 8814 	msr	CONTROL, r0
 800bc9a:	b662      	cpsie	i
 800bc9c:	b661      	cpsie	f
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	df00      	svc	0
 800bca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcaa:	bf00      	nop
 800bcac:	e000ed08 	.word	0xe000ed08

0800bcb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bcb6:	4b44      	ldr	r3, [pc, #272]	; (800bdc8 <xPortStartScheduler+0x118>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a44      	ldr	r2, [pc, #272]	; (800bdcc <xPortStartScheduler+0x11c>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d109      	bne.n	800bcd4 <xPortStartScheduler+0x24>
 800bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	613b      	str	r3, [r7, #16]
 800bcd2:	e7fe      	b.n	800bcd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bcd4:	4b3c      	ldr	r3, [pc, #240]	; (800bdc8 <xPortStartScheduler+0x118>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a3d      	ldr	r2, [pc, #244]	; (800bdd0 <xPortStartScheduler+0x120>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d109      	bne.n	800bcf2 <xPortStartScheduler+0x42>
 800bcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce2:	f383 8811 	msr	BASEPRI, r3
 800bce6:	f3bf 8f6f 	isb	sy
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	e7fe      	b.n	800bcf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bcf2:	4b38      	ldr	r3, [pc, #224]	; (800bdd4 <xPortStartScheduler+0x124>)
 800bcf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	22ff      	movs	r2, #255	; 0xff
 800bd02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd0c:	78fb      	ldrb	r3, [r7, #3]
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd14:	b2da      	uxtb	r2, r3
 800bd16:	4b30      	ldr	r3, [pc, #192]	; (800bdd8 <xPortStartScheduler+0x128>)
 800bd18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd1a:	4b30      	ldr	r3, [pc, #192]	; (800bddc <xPortStartScheduler+0x12c>)
 800bd1c:	2207      	movs	r2, #7
 800bd1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd20:	e009      	b.n	800bd36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800bd22:	4b2e      	ldr	r3, [pc, #184]	; (800bddc <xPortStartScheduler+0x12c>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	4a2c      	ldr	r2, [pc, #176]	; (800bddc <xPortStartScheduler+0x12c>)
 800bd2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd2c:	78fb      	ldrb	r3, [r7, #3]
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	005b      	lsls	r3, r3, #1
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd36:	78fb      	ldrb	r3, [r7, #3]
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd3e:	2b80      	cmp	r3, #128	; 0x80
 800bd40:	d0ef      	beq.n	800bd22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd42:	4b26      	ldr	r3, [pc, #152]	; (800bddc <xPortStartScheduler+0x12c>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f1c3 0307 	rsb	r3, r3, #7
 800bd4a:	2b04      	cmp	r3, #4
 800bd4c:	d009      	beq.n	800bd62 <xPortStartScheduler+0xb2>
 800bd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	60bb      	str	r3, [r7, #8]
 800bd60:	e7fe      	b.n	800bd60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd62:	4b1e      	ldr	r3, [pc, #120]	; (800bddc <xPortStartScheduler+0x12c>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	021b      	lsls	r3, r3, #8
 800bd68:	4a1c      	ldr	r2, [pc, #112]	; (800bddc <xPortStartScheduler+0x12c>)
 800bd6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd6c:	4b1b      	ldr	r3, [pc, #108]	; (800bddc <xPortStartScheduler+0x12c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd74:	4a19      	ldr	r2, [pc, #100]	; (800bddc <xPortStartScheduler+0x12c>)
 800bd76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd80:	4b17      	ldr	r3, [pc, #92]	; (800bde0 <xPortStartScheduler+0x130>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a16      	ldr	r2, [pc, #88]	; (800bde0 <xPortStartScheduler+0x130>)
 800bd86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd8c:	4b14      	ldr	r3, [pc, #80]	; (800bde0 <xPortStartScheduler+0x130>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a13      	ldr	r2, [pc, #76]	; (800bde0 <xPortStartScheduler+0x130>)
 800bd92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd98:	f000 f8d6 	bl	800bf48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd9c:	4b11      	ldr	r3, [pc, #68]	; (800bde4 <xPortStartScheduler+0x134>)
 800bd9e:	2200      	movs	r2, #0
 800bda0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bda2:	f000 f8f5 	bl	800bf90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bda6:	4b10      	ldr	r3, [pc, #64]	; (800bde8 <xPortStartScheduler+0x138>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a0f      	ldr	r2, [pc, #60]	; (800bde8 <xPortStartScheduler+0x138>)
 800bdac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bdb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bdb2:	f7ff ff69 	bl	800bc88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bdb6:	f7ff f815 	bl	800ade4 <vTaskSwitchContext>
	prvTaskExitError();
 800bdba:	f7ff ff27 	bl	800bc0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3718      	adds	r7, #24
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	e000ed00 	.word	0xe000ed00
 800bdcc:	410fc271 	.word	0x410fc271
 800bdd0:	410fc270 	.word	0x410fc270
 800bdd4:	e000e400 	.word	0xe000e400
 800bdd8:	20000e3c 	.word	0x20000e3c
 800bddc:	20000e40 	.word	0x20000e40
 800bde0:	e000ed20 	.word	0xe000ed20
 800bde4:	2000004c 	.word	0x2000004c
 800bde8:	e000ef34 	.word	0xe000ef34

0800bdec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be04:	4b0e      	ldr	r3, [pc, #56]	; (800be40 <vPortEnterCritical+0x54>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3301      	adds	r3, #1
 800be0a:	4a0d      	ldr	r2, [pc, #52]	; (800be40 <vPortEnterCritical+0x54>)
 800be0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be0e:	4b0c      	ldr	r3, [pc, #48]	; (800be40 <vPortEnterCritical+0x54>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b01      	cmp	r3, #1
 800be14:	d10e      	bne.n	800be34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be16:	4b0b      	ldr	r3, [pc, #44]	; (800be44 <vPortEnterCritical+0x58>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d009      	beq.n	800be34 <vPortEnterCritical+0x48>
 800be20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	603b      	str	r3, [r7, #0]
 800be32:	e7fe      	b.n	800be32 <vPortEnterCritical+0x46>
	}
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	2000004c 	.word	0x2000004c
 800be44:	e000ed04 	.word	0xe000ed04

0800be48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be4e:	4b11      	ldr	r3, [pc, #68]	; (800be94 <vPortExitCritical+0x4c>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d109      	bne.n	800be6a <vPortExitCritical+0x22>
 800be56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	607b      	str	r3, [r7, #4]
 800be68:	e7fe      	b.n	800be68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800be6a:	4b0a      	ldr	r3, [pc, #40]	; (800be94 <vPortExitCritical+0x4c>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3b01      	subs	r3, #1
 800be70:	4a08      	ldr	r2, [pc, #32]	; (800be94 <vPortExitCritical+0x4c>)
 800be72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be74:	4b07      	ldr	r3, [pc, #28]	; (800be94 <vPortExitCritical+0x4c>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d104      	bne.n	800be86 <vPortExitCritical+0x3e>
 800be7c:	2300      	movs	r3, #0
 800be7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800be86:	bf00      	nop
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	2000004c 	.word	0x2000004c
	...

0800bea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bea0:	f3ef 8009 	mrs	r0, PSP
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	4b15      	ldr	r3, [pc, #84]	; (800bf00 <pxCurrentTCBConst>)
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	f01e 0f10 	tst.w	lr, #16
 800beb0:	bf08      	it	eq
 800beb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800beb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beba:	6010      	str	r0, [r2, #0]
 800bebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bec4:	f380 8811 	msr	BASEPRI, r0
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f7fe ff88 	bl	800ade4 <vTaskSwitchContext>
 800bed4:	f04f 0000 	mov.w	r0, #0
 800bed8:	f380 8811 	msr	BASEPRI, r0
 800bedc:	bc09      	pop	{r0, r3}
 800bede:	6819      	ldr	r1, [r3, #0]
 800bee0:	6808      	ldr	r0, [r1, #0]
 800bee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee6:	f01e 0f10 	tst.w	lr, #16
 800beea:	bf08      	it	eq
 800beec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bef0:	f380 8809 	msr	PSP, r0
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	f3af 8000 	nop.w

0800bf00 <pxCurrentTCBConst>:
 800bf00:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf04:	bf00      	nop
 800bf06:	bf00      	nop

0800bf08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf20:	f7fe fea8 	bl	800ac74 <xTaskIncrementTick>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d003      	beq.n	800bf32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf2a:	4b06      	ldr	r3, [pc, #24]	; (800bf44 <SysTick_Handler+0x3c>)
 800bf2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf30:	601a      	str	r2, [r3, #0]
 800bf32:	2300      	movs	r3, #0
 800bf34:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf3c:	bf00      	nop
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	e000ed04 	.word	0xe000ed04

0800bf48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf48:	b480      	push	{r7}
 800bf4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf4c:	4b0b      	ldr	r3, [pc, #44]	; (800bf7c <vPortSetupTimerInterrupt+0x34>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf52:	4b0b      	ldr	r3, [pc, #44]	; (800bf80 <vPortSetupTimerInterrupt+0x38>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf58:	4b0a      	ldr	r3, [pc, #40]	; (800bf84 <vPortSetupTimerInterrupt+0x3c>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a0a      	ldr	r2, [pc, #40]	; (800bf88 <vPortSetupTimerInterrupt+0x40>)
 800bf5e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf62:	099b      	lsrs	r3, r3, #6
 800bf64:	4a09      	ldr	r2, [pc, #36]	; (800bf8c <vPortSetupTimerInterrupt+0x44>)
 800bf66:	3b01      	subs	r3, #1
 800bf68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf6a:	4b04      	ldr	r3, [pc, #16]	; (800bf7c <vPortSetupTimerInterrupt+0x34>)
 800bf6c:	2207      	movs	r2, #7
 800bf6e:	601a      	str	r2, [r3, #0]
}
 800bf70:	bf00      	nop
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop
 800bf7c:	e000e010 	.word	0xe000e010
 800bf80:	e000e018 	.word	0xe000e018
 800bf84:	20000040 	.word	0x20000040
 800bf88:	10624dd3 	.word	0x10624dd3
 800bf8c:	e000e014 	.word	0xe000e014

0800bf90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bfa0 <vPortEnableVFP+0x10>
 800bf94:	6801      	ldr	r1, [r0, #0]
 800bf96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf9a:	6001      	str	r1, [r0, #0]
 800bf9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf9e:	bf00      	nop
 800bfa0:	e000ed88 	.word	0xe000ed88

0800bfa4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bfaa:	f3ef 8305 	mrs	r3, IPSR
 800bfae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2b0f      	cmp	r3, #15
 800bfb4:	d913      	bls.n	800bfde <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bfb6:	4a16      	ldr	r2, [pc, #88]	; (800c010 <vPortValidateInterruptPriority+0x6c>)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4413      	add	r3, r2
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bfc0:	4b14      	ldr	r3, [pc, #80]	; (800c014 <vPortValidateInterruptPriority+0x70>)
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	7afa      	ldrb	r2, [r7, #11]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d209      	bcs.n	800bfde <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800bfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	607b      	str	r3, [r7, #4]
 800bfdc:	e7fe      	b.n	800bfdc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bfde:	4b0e      	ldr	r3, [pc, #56]	; (800c018 <vPortValidateInterruptPriority+0x74>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bfe6:	4b0d      	ldr	r3, [pc, #52]	; (800c01c <vPortValidateInterruptPriority+0x78>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d909      	bls.n	800c002 <vPortValidateInterruptPriority+0x5e>
 800bfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	603b      	str	r3, [r7, #0]
 800c000:	e7fe      	b.n	800c000 <vPortValidateInterruptPriority+0x5c>
	}
 800c002:	bf00      	nop
 800c004:	3714      	adds	r7, #20
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	e000e3f0 	.word	0xe000e3f0
 800c014:	20000e3c 	.word	0x20000e3c
 800c018:	e000ed0c 	.word	0xe000ed0c
 800c01c:	20000e40 	.word	0x20000e40

0800c020 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b08a      	sub	sp, #40	; 0x28
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c028:	2300      	movs	r3, #0
 800c02a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c02c:	f7fe fd68 	bl	800ab00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c030:	4b57      	ldr	r3, [pc, #348]	; (800c190 <pvPortMalloc+0x170>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d101      	bne.n	800c03c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c038:	f000 f90c 	bl	800c254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c03c:	4b55      	ldr	r3, [pc, #340]	; (800c194 <pvPortMalloc+0x174>)
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4013      	ands	r3, r2
 800c044:	2b00      	cmp	r3, #0
 800c046:	f040 808c 	bne.w	800c162 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d01c      	beq.n	800c08a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c050:	2208      	movs	r2, #8
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	4413      	add	r3, r2
 800c056:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f003 0307 	and.w	r3, r3, #7
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d013      	beq.n	800c08a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f023 0307 	bic.w	r3, r3, #7
 800c068:	3308      	adds	r3, #8
 800c06a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f003 0307 	and.w	r3, r3, #7
 800c072:	2b00      	cmp	r3, #0
 800c074:	d009      	beq.n	800c08a <pvPortMalloc+0x6a>
 800c076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	617b      	str	r3, [r7, #20]
 800c088:	e7fe      	b.n	800c088 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d068      	beq.n	800c162 <pvPortMalloc+0x142>
 800c090:	4b41      	ldr	r3, [pc, #260]	; (800c198 <pvPortMalloc+0x178>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	429a      	cmp	r2, r3
 800c098:	d863      	bhi.n	800c162 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c09a:	4b40      	ldr	r3, [pc, #256]	; (800c19c <pvPortMalloc+0x17c>)
 800c09c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c09e:	4b3f      	ldr	r3, [pc, #252]	; (800c19c <pvPortMalloc+0x17c>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0a4:	e004      	b.n	800c0b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d903      	bls.n	800c0c2 <pvPortMalloc+0xa2>
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1f1      	bne.n	800c0a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0c2:	4b33      	ldr	r3, [pc, #204]	; (800c190 <pvPortMalloc+0x170>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d04a      	beq.n	800c162 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c0cc:	6a3b      	ldr	r3, [r7, #32]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2208      	movs	r2, #8
 800c0d2:	4413      	add	r3, r2
 800c0d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	685a      	ldr	r2, [r3, #4]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	1ad2      	subs	r2, r2, r3
 800c0e6:	2308      	movs	r3, #8
 800c0e8:	005b      	lsls	r3, r3, #1
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d91e      	bls.n	800c12c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	f003 0307 	and.w	r3, r3, #7
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d009      	beq.n	800c114 <pvPortMalloc+0xf4>
 800c100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	613b      	str	r3, [r7, #16]
 800c112:	e7fe      	b.n	800c112 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	1ad2      	subs	r2, r2, r3
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c126:	69b8      	ldr	r0, [r7, #24]
 800c128:	f000 f8f6 	bl	800c318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c12c:	4b1a      	ldr	r3, [pc, #104]	; (800c198 <pvPortMalloc+0x178>)
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	4a18      	ldr	r2, [pc, #96]	; (800c198 <pvPortMalloc+0x178>)
 800c138:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c13a:	4b17      	ldr	r3, [pc, #92]	; (800c198 <pvPortMalloc+0x178>)
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	4b18      	ldr	r3, [pc, #96]	; (800c1a0 <pvPortMalloc+0x180>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	429a      	cmp	r2, r3
 800c144:	d203      	bcs.n	800c14e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c146:	4b14      	ldr	r3, [pc, #80]	; (800c198 <pvPortMalloc+0x178>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a15      	ldr	r2, [pc, #84]	; (800c1a0 <pvPortMalloc+0x180>)
 800c14c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c150:	685a      	ldr	r2, [r3, #4]
 800c152:	4b10      	ldr	r3, [pc, #64]	; (800c194 <pvPortMalloc+0x174>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	431a      	orrs	r2, r3
 800c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	2200      	movs	r2, #0
 800c160:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c162:	f7fe fcdb 	bl	800ab1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	f003 0307 	and.w	r3, r3, #7
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d009      	beq.n	800c184 <pvPortMalloc+0x164>
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	60fb      	str	r3, [r7, #12]
 800c182:	e7fe      	b.n	800c182 <pvPortMalloc+0x162>
	return pvReturn;
 800c184:	69fb      	ldr	r3, [r7, #28]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3728      	adds	r7, #40	; 0x28
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	2000aa8c 	.word	0x2000aa8c
 800c194:	2000aa98 	.word	0x2000aa98
 800c198:	2000aa90 	.word	0x2000aa90
 800c19c:	2000aa84 	.word	0x2000aa84
 800c1a0:	2000aa94 	.word	0x2000aa94

0800c1a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d046      	beq.n	800c244 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c1b6:	2308      	movs	r3, #8
 800c1b8:	425b      	negs	r3, r3
 800c1ba:	697a      	ldr	r2, [r7, #20]
 800c1bc:	4413      	add	r3, r2
 800c1be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	685a      	ldr	r2, [r3, #4]
 800c1c8:	4b20      	ldr	r3, [pc, #128]	; (800c24c <vPortFree+0xa8>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d109      	bne.n	800c1e6 <vPortFree+0x42>
 800c1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	e7fe      	b.n	800c1e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d009      	beq.n	800c202 <vPortFree+0x5e>
 800c1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	60bb      	str	r3, [r7, #8]
 800c200:	e7fe      	b.n	800c200 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	685a      	ldr	r2, [r3, #4]
 800c206:	4b11      	ldr	r3, [pc, #68]	; (800c24c <vPortFree+0xa8>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4013      	ands	r3, r2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d019      	beq.n	800c244 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d115      	bne.n	800c244 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	4b0b      	ldr	r3, [pc, #44]	; (800c24c <vPortFree+0xa8>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	43db      	mvns	r3, r3
 800c222:	401a      	ands	r2, r3
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c228:	f7fe fc6a 	bl	800ab00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	685a      	ldr	r2, [r3, #4]
 800c230:	4b07      	ldr	r3, [pc, #28]	; (800c250 <vPortFree+0xac>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4413      	add	r3, r2
 800c236:	4a06      	ldr	r2, [pc, #24]	; (800c250 <vPortFree+0xac>)
 800c238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c23a:	6938      	ldr	r0, [r7, #16]
 800c23c:	f000 f86c 	bl	800c318 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c240:	f7fe fc6c 	bl	800ab1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c244:	bf00      	nop
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	2000aa98 	.word	0x2000aa98
 800c250:	2000aa90 	.word	0x2000aa90

0800c254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c25a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800c25e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c260:	4b27      	ldr	r3, [pc, #156]	; (800c300 <prvHeapInit+0xac>)
 800c262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f003 0307 	and.w	r3, r3, #7
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00c      	beq.n	800c288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	3307      	adds	r3, #7
 800c272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f023 0307 	bic.w	r3, r3, #7
 800c27a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	1ad3      	subs	r3, r2, r3
 800c282:	4a1f      	ldr	r2, [pc, #124]	; (800c300 <prvHeapInit+0xac>)
 800c284:	4413      	add	r3, r2
 800c286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c28c:	4a1d      	ldr	r2, [pc, #116]	; (800c304 <prvHeapInit+0xb0>)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c292:	4b1c      	ldr	r3, [pc, #112]	; (800c304 <prvHeapInit+0xb0>)
 800c294:	2200      	movs	r2, #0
 800c296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	4413      	add	r3, r2
 800c29e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2a0:	2208      	movs	r2, #8
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	1a9b      	subs	r3, r3, r2
 800c2a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f023 0307 	bic.w	r3, r3, #7
 800c2ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	4a15      	ldr	r2, [pc, #84]	; (800c308 <prvHeapInit+0xb4>)
 800c2b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c2b6:	4b14      	ldr	r3, [pc, #80]	; (800c308 <prvHeapInit+0xb4>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c2be:	4b12      	ldr	r3, [pc, #72]	; (800c308 <prvHeapInit+0xb4>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	1ad2      	subs	r2, r2, r3
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2d4:	4b0c      	ldr	r3, [pc, #48]	; (800c308 <prvHeapInit+0xb4>)
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	4a0a      	ldr	r2, [pc, #40]	; (800c30c <prvHeapInit+0xb8>)
 800c2e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	4a09      	ldr	r2, [pc, #36]	; (800c310 <prvHeapInit+0xbc>)
 800c2ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c2ec:	4b09      	ldr	r3, [pc, #36]	; (800c314 <prvHeapInit+0xc0>)
 800c2ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c2f2:	601a      	str	r2, [r3, #0]
}
 800c2f4:	bf00      	nop
 800c2f6:	3714      	adds	r7, #20
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr
 800c300:	20000e44 	.word	0x20000e44
 800c304:	2000aa84 	.word	0x2000aa84
 800c308:	2000aa8c 	.word	0x2000aa8c
 800c30c:	2000aa94 	.word	0x2000aa94
 800c310:	2000aa90 	.word	0x2000aa90
 800c314:	2000aa98 	.word	0x2000aa98

0800c318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c320:	4b28      	ldr	r3, [pc, #160]	; (800c3c4 <prvInsertBlockIntoFreeList+0xac>)
 800c322:	60fb      	str	r3, [r7, #12]
 800c324:	e002      	b.n	800c32c <prvInsertBlockIntoFreeList+0x14>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	60fb      	str	r3, [r7, #12]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	429a      	cmp	r2, r3
 800c334:	d8f7      	bhi.n	800c326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	68ba      	ldr	r2, [r7, #8]
 800c340:	4413      	add	r3, r2
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	429a      	cmp	r2, r3
 800c346:	d108      	bne.n	800c35a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	685a      	ldr	r2, [r3, #4]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	441a      	add	r2, r3
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	441a      	add	r2, r3
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d118      	bne.n	800c3a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	4b15      	ldr	r3, [pc, #84]	; (800c3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	429a      	cmp	r2, r3
 800c378:	d00d      	beq.n	800c396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	441a      	add	r2, r3
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	601a      	str	r2, [r3, #0]
 800c394:	e008      	b.n	800c3a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c396:	4b0c      	ldr	r3, [pc, #48]	; (800c3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	601a      	str	r2, [r3, #0]
 800c39e:	e003      	b.n	800c3a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d002      	beq.n	800c3b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3b6:	bf00      	nop
 800c3b8:	3714      	adds	r7, #20
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	2000aa84 	.word	0x2000aa84
 800c3c8:	2000aa8c 	.word	0x2000aa8c

0800c3cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	4610      	mov	r0, r2
 800c3e4:	f7fc fbb4 	bl	8008b50 <USBD_LL_SetupStage>
}
 800c3e8:	bf00      	nop
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800c402:	78fb      	ldrb	r3, [r7, #3]
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	015b      	lsls	r3, r3, #5
 800c408:	4413      	add	r3, r2
 800c40a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	78fb      	ldrb	r3, [r7, #3]
 800c412:	4619      	mov	r1, r3
 800c414:	f7fc fbe7 	bl	8008be6 <USBD_LL_DataOutStage>
}
 800c418:	bf00      	nop
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	460b      	mov	r3, r1
 800c42a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800c432:	78fb      	ldrb	r3, [r7, #3]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	015b      	lsls	r3, r3, #5
 800c438:	4413      	add	r3, r2
 800c43a:	333c      	adds	r3, #60	; 0x3c
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	78fb      	ldrb	r3, [r7, #3]
 800c440:	4619      	mov	r1, r3
 800c442:	f7fc fc41 	bl	8008cc8 <USBD_LL_DataInStage>
}
 800c446:	bf00      	nop
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b082      	sub	sp, #8
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7fc fd54 	bl	8008f0a <USBD_LL_SOF>
}
 800c462:	bf00      	nop
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b084      	sub	sp, #16
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c472:	2301      	movs	r3, #1
 800c474:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	689b      	ldr	r3, [r3, #8]
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	d001      	beq.n	800c482 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c47e:	f7f6 fccd 	bl	8002e1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c488:	7bfa      	ldrb	r2, [r7, #15]
 800c48a:	4611      	mov	r1, r2
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7fc fd01 	bl	8008e94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c498:	4618      	mov	r0, r3
 800c49a:	f7fc fcba 	bl	8008e12 <USBD_LL_Reset>
}
 800c49e:	bf00      	nop
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
	...

0800c4a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7fc fcfc 	bl	8008eb4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	699b      	ldr	r3, [r3, #24]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d005      	beq.n	800c4d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c4c4:	4b04      	ldr	r3, [pc, #16]	; (800c4d8 <HAL_PCD_SuspendCallback+0x30>)
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	4a03      	ldr	r2, [pc, #12]	; (800c4d8 <HAL_PCD_SuspendCallback+0x30>)
 800c4ca:	f043 0306 	orr.w	r3, r3, #6
 800c4ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c4d0:	bf00      	nop
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	e000ed00 	.word	0xe000ed00

0800c4dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d007      	beq.n	800c4fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c4ec:	4b08      	ldr	r3, [pc, #32]	; (800c510 <HAL_PCD_ResumeCallback+0x34>)
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	4a07      	ldr	r2, [pc, #28]	; (800c510 <HAL_PCD_ResumeCallback+0x34>)
 800c4f2:	f023 0306 	bic.w	r3, r3, #6
 800c4f6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c4f8:	f000 f9bc 	bl	800c874 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c502:	4618      	mov	r0, r3
 800c504:	f7fc fceb 	bl	8008ede <USBD_LL_Resume>
}
 800c508:	bf00      	nop
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	e000ed00 	.word	0xe000ed00

0800c514 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	4608      	mov	r0, r1
 800c51e:	4611      	mov	r1, r2
 800c520:	461a      	mov	r2, r3
 800c522:	4603      	mov	r3, r0
 800c524:	70fb      	strb	r3, [r7, #3]
 800c526:	460b      	mov	r3, r1
 800c528:	70bb      	strb	r3, [r7, #2]
 800c52a:	4613      	mov	r3, r2
 800c52c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c52e:	2300      	movs	r3, #0
 800c530:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c532:	2300      	movs	r3, #0
 800c534:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c53c:	78bb      	ldrb	r3, [r7, #2]
 800c53e:	883a      	ldrh	r2, [r7, #0]
 800c540:	78f9      	ldrb	r1, [r7, #3]
 800c542:	f7f8 f969 	bl	8004818 <HAL_PCD_EP_Open>
 800c546:	4603      	mov	r3, r0
 800c548:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c54a:	7bbb      	ldrb	r3, [r7, #14]
 800c54c:	2b03      	cmp	r3, #3
 800c54e:	d817      	bhi.n	800c580 <USBD_LL_OpenEP+0x6c>
 800c550:	a201      	add	r2, pc, #4	; (adr r2, 800c558 <USBD_LL_OpenEP+0x44>)
 800c552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c556:	bf00      	nop
 800c558:	0800c569 	.word	0x0800c569
 800c55c:	0800c56f 	.word	0x0800c56f
 800c560:	0800c575 	.word	0x0800c575
 800c564:	0800c57b 	.word	0x0800c57b
    case HAL_OK :
      usb_status = USBD_OK;
 800c568:	2300      	movs	r3, #0
 800c56a:	73fb      	strb	r3, [r7, #15]
    break;
 800c56c:	e00b      	b.n	800c586 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c56e:	2302      	movs	r3, #2
 800c570:	73fb      	strb	r3, [r7, #15]
    break;
 800c572:	e008      	b.n	800c586 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c574:	2301      	movs	r3, #1
 800c576:	73fb      	strb	r3, [r7, #15]
    break;
 800c578:	e005      	b.n	800c586 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c57a:	2302      	movs	r3, #2
 800c57c:	73fb      	strb	r3, [r7, #15]
    break;
 800c57e:	e002      	b.n	800c586 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c580:	2302      	movs	r3, #2
 800c582:	73fb      	strb	r3, [r7, #15]
    break;
 800c584:	bf00      	nop
  }
  return usb_status;
 800c586:	7bfb      	ldrb	r3, [r7, #15]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	460b      	mov	r3, r1
 800c59a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5aa:	78fa      	ldrb	r2, [r7, #3]
 800c5ac:	4611      	mov	r1, r2
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7f8 fa05 	bl	80049be <HAL_PCD_EP_SetStall>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c5b8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ba:	2b03      	cmp	r3, #3
 800c5bc:	d816      	bhi.n	800c5ec <USBD_LL_StallEP+0x5c>
 800c5be:	a201      	add	r2, pc, #4	; (adr r2, 800c5c4 <USBD_LL_StallEP+0x34>)
 800c5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c4:	0800c5d5 	.word	0x0800c5d5
 800c5c8:	0800c5db 	.word	0x0800c5db
 800c5cc:	0800c5e1 	.word	0x0800c5e1
 800c5d0:	0800c5e7 	.word	0x0800c5e7
    case HAL_OK :
      usb_status = USBD_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d8:	e00b      	b.n	800c5f2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5da:	2302      	movs	r3, #2
 800c5dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c5de:	e008      	b.n	800c5f2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5e4:	e005      	b.n	800c5f2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5e6:	2302      	movs	r3, #2
 800c5e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ea:	e002      	b.n	800c5f2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c5ec:	2302      	movs	r3, #2
 800c5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c5f0:	bf00      	nop
  }
  return usb_status;  
 800c5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3710      	adds	r7, #16
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	460b      	mov	r3, r1
 800c606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c608:	2300      	movs	r3, #0
 800c60a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c60c:	2300      	movs	r3, #0
 800c60e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c616:	78fa      	ldrb	r2, [r7, #3]
 800c618:	4611      	mov	r1, r2
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7f8 fa29 	bl	8004a72 <HAL_PCD_EP_ClrStall>
 800c620:	4603      	mov	r3, r0
 800c622:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800c624:	7bbb      	ldrb	r3, [r7, #14]
 800c626:	2b03      	cmp	r3, #3
 800c628:	d816      	bhi.n	800c658 <USBD_LL_ClearStallEP+0x5c>
 800c62a:	a201      	add	r2, pc, #4	; (adr r2, 800c630 <USBD_LL_ClearStallEP+0x34>)
 800c62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c630:	0800c641 	.word	0x0800c641
 800c634:	0800c647 	.word	0x0800c647
 800c638:	0800c64d 	.word	0x0800c64d
 800c63c:	0800c653 	.word	0x0800c653
    case HAL_OK :
      usb_status = USBD_OK;
 800c640:	2300      	movs	r3, #0
 800c642:	73fb      	strb	r3, [r7, #15]
    break;
 800c644:	e00b      	b.n	800c65e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c646:	2302      	movs	r3, #2
 800c648:	73fb      	strb	r3, [r7, #15]
    break;
 800c64a:	e008      	b.n	800c65e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c64c:	2301      	movs	r3, #1
 800c64e:	73fb      	strb	r3, [r7, #15]
    break;
 800c650:	e005      	b.n	800c65e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c652:	2302      	movs	r3, #2
 800c654:	73fb      	strb	r3, [r7, #15]
    break;
 800c656:	e002      	b.n	800c65e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c658:	2302      	movs	r3, #2
 800c65a:	73fb      	strb	r3, [r7, #15]
    break;
 800c65c:	bf00      	nop
  }
  return usb_status; 
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	460b      	mov	r3, r1
 800c672:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c67a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800c67c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c680:	2b00      	cmp	r3, #0
 800c682:	da08      	bge.n	800c696 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800c684:	78fb      	ldrb	r3, [r7, #3]
 800c686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	015b      	lsls	r3, r3, #5
 800c68e:	4413      	add	r3, r2
 800c690:	332a      	adds	r3, #42	; 0x2a
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	e008      	b.n	800c6a8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800c696:	78fb      	ldrb	r3, [r7, #3]
 800c698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	015b      	lsls	r3, r3, #5
 800c6a0:	4413      	add	r3, r2
 800c6a2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800c6a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3714      	adds	r7, #20
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6ce:	78fa      	ldrb	r2, [r7, #3]
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7f8 f87b 	bl	80047ce <HAL_PCD_SetAddress>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800c6dc:	7bbb      	ldrb	r3, [r7, #14]
 800c6de:	2b03      	cmp	r3, #3
 800c6e0:	d816      	bhi.n	800c710 <USBD_LL_SetUSBAddress+0x5c>
 800c6e2:	a201      	add	r2, pc, #4	; (adr r2, 800c6e8 <USBD_LL_SetUSBAddress+0x34>)
 800c6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e8:	0800c6f9 	.word	0x0800c6f9
 800c6ec:	0800c6ff 	.word	0x0800c6ff
 800c6f0:	0800c705 	.word	0x0800c705
 800c6f4:	0800c70b 	.word	0x0800c70b
    case HAL_OK :
      usb_status = USBD_OK;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c6fc:	e00b      	b.n	800c716 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c6fe:	2302      	movs	r3, #2
 800c700:	73fb      	strb	r3, [r7, #15]
    break;
 800c702:	e008      	b.n	800c716 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c704:	2301      	movs	r3, #1
 800c706:	73fb      	strb	r3, [r7, #15]
    break;
 800c708:	e005      	b.n	800c716 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c70a:	2302      	movs	r3, #2
 800c70c:	73fb      	strb	r3, [r7, #15]
    break;
 800c70e:	e002      	b.n	800c716 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c710:	2302      	movs	r3, #2
 800c712:	73fb      	strb	r3, [r7, #15]
    break;
 800c714:	bf00      	nop
  }
  return usb_status;  
 800c716:	7bfb      	ldrb	r3, [r7, #15]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	607a      	str	r2, [r7, #4]
 800c72a:	461a      	mov	r2, r3
 800c72c:	460b      	mov	r3, r1
 800c72e:	72fb      	strb	r3, [r7, #11]
 800c730:	4613      	mov	r3, r2
 800c732:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c734:	2300      	movs	r3, #0
 800c736:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c738:	2300      	movs	r3, #0
 800c73a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c742:	893b      	ldrh	r3, [r7, #8]
 800c744:	7af9      	ldrb	r1, [r7, #11]
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	f7f8 f900 	bl	800494c <HAL_PCD_EP_Transmit>
 800c74c:	4603      	mov	r3, r0
 800c74e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800c750:	7dbb      	ldrb	r3, [r7, #22]
 800c752:	2b03      	cmp	r3, #3
 800c754:	d816      	bhi.n	800c784 <USBD_LL_Transmit+0x64>
 800c756:	a201      	add	r2, pc, #4	; (adr r2, 800c75c <USBD_LL_Transmit+0x3c>)
 800c758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75c:	0800c76d 	.word	0x0800c76d
 800c760:	0800c773 	.word	0x0800c773
 800c764:	0800c779 	.word	0x0800c779
 800c768:	0800c77f 	.word	0x0800c77f
    case HAL_OK :
      usb_status = USBD_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	75fb      	strb	r3, [r7, #23]
    break;
 800c770:	e00b      	b.n	800c78a <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c772:	2302      	movs	r3, #2
 800c774:	75fb      	strb	r3, [r7, #23]
    break;
 800c776:	e008      	b.n	800c78a <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c778:	2301      	movs	r3, #1
 800c77a:	75fb      	strb	r3, [r7, #23]
    break;
 800c77c:	e005      	b.n	800c78a <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c77e:	2302      	movs	r3, #2
 800c780:	75fb      	strb	r3, [r7, #23]
    break;
 800c782:	e002      	b.n	800c78a <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800c784:	2302      	movs	r3, #2
 800c786:	75fb      	strb	r3, [r7, #23]
    break;
 800c788:	bf00      	nop
  }
  return usb_status;    
 800c78a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	607a      	str	r2, [r7, #4]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	72fb      	strb	r3, [r7, #11]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c7b6:	893b      	ldrh	r3, [r7, #8]
 800c7b8:	7af9      	ldrb	r1, [r7, #11]
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	f7f8 f88c 	bl	80048d8 <HAL_PCD_EP_Receive>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800c7c4:	7dbb      	ldrb	r3, [r7, #22]
 800c7c6:	2b03      	cmp	r3, #3
 800c7c8:	d816      	bhi.n	800c7f8 <USBD_LL_PrepareReceive+0x64>
 800c7ca:	a201      	add	r2, pc, #4	; (adr r2, 800c7d0 <USBD_LL_PrepareReceive+0x3c>)
 800c7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d0:	0800c7e1 	.word	0x0800c7e1
 800c7d4:	0800c7e7 	.word	0x0800c7e7
 800c7d8:	0800c7ed 	.word	0x0800c7ed
 800c7dc:	0800c7f3 	.word	0x0800c7f3
    case HAL_OK :
      usb_status = USBD_OK;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	75fb      	strb	r3, [r7, #23]
    break;
 800c7e4:	e00b      	b.n	800c7fe <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7e6:	2302      	movs	r3, #2
 800c7e8:	75fb      	strb	r3, [r7, #23]
    break;
 800c7ea:	e008      	b.n	800c7fe <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	75fb      	strb	r3, [r7, #23]
    break;
 800c7f0:	e005      	b.n	800c7fe <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7f2:	2302      	movs	r3, #2
 800c7f4:	75fb      	strb	r3, [r7, #23]
    break;
 800c7f6:	e002      	b.n	800c7fe <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	75fb      	strb	r3, [r7, #23]
    break;
 800c7fc:	bf00      	nop
  }
  return usb_status; 
 800c7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c800:	4618      	mov	r0, r3
 800c802:	3718      	adds	r7, #24
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	460b      	mov	r3, r1
 800c812:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c814:	78fb      	ldrb	r3, [r7, #3]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d002      	beq.n	800c820 <HAL_PCDEx_LPM_Callback+0x18>
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d013      	beq.n	800c846 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800c81e:	e023      	b.n	800c868 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	699b      	ldr	r3, [r3, #24]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d007      	beq.n	800c838 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c828:	f000 f824 	bl	800c874 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c82c:	4b10      	ldr	r3, [pc, #64]	; (800c870 <HAL_PCDEx_LPM_Callback+0x68>)
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	4a0f      	ldr	r2, [pc, #60]	; (800c870 <HAL_PCDEx_LPM_Callback+0x68>)
 800c832:	f023 0306 	bic.w	r3, r3, #6
 800c836:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fc fb4d 	bl	8008ede <USBD_LL_Resume>
    break;
 800c844:	e010      	b.n	800c868 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7fc fb31 	bl	8008eb4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	699b      	ldr	r3, [r3, #24]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d005      	beq.n	800c866 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c85a:	4b05      	ldr	r3, [pc, #20]	; (800c870 <HAL_PCDEx_LPM_Callback+0x68>)
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	4a04      	ldr	r2, [pc, #16]	; (800c870 <HAL_PCDEx_LPM_Callback+0x68>)
 800c860:	f043 0306 	orr.w	r3, r3, #6
 800c864:	6113      	str	r3, [r2, #16]
    break;   
 800c866:	bf00      	nop
}
 800c868:	bf00      	nop
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	e000ed00 	.word	0xe000ed00

0800c874 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c878:	f7f6 f89a 	bl	80029b0 <SystemClock_Config>
}
 800c87c:	bf00      	nop
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <__errno>:
 800c880:	4b01      	ldr	r3, [pc, #4]	; (800c888 <__errno+0x8>)
 800c882:	6818      	ldr	r0, [r3, #0]
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	20000050 	.word	0x20000050

0800c88c <__libc_init_array>:
 800c88c:	b570      	push	{r4, r5, r6, lr}
 800c88e:	4e0d      	ldr	r6, [pc, #52]	; (800c8c4 <__libc_init_array+0x38>)
 800c890:	4c0d      	ldr	r4, [pc, #52]	; (800c8c8 <__libc_init_array+0x3c>)
 800c892:	1ba4      	subs	r4, r4, r6
 800c894:	10a4      	asrs	r4, r4, #2
 800c896:	2500      	movs	r5, #0
 800c898:	42a5      	cmp	r5, r4
 800c89a:	d109      	bne.n	800c8b0 <__libc_init_array+0x24>
 800c89c:	4e0b      	ldr	r6, [pc, #44]	; (800c8cc <__libc_init_array+0x40>)
 800c89e:	4c0c      	ldr	r4, [pc, #48]	; (800c8d0 <__libc_init_array+0x44>)
 800c8a0:	f001 f92e 	bl	800db00 <_init>
 800c8a4:	1ba4      	subs	r4, r4, r6
 800c8a6:	10a4      	asrs	r4, r4, #2
 800c8a8:	2500      	movs	r5, #0
 800c8aa:	42a5      	cmp	r5, r4
 800c8ac:	d105      	bne.n	800c8ba <__libc_init_array+0x2e>
 800c8ae:	bd70      	pop	{r4, r5, r6, pc}
 800c8b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8b4:	4798      	blx	r3
 800c8b6:	3501      	adds	r5, #1
 800c8b8:	e7ee      	b.n	800c898 <__libc_init_array+0xc>
 800c8ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c8be:	4798      	blx	r3
 800c8c0:	3501      	adds	r5, #1
 800c8c2:	e7f2      	b.n	800c8aa <__libc_init_array+0x1e>
 800c8c4:	0800df90 	.word	0x0800df90
 800c8c8:	0800df90 	.word	0x0800df90
 800c8cc:	0800df90 	.word	0x0800df90
 800c8d0:	0800df94 	.word	0x0800df94

0800c8d4 <memcpy>:
 800c8d4:	b510      	push	{r4, lr}
 800c8d6:	1e43      	subs	r3, r0, #1
 800c8d8:	440a      	add	r2, r1
 800c8da:	4291      	cmp	r1, r2
 800c8dc:	d100      	bne.n	800c8e0 <memcpy+0xc>
 800c8de:	bd10      	pop	{r4, pc}
 800c8e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8e8:	e7f7      	b.n	800c8da <memcpy+0x6>

0800c8ea <memset>:
 800c8ea:	4402      	add	r2, r0
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d100      	bne.n	800c8f4 <memset+0xa>
 800c8f2:	4770      	bx	lr
 800c8f4:	f803 1b01 	strb.w	r1, [r3], #1
 800c8f8:	e7f9      	b.n	800c8ee <memset+0x4>
	...

0800c8fc <iprintf>:
 800c8fc:	b40f      	push	{r0, r1, r2, r3}
 800c8fe:	4b0a      	ldr	r3, [pc, #40]	; (800c928 <iprintf+0x2c>)
 800c900:	b513      	push	{r0, r1, r4, lr}
 800c902:	681c      	ldr	r4, [r3, #0]
 800c904:	b124      	cbz	r4, 800c910 <iprintf+0x14>
 800c906:	69a3      	ldr	r3, [r4, #24]
 800c908:	b913      	cbnz	r3, 800c910 <iprintf+0x14>
 800c90a:	4620      	mov	r0, r4
 800c90c:	f000 fa42 	bl	800cd94 <__sinit>
 800c910:	ab05      	add	r3, sp, #20
 800c912:	9a04      	ldr	r2, [sp, #16]
 800c914:	68a1      	ldr	r1, [r4, #8]
 800c916:	9301      	str	r3, [sp, #4]
 800c918:	4620      	mov	r0, r4
 800c91a:	f000 fd4d 	bl	800d3b8 <_vfiprintf_r>
 800c91e:	b002      	add	sp, #8
 800c920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c924:	b004      	add	sp, #16
 800c926:	4770      	bx	lr
 800c928:	20000050 	.word	0x20000050

0800c92c <_puts_r>:
 800c92c:	b570      	push	{r4, r5, r6, lr}
 800c92e:	460e      	mov	r6, r1
 800c930:	4605      	mov	r5, r0
 800c932:	b118      	cbz	r0, 800c93c <_puts_r+0x10>
 800c934:	6983      	ldr	r3, [r0, #24]
 800c936:	b90b      	cbnz	r3, 800c93c <_puts_r+0x10>
 800c938:	f000 fa2c 	bl	800cd94 <__sinit>
 800c93c:	69ab      	ldr	r3, [r5, #24]
 800c93e:	68ac      	ldr	r4, [r5, #8]
 800c940:	b913      	cbnz	r3, 800c948 <_puts_r+0x1c>
 800c942:	4628      	mov	r0, r5
 800c944:	f000 fa26 	bl	800cd94 <__sinit>
 800c948:	4b23      	ldr	r3, [pc, #140]	; (800c9d8 <_puts_r+0xac>)
 800c94a:	429c      	cmp	r4, r3
 800c94c:	d117      	bne.n	800c97e <_puts_r+0x52>
 800c94e:	686c      	ldr	r4, [r5, #4]
 800c950:	89a3      	ldrh	r3, [r4, #12]
 800c952:	071b      	lsls	r3, r3, #28
 800c954:	d51d      	bpl.n	800c992 <_puts_r+0x66>
 800c956:	6923      	ldr	r3, [r4, #16]
 800c958:	b1db      	cbz	r3, 800c992 <_puts_r+0x66>
 800c95a:	3e01      	subs	r6, #1
 800c95c:	68a3      	ldr	r3, [r4, #8]
 800c95e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c962:	3b01      	subs	r3, #1
 800c964:	60a3      	str	r3, [r4, #8]
 800c966:	b9e9      	cbnz	r1, 800c9a4 <_puts_r+0x78>
 800c968:	2b00      	cmp	r3, #0
 800c96a:	da2e      	bge.n	800c9ca <_puts_r+0x9e>
 800c96c:	4622      	mov	r2, r4
 800c96e:	210a      	movs	r1, #10
 800c970:	4628      	mov	r0, r5
 800c972:	f000 f85f 	bl	800ca34 <__swbuf_r>
 800c976:	3001      	adds	r0, #1
 800c978:	d011      	beq.n	800c99e <_puts_r+0x72>
 800c97a:	200a      	movs	r0, #10
 800c97c:	e011      	b.n	800c9a2 <_puts_r+0x76>
 800c97e:	4b17      	ldr	r3, [pc, #92]	; (800c9dc <_puts_r+0xb0>)
 800c980:	429c      	cmp	r4, r3
 800c982:	d101      	bne.n	800c988 <_puts_r+0x5c>
 800c984:	68ac      	ldr	r4, [r5, #8]
 800c986:	e7e3      	b.n	800c950 <_puts_r+0x24>
 800c988:	4b15      	ldr	r3, [pc, #84]	; (800c9e0 <_puts_r+0xb4>)
 800c98a:	429c      	cmp	r4, r3
 800c98c:	bf08      	it	eq
 800c98e:	68ec      	ldreq	r4, [r5, #12]
 800c990:	e7de      	b.n	800c950 <_puts_r+0x24>
 800c992:	4621      	mov	r1, r4
 800c994:	4628      	mov	r0, r5
 800c996:	f000 f89f 	bl	800cad8 <__swsetup_r>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	d0dd      	beq.n	800c95a <_puts_r+0x2e>
 800c99e:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a2:	bd70      	pop	{r4, r5, r6, pc}
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	da04      	bge.n	800c9b2 <_puts_r+0x86>
 800c9a8:	69a2      	ldr	r2, [r4, #24]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	dc06      	bgt.n	800c9bc <_puts_r+0x90>
 800c9ae:	290a      	cmp	r1, #10
 800c9b0:	d004      	beq.n	800c9bc <_puts_r+0x90>
 800c9b2:	6823      	ldr	r3, [r4, #0]
 800c9b4:	1c5a      	adds	r2, r3, #1
 800c9b6:	6022      	str	r2, [r4, #0]
 800c9b8:	7019      	strb	r1, [r3, #0]
 800c9ba:	e7cf      	b.n	800c95c <_puts_r+0x30>
 800c9bc:	4622      	mov	r2, r4
 800c9be:	4628      	mov	r0, r5
 800c9c0:	f000 f838 	bl	800ca34 <__swbuf_r>
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	d1c9      	bne.n	800c95c <_puts_r+0x30>
 800c9c8:	e7e9      	b.n	800c99e <_puts_r+0x72>
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	200a      	movs	r0, #10
 800c9ce:	1c5a      	adds	r2, r3, #1
 800c9d0:	6022      	str	r2, [r4, #0]
 800c9d2:	7018      	strb	r0, [r3, #0]
 800c9d4:	e7e5      	b.n	800c9a2 <_puts_r+0x76>
 800c9d6:	bf00      	nop
 800c9d8:	0800df14 	.word	0x0800df14
 800c9dc:	0800df34 	.word	0x0800df34
 800c9e0:	0800def4 	.word	0x0800def4

0800c9e4 <puts>:
 800c9e4:	4b02      	ldr	r3, [pc, #8]	; (800c9f0 <puts+0xc>)
 800c9e6:	4601      	mov	r1, r0
 800c9e8:	6818      	ldr	r0, [r3, #0]
 800c9ea:	f7ff bf9f 	b.w	800c92c <_puts_r>
 800c9ee:	bf00      	nop
 800c9f0:	20000050 	.word	0x20000050

0800c9f4 <siprintf>:
 800c9f4:	b40e      	push	{r1, r2, r3}
 800c9f6:	b500      	push	{lr}
 800c9f8:	b09c      	sub	sp, #112	; 0x70
 800c9fa:	ab1d      	add	r3, sp, #116	; 0x74
 800c9fc:	9002      	str	r0, [sp, #8]
 800c9fe:	9006      	str	r0, [sp, #24]
 800ca00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca04:	4809      	ldr	r0, [pc, #36]	; (800ca2c <siprintf+0x38>)
 800ca06:	9107      	str	r1, [sp, #28]
 800ca08:	9104      	str	r1, [sp, #16]
 800ca0a:	4909      	ldr	r1, [pc, #36]	; (800ca30 <siprintf+0x3c>)
 800ca0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca10:	9105      	str	r1, [sp, #20]
 800ca12:	6800      	ldr	r0, [r0, #0]
 800ca14:	9301      	str	r3, [sp, #4]
 800ca16:	a902      	add	r1, sp, #8
 800ca18:	f000 fbac 	bl	800d174 <_svfiprintf_r>
 800ca1c:	9b02      	ldr	r3, [sp, #8]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	701a      	strb	r2, [r3, #0]
 800ca22:	b01c      	add	sp, #112	; 0x70
 800ca24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca28:	b003      	add	sp, #12
 800ca2a:	4770      	bx	lr
 800ca2c:	20000050 	.word	0x20000050
 800ca30:	ffff0208 	.word	0xffff0208

0800ca34 <__swbuf_r>:
 800ca34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca36:	460e      	mov	r6, r1
 800ca38:	4614      	mov	r4, r2
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	b118      	cbz	r0, 800ca46 <__swbuf_r+0x12>
 800ca3e:	6983      	ldr	r3, [r0, #24]
 800ca40:	b90b      	cbnz	r3, 800ca46 <__swbuf_r+0x12>
 800ca42:	f000 f9a7 	bl	800cd94 <__sinit>
 800ca46:	4b21      	ldr	r3, [pc, #132]	; (800cacc <__swbuf_r+0x98>)
 800ca48:	429c      	cmp	r4, r3
 800ca4a:	d12a      	bne.n	800caa2 <__swbuf_r+0x6e>
 800ca4c:	686c      	ldr	r4, [r5, #4]
 800ca4e:	69a3      	ldr	r3, [r4, #24]
 800ca50:	60a3      	str	r3, [r4, #8]
 800ca52:	89a3      	ldrh	r3, [r4, #12]
 800ca54:	071a      	lsls	r2, r3, #28
 800ca56:	d52e      	bpl.n	800cab6 <__swbuf_r+0x82>
 800ca58:	6923      	ldr	r3, [r4, #16]
 800ca5a:	b363      	cbz	r3, 800cab6 <__swbuf_r+0x82>
 800ca5c:	6923      	ldr	r3, [r4, #16]
 800ca5e:	6820      	ldr	r0, [r4, #0]
 800ca60:	1ac0      	subs	r0, r0, r3
 800ca62:	6963      	ldr	r3, [r4, #20]
 800ca64:	b2f6      	uxtb	r6, r6
 800ca66:	4283      	cmp	r3, r0
 800ca68:	4637      	mov	r7, r6
 800ca6a:	dc04      	bgt.n	800ca76 <__swbuf_r+0x42>
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	4628      	mov	r0, r5
 800ca70:	f000 f926 	bl	800ccc0 <_fflush_r>
 800ca74:	bb28      	cbnz	r0, 800cac2 <__swbuf_r+0x8e>
 800ca76:	68a3      	ldr	r3, [r4, #8]
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	60a3      	str	r3, [r4, #8]
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	1c5a      	adds	r2, r3, #1
 800ca80:	6022      	str	r2, [r4, #0]
 800ca82:	701e      	strb	r6, [r3, #0]
 800ca84:	6963      	ldr	r3, [r4, #20]
 800ca86:	3001      	adds	r0, #1
 800ca88:	4283      	cmp	r3, r0
 800ca8a:	d004      	beq.n	800ca96 <__swbuf_r+0x62>
 800ca8c:	89a3      	ldrh	r3, [r4, #12]
 800ca8e:	07db      	lsls	r3, r3, #31
 800ca90:	d519      	bpl.n	800cac6 <__swbuf_r+0x92>
 800ca92:	2e0a      	cmp	r6, #10
 800ca94:	d117      	bne.n	800cac6 <__swbuf_r+0x92>
 800ca96:	4621      	mov	r1, r4
 800ca98:	4628      	mov	r0, r5
 800ca9a:	f000 f911 	bl	800ccc0 <_fflush_r>
 800ca9e:	b190      	cbz	r0, 800cac6 <__swbuf_r+0x92>
 800caa0:	e00f      	b.n	800cac2 <__swbuf_r+0x8e>
 800caa2:	4b0b      	ldr	r3, [pc, #44]	; (800cad0 <__swbuf_r+0x9c>)
 800caa4:	429c      	cmp	r4, r3
 800caa6:	d101      	bne.n	800caac <__swbuf_r+0x78>
 800caa8:	68ac      	ldr	r4, [r5, #8]
 800caaa:	e7d0      	b.n	800ca4e <__swbuf_r+0x1a>
 800caac:	4b09      	ldr	r3, [pc, #36]	; (800cad4 <__swbuf_r+0xa0>)
 800caae:	429c      	cmp	r4, r3
 800cab0:	bf08      	it	eq
 800cab2:	68ec      	ldreq	r4, [r5, #12]
 800cab4:	e7cb      	b.n	800ca4e <__swbuf_r+0x1a>
 800cab6:	4621      	mov	r1, r4
 800cab8:	4628      	mov	r0, r5
 800caba:	f000 f80d 	bl	800cad8 <__swsetup_r>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	d0cc      	beq.n	800ca5c <__swbuf_r+0x28>
 800cac2:	f04f 37ff 	mov.w	r7, #4294967295
 800cac6:	4638      	mov	r0, r7
 800cac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caca:	bf00      	nop
 800cacc:	0800df14 	.word	0x0800df14
 800cad0:	0800df34 	.word	0x0800df34
 800cad4:	0800def4 	.word	0x0800def4

0800cad8 <__swsetup_r>:
 800cad8:	4b32      	ldr	r3, [pc, #200]	; (800cba4 <__swsetup_r+0xcc>)
 800cada:	b570      	push	{r4, r5, r6, lr}
 800cadc:	681d      	ldr	r5, [r3, #0]
 800cade:	4606      	mov	r6, r0
 800cae0:	460c      	mov	r4, r1
 800cae2:	b125      	cbz	r5, 800caee <__swsetup_r+0x16>
 800cae4:	69ab      	ldr	r3, [r5, #24]
 800cae6:	b913      	cbnz	r3, 800caee <__swsetup_r+0x16>
 800cae8:	4628      	mov	r0, r5
 800caea:	f000 f953 	bl	800cd94 <__sinit>
 800caee:	4b2e      	ldr	r3, [pc, #184]	; (800cba8 <__swsetup_r+0xd0>)
 800caf0:	429c      	cmp	r4, r3
 800caf2:	d10f      	bne.n	800cb14 <__swsetup_r+0x3c>
 800caf4:	686c      	ldr	r4, [r5, #4]
 800caf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	0715      	lsls	r5, r2, #28
 800cafe:	d42c      	bmi.n	800cb5a <__swsetup_r+0x82>
 800cb00:	06d0      	lsls	r0, r2, #27
 800cb02:	d411      	bmi.n	800cb28 <__swsetup_r+0x50>
 800cb04:	2209      	movs	r2, #9
 800cb06:	6032      	str	r2, [r6, #0]
 800cb08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb0c:	81a3      	strh	r3, [r4, #12]
 800cb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb12:	e03e      	b.n	800cb92 <__swsetup_r+0xba>
 800cb14:	4b25      	ldr	r3, [pc, #148]	; (800cbac <__swsetup_r+0xd4>)
 800cb16:	429c      	cmp	r4, r3
 800cb18:	d101      	bne.n	800cb1e <__swsetup_r+0x46>
 800cb1a:	68ac      	ldr	r4, [r5, #8]
 800cb1c:	e7eb      	b.n	800caf6 <__swsetup_r+0x1e>
 800cb1e:	4b24      	ldr	r3, [pc, #144]	; (800cbb0 <__swsetup_r+0xd8>)
 800cb20:	429c      	cmp	r4, r3
 800cb22:	bf08      	it	eq
 800cb24:	68ec      	ldreq	r4, [r5, #12]
 800cb26:	e7e6      	b.n	800caf6 <__swsetup_r+0x1e>
 800cb28:	0751      	lsls	r1, r2, #29
 800cb2a:	d512      	bpl.n	800cb52 <__swsetup_r+0x7a>
 800cb2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb2e:	b141      	cbz	r1, 800cb42 <__swsetup_r+0x6a>
 800cb30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb34:	4299      	cmp	r1, r3
 800cb36:	d002      	beq.n	800cb3e <__swsetup_r+0x66>
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f000 fa19 	bl	800cf70 <_free_r>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	6363      	str	r3, [r4, #52]	; 0x34
 800cb42:	89a3      	ldrh	r3, [r4, #12]
 800cb44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb48:	81a3      	strh	r3, [r4, #12]
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	6063      	str	r3, [r4, #4]
 800cb4e:	6923      	ldr	r3, [r4, #16]
 800cb50:	6023      	str	r3, [r4, #0]
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	f043 0308 	orr.w	r3, r3, #8
 800cb58:	81a3      	strh	r3, [r4, #12]
 800cb5a:	6923      	ldr	r3, [r4, #16]
 800cb5c:	b94b      	cbnz	r3, 800cb72 <__swsetup_r+0x9a>
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb68:	d003      	beq.n	800cb72 <__swsetup_r+0x9a>
 800cb6a:	4621      	mov	r1, r4
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f000 f9bf 	bl	800cef0 <__smakebuf_r>
 800cb72:	89a2      	ldrh	r2, [r4, #12]
 800cb74:	f012 0301 	ands.w	r3, r2, #1
 800cb78:	d00c      	beq.n	800cb94 <__swsetup_r+0xbc>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	60a3      	str	r3, [r4, #8]
 800cb7e:	6963      	ldr	r3, [r4, #20]
 800cb80:	425b      	negs	r3, r3
 800cb82:	61a3      	str	r3, [r4, #24]
 800cb84:	6923      	ldr	r3, [r4, #16]
 800cb86:	b953      	cbnz	r3, 800cb9e <__swsetup_r+0xc6>
 800cb88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cb90:	d1ba      	bne.n	800cb08 <__swsetup_r+0x30>
 800cb92:	bd70      	pop	{r4, r5, r6, pc}
 800cb94:	0792      	lsls	r2, r2, #30
 800cb96:	bf58      	it	pl
 800cb98:	6963      	ldrpl	r3, [r4, #20]
 800cb9a:	60a3      	str	r3, [r4, #8]
 800cb9c:	e7f2      	b.n	800cb84 <__swsetup_r+0xac>
 800cb9e:	2000      	movs	r0, #0
 800cba0:	e7f7      	b.n	800cb92 <__swsetup_r+0xba>
 800cba2:	bf00      	nop
 800cba4:	20000050 	.word	0x20000050
 800cba8:	0800df14 	.word	0x0800df14
 800cbac:	0800df34 	.word	0x0800df34
 800cbb0:	0800def4 	.word	0x0800def4

0800cbb4 <__sflush_r>:
 800cbb4:	898a      	ldrh	r2, [r1, #12]
 800cbb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbba:	4605      	mov	r5, r0
 800cbbc:	0710      	lsls	r0, r2, #28
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	d458      	bmi.n	800cc74 <__sflush_r+0xc0>
 800cbc2:	684b      	ldr	r3, [r1, #4]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	dc05      	bgt.n	800cbd4 <__sflush_r+0x20>
 800cbc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	dc02      	bgt.n	800cbd4 <__sflush_r+0x20>
 800cbce:	2000      	movs	r0, #0
 800cbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbd6:	2e00      	cmp	r6, #0
 800cbd8:	d0f9      	beq.n	800cbce <__sflush_r+0x1a>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbe0:	682f      	ldr	r7, [r5, #0]
 800cbe2:	6a21      	ldr	r1, [r4, #32]
 800cbe4:	602b      	str	r3, [r5, #0]
 800cbe6:	d032      	beq.n	800cc4e <__sflush_r+0x9a>
 800cbe8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbea:	89a3      	ldrh	r3, [r4, #12]
 800cbec:	075a      	lsls	r2, r3, #29
 800cbee:	d505      	bpl.n	800cbfc <__sflush_r+0x48>
 800cbf0:	6863      	ldr	r3, [r4, #4]
 800cbf2:	1ac0      	subs	r0, r0, r3
 800cbf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cbf6:	b10b      	cbz	r3, 800cbfc <__sflush_r+0x48>
 800cbf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbfa:	1ac0      	subs	r0, r0, r3
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	4602      	mov	r2, r0
 800cc00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc02:	6a21      	ldr	r1, [r4, #32]
 800cc04:	4628      	mov	r0, r5
 800cc06:	47b0      	blx	r6
 800cc08:	1c43      	adds	r3, r0, #1
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	d106      	bne.n	800cc1c <__sflush_r+0x68>
 800cc0e:	6829      	ldr	r1, [r5, #0]
 800cc10:	291d      	cmp	r1, #29
 800cc12:	d848      	bhi.n	800cca6 <__sflush_r+0xf2>
 800cc14:	4a29      	ldr	r2, [pc, #164]	; (800ccbc <__sflush_r+0x108>)
 800cc16:	40ca      	lsrs	r2, r1
 800cc18:	07d6      	lsls	r6, r2, #31
 800cc1a:	d544      	bpl.n	800cca6 <__sflush_r+0xf2>
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	6062      	str	r2, [r4, #4]
 800cc20:	04d9      	lsls	r1, r3, #19
 800cc22:	6922      	ldr	r2, [r4, #16]
 800cc24:	6022      	str	r2, [r4, #0]
 800cc26:	d504      	bpl.n	800cc32 <__sflush_r+0x7e>
 800cc28:	1c42      	adds	r2, r0, #1
 800cc2a:	d101      	bne.n	800cc30 <__sflush_r+0x7c>
 800cc2c:	682b      	ldr	r3, [r5, #0]
 800cc2e:	b903      	cbnz	r3, 800cc32 <__sflush_r+0x7e>
 800cc30:	6560      	str	r0, [r4, #84]	; 0x54
 800cc32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc34:	602f      	str	r7, [r5, #0]
 800cc36:	2900      	cmp	r1, #0
 800cc38:	d0c9      	beq.n	800cbce <__sflush_r+0x1a>
 800cc3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc3e:	4299      	cmp	r1, r3
 800cc40:	d002      	beq.n	800cc48 <__sflush_r+0x94>
 800cc42:	4628      	mov	r0, r5
 800cc44:	f000 f994 	bl	800cf70 <_free_r>
 800cc48:	2000      	movs	r0, #0
 800cc4a:	6360      	str	r0, [r4, #52]	; 0x34
 800cc4c:	e7c0      	b.n	800cbd0 <__sflush_r+0x1c>
 800cc4e:	2301      	movs	r3, #1
 800cc50:	4628      	mov	r0, r5
 800cc52:	47b0      	blx	r6
 800cc54:	1c41      	adds	r1, r0, #1
 800cc56:	d1c8      	bne.n	800cbea <__sflush_r+0x36>
 800cc58:	682b      	ldr	r3, [r5, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d0c5      	beq.n	800cbea <__sflush_r+0x36>
 800cc5e:	2b1d      	cmp	r3, #29
 800cc60:	d001      	beq.n	800cc66 <__sflush_r+0xb2>
 800cc62:	2b16      	cmp	r3, #22
 800cc64:	d101      	bne.n	800cc6a <__sflush_r+0xb6>
 800cc66:	602f      	str	r7, [r5, #0]
 800cc68:	e7b1      	b.n	800cbce <__sflush_r+0x1a>
 800cc6a:	89a3      	ldrh	r3, [r4, #12]
 800cc6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc70:	81a3      	strh	r3, [r4, #12]
 800cc72:	e7ad      	b.n	800cbd0 <__sflush_r+0x1c>
 800cc74:	690f      	ldr	r7, [r1, #16]
 800cc76:	2f00      	cmp	r7, #0
 800cc78:	d0a9      	beq.n	800cbce <__sflush_r+0x1a>
 800cc7a:	0793      	lsls	r3, r2, #30
 800cc7c:	680e      	ldr	r6, [r1, #0]
 800cc7e:	bf08      	it	eq
 800cc80:	694b      	ldreq	r3, [r1, #20]
 800cc82:	600f      	str	r7, [r1, #0]
 800cc84:	bf18      	it	ne
 800cc86:	2300      	movne	r3, #0
 800cc88:	eba6 0807 	sub.w	r8, r6, r7
 800cc8c:	608b      	str	r3, [r1, #8]
 800cc8e:	f1b8 0f00 	cmp.w	r8, #0
 800cc92:	dd9c      	ble.n	800cbce <__sflush_r+0x1a>
 800cc94:	4643      	mov	r3, r8
 800cc96:	463a      	mov	r2, r7
 800cc98:	6a21      	ldr	r1, [r4, #32]
 800cc9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	47b0      	blx	r6
 800cca0:	2800      	cmp	r0, #0
 800cca2:	dc06      	bgt.n	800ccb2 <__sflush_r+0xfe>
 800cca4:	89a3      	ldrh	r3, [r4, #12]
 800cca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccaa:	81a3      	strh	r3, [r4, #12]
 800ccac:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb0:	e78e      	b.n	800cbd0 <__sflush_r+0x1c>
 800ccb2:	4407      	add	r7, r0
 800ccb4:	eba8 0800 	sub.w	r8, r8, r0
 800ccb8:	e7e9      	b.n	800cc8e <__sflush_r+0xda>
 800ccba:	bf00      	nop
 800ccbc:	20400001 	.word	0x20400001

0800ccc0 <_fflush_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	690b      	ldr	r3, [r1, #16]
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	460c      	mov	r4, r1
 800ccc8:	b1db      	cbz	r3, 800cd02 <_fflush_r+0x42>
 800ccca:	b118      	cbz	r0, 800ccd4 <_fflush_r+0x14>
 800cccc:	6983      	ldr	r3, [r0, #24]
 800ccce:	b90b      	cbnz	r3, 800ccd4 <_fflush_r+0x14>
 800ccd0:	f000 f860 	bl	800cd94 <__sinit>
 800ccd4:	4b0c      	ldr	r3, [pc, #48]	; (800cd08 <_fflush_r+0x48>)
 800ccd6:	429c      	cmp	r4, r3
 800ccd8:	d109      	bne.n	800ccee <_fflush_r+0x2e>
 800ccda:	686c      	ldr	r4, [r5, #4]
 800ccdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cce0:	b17b      	cbz	r3, 800cd02 <_fflush_r+0x42>
 800cce2:	4621      	mov	r1, r4
 800cce4:	4628      	mov	r0, r5
 800cce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccea:	f7ff bf63 	b.w	800cbb4 <__sflush_r>
 800ccee:	4b07      	ldr	r3, [pc, #28]	; (800cd0c <_fflush_r+0x4c>)
 800ccf0:	429c      	cmp	r4, r3
 800ccf2:	d101      	bne.n	800ccf8 <_fflush_r+0x38>
 800ccf4:	68ac      	ldr	r4, [r5, #8]
 800ccf6:	e7f1      	b.n	800ccdc <_fflush_r+0x1c>
 800ccf8:	4b05      	ldr	r3, [pc, #20]	; (800cd10 <_fflush_r+0x50>)
 800ccfa:	429c      	cmp	r4, r3
 800ccfc:	bf08      	it	eq
 800ccfe:	68ec      	ldreq	r4, [r5, #12]
 800cd00:	e7ec      	b.n	800ccdc <_fflush_r+0x1c>
 800cd02:	2000      	movs	r0, #0
 800cd04:	bd38      	pop	{r3, r4, r5, pc}
 800cd06:	bf00      	nop
 800cd08:	0800df14 	.word	0x0800df14
 800cd0c:	0800df34 	.word	0x0800df34
 800cd10:	0800def4 	.word	0x0800def4

0800cd14 <std>:
 800cd14:	2300      	movs	r3, #0
 800cd16:	b510      	push	{r4, lr}
 800cd18:	4604      	mov	r4, r0
 800cd1a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd1e:	6083      	str	r3, [r0, #8]
 800cd20:	8181      	strh	r1, [r0, #12]
 800cd22:	6643      	str	r3, [r0, #100]	; 0x64
 800cd24:	81c2      	strh	r2, [r0, #14]
 800cd26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd2a:	6183      	str	r3, [r0, #24]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	2208      	movs	r2, #8
 800cd30:	305c      	adds	r0, #92	; 0x5c
 800cd32:	f7ff fdda 	bl	800c8ea <memset>
 800cd36:	4b05      	ldr	r3, [pc, #20]	; (800cd4c <std+0x38>)
 800cd38:	6263      	str	r3, [r4, #36]	; 0x24
 800cd3a:	4b05      	ldr	r3, [pc, #20]	; (800cd50 <std+0x3c>)
 800cd3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd3e:	4b05      	ldr	r3, [pc, #20]	; (800cd54 <std+0x40>)
 800cd40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd42:	4b05      	ldr	r3, [pc, #20]	; (800cd58 <std+0x44>)
 800cd44:	6224      	str	r4, [r4, #32]
 800cd46:	6323      	str	r3, [r4, #48]	; 0x30
 800cd48:	bd10      	pop	{r4, pc}
 800cd4a:	bf00      	nop
 800cd4c:	0800d915 	.word	0x0800d915
 800cd50:	0800d937 	.word	0x0800d937
 800cd54:	0800d96f 	.word	0x0800d96f
 800cd58:	0800d993 	.word	0x0800d993

0800cd5c <_cleanup_r>:
 800cd5c:	4901      	ldr	r1, [pc, #4]	; (800cd64 <_cleanup_r+0x8>)
 800cd5e:	f000 b885 	b.w	800ce6c <_fwalk_reent>
 800cd62:	bf00      	nop
 800cd64:	0800ccc1 	.word	0x0800ccc1

0800cd68 <__sfmoreglue>:
 800cd68:	b570      	push	{r4, r5, r6, lr}
 800cd6a:	1e4a      	subs	r2, r1, #1
 800cd6c:	2568      	movs	r5, #104	; 0x68
 800cd6e:	4355      	muls	r5, r2
 800cd70:	460e      	mov	r6, r1
 800cd72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd76:	f000 f949 	bl	800d00c <_malloc_r>
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	b140      	cbz	r0, 800cd90 <__sfmoreglue+0x28>
 800cd7e:	2100      	movs	r1, #0
 800cd80:	e9c0 1600 	strd	r1, r6, [r0]
 800cd84:	300c      	adds	r0, #12
 800cd86:	60a0      	str	r0, [r4, #8]
 800cd88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd8c:	f7ff fdad 	bl	800c8ea <memset>
 800cd90:	4620      	mov	r0, r4
 800cd92:	bd70      	pop	{r4, r5, r6, pc}

0800cd94 <__sinit>:
 800cd94:	6983      	ldr	r3, [r0, #24]
 800cd96:	b510      	push	{r4, lr}
 800cd98:	4604      	mov	r4, r0
 800cd9a:	bb33      	cbnz	r3, 800cdea <__sinit+0x56>
 800cd9c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cda0:	6503      	str	r3, [r0, #80]	; 0x50
 800cda2:	4b12      	ldr	r3, [pc, #72]	; (800cdec <__sinit+0x58>)
 800cda4:	4a12      	ldr	r2, [pc, #72]	; (800cdf0 <__sinit+0x5c>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	6282      	str	r2, [r0, #40]	; 0x28
 800cdaa:	4298      	cmp	r0, r3
 800cdac:	bf04      	itt	eq
 800cdae:	2301      	moveq	r3, #1
 800cdb0:	6183      	streq	r3, [r0, #24]
 800cdb2:	f000 f81f 	bl	800cdf4 <__sfp>
 800cdb6:	6060      	str	r0, [r4, #4]
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f000 f81b 	bl	800cdf4 <__sfp>
 800cdbe:	60a0      	str	r0, [r4, #8]
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f000 f817 	bl	800cdf4 <__sfp>
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	60e0      	str	r0, [r4, #12]
 800cdca:	2104      	movs	r1, #4
 800cdcc:	6860      	ldr	r0, [r4, #4]
 800cdce:	f7ff ffa1 	bl	800cd14 <std>
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	2109      	movs	r1, #9
 800cdd6:	68a0      	ldr	r0, [r4, #8]
 800cdd8:	f7ff ff9c 	bl	800cd14 <std>
 800cddc:	2202      	movs	r2, #2
 800cdde:	2112      	movs	r1, #18
 800cde0:	68e0      	ldr	r0, [r4, #12]
 800cde2:	f7ff ff97 	bl	800cd14 <std>
 800cde6:	2301      	movs	r3, #1
 800cde8:	61a3      	str	r3, [r4, #24]
 800cdea:	bd10      	pop	{r4, pc}
 800cdec:	0800def0 	.word	0x0800def0
 800cdf0:	0800cd5d 	.word	0x0800cd5d

0800cdf4 <__sfp>:
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	4b1b      	ldr	r3, [pc, #108]	; (800ce64 <__sfp+0x70>)
 800cdf8:	681e      	ldr	r6, [r3, #0]
 800cdfa:	69b3      	ldr	r3, [r6, #24]
 800cdfc:	4607      	mov	r7, r0
 800cdfe:	b913      	cbnz	r3, 800ce06 <__sfp+0x12>
 800ce00:	4630      	mov	r0, r6
 800ce02:	f7ff ffc7 	bl	800cd94 <__sinit>
 800ce06:	3648      	adds	r6, #72	; 0x48
 800ce08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	d503      	bpl.n	800ce18 <__sfp+0x24>
 800ce10:	6833      	ldr	r3, [r6, #0]
 800ce12:	b133      	cbz	r3, 800ce22 <__sfp+0x2e>
 800ce14:	6836      	ldr	r6, [r6, #0]
 800ce16:	e7f7      	b.n	800ce08 <__sfp+0x14>
 800ce18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce1c:	b16d      	cbz	r5, 800ce3a <__sfp+0x46>
 800ce1e:	3468      	adds	r4, #104	; 0x68
 800ce20:	e7f4      	b.n	800ce0c <__sfp+0x18>
 800ce22:	2104      	movs	r1, #4
 800ce24:	4638      	mov	r0, r7
 800ce26:	f7ff ff9f 	bl	800cd68 <__sfmoreglue>
 800ce2a:	6030      	str	r0, [r6, #0]
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	d1f1      	bne.n	800ce14 <__sfp+0x20>
 800ce30:	230c      	movs	r3, #12
 800ce32:	603b      	str	r3, [r7, #0]
 800ce34:	4604      	mov	r4, r0
 800ce36:	4620      	mov	r0, r4
 800ce38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce3a:	4b0b      	ldr	r3, [pc, #44]	; (800ce68 <__sfp+0x74>)
 800ce3c:	6665      	str	r5, [r4, #100]	; 0x64
 800ce3e:	e9c4 5500 	strd	r5, r5, [r4]
 800ce42:	60a5      	str	r5, [r4, #8]
 800ce44:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ce48:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ce4c:	2208      	movs	r2, #8
 800ce4e:	4629      	mov	r1, r5
 800ce50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce54:	f7ff fd49 	bl	800c8ea <memset>
 800ce58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce60:	e7e9      	b.n	800ce36 <__sfp+0x42>
 800ce62:	bf00      	nop
 800ce64:	0800def0 	.word	0x0800def0
 800ce68:	ffff0001 	.word	0xffff0001

0800ce6c <_fwalk_reent>:
 800ce6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce70:	4680      	mov	r8, r0
 800ce72:	4689      	mov	r9, r1
 800ce74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce78:	2600      	movs	r6, #0
 800ce7a:	b914      	cbnz	r4, 800ce82 <_fwalk_reent+0x16>
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce82:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ce86:	3f01      	subs	r7, #1
 800ce88:	d501      	bpl.n	800ce8e <_fwalk_reent+0x22>
 800ce8a:	6824      	ldr	r4, [r4, #0]
 800ce8c:	e7f5      	b.n	800ce7a <_fwalk_reent+0xe>
 800ce8e:	89ab      	ldrh	r3, [r5, #12]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d907      	bls.n	800cea4 <_fwalk_reent+0x38>
 800ce94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	d003      	beq.n	800cea4 <_fwalk_reent+0x38>
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	4640      	mov	r0, r8
 800cea0:	47c8      	blx	r9
 800cea2:	4306      	orrs	r6, r0
 800cea4:	3568      	adds	r5, #104	; 0x68
 800cea6:	e7ee      	b.n	800ce86 <_fwalk_reent+0x1a>

0800cea8 <__swhatbuf_r>:
 800cea8:	b570      	push	{r4, r5, r6, lr}
 800ceaa:	460e      	mov	r6, r1
 800ceac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb0:	2900      	cmp	r1, #0
 800ceb2:	b096      	sub	sp, #88	; 0x58
 800ceb4:	4614      	mov	r4, r2
 800ceb6:	461d      	mov	r5, r3
 800ceb8:	da07      	bge.n	800ceca <__swhatbuf_r+0x22>
 800ceba:	2300      	movs	r3, #0
 800cebc:	602b      	str	r3, [r5, #0]
 800cebe:	89b3      	ldrh	r3, [r6, #12]
 800cec0:	061a      	lsls	r2, r3, #24
 800cec2:	d410      	bmi.n	800cee6 <__swhatbuf_r+0x3e>
 800cec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cec8:	e00e      	b.n	800cee8 <__swhatbuf_r+0x40>
 800ceca:	466a      	mov	r2, sp
 800cecc:	f000 fd88 	bl	800d9e0 <_fstat_r>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	dbf2      	blt.n	800ceba <__swhatbuf_r+0x12>
 800ced4:	9a01      	ldr	r2, [sp, #4]
 800ced6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ceda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cede:	425a      	negs	r2, r3
 800cee0:	415a      	adcs	r2, r3
 800cee2:	602a      	str	r2, [r5, #0]
 800cee4:	e7ee      	b.n	800cec4 <__swhatbuf_r+0x1c>
 800cee6:	2340      	movs	r3, #64	; 0x40
 800cee8:	2000      	movs	r0, #0
 800ceea:	6023      	str	r3, [r4, #0]
 800ceec:	b016      	add	sp, #88	; 0x58
 800ceee:	bd70      	pop	{r4, r5, r6, pc}

0800cef0 <__smakebuf_r>:
 800cef0:	898b      	ldrh	r3, [r1, #12]
 800cef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cef4:	079d      	lsls	r5, r3, #30
 800cef6:	4606      	mov	r6, r0
 800cef8:	460c      	mov	r4, r1
 800cefa:	d507      	bpl.n	800cf0c <__smakebuf_r+0x1c>
 800cefc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf00:	6023      	str	r3, [r4, #0]
 800cf02:	6123      	str	r3, [r4, #16]
 800cf04:	2301      	movs	r3, #1
 800cf06:	6163      	str	r3, [r4, #20]
 800cf08:	b002      	add	sp, #8
 800cf0a:	bd70      	pop	{r4, r5, r6, pc}
 800cf0c:	ab01      	add	r3, sp, #4
 800cf0e:	466a      	mov	r2, sp
 800cf10:	f7ff ffca 	bl	800cea8 <__swhatbuf_r>
 800cf14:	9900      	ldr	r1, [sp, #0]
 800cf16:	4605      	mov	r5, r0
 800cf18:	4630      	mov	r0, r6
 800cf1a:	f000 f877 	bl	800d00c <_malloc_r>
 800cf1e:	b948      	cbnz	r0, 800cf34 <__smakebuf_r+0x44>
 800cf20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf24:	059a      	lsls	r2, r3, #22
 800cf26:	d4ef      	bmi.n	800cf08 <__smakebuf_r+0x18>
 800cf28:	f023 0303 	bic.w	r3, r3, #3
 800cf2c:	f043 0302 	orr.w	r3, r3, #2
 800cf30:	81a3      	strh	r3, [r4, #12]
 800cf32:	e7e3      	b.n	800cefc <__smakebuf_r+0xc>
 800cf34:	4b0d      	ldr	r3, [pc, #52]	; (800cf6c <__smakebuf_r+0x7c>)
 800cf36:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf38:	89a3      	ldrh	r3, [r4, #12]
 800cf3a:	6020      	str	r0, [r4, #0]
 800cf3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf40:	81a3      	strh	r3, [r4, #12]
 800cf42:	9b00      	ldr	r3, [sp, #0]
 800cf44:	6163      	str	r3, [r4, #20]
 800cf46:	9b01      	ldr	r3, [sp, #4]
 800cf48:	6120      	str	r0, [r4, #16]
 800cf4a:	b15b      	cbz	r3, 800cf64 <__smakebuf_r+0x74>
 800cf4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf50:	4630      	mov	r0, r6
 800cf52:	f000 fd57 	bl	800da04 <_isatty_r>
 800cf56:	b128      	cbz	r0, 800cf64 <__smakebuf_r+0x74>
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	f023 0303 	bic.w	r3, r3, #3
 800cf5e:	f043 0301 	orr.w	r3, r3, #1
 800cf62:	81a3      	strh	r3, [r4, #12]
 800cf64:	89a3      	ldrh	r3, [r4, #12]
 800cf66:	431d      	orrs	r5, r3
 800cf68:	81a5      	strh	r5, [r4, #12]
 800cf6a:	e7cd      	b.n	800cf08 <__smakebuf_r+0x18>
 800cf6c:	0800cd5d 	.word	0x0800cd5d

0800cf70 <_free_r>:
 800cf70:	b538      	push	{r3, r4, r5, lr}
 800cf72:	4605      	mov	r5, r0
 800cf74:	2900      	cmp	r1, #0
 800cf76:	d045      	beq.n	800d004 <_free_r+0x94>
 800cf78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf7c:	1f0c      	subs	r4, r1, #4
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	bfb8      	it	lt
 800cf82:	18e4      	addlt	r4, r4, r3
 800cf84:	f000 fd79 	bl	800da7a <__malloc_lock>
 800cf88:	4a1f      	ldr	r2, [pc, #124]	; (800d008 <_free_r+0x98>)
 800cf8a:	6813      	ldr	r3, [r2, #0]
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	b933      	cbnz	r3, 800cf9e <_free_r+0x2e>
 800cf90:	6063      	str	r3, [r4, #4]
 800cf92:	6014      	str	r4, [r2, #0]
 800cf94:	4628      	mov	r0, r5
 800cf96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf9a:	f000 bd6f 	b.w	800da7c <__malloc_unlock>
 800cf9e:	42a3      	cmp	r3, r4
 800cfa0:	d90c      	bls.n	800cfbc <_free_r+0x4c>
 800cfa2:	6821      	ldr	r1, [r4, #0]
 800cfa4:	1862      	adds	r2, r4, r1
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	bf04      	itt	eq
 800cfaa:	681a      	ldreq	r2, [r3, #0]
 800cfac:	685b      	ldreq	r3, [r3, #4]
 800cfae:	6063      	str	r3, [r4, #4]
 800cfb0:	bf04      	itt	eq
 800cfb2:	1852      	addeq	r2, r2, r1
 800cfb4:	6022      	streq	r2, [r4, #0]
 800cfb6:	6004      	str	r4, [r0, #0]
 800cfb8:	e7ec      	b.n	800cf94 <_free_r+0x24>
 800cfba:	4613      	mov	r3, r2
 800cfbc:	685a      	ldr	r2, [r3, #4]
 800cfbe:	b10a      	cbz	r2, 800cfc4 <_free_r+0x54>
 800cfc0:	42a2      	cmp	r2, r4
 800cfc2:	d9fa      	bls.n	800cfba <_free_r+0x4a>
 800cfc4:	6819      	ldr	r1, [r3, #0]
 800cfc6:	1858      	adds	r0, r3, r1
 800cfc8:	42a0      	cmp	r0, r4
 800cfca:	d10b      	bne.n	800cfe4 <_free_r+0x74>
 800cfcc:	6820      	ldr	r0, [r4, #0]
 800cfce:	4401      	add	r1, r0
 800cfd0:	1858      	adds	r0, r3, r1
 800cfd2:	4282      	cmp	r2, r0
 800cfd4:	6019      	str	r1, [r3, #0]
 800cfd6:	d1dd      	bne.n	800cf94 <_free_r+0x24>
 800cfd8:	6810      	ldr	r0, [r2, #0]
 800cfda:	6852      	ldr	r2, [r2, #4]
 800cfdc:	605a      	str	r2, [r3, #4]
 800cfde:	4401      	add	r1, r0
 800cfe0:	6019      	str	r1, [r3, #0]
 800cfe2:	e7d7      	b.n	800cf94 <_free_r+0x24>
 800cfe4:	d902      	bls.n	800cfec <_free_r+0x7c>
 800cfe6:	230c      	movs	r3, #12
 800cfe8:	602b      	str	r3, [r5, #0]
 800cfea:	e7d3      	b.n	800cf94 <_free_r+0x24>
 800cfec:	6820      	ldr	r0, [r4, #0]
 800cfee:	1821      	adds	r1, r4, r0
 800cff0:	428a      	cmp	r2, r1
 800cff2:	bf04      	itt	eq
 800cff4:	6811      	ldreq	r1, [r2, #0]
 800cff6:	6852      	ldreq	r2, [r2, #4]
 800cff8:	6062      	str	r2, [r4, #4]
 800cffa:	bf04      	itt	eq
 800cffc:	1809      	addeq	r1, r1, r0
 800cffe:	6021      	streq	r1, [r4, #0]
 800d000:	605c      	str	r4, [r3, #4]
 800d002:	e7c7      	b.n	800cf94 <_free_r+0x24>
 800d004:	bd38      	pop	{r3, r4, r5, pc}
 800d006:	bf00      	nop
 800d008:	2000aa9c 	.word	0x2000aa9c

0800d00c <_malloc_r>:
 800d00c:	b570      	push	{r4, r5, r6, lr}
 800d00e:	1ccd      	adds	r5, r1, #3
 800d010:	f025 0503 	bic.w	r5, r5, #3
 800d014:	3508      	adds	r5, #8
 800d016:	2d0c      	cmp	r5, #12
 800d018:	bf38      	it	cc
 800d01a:	250c      	movcc	r5, #12
 800d01c:	2d00      	cmp	r5, #0
 800d01e:	4606      	mov	r6, r0
 800d020:	db01      	blt.n	800d026 <_malloc_r+0x1a>
 800d022:	42a9      	cmp	r1, r5
 800d024:	d903      	bls.n	800d02e <_malloc_r+0x22>
 800d026:	230c      	movs	r3, #12
 800d028:	6033      	str	r3, [r6, #0]
 800d02a:	2000      	movs	r0, #0
 800d02c:	bd70      	pop	{r4, r5, r6, pc}
 800d02e:	f000 fd24 	bl	800da7a <__malloc_lock>
 800d032:	4a21      	ldr	r2, [pc, #132]	; (800d0b8 <_malloc_r+0xac>)
 800d034:	6814      	ldr	r4, [r2, #0]
 800d036:	4621      	mov	r1, r4
 800d038:	b991      	cbnz	r1, 800d060 <_malloc_r+0x54>
 800d03a:	4c20      	ldr	r4, [pc, #128]	; (800d0bc <_malloc_r+0xb0>)
 800d03c:	6823      	ldr	r3, [r4, #0]
 800d03e:	b91b      	cbnz	r3, 800d048 <_malloc_r+0x3c>
 800d040:	4630      	mov	r0, r6
 800d042:	f000 fc57 	bl	800d8f4 <_sbrk_r>
 800d046:	6020      	str	r0, [r4, #0]
 800d048:	4629      	mov	r1, r5
 800d04a:	4630      	mov	r0, r6
 800d04c:	f000 fc52 	bl	800d8f4 <_sbrk_r>
 800d050:	1c43      	adds	r3, r0, #1
 800d052:	d124      	bne.n	800d09e <_malloc_r+0x92>
 800d054:	230c      	movs	r3, #12
 800d056:	6033      	str	r3, [r6, #0]
 800d058:	4630      	mov	r0, r6
 800d05a:	f000 fd0f 	bl	800da7c <__malloc_unlock>
 800d05e:	e7e4      	b.n	800d02a <_malloc_r+0x1e>
 800d060:	680b      	ldr	r3, [r1, #0]
 800d062:	1b5b      	subs	r3, r3, r5
 800d064:	d418      	bmi.n	800d098 <_malloc_r+0x8c>
 800d066:	2b0b      	cmp	r3, #11
 800d068:	d90f      	bls.n	800d08a <_malloc_r+0x7e>
 800d06a:	600b      	str	r3, [r1, #0]
 800d06c:	50cd      	str	r5, [r1, r3]
 800d06e:	18cc      	adds	r4, r1, r3
 800d070:	4630      	mov	r0, r6
 800d072:	f000 fd03 	bl	800da7c <__malloc_unlock>
 800d076:	f104 000b 	add.w	r0, r4, #11
 800d07a:	1d23      	adds	r3, r4, #4
 800d07c:	f020 0007 	bic.w	r0, r0, #7
 800d080:	1ac3      	subs	r3, r0, r3
 800d082:	d0d3      	beq.n	800d02c <_malloc_r+0x20>
 800d084:	425a      	negs	r2, r3
 800d086:	50e2      	str	r2, [r4, r3]
 800d088:	e7d0      	b.n	800d02c <_malloc_r+0x20>
 800d08a:	428c      	cmp	r4, r1
 800d08c:	684b      	ldr	r3, [r1, #4]
 800d08e:	bf16      	itet	ne
 800d090:	6063      	strne	r3, [r4, #4]
 800d092:	6013      	streq	r3, [r2, #0]
 800d094:	460c      	movne	r4, r1
 800d096:	e7eb      	b.n	800d070 <_malloc_r+0x64>
 800d098:	460c      	mov	r4, r1
 800d09a:	6849      	ldr	r1, [r1, #4]
 800d09c:	e7cc      	b.n	800d038 <_malloc_r+0x2c>
 800d09e:	1cc4      	adds	r4, r0, #3
 800d0a0:	f024 0403 	bic.w	r4, r4, #3
 800d0a4:	42a0      	cmp	r0, r4
 800d0a6:	d005      	beq.n	800d0b4 <_malloc_r+0xa8>
 800d0a8:	1a21      	subs	r1, r4, r0
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	f000 fc22 	bl	800d8f4 <_sbrk_r>
 800d0b0:	3001      	adds	r0, #1
 800d0b2:	d0cf      	beq.n	800d054 <_malloc_r+0x48>
 800d0b4:	6025      	str	r5, [r4, #0]
 800d0b6:	e7db      	b.n	800d070 <_malloc_r+0x64>
 800d0b8:	2000aa9c 	.word	0x2000aa9c
 800d0bc:	2000aaa0 	.word	0x2000aaa0

0800d0c0 <__ssputs_r>:
 800d0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c4:	688e      	ldr	r6, [r1, #8]
 800d0c6:	429e      	cmp	r6, r3
 800d0c8:	4682      	mov	sl, r0
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	4690      	mov	r8, r2
 800d0ce:	4699      	mov	r9, r3
 800d0d0:	d837      	bhi.n	800d142 <__ssputs_r+0x82>
 800d0d2:	898a      	ldrh	r2, [r1, #12]
 800d0d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0d8:	d031      	beq.n	800d13e <__ssputs_r+0x7e>
 800d0da:	6825      	ldr	r5, [r4, #0]
 800d0dc:	6909      	ldr	r1, [r1, #16]
 800d0de:	1a6f      	subs	r7, r5, r1
 800d0e0:	6965      	ldr	r5, [r4, #20]
 800d0e2:	2302      	movs	r3, #2
 800d0e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0e8:	fb95 f5f3 	sdiv	r5, r5, r3
 800d0ec:	f109 0301 	add.w	r3, r9, #1
 800d0f0:	443b      	add	r3, r7
 800d0f2:	429d      	cmp	r5, r3
 800d0f4:	bf38      	it	cc
 800d0f6:	461d      	movcc	r5, r3
 800d0f8:	0553      	lsls	r3, r2, #21
 800d0fa:	d530      	bpl.n	800d15e <__ssputs_r+0x9e>
 800d0fc:	4629      	mov	r1, r5
 800d0fe:	f7ff ff85 	bl	800d00c <_malloc_r>
 800d102:	4606      	mov	r6, r0
 800d104:	b950      	cbnz	r0, 800d11c <__ssputs_r+0x5c>
 800d106:	230c      	movs	r3, #12
 800d108:	f8ca 3000 	str.w	r3, [sl]
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d112:	81a3      	strh	r3, [r4, #12]
 800d114:	f04f 30ff 	mov.w	r0, #4294967295
 800d118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d11c:	463a      	mov	r2, r7
 800d11e:	6921      	ldr	r1, [r4, #16]
 800d120:	f7ff fbd8 	bl	800c8d4 <memcpy>
 800d124:	89a3      	ldrh	r3, [r4, #12]
 800d126:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d12e:	81a3      	strh	r3, [r4, #12]
 800d130:	6126      	str	r6, [r4, #16]
 800d132:	6165      	str	r5, [r4, #20]
 800d134:	443e      	add	r6, r7
 800d136:	1bed      	subs	r5, r5, r7
 800d138:	6026      	str	r6, [r4, #0]
 800d13a:	60a5      	str	r5, [r4, #8]
 800d13c:	464e      	mov	r6, r9
 800d13e:	454e      	cmp	r6, r9
 800d140:	d900      	bls.n	800d144 <__ssputs_r+0x84>
 800d142:	464e      	mov	r6, r9
 800d144:	4632      	mov	r2, r6
 800d146:	4641      	mov	r1, r8
 800d148:	6820      	ldr	r0, [r4, #0]
 800d14a:	f000 fc7d 	bl	800da48 <memmove>
 800d14e:	68a3      	ldr	r3, [r4, #8]
 800d150:	1b9b      	subs	r3, r3, r6
 800d152:	60a3      	str	r3, [r4, #8]
 800d154:	6823      	ldr	r3, [r4, #0]
 800d156:	441e      	add	r6, r3
 800d158:	6026      	str	r6, [r4, #0]
 800d15a:	2000      	movs	r0, #0
 800d15c:	e7dc      	b.n	800d118 <__ssputs_r+0x58>
 800d15e:	462a      	mov	r2, r5
 800d160:	f000 fc8d 	bl	800da7e <_realloc_r>
 800d164:	4606      	mov	r6, r0
 800d166:	2800      	cmp	r0, #0
 800d168:	d1e2      	bne.n	800d130 <__ssputs_r+0x70>
 800d16a:	6921      	ldr	r1, [r4, #16]
 800d16c:	4650      	mov	r0, sl
 800d16e:	f7ff feff 	bl	800cf70 <_free_r>
 800d172:	e7c8      	b.n	800d106 <__ssputs_r+0x46>

0800d174 <_svfiprintf_r>:
 800d174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d178:	461d      	mov	r5, r3
 800d17a:	898b      	ldrh	r3, [r1, #12]
 800d17c:	061f      	lsls	r7, r3, #24
 800d17e:	b09d      	sub	sp, #116	; 0x74
 800d180:	4680      	mov	r8, r0
 800d182:	460c      	mov	r4, r1
 800d184:	4616      	mov	r6, r2
 800d186:	d50f      	bpl.n	800d1a8 <_svfiprintf_r+0x34>
 800d188:	690b      	ldr	r3, [r1, #16]
 800d18a:	b96b      	cbnz	r3, 800d1a8 <_svfiprintf_r+0x34>
 800d18c:	2140      	movs	r1, #64	; 0x40
 800d18e:	f7ff ff3d 	bl	800d00c <_malloc_r>
 800d192:	6020      	str	r0, [r4, #0]
 800d194:	6120      	str	r0, [r4, #16]
 800d196:	b928      	cbnz	r0, 800d1a4 <_svfiprintf_r+0x30>
 800d198:	230c      	movs	r3, #12
 800d19a:	f8c8 3000 	str.w	r3, [r8]
 800d19e:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a2:	e0c8      	b.n	800d336 <_svfiprintf_r+0x1c2>
 800d1a4:	2340      	movs	r3, #64	; 0x40
 800d1a6:	6163      	str	r3, [r4, #20]
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ac:	2320      	movs	r3, #32
 800d1ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1b2:	2330      	movs	r3, #48	; 0x30
 800d1b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1b8:	9503      	str	r5, [sp, #12]
 800d1ba:	f04f 0b01 	mov.w	fp, #1
 800d1be:	4637      	mov	r7, r6
 800d1c0:	463d      	mov	r5, r7
 800d1c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d1c6:	b10b      	cbz	r3, 800d1cc <_svfiprintf_r+0x58>
 800d1c8:	2b25      	cmp	r3, #37	; 0x25
 800d1ca:	d13e      	bne.n	800d24a <_svfiprintf_r+0xd6>
 800d1cc:	ebb7 0a06 	subs.w	sl, r7, r6
 800d1d0:	d00b      	beq.n	800d1ea <_svfiprintf_r+0x76>
 800d1d2:	4653      	mov	r3, sl
 800d1d4:	4632      	mov	r2, r6
 800d1d6:	4621      	mov	r1, r4
 800d1d8:	4640      	mov	r0, r8
 800d1da:	f7ff ff71 	bl	800d0c0 <__ssputs_r>
 800d1de:	3001      	adds	r0, #1
 800d1e0:	f000 80a4 	beq.w	800d32c <_svfiprintf_r+0x1b8>
 800d1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1e6:	4453      	add	r3, sl
 800d1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ea:	783b      	ldrb	r3, [r7, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f000 809d 	beq.w	800d32c <_svfiprintf_r+0x1b8>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1fc:	9304      	str	r3, [sp, #16]
 800d1fe:	9307      	str	r3, [sp, #28]
 800d200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d204:	931a      	str	r3, [sp, #104]	; 0x68
 800d206:	462f      	mov	r7, r5
 800d208:	2205      	movs	r2, #5
 800d20a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d20e:	4850      	ldr	r0, [pc, #320]	; (800d350 <_svfiprintf_r+0x1dc>)
 800d210:	f7f2 ffe6 	bl	80001e0 <memchr>
 800d214:	9b04      	ldr	r3, [sp, #16]
 800d216:	b9d0      	cbnz	r0, 800d24e <_svfiprintf_r+0xda>
 800d218:	06d9      	lsls	r1, r3, #27
 800d21a:	bf44      	itt	mi
 800d21c:	2220      	movmi	r2, #32
 800d21e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d222:	071a      	lsls	r2, r3, #28
 800d224:	bf44      	itt	mi
 800d226:	222b      	movmi	r2, #43	; 0x2b
 800d228:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d22c:	782a      	ldrb	r2, [r5, #0]
 800d22e:	2a2a      	cmp	r2, #42	; 0x2a
 800d230:	d015      	beq.n	800d25e <_svfiprintf_r+0xea>
 800d232:	9a07      	ldr	r2, [sp, #28]
 800d234:	462f      	mov	r7, r5
 800d236:	2000      	movs	r0, #0
 800d238:	250a      	movs	r5, #10
 800d23a:	4639      	mov	r1, r7
 800d23c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d240:	3b30      	subs	r3, #48	; 0x30
 800d242:	2b09      	cmp	r3, #9
 800d244:	d94d      	bls.n	800d2e2 <_svfiprintf_r+0x16e>
 800d246:	b1b8      	cbz	r0, 800d278 <_svfiprintf_r+0x104>
 800d248:	e00f      	b.n	800d26a <_svfiprintf_r+0xf6>
 800d24a:	462f      	mov	r7, r5
 800d24c:	e7b8      	b.n	800d1c0 <_svfiprintf_r+0x4c>
 800d24e:	4a40      	ldr	r2, [pc, #256]	; (800d350 <_svfiprintf_r+0x1dc>)
 800d250:	1a80      	subs	r0, r0, r2
 800d252:	fa0b f000 	lsl.w	r0, fp, r0
 800d256:	4318      	orrs	r0, r3
 800d258:	9004      	str	r0, [sp, #16]
 800d25a:	463d      	mov	r5, r7
 800d25c:	e7d3      	b.n	800d206 <_svfiprintf_r+0x92>
 800d25e:	9a03      	ldr	r2, [sp, #12]
 800d260:	1d11      	adds	r1, r2, #4
 800d262:	6812      	ldr	r2, [r2, #0]
 800d264:	9103      	str	r1, [sp, #12]
 800d266:	2a00      	cmp	r2, #0
 800d268:	db01      	blt.n	800d26e <_svfiprintf_r+0xfa>
 800d26a:	9207      	str	r2, [sp, #28]
 800d26c:	e004      	b.n	800d278 <_svfiprintf_r+0x104>
 800d26e:	4252      	negs	r2, r2
 800d270:	f043 0302 	orr.w	r3, r3, #2
 800d274:	9207      	str	r2, [sp, #28]
 800d276:	9304      	str	r3, [sp, #16]
 800d278:	783b      	ldrb	r3, [r7, #0]
 800d27a:	2b2e      	cmp	r3, #46	; 0x2e
 800d27c:	d10c      	bne.n	800d298 <_svfiprintf_r+0x124>
 800d27e:	787b      	ldrb	r3, [r7, #1]
 800d280:	2b2a      	cmp	r3, #42	; 0x2a
 800d282:	d133      	bne.n	800d2ec <_svfiprintf_r+0x178>
 800d284:	9b03      	ldr	r3, [sp, #12]
 800d286:	1d1a      	adds	r2, r3, #4
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	9203      	str	r2, [sp, #12]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	bfb8      	it	lt
 800d290:	f04f 33ff 	movlt.w	r3, #4294967295
 800d294:	3702      	adds	r7, #2
 800d296:	9305      	str	r3, [sp, #20]
 800d298:	4d2e      	ldr	r5, [pc, #184]	; (800d354 <_svfiprintf_r+0x1e0>)
 800d29a:	7839      	ldrb	r1, [r7, #0]
 800d29c:	2203      	movs	r2, #3
 800d29e:	4628      	mov	r0, r5
 800d2a0:	f7f2 ff9e 	bl	80001e0 <memchr>
 800d2a4:	b138      	cbz	r0, 800d2b6 <_svfiprintf_r+0x142>
 800d2a6:	2340      	movs	r3, #64	; 0x40
 800d2a8:	1b40      	subs	r0, r0, r5
 800d2aa:	fa03 f000 	lsl.w	r0, r3, r0
 800d2ae:	9b04      	ldr	r3, [sp, #16]
 800d2b0:	4303      	orrs	r3, r0
 800d2b2:	3701      	adds	r7, #1
 800d2b4:	9304      	str	r3, [sp, #16]
 800d2b6:	7839      	ldrb	r1, [r7, #0]
 800d2b8:	4827      	ldr	r0, [pc, #156]	; (800d358 <_svfiprintf_r+0x1e4>)
 800d2ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2be:	2206      	movs	r2, #6
 800d2c0:	1c7e      	adds	r6, r7, #1
 800d2c2:	f7f2 ff8d 	bl	80001e0 <memchr>
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	d038      	beq.n	800d33c <_svfiprintf_r+0x1c8>
 800d2ca:	4b24      	ldr	r3, [pc, #144]	; (800d35c <_svfiprintf_r+0x1e8>)
 800d2cc:	bb13      	cbnz	r3, 800d314 <_svfiprintf_r+0x1a0>
 800d2ce:	9b03      	ldr	r3, [sp, #12]
 800d2d0:	3307      	adds	r3, #7
 800d2d2:	f023 0307 	bic.w	r3, r3, #7
 800d2d6:	3308      	adds	r3, #8
 800d2d8:	9303      	str	r3, [sp, #12]
 800d2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2dc:	444b      	add	r3, r9
 800d2de:	9309      	str	r3, [sp, #36]	; 0x24
 800d2e0:	e76d      	b.n	800d1be <_svfiprintf_r+0x4a>
 800d2e2:	fb05 3202 	mla	r2, r5, r2, r3
 800d2e6:	2001      	movs	r0, #1
 800d2e8:	460f      	mov	r7, r1
 800d2ea:	e7a6      	b.n	800d23a <_svfiprintf_r+0xc6>
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	3701      	adds	r7, #1
 800d2f0:	9305      	str	r3, [sp, #20]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	250a      	movs	r5, #10
 800d2f6:	4638      	mov	r0, r7
 800d2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2fc:	3a30      	subs	r2, #48	; 0x30
 800d2fe:	2a09      	cmp	r2, #9
 800d300:	d903      	bls.n	800d30a <_svfiprintf_r+0x196>
 800d302:	2b00      	cmp	r3, #0
 800d304:	d0c8      	beq.n	800d298 <_svfiprintf_r+0x124>
 800d306:	9105      	str	r1, [sp, #20]
 800d308:	e7c6      	b.n	800d298 <_svfiprintf_r+0x124>
 800d30a:	fb05 2101 	mla	r1, r5, r1, r2
 800d30e:	2301      	movs	r3, #1
 800d310:	4607      	mov	r7, r0
 800d312:	e7f0      	b.n	800d2f6 <_svfiprintf_r+0x182>
 800d314:	ab03      	add	r3, sp, #12
 800d316:	9300      	str	r3, [sp, #0]
 800d318:	4622      	mov	r2, r4
 800d31a:	4b11      	ldr	r3, [pc, #68]	; (800d360 <_svfiprintf_r+0x1ec>)
 800d31c:	a904      	add	r1, sp, #16
 800d31e:	4640      	mov	r0, r8
 800d320:	f3af 8000 	nop.w
 800d324:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d328:	4681      	mov	r9, r0
 800d32a:	d1d6      	bne.n	800d2da <_svfiprintf_r+0x166>
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	065b      	lsls	r3, r3, #25
 800d330:	f53f af35 	bmi.w	800d19e <_svfiprintf_r+0x2a>
 800d334:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d336:	b01d      	add	sp, #116	; 0x74
 800d338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33c:	ab03      	add	r3, sp, #12
 800d33e:	9300      	str	r3, [sp, #0]
 800d340:	4622      	mov	r2, r4
 800d342:	4b07      	ldr	r3, [pc, #28]	; (800d360 <_svfiprintf_r+0x1ec>)
 800d344:	a904      	add	r1, sp, #16
 800d346:	4640      	mov	r0, r8
 800d348:	f000 f9c2 	bl	800d6d0 <_printf_i>
 800d34c:	e7ea      	b.n	800d324 <_svfiprintf_r+0x1b0>
 800d34e:	bf00      	nop
 800d350:	0800df54 	.word	0x0800df54
 800d354:	0800df5a 	.word	0x0800df5a
 800d358:	0800df5e 	.word	0x0800df5e
 800d35c:	00000000 	.word	0x00000000
 800d360:	0800d0c1 	.word	0x0800d0c1

0800d364 <__sfputc_r>:
 800d364:	6893      	ldr	r3, [r2, #8]
 800d366:	3b01      	subs	r3, #1
 800d368:	2b00      	cmp	r3, #0
 800d36a:	b410      	push	{r4}
 800d36c:	6093      	str	r3, [r2, #8]
 800d36e:	da08      	bge.n	800d382 <__sfputc_r+0x1e>
 800d370:	6994      	ldr	r4, [r2, #24]
 800d372:	42a3      	cmp	r3, r4
 800d374:	db01      	blt.n	800d37a <__sfputc_r+0x16>
 800d376:	290a      	cmp	r1, #10
 800d378:	d103      	bne.n	800d382 <__sfputc_r+0x1e>
 800d37a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d37e:	f7ff bb59 	b.w	800ca34 <__swbuf_r>
 800d382:	6813      	ldr	r3, [r2, #0]
 800d384:	1c58      	adds	r0, r3, #1
 800d386:	6010      	str	r0, [r2, #0]
 800d388:	7019      	strb	r1, [r3, #0]
 800d38a:	4608      	mov	r0, r1
 800d38c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d390:	4770      	bx	lr

0800d392 <__sfputs_r>:
 800d392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d394:	4606      	mov	r6, r0
 800d396:	460f      	mov	r7, r1
 800d398:	4614      	mov	r4, r2
 800d39a:	18d5      	adds	r5, r2, r3
 800d39c:	42ac      	cmp	r4, r5
 800d39e:	d101      	bne.n	800d3a4 <__sfputs_r+0x12>
 800d3a0:	2000      	movs	r0, #0
 800d3a2:	e007      	b.n	800d3b4 <__sfputs_r+0x22>
 800d3a4:	463a      	mov	r2, r7
 800d3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3aa:	4630      	mov	r0, r6
 800d3ac:	f7ff ffda 	bl	800d364 <__sfputc_r>
 800d3b0:	1c43      	adds	r3, r0, #1
 800d3b2:	d1f3      	bne.n	800d39c <__sfputs_r+0xa>
 800d3b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3b8 <_vfiprintf_r>:
 800d3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3bc:	460c      	mov	r4, r1
 800d3be:	b09d      	sub	sp, #116	; 0x74
 800d3c0:	4617      	mov	r7, r2
 800d3c2:	461d      	mov	r5, r3
 800d3c4:	4606      	mov	r6, r0
 800d3c6:	b118      	cbz	r0, 800d3d0 <_vfiprintf_r+0x18>
 800d3c8:	6983      	ldr	r3, [r0, #24]
 800d3ca:	b90b      	cbnz	r3, 800d3d0 <_vfiprintf_r+0x18>
 800d3cc:	f7ff fce2 	bl	800cd94 <__sinit>
 800d3d0:	4b7c      	ldr	r3, [pc, #496]	; (800d5c4 <_vfiprintf_r+0x20c>)
 800d3d2:	429c      	cmp	r4, r3
 800d3d4:	d158      	bne.n	800d488 <_vfiprintf_r+0xd0>
 800d3d6:	6874      	ldr	r4, [r6, #4]
 800d3d8:	89a3      	ldrh	r3, [r4, #12]
 800d3da:	0718      	lsls	r0, r3, #28
 800d3dc:	d55e      	bpl.n	800d49c <_vfiprintf_r+0xe4>
 800d3de:	6923      	ldr	r3, [r4, #16]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d05b      	beq.n	800d49c <_vfiprintf_r+0xe4>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d3e8:	2320      	movs	r3, #32
 800d3ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3ee:	2330      	movs	r3, #48	; 0x30
 800d3f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3f4:	9503      	str	r5, [sp, #12]
 800d3f6:	f04f 0b01 	mov.w	fp, #1
 800d3fa:	46b8      	mov	r8, r7
 800d3fc:	4645      	mov	r5, r8
 800d3fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d402:	b10b      	cbz	r3, 800d408 <_vfiprintf_r+0x50>
 800d404:	2b25      	cmp	r3, #37	; 0x25
 800d406:	d154      	bne.n	800d4b2 <_vfiprintf_r+0xfa>
 800d408:	ebb8 0a07 	subs.w	sl, r8, r7
 800d40c:	d00b      	beq.n	800d426 <_vfiprintf_r+0x6e>
 800d40e:	4653      	mov	r3, sl
 800d410:	463a      	mov	r2, r7
 800d412:	4621      	mov	r1, r4
 800d414:	4630      	mov	r0, r6
 800d416:	f7ff ffbc 	bl	800d392 <__sfputs_r>
 800d41a:	3001      	adds	r0, #1
 800d41c:	f000 80c2 	beq.w	800d5a4 <_vfiprintf_r+0x1ec>
 800d420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d422:	4453      	add	r3, sl
 800d424:	9309      	str	r3, [sp, #36]	; 0x24
 800d426:	f898 3000 	ldrb.w	r3, [r8]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f000 80ba 	beq.w	800d5a4 <_vfiprintf_r+0x1ec>
 800d430:	2300      	movs	r3, #0
 800d432:	f04f 32ff 	mov.w	r2, #4294967295
 800d436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d43a:	9304      	str	r3, [sp, #16]
 800d43c:	9307      	str	r3, [sp, #28]
 800d43e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d442:	931a      	str	r3, [sp, #104]	; 0x68
 800d444:	46a8      	mov	r8, r5
 800d446:	2205      	movs	r2, #5
 800d448:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d44c:	485e      	ldr	r0, [pc, #376]	; (800d5c8 <_vfiprintf_r+0x210>)
 800d44e:	f7f2 fec7 	bl	80001e0 <memchr>
 800d452:	9b04      	ldr	r3, [sp, #16]
 800d454:	bb78      	cbnz	r0, 800d4b6 <_vfiprintf_r+0xfe>
 800d456:	06d9      	lsls	r1, r3, #27
 800d458:	bf44      	itt	mi
 800d45a:	2220      	movmi	r2, #32
 800d45c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d460:	071a      	lsls	r2, r3, #28
 800d462:	bf44      	itt	mi
 800d464:	222b      	movmi	r2, #43	; 0x2b
 800d466:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d46a:	782a      	ldrb	r2, [r5, #0]
 800d46c:	2a2a      	cmp	r2, #42	; 0x2a
 800d46e:	d02a      	beq.n	800d4c6 <_vfiprintf_r+0x10e>
 800d470:	9a07      	ldr	r2, [sp, #28]
 800d472:	46a8      	mov	r8, r5
 800d474:	2000      	movs	r0, #0
 800d476:	250a      	movs	r5, #10
 800d478:	4641      	mov	r1, r8
 800d47a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d47e:	3b30      	subs	r3, #48	; 0x30
 800d480:	2b09      	cmp	r3, #9
 800d482:	d969      	bls.n	800d558 <_vfiprintf_r+0x1a0>
 800d484:	b360      	cbz	r0, 800d4e0 <_vfiprintf_r+0x128>
 800d486:	e024      	b.n	800d4d2 <_vfiprintf_r+0x11a>
 800d488:	4b50      	ldr	r3, [pc, #320]	; (800d5cc <_vfiprintf_r+0x214>)
 800d48a:	429c      	cmp	r4, r3
 800d48c:	d101      	bne.n	800d492 <_vfiprintf_r+0xda>
 800d48e:	68b4      	ldr	r4, [r6, #8]
 800d490:	e7a2      	b.n	800d3d8 <_vfiprintf_r+0x20>
 800d492:	4b4f      	ldr	r3, [pc, #316]	; (800d5d0 <_vfiprintf_r+0x218>)
 800d494:	429c      	cmp	r4, r3
 800d496:	bf08      	it	eq
 800d498:	68f4      	ldreq	r4, [r6, #12]
 800d49a:	e79d      	b.n	800d3d8 <_vfiprintf_r+0x20>
 800d49c:	4621      	mov	r1, r4
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f7ff fb1a 	bl	800cad8 <__swsetup_r>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	d09d      	beq.n	800d3e4 <_vfiprintf_r+0x2c>
 800d4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ac:	b01d      	add	sp, #116	; 0x74
 800d4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b2:	46a8      	mov	r8, r5
 800d4b4:	e7a2      	b.n	800d3fc <_vfiprintf_r+0x44>
 800d4b6:	4a44      	ldr	r2, [pc, #272]	; (800d5c8 <_vfiprintf_r+0x210>)
 800d4b8:	1a80      	subs	r0, r0, r2
 800d4ba:	fa0b f000 	lsl.w	r0, fp, r0
 800d4be:	4318      	orrs	r0, r3
 800d4c0:	9004      	str	r0, [sp, #16]
 800d4c2:	4645      	mov	r5, r8
 800d4c4:	e7be      	b.n	800d444 <_vfiprintf_r+0x8c>
 800d4c6:	9a03      	ldr	r2, [sp, #12]
 800d4c8:	1d11      	adds	r1, r2, #4
 800d4ca:	6812      	ldr	r2, [r2, #0]
 800d4cc:	9103      	str	r1, [sp, #12]
 800d4ce:	2a00      	cmp	r2, #0
 800d4d0:	db01      	blt.n	800d4d6 <_vfiprintf_r+0x11e>
 800d4d2:	9207      	str	r2, [sp, #28]
 800d4d4:	e004      	b.n	800d4e0 <_vfiprintf_r+0x128>
 800d4d6:	4252      	negs	r2, r2
 800d4d8:	f043 0302 	orr.w	r3, r3, #2
 800d4dc:	9207      	str	r2, [sp, #28]
 800d4de:	9304      	str	r3, [sp, #16]
 800d4e0:	f898 3000 	ldrb.w	r3, [r8]
 800d4e4:	2b2e      	cmp	r3, #46	; 0x2e
 800d4e6:	d10e      	bne.n	800d506 <_vfiprintf_r+0x14e>
 800d4e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800d4ee:	d138      	bne.n	800d562 <_vfiprintf_r+0x1aa>
 800d4f0:	9b03      	ldr	r3, [sp, #12]
 800d4f2:	1d1a      	adds	r2, r3, #4
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	9203      	str	r2, [sp, #12]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	bfb8      	it	lt
 800d4fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d500:	f108 0802 	add.w	r8, r8, #2
 800d504:	9305      	str	r3, [sp, #20]
 800d506:	4d33      	ldr	r5, [pc, #204]	; (800d5d4 <_vfiprintf_r+0x21c>)
 800d508:	f898 1000 	ldrb.w	r1, [r8]
 800d50c:	2203      	movs	r2, #3
 800d50e:	4628      	mov	r0, r5
 800d510:	f7f2 fe66 	bl	80001e0 <memchr>
 800d514:	b140      	cbz	r0, 800d528 <_vfiprintf_r+0x170>
 800d516:	2340      	movs	r3, #64	; 0x40
 800d518:	1b40      	subs	r0, r0, r5
 800d51a:	fa03 f000 	lsl.w	r0, r3, r0
 800d51e:	9b04      	ldr	r3, [sp, #16]
 800d520:	4303      	orrs	r3, r0
 800d522:	f108 0801 	add.w	r8, r8, #1
 800d526:	9304      	str	r3, [sp, #16]
 800d528:	f898 1000 	ldrb.w	r1, [r8]
 800d52c:	482a      	ldr	r0, [pc, #168]	; (800d5d8 <_vfiprintf_r+0x220>)
 800d52e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d532:	2206      	movs	r2, #6
 800d534:	f108 0701 	add.w	r7, r8, #1
 800d538:	f7f2 fe52 	bl	80001e0 <memchr>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d037      	beq.n	800d5b0 <_vfiprintf_r+0x1f8>
 800d540:	4b26      	ldr	r3, [pc, #152]	; (800d5dc <_vfiprintf_r+0x224>)
 800d542:	bb1b      	cbnz	r3, 800d58c <_vfiprintf_r+0x1d4>
 800d544:	9b03      	ldr	r3, [sp, #12]
 800d546:	3307      	adds	r3, #7
 800d548:	f023 0307 	bic.w	r3, r3, #7
 800d54c:	3308      	adds	r3, #8
 800d54e:	9303      	str	r3, [sp, #12]
 800d550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d552:	444b      	add	r3, r9
 800d554:	9309      	str	r3, [sp, #36]	; 0x24
 800d556:	e750      	b.n	800d3fa <_vfiprintf_r+0x42>
 800d558:	fb05 3202 	mla	r2, r5, r2, r3
 800d55c:	2001      	movs	r0, #1
 800d55e:	4688      	mov	r8, r1
 800d560:	e78a      	b.n	800d478 <_vfiprintf_r+0xc0>
 800d562:	2300      	movs	r3, #0
 800d564:	f108 0801 	add.w	r8, r8, #1
 800d568:	9305      	str	r3, [sp, #20]
 800d56a:	4619      	mov	r1, r3
 800d56c:	250a      	movs	r5, #10
 800d56e:	4640      	mov	r0, r8
 800d570:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d574:	3a30      	subs	r2, #48	; 0x30
 800d576:	2a09      	cmp	r2, #9
 800d578:	d903      	bls.n	800d582 <_vfiprintf_r+0x1ca>
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d0c3      	beq.n	800d506 <_vfiprintf_r+0x14e>
 800d57e:	9105      	str	r1, [sp, #20]
 800d580:	e7c1      	b.n	800d506 <_vfiprintf_r+0x14e>
 800d582:	fb05 2101 	mla	r1, r5, r1, r2
 800d586:	2301      	movs	r3, #1
 800d588:	4680      	mov	r8, r0
 800d58a:	e7f0      	b.n	800d56e <_vfiprintf_r+0x1b6>
 800d58c:	ab03      	add	r3, sp, #12
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	4622      	mov	r2, r4
 800d592:	4b13      	ldr	r3, [pc, #76]	; (800d5e0 <_vfiprintf_r+0x228>)
 800d594:	a904      	add	r1, sp, #16
 800d596:	4630      	mov	r0, r6
 800d598:	f3af 8000 	nop.w
 800d59c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d5a0:	4681      	mov	r9, r0
 800d5a2:	d1d5      	bne.n	800d550 <_vfiprintf_r+0x198>
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	065b      	lsls	r3, r3, #25
 800d5a8:	f53f af7e 	bmi.w	800d4a8 <_vfiprintf_r+0xf0>
 800d5ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5ae:	e77d      	b.n	800d4ac <_vfiprintf_r+0xf4>
 800d5b0:	ab03      	add	r3, sp, #12
 800d5b2:	9300      	str	r3, [sp, #0]
 800d5b4:	4622      	mov	r2, r4
 800d5b6:	4b0a      	ldr	r3, [pc, #40]	; (800d5e0 <_vfiprintf_r+0x228>)
 800d5b8:	a904      	add	r1, sp, #16
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	f000 f888 	bl	800d6d0 <_printf_i>
 800d5c0:	e7ec      	b.n	800d59c <_vfiprintf_r+0x1e4>
 800d5c2:	bf00      	nop
 800d5c4:	0800df14 	.word	0x0800df14
 800d5c8:	0800df54 	.word	0x0800df54
 800d5cc:	0800df34 	.word	0x0800df34
 800d5d0:	0800def4 	.word	0x0800def4
 800d5d4:	0800df5a 	.word	0x0800df5a
 800d5d8:	0800df5e 	.word	0x0800df5e
 800d5dc:	00000000 	.word	0x00000000
 800d5e0:	0800d393 	.word	0x0800d393

0800d5e4 <_printf_common>:
 800d5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5e8:	4691      	mov	r9, r2
 800d5ea:	461f      	mov	r7, r3
 800d5ec:	688a      	ldr	r2, [r1, #8]
 800d5ee:	690b      	ldr	r3, [r1, #16]
 800d5f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	bfb8      	it	lt
 800d5f8:	4613      	movlt	r3, r2
 800d5fa:	f8c9 3000 	str.w	r3, [r9]
 800d5fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d602:	4606      	mov	r6, r0
 800d604:	460c      	mov	r4, r1
 800d606:	b112      	cbz	r2, 800d60e <_printf_common+0x2a>
 800d608:	3301      	adds	r3, #1
 800d60a:	f8c9 3000 	str.w	r3, [r9]
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	0699      	lsls	r1, r3, #26
 800d612:	bf42      	ittt	mi
 800d614:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d618:	3302      	addmi	r3, #2
 800d61a:	f8c9 3000 	strmi.w	r3, [r9]
 800d61e:	6825      	ldr	r5, [r4, #0]
 800d620:	f015 0506 	ands.w	r5, r5, #6
 800d624:	d107      	bne.n	800d636 <_printf_common+0x52>
 800d626:	f104 0a19 	add.w	sl, r4, #25
 800d62a:	68e3      	ldr	r3, [r4, #12]
 800d62c:	f8d9 2000 	ldr.w	r2, [r9]
 800d630:	1a9b      	subs	r3, r3, r2
 800d632:	42ab      	cmp	r3, r5
 800d634:	dc28      	bgt.n	800d688 <_printf_common+0xa4>
 800d636:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d63a:	6822      	ldr	r2, [r4, #0]
 800d63c:	3300      	adds	r3, #0
 800d63e:	bf18      	it	ne
 800d640:	2301      	movne	r3, #1
 800d642:	0692      	lsls	r2, r2, #26
 800d644:	d42d      	bmi.n	800d6a2 <_printf_common+0xbe>
 800d646:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d64a:	4639      	mov	r1, r7
 800d64c:	4630      	mov	r0, r6
 800d64e:	47c0      	blx	r8
 800d650:	3001      	adds	r0, #1
 800d652:	d020      	beq.n	800d696 <_printf_common+0xb2>
 800d654:	6823      	ldr	r3, [r4, #0]
 800d656:	68e5      	ldr	r5, [r4, #12]
 800d658:	f8d9 2000 	ldr.w	r2, [r9]
 800d65c:	f003 0306 	and.w	r3, r3, #6
 800d660:	2b04      	cmp	r3, #4
 800d662:	bf08      	it	eq
 800d664:	1aad      	subeq	r5, r5, r2
 800d666:	68a3      	ldr	r3, [r4, #8]
 800d668:	6922      	ldr	r2, [r4, #16]
 800d66a:	bf0c      	ite	eq
 800d66c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d670:	2500      	movne	r5, #0
 800d672:	4293      	cmp	r3, r2
 800d674:	bfc4      	itt	gt
 800d676:	1a9b      	subgt	r3, r3, r2
 800d678:	18ed      	addgt	r5, r5, r3
 800d67a:	f04f 0900 	mov.w	r9, #0
 800d67e:	341a      	adds	r4, #26
 800d680:	454d      	cmp	r5, r9
 800d682:	d11a      	bne.n	800d6ba <_printf_common+0xd6>
 800d684:	2000      	movs	r0, #0
 800d686:	e008      	b.n	800d69a <_printf_common+0xb6>
 800d688:	2301      	movs	r3, #1
 800d68a:	4652      	mov	r2, sl
 800d68c:	4639      	mov	r1, r7
 800d68e:	4630      	mov	r0, r6
 800d690:	47c0      	blx	r8
 800d692:	3001      	adds	r0, #1
 800d694:	d103      	bne.n	800d69e <_printf_common+0xba>
 800d696:	f04f 30ff 	mov.w	r0, #4294967295
 800d69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d69e:	3501      	adds	r5, #1
 800d6a0:	e7c3      	b.n	800d62a <_printf_common+0x46>
 800d6a2:	18e1      	adds	r1, r4, r3
 800d6a4:	1c5a      	adds	r2, r3, #1
 800d6a6:	2030      	movs	r0, #48	; 0x30
 800d6a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6ac:	4422      	add	r2, r4
 800d6ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d6b6:	3302      	adds	r3, #2
 800d6b8:	e7c5      	b.n	800d646 <_printf_common+0x62>
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	4622      	mov	r2, r4
 800d6be:	4639      	mov	r1, r7
 800d6c0:	4630      	mov	r0, r6
 800d6c2:	47c0      	blx	r8
 800d6c4:	3001      	adds	r0, #1
 800d6c6:	d0e6      	beq.n	800d696 <_printf_common+0xb2>
 800d6c8:	f109 0901 	add.w	r9, r9, #1
 800d6cc:	e7d8      	b.n	800d680 <_printf_common+0x9c>
	...

0800d6d0 <_printf_i>:
 800d6d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d6d8:	460c      	mov	r4, r1
 800d6da:	7e09      	ldrb	r1, [r1, #24]
 800d6dc:	b085      	sub	sp, #20
 800d6de:	296e      	cmp	r1, #110	; 0x6e
 800d6e0:	4617      	mov	r7, r2
 800d6e2:	4606      	mov	r6, r0
 800d6e4:	4698      	mov	r8, r3
 800d6e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6e8:	f000 80b3 	beq.w	800d852 <_printf_i+0x182>
 800d6ec:	d822      	bhi.n	800d734 <_printf_i+0x64>
 800d6ee:	2963      	cmp	r1, #99	; 0x63
 800d6f0:	d036      	beq.n	800d760 <_printf_i+0x90>
 800d6f2:	d80a      	bhi.n	800d70a <_printf_i+0x3a>
 800d6f4:	2900      	cmp	r1, #0
 800d6f6:	f000 80b9 	beq.w	800d86c <_printf_i+0x19c>
 800d6fa:	2958      	cmp	r1, #88	; 0x58
 800d6fc:	f000 8083 	beq.w	800d806 <_printf_i+0x136>
 800d700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d704:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d708:	e032      	b.n	800d770 <_printf_i+0xa0>
 800d70a:	2964      	cmp	r1, #100	; 0x64
 800d70c:	d001      	beq.n	800d712 <_printf_i+0x42>
 800d70e:	2969      	cmp	r1, #105	; 0x69
 800d710:	d1f6      	bne.n	800d700 <_printf_i+0x30>
 800d712:	6820      	ldr	r0, [r4, #0]
 800d714:	6813      	ldr	r3, [r2, #0]
 800d716:	0605      	lsls	r5, r0, #24
 800d718:	f103 0104 	add.w	r1, r3, #4
 800d71c:	d52a      	bpl.n	800d774 <_printf_i+0xa4>
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	6011      	str	r1, [r2, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	da03      	bge.n	800d72e <_printf_i+0x5e>
 800d726:	222d      	movs	r2, #45	; 0x2d
 800d728:	425b      	negs	r3, r3
 800d72a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d72e:	486f      	ldr	r0, [pc, #444]	; (800d8ec <_printf_i+0x21c>)
 800d730:	220a      	movs	r2, #10
 800d732:	e039      	b.n	800d7a8 <_printf_i+0xd8>
 800d734:	2973      	cmp	r1, #115	; 0x73
 800d736:	f000 809d 	beq.w	800d874 <_printf_i+0x1a4>
 800d73a:	d808      	bhi.n	800d74e <_printf_i+0x7e>
 800d73c:	296f      	cmp	r1, #111	; 0x6f
 800d73e:	d020      	beq.n	800d782 <_printf_i+0xb2>
 800d740:	2970      	cmp	r1, #112	; 0x70
 800d742:	d1dd      	bne.n	800d700 <_printf_i+0x30>
 800d744:	6823      	ldr	r3, [r4, #0]
 800d746:	f043 0320 	orr.w	r3, r3, #32
 800d74a:	6023      	str	r3, [r4, #0]
 800d74c:	e003      	b.n	800d756 <_printf_i+0x86>
 800d74e:	2975      	cmp	r1, #117	; 0x75
 800d750:	d017      	beq.n	800d782 <_printf_i+0xb2>
 800d752:	2978      	cmp	r1, #120	; 0x78
 800d754:	d1d4      	bne.n	800d700 <_printf_i+0x30>
 800d756:	2378      	movs	r3, #120	; 0x78
 800d758:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d75c:	4864      	ldr	r0, [pc, #400]	; (800d8f0 <_printf_i+0x220>)
 800d75e:	e055      	b.n	800d80c <_printf_i+0x13c>
 800d760:	6813      	ldr	r3, [r2, #0]
 800d762:	1d19      	adds	r1, r3, #4
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	6011      	str	r1, [r2, #0]
 800d768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d76c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d770:	2301      	movs	r3, #1
 800d772:	e08c      	b.n	800d88e <_printf_i+0x1be>
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	6011      	str	r1, [r2, #0]
 800d778:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d77c:	bf18      	it	ne
 800d77e:	b21b      	sxthne	r3, r3
 800d780:	e7cf      	b.n	800d722 <_printf_i+0x52>
 800d782:	6813      	ldr	r3, [r2, #0]
 800d784:	6825      	ldr	r5, [r4, #0]
 800d786:	1d18      	adds	r0, r3, #4
 800d788:	6010      	str	r0, [r2, #0]
 800d78a:	0628      	lsls	r0, r5, #24
 800d78c:	d501      	bpl.n	800d792 <_printf_i+0xc2>
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	e002      	b.n	800d798 <_printf_i+0xc8>
 800d792:	0668      	lsls	r0, r5, #25
 800d794:	d5fb      	bpl.n	800d78e <_printf_i+0xbe>
 800d796:	881b      	ldrh	r3, [r3, #0]
 800d798:	4854      	ldr	r0, [pc, #336]	; (800d8ec <_printf_i+0x21c>)
 800d79a:	296f      	cmp	r1, #111	; 0x6f
 800d79c:	bf14      	ite	ne
 800d79e:	220a      	movne	r2, #10
 800d7a0:	2208      	moveq	r2, #8
 800d7a2:	2100      	movs	r1, #0
 800d7a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d7a8:	6865      	ldr	r5, [r4, #4]
 800d7aa:	60a5      	str	r5, [r4, #8]
 800d7ac:	2d00      	cmp	r5, #0
 800d7ae:	f2c0 8095 	blt.w	800d8dc <_printf_i+0x20c>
 800d7b2:	6821      	ldr	r1, [r4, #0]
 800d7b4:	f021 0104 	bic.w	r1, r1, #4
 800d7b8:	6021      	str	r1, [r4, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d13d      	bne.n	800d83a <_printf_i+0x16a>
 800d7be:	2d00      	cmp	r5, #0
 800d7c0:	f040 808e 	bne.w	800d8e0 <_printf_i+0x210>
 800d7c4:	4665      	mov	r5, ip
 800d7c6:	2a08      	cmp	r2, #8
 800d7c8:	d10b      	bne.n	800d7e2 <_printf_i+0x112>
 800d7ca:	6823      	ldr	r3, [r4, #0]
 800d7cc:	07db      	lsls	r3, r3, #31
 800d7ce:	d508      	bpl.n	800d7e2 <_printf_i+0x112>
 800d7d0:	6923      	ldr	r3, [r4, #16]
 800d7d2:	6862      	ldr	r2, [r4, #4]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	bfde      	ittt	le
 800d7d8:	2330      	movle	r3, #48	; 0x30
 800d7da:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7de:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d7e2:	ebac 0305 	sub.w	r3, ip, r5
 800d7e6:	6123      	str	r3, [r4, #16]
 800d7e8:	f8cd 8000 	str.w	r8, [sp]
 800d7ec:	463b      	mov	r3, r7
 800d7ee:	aa03      	add	r2, sp, #12
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	f7ff fef6 	bl	800d5e4 <_printf_common>
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	d14d      	bne.n	800d898 <_printf_i+0x1c8>
 800d7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d800:	b005      	add	sp, #20
 800d802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d806:	4839      	ldr	r0, [pc, #228]	; (800d8ec <_printf_i+0x21c>)
 800d808:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d80c:	6813      	ldr	r3, [r2, #0]
 800d80e:	6821      	ldr	r1, [r4, #0]
 800d810:	1d1d      	adds	r5, r3, #4
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6015      	str	r5, [r2, #0]
 800d816:	060a      	lsls	r2, r1, #24
 800d818:	d50b      	bpl.n	800d832 <_printf_i+0x162>
 800d81a:	07ca      	lsls	r2, r1, #31
 800d81c:	bf44      	itt	mi
 800d81e:	f041 0120 	orrmi.w	r1, r1, #32
 800d822:	6021      	strmi	r1, [r4, #0]
 800d824:	b91b      	cbnz	r3, 800d82e <_printf_i+0x15e>
 800d826:	6822      	ldr	r2, [r4, #0]
 800d828:	f022 0220 	bic.w	r2, r2, #32
 800d82c:	6022      	str	r2, [r4, #0]
 800d82e:	2210      	movs	r2, #16
 800d830:	e7b7      	b.n	800d7a2 <_printf_i+0xd2>
 800d832:	064d      	lsls	r5, r1, #25
 800d834:	bf48      	it	mi
 800d836:	b29b      	uxthmi	r3, r3
 800d838:	e7ef      	b.n	800d81a <_printf_i+0x14a>
 800d83a:	4665      	mov	r5, ip
 800d83c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d840:	fb02 3311 	mls	r3, r2, r1, r3
 800d844:	5cc3      	ldrb	r3, [r0, r3]
 800d846:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d84a:	460b      	mov	r3, r1
 800d84c:	2900      	cmp	r1, #0
 800d84e:	d1f5      	bne.n	800d83c <_printf_i+0x16c>
 800d850:	e7b9      	b.n	800d7c6 <_printf_i+0xf6>
 800d852:	6813      	ldr	r3, [r2, #0]
 800d854:	6825      	ldr	r5, [r4, #0]
 800d856:	6961      	ldr	r1, [r4, #20]
 800d858:	1d18      	adds	r0, r3, #4
 800d85a:	6010      	str	r0, [r2, #0]
 800d85c:	0628      	lsls	r0, r5, #24
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	d501      	bpl.n	800d866 <_printf_i+0x196>
 800d862:	6019      	str	r1, [r3, #0]
 800d864:	e002      	b.n	800d86c <_printf_i+0x19c>
 800d866:	066a      	lsls	r2, r5, #25
 800d868:	d5fb      	bpl.n	800d862 <_printf_i+0x192>
 800d86a:	8019      	strh	r1, [r3, #0]
 800d86c:	2300      	movs	r3, #0
 800d86e:	6123      	str	r3, [r4, #16]
 800d870:	4665      	mov	r5, ip
 800d872:	e7b9      	b.n	800d7e8 <_printf_i+0x118>
 800d874:	6813      	ldr	r3, [r2, #0]
 800d876:	1d19      	adds	r1, r3, #4
 800d878:	6011      	str	r1, [r2, #0]
 800d87a:	681d      	ldr	r5, [r3, #0]
 800d87c:	6862      	ldr	r2, [r4, #4]
 800d87e:	2100      	movs	r1, #0
 800d880:	4628      	mov	r0, r5
 800d882:	f7f2 fcad 	bl	80001e0 <memchr>
 800d886:	b108      	cbz	r0, 800d88c <_printf_i+0x1bc>
 800d888:	1b40      	subs	r0, r0, r5
 800d88a:	6060      	str	r0, [r4, #4]
 800d88c:	6863      	ldr	r3, [r4, #4]
 800d88e:	6123      	str	r3, [r4, #16]
 800d890:	2300      	movs	r3, #0
 800d892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d896:	e7a7      	b.n	800d7e8 <_printf_i+0x118>
 800d898:	6923      	ldr	r3, [r4, #16]
 800d89a:	462a      	mov	r2, r5
 800d89c:	4639      	mov	r1, r7
 800d89e:	4630      	mov	r0, r6
 800d8a0:	47c0      	blx	r8
 800d8a2:	3001      	adds	r0, #1
 800d8a4:	d0aa      	beq.n	800d7fc <_printf_i+0x12c>
 800d8a6:	6823      	ldr	r3, [r4, #0]
 800d8a8:	079b      	lsls	r3, r3, #30
 800d8aa:	d413      	bmi.n	800d8d4 <_printf_i+0x204>
 800d8ac:	68e0      	ldr	r0, [r4, #12]
 800d8ae:	9b03      	ldr	r3, [sp, #12]
 800d8b0:	4298      	cmp	r0, r3
 800d8b2:	bfb8      	it	lt
 800d8b4:	4618      	movlt	r0, r3
 800d8b6:	e7a3      	b.n	800d800 <_printf_i+0x130>
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	464a      	mov	r2, r9
 800d8bc:	4639      	mov	r1, r7
 800d8be:	4630      	mov	r0, r6
 800d8c0:	47c0      	blx	r8
 800d8c2:	3001      	adds	r0, #1
 800d8c4:	d09a      	beq.n	800d7fc <_printf_i+0x12c>
 800d8c6:	3501      	adds	r5, #1
 800d8c8:	68e3      	ldr	r3, [r4, #12]
 800d8ca:	9a03      	ldr	r2, [sp, #12]
 800d8cc:	1a9b      	subs	r3, r3, r2
 800d8ce:	42ab      	cmp	r3, r5
 800d8d0:	dcf2      	bgt.n	800d8b8 <_printf_i+0x1e8>
 800d8d2:	e7eb      	b.n	800d8ac <_printf_i+0x1dc>
 800d8d4:	2500      	movs	r5, #0
 800d8d6:	f104 0919 	add.w	r9, r4, #25
 800d8da:	e7f5      	b.n	800d8c8 <_printf_i+0x1f8>
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d1ac      	bne.n	800d83a <_printf_i+0x16a>
 800d8e0:	7803      	ldrb	r3, [r0, #0]
 800d8e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8ea:	e76c      	b.n	800d7c6 <_printf_i+0xf6>
 800d8ec:	0800df65 	.word	0x0800df65
 800d8f0:	0800df76 	.word	0x0800df76

0800d8f4 <_sbrk_r>:
 800d8f4:	b538      	push	{r3, r4, r5, lr}
 800d8f6:	4c06      	ldr	r4, [pc, #24]	; (800d910 <_sbrk_r+0x1c>)
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	4605      	mov	r5, r0
 800d8fc:	4608      	mov	r0, r1
 800d8fe:	6023      	str	r3, [r4, #0]
 800d900:	f7f5 fcae 	bl	8003260 <_sbrk>
 800d904:	1c43      	adds	r3, r0, #1
 800d906:	d102      	bne.n	800d90e <_sbrk_r+0x1a>
 800d908:	6823      	ldr	r3, [r4, #0]
 800d90a:	b103      	cbz	r3, 800d90e <_sbrk_r+0x1a>
 800d90c:	602b      	str	r3, [r5, #0]
 800d90e:	bd38      	pop	{r3, r4, r5, pc}
 800d910:	2000b0c0 	.word	0x2000b0c0

0800d914 <__sread>:
 800d914:	b510      	push	{r4, lr}
 800d916:	460c      	mov	r4, r1
 800d918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d91c:	f000 f8d6 	bl	800dacc <_read_r>
 800d920:	2800      	cmp	r0, #0
 800d922:	bfab      	itete	ge
 800d924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d926:	89a3      	ldrhlt	r3, [r4, #12]
 800d928:	181b      	addge	r3, r3, r0
 800d92a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d92e:	bfac      	ite	ge
 800d930:	6563      	strge	r3, [r4, #84]	; 0x54
 800d932:	81a3      	strhlt	r3, [r4, #12]
 800d934:	bd10      	pop	{r4, pc}

0800d936 <__swrite>:
 800d936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d93a:	461f      	mov	r7, r3
 800d93c:	898b      	ldrh	r3, [r1, #12]
 800d93e:	05db      	lsls	r3, r3, #23
 800d940:	4605      	mov	r5, r0
 800d942:	460c      	mov	r4, r1
 800d944:	4616      	mov	r6, r2
 800d946:	d505      	bpl.n	800d954 <__swrite+0x1e>
 800d948:	2302      	movs	r3, #2
 800d94a:	2200      	movs	r2, #0
 800d94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d950:	f000 f868 	bl	800da24 <_lseek_r>
 800d954:	89a3      	ldrh	r3, [r4, #12]
 800d956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d95a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d95e:	81a3      	strh	r3, [r4, #12]
 800d960:	4632      	mov	r2, r6
 800d962:	463b      	mov	r3, r7
 800d964:	4628      	mov	r0, r5
 800d966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d96a:	f000 b817 	b.w	800d99c <_write_r>

0800d96e <__sseek>:
 800d96e:	b510      	push	{r4, lr}
 800d970:	460c      	mov	r4, r1
 800d972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d976:	f000 f855 	bl	800da24 <_lseek_r>
 800d97a:	1c43      	adds	r3, r0, #1
 800d97c:	89a3      	ldrh	r3, [r4, #12]
 800d97e:	bf15      	itete	ne
 800d980:	6560      	strne	r0, [r4, #84]	; 0x54
 800d982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d98a:	81a3      	strheq	r3, [r4, #12]
 800d98c:	bf18      	it	ne
 800d98e:	81a3      	strhne	r3, [r4, #12]
 800d990:	bd10      	pop	{r4, pc}

0800d992 <__sclose>:
 800d992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d996:	f000 b813 	b.w	800d9c0 <_close_r>
	...

0800d99c <_write_r>:
 800d99c:	b538      	push	{r3, r4, r5, lr}
 800d99e:	4c07      	ldr	r4, [pc, #28]	; (800d9bc <_write_r+0x20>)
 800d9a0:	4605      	mov	r5, r0
 800d9a2:	4608      	mov	r0, r1
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	6022      	str	r2, [r4, #0]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	f7f5 fc07 	bl	80031be <_write>
 800d9b0:	1c43      	adds	r3, r0, #1
 800d9b2:	d102      	bne.n	800d9ba <_write_r+0x1e>
 800d9b4:	6823      	ldr	r3, [r4, #0]
 800d9b6:	b103      	cbz	r3, 800d9ba <_write_r+0x1e>
 800d9b8:	602b      	str	r3, [r5, #0]
 800d9ba:	bd38      	pop	{r3, r4, r5, pc}
 800d9bc:	2000b0c0 	.word	0x2000b0c0

0800d9c0 <_close_r>:
 800d9c0:	b538      	push	{r3, r4, r5, lr}
 800d9c2:	4c06      	ldr	r4, [pc, #24]	; (800d9dc <_close_r+0x1c>)
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	4608      	mov	r0, r1
 800d9ca:	6023      	str	r3, [r4, #0]
 800d9cc:	f7f5 fc13 	bl	80031f6 <_close>
 800d9d0:	1c43      	adds	r3, r0, #1
 800d9d2:	d102      	bne.n	800d9da <_close_r+0x1a>
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	b103      	cbz	r3, 800d9da <_close_r+0x1a>
 800d9d8:	602b      	str	r3, [r5, #0]
 800d9da:	bd38      	pop	{r3, r4, r5, pc}
 800d9dc:	2000b0c0 	.word	0x2000b0c0

0800d9e0 <_fstat_r>:
 800d9e0:	b538      	push	{r3, r4, r5, lr}
 800d9e2:	4c07      	ldr	r4, [pc, #28]	; (800da00 <_fstat_r+0x20>)
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	4605      	mov	r5, r0
 800d9e8:	4608      	mov	r0, r1
 800d9ea:	4611      	mov	r1, r2
 800d9ec:	6023      	str	r3, [r4, #0]
 800d9ee:	f7f5 fc0e 	bl	800320e <_fstat>
 800d9f2:	1c43      	adds	r3, r0, #1
 800d9f4:	d102      	bne.n	800d9fc <_fstat_r+0x1c>
 800d9f6:	6823      	ldr	r3, [r4, #0]
 800d9f8:	b103      	cbz	r3, 800d9fc <_fstat_r+0x1c>
 800d9fa:	602b      	str	r3, [r5, #0]
 800d9fc:	bd38      	pop	{r3, r4, r5, pc}
 800d9fe:	bf00      	nop
 800da00:	2000b0c0 	.word	0x2000b0c0

0800da04 <_isatty_r>:
 800da04:	b538      	push	{r3, r4, r5, lr}
 800da06:	4c06      	ldr	r4, [pc, #24]	; (800da20 <_isatty_r+0x1c>)
 800da08:	2300      	movs	r3, #0
 800da0a:	4605      	mov	r5, r0
 800da0c:	4608      	mov	r0, r1
 800da0e:	6023      	str	r3, [r4, #0]
 800da10:	f7f5 fc0d 	bl	800322e <_isatty>
 800da14:	1c43      	adds	r3, r0, #1
 800da16:	d102      	bne.n	800da1e <_isatty_r+0x1a>
 800da18:	6823      	ldr	r3, [r4, #0]
 800da1a:	b103      	cbz	r3, 800da1e <_isatty_r+0x1a>
 800da1c:	602b      	str	r3, [r5, #0]
 800da1e:	bd38      	pop	{r3, r4, r5, pc}
 800da20:	2000b0c0 	.word	0x2000b0c0

0800da24 <_lseek_r>:
 800da24:	b538      	push	{r3, r4, r5, lr}
 800da26:	4c07      	ldr	r4, [pc, #28]	; (800da44 <_lseek_r+0x20>)
 800da28:	4605      	mov	r5, r0
 800da2a:	4608      	mov	r0, r1
 800da2c:	4611      	mov	r1, r2
 800da2e:	2200      	movs	r2, #0
 800da30:	6022      	str	r2, [r4, #0]
 800da32:	461a      	mov	r2, r3
 800da34:	f7f5 fc06 	bl	8003244 <_lseek>
 800da38:	1c43      	adds	r3, r0, #1
 800da3a:	d102      	bne.n	800da42 <_lseek_r+0x1e>
 800da3c:	6823      	ldr	r3, [r4, #0]
 800da3e:	b103      	cbz	r3, 800da42 <_lseek_r+0x1e>
 800da40:	602b      	str	r3, [r5, #0]
 800da42:	bd38      	pop	{r3, r4, r5, pc}
 800da44:	2000b0c0 	.word	0x2000b0c0

0800da48 <memmove>:
 800da48:	4288      	cmp	r0, r1
 800da4a:	b510      	push	{r4, lr}
 800da4c:	eb01 0302 	add.w	r3, r1, r2
 800da50:	d807      	bhi.n	800da62 <memmove+0x1a>
 800da52:	1e42      	subs	r2, r0, #1
 800da54:	4299      	cmp	r1, r3
 800da56:	d00a      	beq.n	800da6e <memmove+0x26>
 800da58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da5c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800da60:	e7f8      	b.n	800da54 <memmove+0xc>
 800da62:	4283      	cmp	r3, r0
 800da64:	d9f5      	bls.n	800da52 <memmove+0xa>
 800da66:	1881      	adds	r1, r0, r2
 800da68:	1ad2      	subs	r2, r2, r3
 800da6a:	42d3      	cmn	r3, r2
 800da6c:	d100      	bne.n	800da70 <memmove+0x28>
 800da6e:	bd10      	pop	{r4, pc}
 800da70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da74:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800da78:	e7f7      	b.n	800da6a <memmove+0x22>

0800da7a <__malloc_lock>:
 800da7a:	4770      	bx	lr

0800da7c <__malloc_unlock>:
 800da7c:	4770      	bx	lr

0800da7e <_realloc_r>:
 800da7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da80:	4607      	mov	r7, r0
 800da82:	4614      	mov	r4, r2
 800da84:	460e      	mov	r6, r1
 800da86:	b921      	cbnz	r1, 800da92 <_realloc_r+0x14>
 800da88:	4611      	mov	r1, r2
 800da8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da8e:	f7ff babd 	b.w	800d00c <_malloc_r>
 800da92:	b922      	cbnz	r2, 800da9e <_realloc_r+0x20>
 800da94:	f7ff fa6c 	bl	800cf70 <_free_r>
 800da98:	4625      	mov	r5, r4
 800da9a:	4628      	mov	r0, r5
 800da9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da9e:	f000 f827 	bl	800daf0 <_malloc_usable_size_r>
 800daa2:	42a0      	cmp	r0, r4
 800daa4:	d20f      	bcs.n	800dac6 <_realloc_r+0x48>
 800daa6:	4621      	mov	r1, r4
 800daa8:	4638      	mov	r0, r7
 800daaa:	f7ff faaf 	bl	800d00c <_malloc_r>
 800daae:	4605      	mov	r5, r0
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d0f2      	beq.n	800da9a <_realloc_r+0x1c>
 800dab4:	4631      	mov	r1, r6
 800dab6:	4622      	mov	r2, r4
 800dab8:	f7fe ff0c 	bl	800c8d4 <memcpy>
 800dabc:	4631      	mov	r1, r6
 800dabe:	4638      	mov	r0, r7
 800dac0:	f7ff fa56 	bl	800cf70 <_free_r>
 800dac4:	e7e9      	b.n	800da9a <_realloc_r+0x1c>
 800dac6:	4635      	mov	r5, r6
 800dac8:	e7e7      	b.n	800da9a <_realloc_r+0x1c>
	...

0800dacc <_read_r>:
 800dacc:	b538      	push	{r3, r4, r5, lr}
 800dace:	4c07      	ldr	r4, [pc, #28]	; (800daec <_read_r+0x20>)
 800dad0:	4605      	mov	r5, r0
 800dad2:	4608      	mov	r0, r1
 800dad4:	4611      	mov	r1, r2
 800dad6:	2200      	movs	r2, #0
 800dad8:	6022      	str	r2, [r4, #0]
 800dada:	461a      	mov	r2, r3
 800dadc:	f7f5 fb52 	bl	8003184 <_read>
 800dae0:	1c43      	adds	r3, r0, #1
 800dae2:	d102      	bne.n	800daea <_read_r+0x1e>
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	b103      	cbz	r3, 800daea <_read_r+0x1e>
 800dae8:	602b      	str	r3, [r5, #0]
 800daea:	bd38      	pop	{r3, r4, r5, pc}
 800daec:	2000b0c0 	.word	0x2000b0c0

0800daf0 <_malloc_usable_size_r>:
 800daf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daf4:	1f18      	subs	r0, r3, #4
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	bfbc      	itt	lt
 800dafa:	580b      	ldrlt	r3, [r1, r0]
 800dafc:	18c0      	addlt	r0, r0, r3
 800dafe:	4770      	bx	lr

0800db00 <_init>:
 800db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db02:	bf00      	nop
 800db04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db06:	bc08      	pop	{r3}
 800db08:	469e      	mov	lr, r3
 800db0a:	4770      	bx	lr

0800db0c <_fini>:
 800db0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0e:	bf00      	nop
 800db10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db12:	bc08      	pop	{r3}
 800db14:	469e      	mov	lr, r3
 800db16:	4770      	bx	lr
