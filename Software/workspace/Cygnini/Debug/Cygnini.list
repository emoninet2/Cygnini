
Cygnini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed0  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08007060  08007060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007330  08007330  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08007330  08007330  00017330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007338  08007338  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007338  08007338  00017338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08007348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000048  08007390  00020048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08007390  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023255  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000432c  00000000  00000000  000432cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001698  00000000  00000000  00047600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014d8  00000000  00000000  00048c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000aac9  00000000  00000000  0004a170  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00007bb9  00000000  00000000  00054c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005c7f2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005d58  00000000  00000000  0005c870  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000048 	.word	0x20000048
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007044 	.word	0x08007044

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000004c 	.word	0x2000004c
 80001cc:	08007044 	.word	0x08007044

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f092 0f00 	teq	r2, #0
 80004ca:	bf14      	ite	ne
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e720      	b.n	8000324 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aedc 	beq.w	80002d2 <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6c1      	b.n	80002d2 <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a28:	f000 b97a 	b.w	8000d20 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	468c      	mov	ip, r1
 8000a4a:	460d      	mov	r5, r1
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	9e08      	ldr	r6, [sp, #32]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d151      	bne.n	8000af8 <__udivmoddi4+0xb4>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4617      	mov	r7, r2
 8000a58:	d96d      	bls.n	8000b36 <__udivmoddi4+0xf2>
 8000a5a:	fab2 fe82 	clz	lr, r2
 8000a5e:	f1be 0f00 	cmp.w	lr, #0
 8000a62:	d00b      	beq.n	8000a7c <__udivmoddi4+0x38>
 8000a64:	f1ce 0c20 	rsb	ip, lr, #32
 8000a68:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a70:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a74:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a78:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a7c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a80:	0c25      	lsrs	r5, r4, #16
 8000a82:	fbbc f8fa 	udiv	r8, ip, sl
 8000a86:	fa1f f987 	uxth.w	r9, r7
 8000a8a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a8e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a92:	fb08 f309 	mul.w	r3, r8, r9
 8000a96:	42ab      	cmp	r3, r5
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x6c>
 8000a9a:	19ed      	adds	r5, r5, r7
 8000a9c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000aa0:	f080 8123 	bcs.w	8000cea <__udivmoddi4+0x2a6>
 8000aa4:	42ab      	cmp	r3, r5
 8000aa6:	f240 8120 	bls.w	8000cea <__udivmoddi4+0x2a6>
 8000aaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000aae:	443d      	add	r5, r7
 8000ab0:	1aed      	subs	r5, r5, r3
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ab8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000abc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ac0:	fb00 f909 	mul.w	r9, r0, r9
 8000ac4:	45a1      	cmp	r9, r4
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x98>
 8000ac8:	19e4      	adds	r4, r4, r7
 8000aca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ace:	f080 810a 	bcs.w	8000ce6 <__udivmoddi4+0x2a2>
 8000ad2:	45a1      	cmp	r9, r4
 8000ad4:	f240 8107 	bls.w	8000ce6 <__udivmoddi4+0x2a2>
 8000ad8:	3802      	subs	r0, #2
 8000ada:	443c      	add	r4, r7
 8000adc:	eba4 0409 	sub.w	r4, r4, r9
 8000ae0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d061      	beq.n	8000bae <__udivmoddi4+0x16a>
 8000aea:	fa24 f40e 	lsr.w	r4, r4, lr
 8000aee:	2300      	movs	r3, #0
 8000af0:	6034      	str	r4, [r6, #0]
 8000af2:	6073      	str	r3, [r6, #4]
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d907      	bls.n	8000b0c <__udivmoddi4+0xc8>
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d054      	beq.n	8000baa <__udivmoddi4+0x166>
 8000b00:	2100      	movs	r1, #0
 8000b02:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b06:	4608      	mov	r0, r1
 8000b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0c:	fab3 f183 	clz	r1, r3
 8000b10:	2900      	cmp	r1, #0
 8000b12:	f040 808e 	bne.w	8000c32 <__udivmoddi4+0x1ee>
 8000b16:	42ab      	cmp	r3, r5
 8000b18:	d302      	bcc.n	8000b20 <__udivmoddi4+0xdc>
 8000b1a:	4282      	cmp	r2, r0
 8000b1c:	f200 80fa 	bhi.w	8000d14 <__udivmoddi4+0x2d0>
 8000b20:	1a84      	subs	r4, r0, r2
 8000b22:	eb65 0503 	sbc.w	r5, r5, r3
 8000b26:	2001      	movs	r0, #1
 8000b28:	46ac      	mov	ip, r5
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d03f      	beq.n	8000bae <__udivmoddi4+0x16a>
 8000b2e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	b912      	cbnz	r2, 8000b3e <__udivmoddi4+0xfa>
 8000b38:	2701      	movs	r7, #1
 8000b3a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b3e:	fab7 fe87 	clz	lr, r7
 8000b42:	f1be 0f00 	cmp.w	lr, #0
 8000b46:	d134      	bne.n	8000bb2 <__udivmoddi4+0x16e>
 8000b48:	1beb      	subs	r3, r5, r7
 8000b4a:	0c3a      	lsrs	r2, r7, #16
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	2101      	movs	r1, #1
 8000b52:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b56:	0c25      	lsrs	r5, r4, #16
 8000b58:	fb02 3318 	mls	r3, r2, r8, r3
 8000b5c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b60:	fb0c f308 	mul.w	r3, ip, r8
 8000b64:	42ab      	cmp	r3, r5
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x134>
 8000b68:	19ed      	adds	r5, r5, r7
 8000b6a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x132>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	f200 80d1 	bhi.w	8000d18 <__udivmoddi4+0x2d4>
 8000b76:	4680      	mov	r8, r0
 8000b78:	1aed      	subs	r5, r5, r3
 8000b7a:	b2a3      	uxth	r3, r4
 8000b7c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b80:	fb02 5510 	mls	r5, r2, r0, r5
 8000b84:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b88:	fb0c fc00 	mul.w	ip, ip, r0
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x15c>
 8000b90:	19e4      	adds	r4, r4, r7
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x15a>
 8000b98:	45a4      	cmp	ip, r4
 8000b9a:	f200 80b8 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	eba4 040c 	sub.w	r4, r4, ip
 8000ba4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ba8:	e79d      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000baa:	4631      	mov	r1, r6
 8000bac:	4630      	mov	r0, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	f1ce 0420 	rsb	r4, lr, #32
 8000bb6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000bba:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bbe:	fa20 f804 	lsr.w	r8, r0, r4
 8000bc2:	0c3a      	lsrs	r2, r7, #16
 8000bc4:	fa25 f404 	lsr.w	r4, r5, r4
 8000bc8:	ea48 0803 	orr.w	r8, r8, r3
 8000bcc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000bd0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bd4:	fb02 4411 	mls	r4, r2, r1, r4
 8000bd8:	fa1f fc87 	uxth.w	ip, r7
 8000bdc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000be0:	fb01 f30c 	mul.w	r3, r1, ip
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x1bc>
 8000bec:	19ed      	adds	r5, r5, r7
 8000bee:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000bf2:	f080 808a 	bcs.w	8000d0a <__udivmoddi4+0x2c6>
 8000bf6:	42ab      	cmp	r3, r5
 8000bf8:	f240 8087 	bls.w	8000d0a <__udivmoddi4+0x2c6>
 8000bfc:	3902      	subs	r1, #2
 8000bfe:	443d      	add	r5, r7
 8000c00:	1aeb      	subs	r3, r5, r3
 8000c02:	fa1f f588 	uxth.w	r5, r8
 8000c06:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c0a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c0e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c12:	fb00 f30c 	mul.w	r3, r0, ip
 8000c16:	42ab      	cmp	r3, r5
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x1e6>
 8000c1a:	19ed      	adds	r5, r5, r7
 8000c1c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c20:	d26f      	bcs.n	8000d02 <__udivmoddi4+0x2be>
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d96d      	bls.n	8000d02 <__udivmoddi4+0x2be>
 8000c26:	3802      	subs	r0, #2
 8000c28:	443d      	add	r5, r7
 8000c2a:	1aeb      	subs	r3, r5, r3
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	e78f      	b.n	8000b52 <__udivmoddi4+0x10e>
 8000c32:	f1c1 0720 	rsb	r7, r1, #32
 8000c36:	fa22 f807 	lsr.w	r8, r2, r7
 8000c3a:	408b      	lsls	r3, r1
 8000c3c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c40:	ea48 0303 	orr.w	r3, r8, r3
 8000c44:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c48:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c4c:	40fd      	lsrs	r5, r7
 8000c4e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c52:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c56:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c5a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c5e:	fa1f f883 	uxth.w	r8, r3
 8000c62:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c66:	fb09 f408 	mul.w	r4, r9, r8
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c70:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x244>
 8000c76:	18ed      	adds	r5, r5, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c7c:	d243      	bcs.n	8000d06 <__udivmoddi4+0x2c2>
 8000c7e:	42ac      	cmp	r4, r5
 8000c80:	d941      	bls.n	8000d06 <__udivmoddi4+0x2c2>
 8000c82:	f1a9 0902 	sub.w	r9, r9, #2
 8000c86:	441d      	add	r5, r3
 8000c88:	1b2d      	subs	r5, r5, r4
 8000c8a:	fa1f fe8e 	uxth.w	lr, lr
 8000c8e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c92:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c96:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c9a:	fb00 f808 	mul.w	r8, r0, r8
 8000c9e:	45a0      	cmp	r8, r4
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x26e>
 8000ca2:	18e4      	adds	r4, r4, r3
 8000ca4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000ca8:	d229      	bcs.n	8000cfe <__udivmoddi4+0x2ba>
 8000caa:	45a0      	cmp	r8, r4
 8000cac:	d927      	bls.n	8000cfe <__udivmoddi4+0x2ba>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	441c      	add	r4, r3
 8000cb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cb6:	eba4 0408 	sub.w	r4, r4, r8
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	454c      	cmp	r4, r9
 8000cc0:	46c6      	mov	lr, r8
 8000cc2:	464d      	mov	r5, r9
 8000cc4:	d315      	bcc.n	8000cf2 <__udivmoddi4+0x2ae>
 8000cc6:	d012      	beq.n	8000cee <__udivmoddi4+0x2aa>
 8000cc8:	b156      	cbz	r6, 8000ce0 <__udivmoddi4+0x29c>
 8000cca:	ebba 030e 	subs.w	r3, sl, lr
 8000cce:	eb64 0405 	sbc.w	r4, r4, r5
 8000cd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000cd6:	40cb      	lsrs	r3, r1
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	40cc      	lsrs	r4, r1
 8000cdc:	6037      	str	r7, [r6, #0]
 8000cde:	6074      	str	r4, [r6, #4]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	e6f8      	b.n	8000adc <__udivmoddi4+0x98>
 8000cea:	4690      	mov	r8, r2
 8000cec:	e6e0      	b.n	8000ab0 <__udivmoddi4+0x6c>
 8000cee:	45c2      	cmp	sl, r8
 8000cf0:	d2ea      	bcs.n	8000cc8 <__udivmoddi4+0x284>
 8000cf2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cf6:	eb69 0503 	sbc.w	r5, r9, r3
 8000cfa:	3801      	subs	r0, #1
 8000cfc:	e7e4      	b.n	8000cc8 <__udivmoddi4+0x284>
 8000cfe:	4628      	mov	r0, r5
 8000d00:	e7d7      	b.n	8000cb2 <__udivmoddi4+0x26e>
 8000d02:	4640      	mov	r0, r8
 8000d04:	e791      	b.n	8000c2a <__udivmoddi4+0x1e6>
 8000d06:	4681      	mov	r9, r0
 8000d08:	e7be      	b.n	8000c88 <__udivmoddi4+0x244>
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	e778      	b.n	8000c00 <__udivmoddi4+0x1bc>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	443c      	add	r4, r7
 8000d12:	e745      	b.n	8000ba0 <__udivmoddi4+0x15c>
 8000d14:	4608      	mov	r0, r1
 8000d16:	e708      	b.n	8000b2a <__udivmoddi4+0xe6>
 8000d18:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1c:	443d      	add	r5, r7
 8000d1e:	e72b      	b.n	8000b78 <__udivmoddi4+0x134>

08000d20 <__aeabi_idiv0>:
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <c12832_hal_spi_init>:
#include "C12832Port.h"

SPI_HandleTypeDef hspi2;


void c12832_hal_spi_init(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]


    /* USER CODE END SPI2_MspInit 0 */
	/* Peripheral clock enable */
	__HAL_RCC_SPI2_CLK_ENABLE();
 8000d3a:	4a31      	ldr	r2, [pc, #196]	; (8000e00 <c12832_hal_spi_init+0xdc>)
 8000d3c:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <c12832_hal_spi_init+0xdc>)
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <c12832_hal_spi_init+0xdc>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4a2b      	ldr	r2, [pc, #172]	; (8000e00 <c12832_hal_spi_init+0xdc>)
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <c12832_hal_spi_init+0xdc>)
 8000d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <c12832_hal_spi_init+0xdc>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
	/**SPI2 GPIO Configuration
	PB13     ------> SPI2_SCK
	PB14     ------> SPI2_MISO
	PB15     ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d7c:	2305      	movs	r3, #5
 8000d7e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	4619      	mov	r1, r3
 8000d86:	481f      	ldr	r0, [pc, #124]	; (8000e04 <c12832_hal_spi_init+0xe0>)
 8000d88:	f001 fb7a 	bl	8002480 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */


	  hspi2.Instance = SPI2;
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <c12832_hal_spi_init+0xe8>)
 8000d90:	601a      	str	r2, [r3, #0]
	  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000d94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d98:	605a      	str	r2, [r3, #4]
	  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
	  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000da2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000da6:	60da      	str	r2, [r3, #12]
	  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
	  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
	  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dba:	619a      	str	r2, [r3, #24]
	  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000dbe:	2228      	movs	r2, #40	; 0x28
 8000dc0:	61da      	str	r2, [r3, #28]
	  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
	  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi2.Init.CRCPolynomial = 7;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
	  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	; 0x30
	  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000de6:	4808      	ldr	r0, [pc, #32]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000de8:	f003 fcc0 	bl	800476c <HAL_SPI_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <c12832_hal_spi_init+0xd2>
	  {
	    Error_Handler();
 8000df2:	f005 fea5 	bl	8006b40 <Error_Handler>
	  }

}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48000400 	.word	0x48000400
 8000e08:	20000198 	.word	0x20000198
 8000e0c:	40003800 	.word	0x40003800

08000e10 <c12832_hal_gpio_init>:


void c12832_hal_gpio_init(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4a43      	ldr	r2, [pc, #268]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e18:	4b42      	ldr	r3, [pc, #264]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2e:	4a3d      	ldr	r2, [pc, #244]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e30:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4a37      	ldr	r2, [pc, #220]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e48:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e60:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4a2b      	ldr	r2, [pc, #172]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]


	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, DISPLAY_NRESET_Pin|DISPLAY_A0_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2160      	movs	r1, #96	; 0x60
 8000ea2:	4821      	ldr	r0, [pc, #132]	; (8000f28 <c12832_hal_gpio_init+0x118>)
 8000ea4:	f001 fc6a 	bl	800277c <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DISPLAY_NSEL_GPIO_Port, DISPLAY_NSEL_Pin, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eae:	481f      	ldr	r0, [pc, #124]	; (8000f2c <c12832_hal_gpio_init+0x11c>)
 8000eb0:	f001 fc64 	bl	800277c <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DISPLAY_BACKLIGHT_GPIO_Port, DISPLAY_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f001 fc5d 	bl	800277c <HAL_GPIO_WritePin>


	  /*Configure GPIO pins : DISPLAY_NRESET_Pin DISPLAY_A0_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_NRESET_Pin|DISPLAY_A0_Pin;
 8000ec2:	2360      	movs	r3, #96	; 0x60
 8000ec4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <c12832_hal_gpio_init+0x118>)
 8000eda:	f001 fad1 	bl	8002480 <HAL_GPIO_Init>

	  /*Configure GPIO pin : DISPLAY_NSEL_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_NSEL_Pin;
 8000ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(DISPLAY_NSEL_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <c12832_hal_gpio_init+0x11c>)
 8000ef8:	f001 fac2 	bl	8002480 <HAL_GPIO_Init>

	  /*Configure GPIO pin : DISPLAY_BACKLIGHT_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_BACKLIGHT_Pin;
 8000efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f00:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(DISPLAY_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f001 fab2 	bl	8002480 <HAL_GPIO_Init>



}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48000800 	.word	0x48000800
 8000f2c:	48000400 	.word	0x48000400

08000f30 <c12832_hal_spi_write_read>:


int c12832_hal_spi_write_read (uint8_t *tx_data, uint8_t *rx_data, uint16_t lenght) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	80fb      	strh	r3, [r7, #6]

	HAL_SPI_Transmit (&hspi2, tx_data, 1, 200);
 8000f3e:	23c8      	movs	r3, #200	; 0xc8
 8000f40:	2201      	movs	r2, #1
 8000f42:	68f9      	ldr	r1, [r7, #12]
 8000f44:	4803      	ldr	r0, [pc, #12]	; (8000f54 <c12832_hal_spi_write_read+0x24>)
 8000f46:	f003 fc99 	bl	800487c <HAL_SPI_Transmit>
		//DEBUG_MESSAGE_AND_EXIT_FAILURE

	return EXIT_SUCCESS;
 8000f4a:	2300      	movs	r3, #0

}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000198 	.word	0x20000198

08000f58 <graphic_lcd_clear_screen>:

#include "graphic_lcd.h"
#include "st7565r.h"
#include "font.h"

int graphic_lcd_clear_screen(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	e019      	b.n	8000f98 <graphic_lcd_clear_screen+0x40>
		st7565r_set_page_address(i);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f8cd 	bl	8001108 <st7565r_set_page_address>
		st7565r_set_column_address(0);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 f8de 	bl	8001130 <st7565r_set_column_address>
		st7565r_set_display_start_line_address(0);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 f8f8 	bl	800116a <st7565r_set_display_start_line_address>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	e005      	b.n	8000f8c <graphic_lcd_clear_screen+0x34>
			st7565r_write_data(0);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 f881 	bl	8001088 <st7565r_write_data>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b84      	cmp	r3, #132	; 0x84
 8000f90:	ddf6      	ble.n	8000f80 <graphic_lcd_clear_screen+0x28>
	for (i=0; i<LINE_COUNT; i++) {
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3301      	adds	r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	dde2      	ble.n	8000f64 <graphic_lcd_clear_screen+0xc>
	}
	
	return EXIT_SUCCESS;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <graphic_lcd_write>:

int graphic_lcd_write(int line, int offset, char *text) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]

	int i, j;
	
	st7565r_set_page_address(line);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f8a5 	bl	8001108 <st7565r_set_page_address>
	st7565r_set_column_address(offset + FONT_SIZE);
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	3305      	adds	r3, #5
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f8b2 	bl	8001130 <st7565r_set_column_address>
	
	for (i=0; i<strlen(text); i++) {
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e01e      	b.n	8001010 <graphic_lcd_write+0x68>
	
		for (j=0; j<FONT_SIZE; j++) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e012      	b.n	8000ffe <graphic_lcd_write+0x56>
			st7565r_write_data(font_5x8_table[(((text[i] - ASCII_FONT_FIRST) * FONT_SIZE) + j)]);
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	f1a3 0220 	sub.w	r2, r3, #32
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	441a      	add	r2, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <graphic_lcd_write+0x80>)
 8000ff0:	5cd3      	ldrb	r3, [r2, r3]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f848 	bl	8001088 <st7565r_write_data>
		for (j=0; j<FONT_SIZE; j++) {
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b04      	cmp	r3, #4
 8001002:	dde9      	ble.n	8000fd8 <graphic_lcd_write+0x30>
		}
		st7565r_write_data(0);
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f83f 	bl	8001088 <st7565r_write_data>
	for (i=0; i<strlen(text); i++) {
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff f8dd 	bl	80001d0 <strlen>
 8001016:	4602      	mov	r2, r0
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	429a      	cmp	r2, r3
 800101c:	d8d9      	bhi.n	8000fd2 <graphic_lcd_write+0x2a>
	}
		
	return EXIT_SUCCESS;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08007120 	.word	0x08007120

0800102c <graphic_lcd_initialize>:

int graphic_lcd_initialize (void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	
	return st7565r_init ();
 8001030:	f000 f8de 	bl	80011f0 <st7565r_init>
 8001034:	4603      	mov	r3, r0
	
}
 8001036:	4618      	mov	r0, r3
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <st7565r_write_command>:
#include "C12832Port.h"


#define HUNDRED_MILLISECONDS  	(10 / portTICK_PERIOD_MS)

void st7565r_write_command(uint8_t command) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <st7565r_write_command+0x44>)
 800104e:	f001 fb95 	bl	800277c <HAL_GPIO_WritePin>
        DISPLAY_A0_LOW;
 8001052:	2200      	movs	r2, #0
 8001054:	2140      	movs	r1, #64	; 0x40
 8001056:	480b      	ldr	r0, [pc, #44]	; (8001084 <st7565r_write_command+0x48>)
 8001058:	f001 fb90 	bl	800277c <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&command, &tmp, 1);
 800105c:	f107 010f 	add.w	r1, r7, #15
 8001060:	1dfb      	adds	r3, r7, #7
 8001062:	2201      	movs	r2, #1
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff63 	bl	8000f30 <c12832_hal_spi_write_read>
        DISPLAY_CHIP_SELECT_HIGH;
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <st7565r_write_command+0x44>)
 8001072:	f001 fb83 	bl	800277c <HAL_GPIO_WritePin>
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	48000400 	.word	0x48000400
 8001084:	48000800 	.word	0x48000800

08001088 <st7565r_write_data>:

void st7565r_write_data(uint8_t data) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001098:	480e      	ldr	r0, [pc, #56]	; (80010d4 <st7565r_write_data+0x4c>)
 800109a:	f001 fb6f 	bl	800277c <HAL_GPIO_WritePin>
        DISPLAY_A0_HIGH;
 800109e:	2201      	movs	r2, #1
 80010a0:	2140      	movs	r1, #64	; 0x40
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <st7565r_write_data+0x50>)
 80010a4:	f001 fb6a 	bl	800277c <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&data, &tmp, 1);
 80010a8:	f107 010f 	add.w	r1, r7, #15
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	2201      	movs	r2, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff3d 	bl	8000f30 <c12832_hal_spi_write_read>
        DISPLAY_A0_LOW;
 80010b6:	2200      	movs	r2, #0
 80010b8:	2140      	movs	r1, #64	; 0x40
 80010ba:	4807      	ldr	r0, [pc, #28]	; (80010d8 <st7565r_write_data+0x50>)
 80010bc:	f001 fb5e 	bl	800277c <HAL_GPIO_WritePin>
        DISPLAY_CHIP_SELECT_HIGH;
 80010c0:	2201      	movs	r2, #1
 80010c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <st7565r_write_data+0x4c>)
 80010c8:	f001 fb58 	bl	800277c <HAL_GPIO_WritePin>
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	48000400 	.word	0x48000400
 80010d8:	48000800 	.word	0x48000800

080010dc <st7565r_hard_reset>:
 *
 * This functions will reset the LCD controller by setting the reset pin low.
 * \note this funtions should not be confused with the \ref st7565r_soft_reset()
 * function, this command will control the RST pin.
 */
void st7565r_hard_reset(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	
        DISPLAY_RESET_LOW;
 80010e0:	2200      	movs	r2, #0
 80010e2:	2120      	movs	r1, #32
 80010e4:	4807      	ldr	r0, [pc, #28]	; (8001104 <st7565r_hard_reset+0x28>)
 80010e6:	f001 fb49 	bl	800277c <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 80010ea:	200a      	movs	r0, #10
 80010ec:	f004 fe5a 	bl	8005da4 <vTaskDelay>
        DISPLAY_RESET_HIGH;
 80010f0:	2201      	movs	r2, #1
 80010f2:	2120      	movs	r1, #32
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <st7565r_hard_reset+0x28>)
 80010f6:	f001 fb41 	bl	800277c <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f004 fe52 	bl	8005da4 <vTaskDelay>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	48000800 	.word	0x48000800

08001108 <st7565r_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
void st7565r_set_page_address(uint8_t address)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
        // Make sure that the address is 4 bits (only 8 pages)
        address &= 0x0F;
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 030f 	and.w	r3, r3, #15
 8001118:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff8a 	bl	800103c <st7565r_write_command>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <st7565r_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void st7565r_set_column_address(uint8_t address)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
        // Make sure the address is 7 bits
        address &= 0x7F;
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001140:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f043 0310 	orr.w	r3, r3, #16
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff74 	bl	800103c <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	b2db      	uxtb	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff6d 	bl	800103c <st7565r_write_command>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <st7565r_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the LCD.
 */
void st7565r_set_display_start_line_address(uint8_t address)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
        // Make sure address is 6 bits
        address &= 0x3F;
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800117a:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff59 	bl	800103c <st7565r_write_command>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <st7565r_display_on>:
 * \brief Turn the LCD display on
 *
 * This function will turn on the LCD.
 */
void st7565r_display_on(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_ON);
 8001196:	20af      	movs	r0, #175	; 0xaf
 8001198:	f7ff ff50 	bl	800103c <st7565r_write_command>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <st7565r_set_contrast>:
 *                 the LCD.
 *
 * \retval contrast the contrast value written to the LCD controller
 */
uint8_t st7565r_set_contrast(uint8_t contrast)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
        if (contrast < ST7565R_DISPLAY_CONTRAST_MIN) {
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b1d      	cmp	r3, #29
 80011ae:	d801      	bhi.n	80011b4 <st7565r_set_contrast+0x14>
                contrast = ST7565R_DISPLAY_CONTRAST_MIN;
 80011b0:	231e      	movs	r3, #30
 80011b2:	71fb      	strb	r3, [r7, #7]
        }
        if (contrast > ST7565R_DISPLAY_CONTRAST_MAX) {
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	2b28      	cmp	r3, #40	; 0x28
 80011b8:	d901      	bls.n	80011be <st7565r_set_contrast+0x1e>
                contrast = ST7565R_DISPLAY_CONTRAST_MAX;
 80011ba:	2328      	movs	r3, #40	; 0x28
 80011bc:	71fb      	strb	r3, [r7, #7]
        }
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME_MODE_SET);
 80011be:	2081      	movs	r0, #129	; 0x81
 80011c0:	f7ff ff3c 	bl	800103c <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME(contrast));
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff33 	bl	800103c <st7565r_write_command>
        return contrast;
 80011d6:	79fb      	ldrb	r3, [r7, #7]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <st7565r_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the LCD
 *
 */
void st7565r_display_invert_disable(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_NORMAL);
 80011e4:	20a6      	movs	r0, #166	; 0xa6
 80011e6:	f7ff ff29 	bl	800103c <st7565r_write_command>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <st7565r_init>:

int st7565r_init(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	
        // Do a hard reset of the LCD display controller
        st7565r_hard_reset();
 80011f4:	f7ff ff72 	bl	80010dc <st7565r_hard_reset>

        // Set the A0 pin to the default state (command)
        DISPLAY_A0_LOW;
 80011f8:	2200      	movs	r2, #0
 80011fa:	2140      	movs	r1, #64	; 0x40
 80011fc:	4810      	ldr	r0, [pc, #64]	; (8001240 <st7565r_init+0x50>)
 80011fe:	f001 fabd 	bl	800277c <HAL_GPIO_WritePin>

        // The column address
        st7565r_write_command(ST7565R_CMD_ADC_NORMAL);
 8001202:	20a0      	movs	r0, #160	; 0xa0
 8001204:	f7ff ff1a 	bl	800103c <st7565r_write_command>

        // Non-inverted display
        st7565r_display_invert_disable();
 8001208:	f7ff ffea 	bl	80011e0 <st7565r_display_invert_disable>

        // The common mode scan direction
        st7565r_write_command(ST7565R_CMD_REVERSE_SCAN_DIRECTION);
 800120c:	20c8      	movs	r0, #200	; 0xc8
 800120e:	f7ff ff15 	bl	800103c <st7565r_write_command>

        // Set the voltage bias ratio to 1/6
        st7565r_write_command(ST7565R_CMD_LCD_BIAS_1_DIV_6_DUTY33);
 8001212:	20a2      	movs	r0, #162	; 0xa2
 8001214:	f7ff ff12 	bl	800103c <st7565r_write_command>

        // Set booster circuit, voltage regulator and voltage follower all to on
        st7565r_write_command(ST7565R_CMD_POWER_CTRL_ALL_ON);
 8001218:	202f      	movs	r0, #47	; 0x2f
 800121a:	f7ff ff0f 	bl	800103c <st7565r_write_command>

        // Set the booster ratio to 2X,3X,4X
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_SET);
 800121e:	20f8      	movs	r0, #248	; 0xf8
 8001220:	f7ff ff0c 	bl	800103c <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_2X_3X_4X);
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff ff09 	bl	800103c <st7565r_write_command>

        // Set voltage resistor ratio to 1
        st7565r_write_command(ST7565R_CMD_VOLTAGE_RESISTOR_RATIO_1);
 800122a:	2021      	movs	r0, #33	; 0x21
 800122c:	f7ff ff06 	bl	800103c <st7565r_write_command>

        /* Set contrast to min value, no need to check return value as the contrast
        is set to the defined min*/
        st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);
 8001230:	201e      	movs	r0, #30
 8001232:	f7ff ffb5 	bl	80011a0 <st7565r_set_contrast>

        // Turn on the display
        st7565r_display_on();
 8001236:	f7ff ffac 	bl	8001192 <st7565r_display_on>
		
		return EXIT_SUCCESS;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	bd80      	pop	{r7, pc}
 8001240:	48000800 	.word	0x48000800

08001244 <NRF24L01p_ResetConfigValues>:
#include "NRF24L01p.h"




void NRF24L01p_ResetConfigValues(NRF24L01p_RadioConfig_t *_RadioConfig, NRF24L01p_RxPipeConfig_t *_RxPipeConfig){
 8001244:	b5b0      	push	{r4, r5, r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_Initialize();
 800124e:	f000 fe47 	bl	8001ee0 <NRF24L01p_port_Initialize>
    //ResetConfigValues(_RadioConfig, _RxPipeConfig);


    NRF24L01p_port_write_Pin_CE(0);
 8001252:	2000      	movs	r0, #0
 8001254:	f000 fe8a 	bl	8001f6c <NRF24L01p_port_write_Pin_CE>
    NRF24L01p_port_write_Pin_CSN(0);
 8001258:	2000      	movs	r0, #0
 800125a:	f000 fe99 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>

    NRF24L01p_port_DelayMs(_NRF24L01P_TIMING_PowerOnReset_ms);
 800125e:	2064      	movs	r0, #100	; 0x64
 8001260:	f000 ff4e 	bl	8002100 <NRF24L01p_port_DelayMs>

    NRF24L01p_RadioMode(NRF24L01P_MODE_POWER_DOWN);
 8001264:	2001      	movs	r0, #1
 8001266:	f000 f8db 	bl	8001420 <NRF24L01p_RadioMode>
    NRF24L01p_RadioMode(NRF24L01P_MODE_RX);
 800126a:	2003      	movs	r0, #3
 800126c:	f000 f8d8 	bl	8001420 <NRF24L01p_RadioMode>

    NRF24L01p_clear_data_ready_flag();
 8001270:	f000 fcca 	bl	8001c08 <NRF24L01p_clear_data_ready_flag>
    NRF24L01p_flush_rx();
 8001274:	f000 fb16 	bl	80018a4 <NRF24L01p_flush_rx>
    NRF24L01p_flush_tx();
 8001278:	f000 faff 	bl	800187a <NRF24L01p_flush_tx>

    uint8_t status_rst_val = 0x70;//reset status
 800127c:	2370      	movs	r3, #112	; 0x70
 800127e:	72fb      	strb	r3, [r7, #11]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS, &status_rst_val,1);
 8001280:	f107 030b 	add.w	r3, r7, #11
 8001284:	2201      	movs	r2, #1
 8001286:	4619      	mov	r1, r3
 8001288:	2007      	movs	r0, #7
 800128a:	f000 faae 	bl	80017ea <NRF24L01p_write_register_buffer>
    uint8_t config_rst_val = 0x0b;//reset config
 800128e:	230b      	movs	r3, #11
 8001290:	72bb      	strb	r3, [r7, #10]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_CONFIG, &config_rst_val,1);
 8001292:	f107 030a 	add.w	r3, r7, #10
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	2000      	movs	r0, #0
 800129c:	f000 faa5 	bl	80017ea <NRF24L01p_write_register_buffer>


    RadioConfig.DataReadyInterruptEnabled = _RadioConfig->DataReadyInterruptEnabled;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	781a      	ldrb	r2, [r3, #0]
 80012a4:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 80012a6:	701a      	strb	r2, [r3, #0]
    RadioConfig.DataSentInterruptFlagEnabled = _RadioConfig->DataSentInterruptFlagEnabled;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	785a      	ldrb	r2, [r3, #1]
 80012ac:	4b5a      	ldr	r3, [pc, #360]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 80012ae:	705a      	strb	r2, [r3, #1]
    RadioConfig.MaxRetryInterruptFlagEnabled = _RadioConfig->MaxRetryInterruptFlagEnabled;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	789a      	ldrb	r2, [r3, #2]
 80012b4:	4b58      	ldr	r3, [pc, #352]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 80012b6:	709a      	strb	r2, [r3, #2]
    RadioConfig.Crc = _RadioConfig->Crc;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	78da      	ldrb	r2, [r3, #3]
 80012bc:	4b56      	ldr	r3, [pc, #344]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 80012be:	70da      	strb	r2, [r3, #3]
    RadioConfig.AutoReTransmissionCount = _RadioConfig->AutoReTransmissionCount;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	791a      	ldrb	r2, [r3, #4]
 80012c4:	4b54      	ldr	r3, [pc, #336]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 80012c6:	711a      	strb	r2, [r3, #4]
    RadioConfig.AutoReTransmitDelayX250us = _RadioConfig->AutoReTransmitDelayX250us;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	795a      	ldrb	r2, [r3, #5]
 80012cc:	4b52      	ldr	r3, [pc, #328]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 80012ce:	715a      	strb	r2, [r3, #5]
    RadioConfig.frequencyOffset = _RadioConfig->frequencyOffset;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	799a      	ldrb	r2, [r3, #6]
 80012d4:	4b50      	ldr	r3, [pc, #320]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 80012d6:	719a      	strb	r2, [r3, #6]
    RadioConfig.datarate = _RadioConfig->datarate;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	79da      	ldrb	r2, [r3, #7]
 80012dc:	4b4e      	ldr	r3, [pc, #312]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 80012de:	71da      	strb	r2, [r3, #7]
    RadioConfig.RfPower = _RadioConfig->RfPower;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7a1a      	ldrb	r2, [r3, #8]
 80012e4:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 80012e6:	721a      	strb	r2, [r3, #8]
    RadioConfig.PllLock = _RadioConfig->PllLock;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7a5a      	ldrb	r2, [r3, #9]
 80012ec:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 80012ee:	725a      	strb	r2, [r3, #9]
    RadioConfig.ContWaveEnabled = _RadioConfig->ContWaveEnabled;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7a9a      	ldrb	r2, [r3, #10]
 80012f4:	4b48      	ldr	r3, [pc, #288]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 80012f6:	729a      	strb	r2, [r3, #10]
    RadioConfig.FeatureDynamicPayloadEnabled = _RadioConfig->FeatureDynamicPayloadEnabled;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7ada      	ldrb	r2, [r3, #11]
 80012fc:	4b46      	ldr	r3, [pc, #280]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 80012fe:	72da      	strb	r2, [r3, #11]
    RadioConfig.FeaturePayloadWithAckEnabled = _RadioConfig->FeaturePayloadWithAckEnabled;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7b1a      	ldrb	r2, [r3, #12]
 8001304:	4b44      	ldr	r3, [pc, #272]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 8001306:	731a      	strb	r2, [r3, #12]
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = _RadioConfig->FeatureDynamicPayloadWithNoAckEnabled;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7b5a      	ldrb	r2, [r3, #13]
 800130c:	4b42      	ldr	r3, [pc, #264]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 800130e:	735a      	strb	r2, [r3, #13]

	int i;
    for(i=0;i<6;i++){
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	e019      	b.n	800134a <NRF24L01p_ResetConfigValues+0x106>
        RxPipeConfig[i] = _RxPipeConfig[i];
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	461a      	mov	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	1898      	adds	r0, r3, r2
 8001326:	493d      	ldr	r1, [pc, #244]	; (800141c <NRF24L01p_ResetConfigValues+0x1d8>)
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	440b      	add	r3, r1
 8001334:	461c      	mov	r4, r3
 8001336:	4605      	mov	r5, r0
 8001338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001340:	e884 0003 	stmia.w	r4, {r0, r1}
    for(i=0;i<6;i++){
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2b05      	cmp	r3, #5
 800134e:	dde2      	ble.n	8001316 <NRF24L01p_ResetConfigValues+0xd2>
    }


    NRF24L01p_enable_dynamic_payload(RadioConfig.FeatureDynamicPayloadEnabled);
 8001350:	4b31      	ldr	r3, [pc, #196]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 8001352:	7adb      	ldrb	r3, [r3, #11]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fd48 	bl	8001dea <NRF24L01p_enable_dynamic_payload>
    NRF24L01p_enable_payload_with_ack(RadioConfig.FeaturePayloadWithAckEnabled);
 800135a:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 800135c:	7b1b      	ldrb	r3, [r3, #12]
 800135e:	4618      	mov	r0, r3
 8001360:	f000 fd6c 	bl	8001e3c <NRF24L01p_enable_payload_with_ack>
    NRF24L01p_enable_dynamic_payload_with_no_ack(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled);
 8001364:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 8001366:	7b5b      	ldrb	r3, [r3, #13]
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fd90 	bl	8001e8e <NRF24L01p_enable_dynamic_payload_with_no_ack>
    NRF24L01p_set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
 800136e:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 8001370:	791b      	ldrb	r3, [r3, #4]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fba8 	bl	8001ac8 <NRF24L01p_set_auto_retransmission_count>
    NRF24L01p_set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 800137a:	795b      	ldrb	r3, [r3, #5]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fbbe 	bl	8001afe <NRF24L01p_set_auto_retransmission_delay>
    NRF24L01p_set_DataRate(RadioConfig.datarate);
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <NRF24L01p_ResetConfigValues+0x1d4>)
 8001384:	79db      	ldrb	r3, [r3, #7]
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fbe9 	bl	8001b5e <NRF24L01p_set_DataRate>

    for(i=0;i<6;i++){
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	e03a      	b.n	8001408 <NRF24L01p_ResetConfigValues+0x1c4>
    	NRF24L01p_enable_rx_on_pipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].PipeEnabled );
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	b2d8      	uxtb	r0, r3
 8001396:	4921      	ldr	r1, [pc, #132]	; (800141c <NRF24L01p_ResetConfigValues+0x1d8>)
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	f000 fb54 	bl	8001a54 <NRF24L01p_enable_rx_on_pipe>
    	NRF24L01p_enable_auto_ack((NRF24L01p_pipe_t)i,RxPipeConfig[i].autoAckEnabled );
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	b2d8      	uxtb	r0, r3
 80013b0:	491a      	ldr	r1, [pc, #104]	; (800141c <NRF24L01p_ResetConfigValues+0x1d8>)
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	3301      	adds	r3, #1
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4619      	mov	r1, r3
 80013c4:	f000 fb0c 	bl	80019e0 <NRF24L01p_enable_auto_ack>
    	NRF24L01p_enable_dynamic_payload_pipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	b2d8      	uxtb	r0, r3
 80013cc:	4913      	ldr	r1, [pc, #76]	; (800141c <NRF24L01p_ResetConfigValues+0x1d8>)
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	3311      	adds	r3, #17
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4619      	mov	r1, r3
 80013e0:	f000 fcc9 	bl	8001d76 <NRF24L01p_enable_dynamic_payload_pipe>
    	NRF24L01p_set_RX_pipe_address((NRF24L01p_pipe_t)i,RxPipeConfig[i].address);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	b2d8      	uxtb	r0, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <NRF24L01p_ResetConfigValues+0x1d8>)
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	3308      	adds	r3, #8
 80013f8:	cb18      	ldmia	r3, {r3, r4}
 80013fa:	461a      	mov	r2, r3
 80013fc:	4623      	mov	r3, r4
 80013fe:	f000 fc22 	bl	8001c46 <NRF24L01p_set_RX_pipe_address>
    for(i=0;i<6;i++){
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3301      	adds	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b05      	cmp	r3, #5
 800140c:	ddc1      	ble.n	8001392 <NRF24L01p_ResetConfigValues+0x14e>
    }
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bdb0      	pop	{r4, r5, r7, pc}
 8001416:	bf00      	nop
 8001418:	20000204 	.word	0x20000204
 800141c:	20000220 	.word	0x20000220

08001420 <NRF24L01p_RadioMode>:

void NRF24L01p_RadioMode(NRF24L01p_RadioState_t mode){
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
    switch(mode){
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	3b01      	subs	r3, #1
 800142e:	2b03      	cmp	r3, #3
 8001430:	d84e      	bhi.n	80014d0 <NRF24L01p_RadioMode+0xb0>
 8001432:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <NRF24L01p_RadioMode+0x18>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001449 	.word	0x08001449
 800143c:	0800145b 	.word	0x0800145b
 8001440:	0800147f 	.word	0x0800147f
 8001444:	080014a5 	.word	0x080014a5
        case NRF24L01P_MODE_POWER_DOWN: {
        	NRF24L01p_power_down();
 8001448:	f000 fa8b 	bl	8001962 <NRF24L01p_power_down>
            NRF24L01p_port_write_Pin_CE(0);
 800144c:	2000      	movs	r0, #0
 800144e:	f000 fd8d 	bl	8001f6c <NRF24L01p_port_write_Pin_CE>
            RadioState = NRF24L01P_MODE_POWER_DOWN;
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <NRF24L01p_RadioMode+0xb8>)
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
            break;
 8001458:	e03a      	b.n	80014d0 <NRF24L01p_RadioMode+0xb0>
        }
        case NRF24L01P_MODE_STANDBY: {
            if(RadioState == NRF24L01P_MODE_POWER_DOWN){
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <NRF24L01p_RadioMode+0xb8>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d106      	bne.n	8001470 <NRF24L01p_RadioMode+0x50>
            	NRF24L01p_power_up();
 8001462:	f000 fa69 	bl	8001938 <NRF24L01p_power_up>
                    NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tpd2stby_us);
 8001466:	f241 1094 	movw	r0, #4500	; 0x1194
 800146a:	f000 fe55 	bl	8002118 <NRF24L01p_port_DelayUs>
 800146e:	e002      	b.n	8001476 <NRF24L01p_RadioMode+0x56>
            }
            else{
                    NRF24L01p_port_write_Pin_CE(0);
 8001470:	2000      	movs	r0, #0
 8001472:	f000 fd7b 	bl	8001f6c <NRF24L01p_port_write_Pin_CE>
            }
            RadioState = NRF24L01P_MODE_STANDBY;
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <NRF24L01p_RadioMode+0xb8>)
 8001478:	2202      	movs	r2, #2
 800147a:	701a      	strb	r2, [r3, #0]
            break;
 800147c:	e028      	b.n	80014d0 <NRF24L01p_RadioMode+0xb0>
        }
        case NRF24L01P_MODE_RX: {
            if(RadioState != NRF24L01P_MODE_RX){
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <NRF24L01p_RadioMode+0xb8>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b03      	cmp	r3, #3
 8001484:	d021      	beq.n	80014ca <NRF24L01p_RadioMode+0xaa>
                NRF24L01p_port_write_Pin_CE(0);
 8001486:	2000      	movs	r0, #0
 8001488:	f000 fd70 	bl	8001f6c <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_rx_mode();
 800148c:	f000 fa7e 	bl	800198c <NRF24L01p_rx_mode>
                NRF24L01p_port_write_Pin_CE(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f000 fd6b 	bl	8001f6c <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 8001496:	2082      	movs	r0, #130	; 0x82
 8001498:	f000 fe3e 	bl	8002118 <NRF24L01p_port_DelayUs>
                RadioState = NRF24L01P_MODE_RX;
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <NRF24L01p_RadioMode+0xb8>)
 800149e:	2203      	movs	r2, #3
 80014a0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80014a2:	e012      	b.n	80014ca <NRF24L01p_RadioMode+0xaa>
        }
        case NRF24L01P_MODE_TX: {
            if(RadioState != NRF24L01P_MODE_TX){
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <NRF24L01p_RadioMode+0xb8>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d010      	beq.n	80014ce <NRF24L01p_RadioMode+0xae>
                NRF24L01p_port_write_Pin_CE(0);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f000 fd5d 	bl	8001f6c <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_tx_mode();
 80014b2:	f000 fa80 	bl	80019b6 <NRF24L01p_tx_mode>
                NRF24L01p_port_write_Pin_CE(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f000 fd58 	bl	8001f6c <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 80014bc:	2082      	movs	r0, #130	; 0x82
 80014be:	f000 fe2b 	bl	8002118 <NRF24L01p_port_DelayUs>
                RadioState = NRF24L01P_MODE_TX;
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <NRF24L01p_RadioMode+0xb8>)
 80014c4:	2204      	movs	r2, #4
 80014c6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80014c8:	e001      	b.n	80014ce <NRF24L01p_RadioMode+0xae>
            break;
 80014ca:	bf00      	nop
 80014cc:	e000      	b.n	80014d0 <NRF24L01p_RadioMode+0xb0>
            break;
 80014ce:	bf00      	nop
        }
    }
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000200 	.word	0x20000200

080014dc <NRF24L01p_readable>:


bool NRF24L01p_readable(){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
    //return (NRF24L01p_get_data_ready_flag() || !NRF24L01p_get_fifo_flag_rx_empty())&& (NRF24L01p_get_rx_payload_pipe() != 7)  ;
	return (!NRF24L01p_get_fifo_flag_rx_empty()) ;
 80014e0:	f000 fc2b 	bl	8001d3a <NRF24L01p_get_fifo_flag_rx_empty>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	bf14      	ite	ne
 80014ea:	2301      	movne	r3, #1
 80014ec:	2300      	moveq	r3, #0
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f083 0301 	eor.w	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	b2db      	uxtb	r3, r3

}
 80014fc:	4618      	mov	r0, r3
 80014fe:	bd80      	pop	{r7, pc}

08001500 <NRF24L01p_writable>:
bool NRF24L01p_writable(){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
    return !NRF24L01p_get_fifo_flag_tx_full();
 8001504:	f000 fc28 	bl	8001d58 <NRF24L01p_get_fifo_flag_tx_full>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	bf14      	ite	ne
 800150e:	2301      	movne	r3, #1
 8001510:	2300      	moveq	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	f083 0301 	eor.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3

}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}

08001524 <NRF24L01p_writePayload>:
bool NRF24L01p_readableOnPipe(NRF24L01p_pipe_t pipe){

}


NRF24L01p_ErrorStatus_t NRF24L01p_writePayload(NRF24L01p_Payload_t *payload){
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	NRF24L01p_set_TX_pipe_address(payload->address);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	cb18      	ldmia	r3, {r3, r4}
 8001530:	4618      	mov	r0, r3
 8001532:	4621      	mov	r1, r4
 8001534:	f000 fbcf 	bl	8001cd6 <NRF24L01p_set_TX_pipe_address>
    if(payload->UseAck == 1){
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7a5b      	ldrb	r3, [r3, #9]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <NRF24L01p_writePayload+0x2e>
    	NRF24L01p_write_tx_payload(payload->data,payload->length);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f000 f976 	bl	800183c <NRF24L01p_write_tx_payload>
 8001550:	e00b      	b.n	800156a <NRF24L01p_writePayload+0x46>
    }else{
        if(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled == 1){
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <NRF24L01p_writePayload+0x50>)
 8001554:	7b5b      	ldrb	r3, [r3, #13]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <NRF24L01p_writePayload+0x46>
        	NRF24L01p_write_tx_payload_noack(payload->data,payload->length);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	4619      	mov	r1, r3
 8001564:	4610      	mov	r0, r2
 8001566:	f000 f9b2 	bl	80018ce <NRF24L01p_write_tx_payload_noack>
        }
    }
}
 800156a:	bf00      	nop
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bd90      	pop	{r4, r7, pc}
 8001574:	20000204 	.word	0x20000204

08001578 <NRF24L01p_TransmitPayload>:
    }
    return error;
}


NRF24L01p_ErrorStatus_t NRF24L01p_TransmitPayload(NRF24L01p_Payload_t *payload){
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    NRF24L01p_ErrorStatus_t error;
    NRF24L01p_RadioState_t originalState = RadioState;
 8001580:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <NRF24L01p_TransmitPayload+0x17c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	73bb      	strb	r3, [r7, #14]
    NRF24L01p_RadioMode(NRF24L01P_MODE_STANDBY);
 8001586:	2002      	movs	r0, #2
 8001588:	f7ff ff4a 	bl	8001420 <NRF24L01p_RadioMode>




    if(TxPipeAddress != payload->address){
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001592:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <NRF24L01p_TransmitPayload+0x180>)
 8001594:	cb18      	ldmia	r3, {r3, r4}
 8001596:	42a2      	cmp	r2, r4
 8001598:	bf08      	it	eq
 800159a:	4299      	cmpeq	r1, r3
 800159c:	d00a      	beq.n	80015b4 <NRF24L01p_TransmitPayload+0x3c>
    	NRF24L01p_set_TX_pipe_address(payload->address);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	cb18      	ldmia	r3, {r3, r4}
 80015a2:	4618      	mov	r0, r3
 80015a4:	4621      	mov	r1, r4
 80015a6:	f000 fb96 	bl	8001cd6 <NRF24L01p_set_TX_pipe_address>
	    TxPipeAddress = payload->address;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	cb18      	ldmia	r3, {r3, r4}
 80015ae:	4a52      	ldr	r2, [pc, #328]	; (80016f8 <NRF24L01p_TransmitPayload+0x180>)
 80015b0:	e882 0018 	stmia.w	r2, {r3, r4}
    }

    if(payload->UseAck){
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7a5b      	ldrb	r3, [r3, #9]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d06f      	beq.n	800169c <NRF24L01p_TransmitPayload+0x124>

	    if(RxPipeConfig[PIPE_P0].autoAckEnabled == 0){
 80015bc:	4b4f      	ldr	r3, [pc, #316]	; (80016fc <NRF24L01p_TransmitPayload+0x184>)
 80015be:	785b      	ldrb	r3, [r3, #1]
 80015c0:	f083 0301 	eor.w	r3, r3, #1
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <NRF24L01p_TransmitPayload+0x5a>
	    	NRF24L01p_enable_auto_ack(PIPE_P0, 1);
 80015ca:	2101      	movs	r1, #1
 80015cc:	2000      	movs	r0, #0
 80015ce:	f000 fa07 	bl	80019e0 <NRF24L01p_enable_auto_ack>
	    }
	    if(RxPipeConfig[PIPE_P0].PipeEnabled == 0){
 80015d2:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <NRF24L01p_TransmitPayload+0x184>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	f083 0301 	eor.w	r3, r3, #1
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <NRF24L01p_TransmitPayload+0x70>
	    	NRF24L01p_enable_rx_on_pipe(PIPE_P0, 1);
 80015e0:	2101      	movs	r1, #1
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 fa36 	bl	8001a54 <NRF24L01p_enable_rx_on_pipe>
	    }
	    NRF24L01p_set_RX_pipe_address(PIPE_P0, payload->address);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	cb18      	ldmia	r3, {r3, r4}
 80015ec:	461a      	mov	r2, r3
 80015ee:	4623      	mov	r3, r4
 80015f0:	2000      	movs	r0, #0
 80015f2:	f000 fb28 	bl	8001c46 <NRF24L01p_set_RX_pipe_address>


	    NRF24L01p_writePayload(payload);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff94 	bl	8001524 <NRF24L01p_writePayload>
	    NRF24L01p_clear_data_sent_flag();
 80015fc:	f000 faf5 	bl	8001bea <NRF24L01p_clear_data_sent_flag>


	    if(NRF24L01p_writable()){
 8001600:	f7ff ff7e 	bl	8001500 <NRF24L01p_writable>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d025      	beq.n	8001656 <NRF24L01p_TransmitPayload+0xde>
	    	NRF24L01p_clear_data_sent_flag();
 800160a:	f000 faee 	bl	8001bea <NRF24L01p_clear_data_sent_flag>
		    while(1){
			    NRF24L01p_RadioMode(NRF24L01P_MODE_TX);
 800160e:	2004      	movs	r0, #4
 8001610:	f7ff ff06 	bl	8001420 <NRF24L01p_RadioMode>
			    NRF24L01p_RadioMode(NRF24L01P_MODE_STANDBY);
 8001614:	2002      	movs	r0, #2
 8001616:	f7ff ff03 	bl	8001420 <NRF24L01p_RadioMode>

			    if(NRF24L01p_get_data_sent_flag()){
 800161a:	f000 fad8 	bl	8001bce <NRF24L01p_get_data_sent_flag>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <NRF24L01p_TransmitPayload+0xb2>
				    error = NRF24L01P_SUCCESS;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
				    break;
 8001628:	e015      	b.n	8001656 <NRF24L01p_TransmitPayload+0xde>
			    }
			    if(NRF24L01p_get_max_retry_flag()){
 800162a:	f000 fab3 	bl	8001b94 <NRF24L01p_get_max_retry_flag>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0ec      	beq.n	800160e <NRF24L01p_TransmitPayload+0x96>
			    	NRF24L01p_clear_max_retry_flag();
 8001634:	f000 fabc 	bl	8001bb0 <NRF24L01p_clear_max_retry_flag>
				    if(NRF24L01p_get_plos_count()>=payload->retransmitCount){
 8001638:	f000 faf5 	bl	8001c26 <NRF24L01p_get_plos_count>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7d1b      	ldrb	r3, [r3, #20]
 8001644:	429a      	cmp	r2, r3
 8001646:	d3e2      	bcc.n	800160e <NRF24L01p_TransmitPayload+0x96>
				    	NRF24L01p_set_frequency_offset(RadioConfig.frequencyOffset);
 8001648:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <NRF24L01p_TransmitPayload+0x188>)
 800164a:	799b      	ldrb	r3, [r3, #6]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fa75 	bl	8001b3c <NRF24L01p_set_frequency_offset>
					    error = NRF24L01P_ERROR;
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
			    }
		    }

	    }

	    NRF24L01p_RadioMode(originalState);
 8001656:	7bbb      	ldrb	r3, [r7, #14]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fee1 	bl	8001420 <NRF24L01p_RadioMode>

	    NRF24L01p_set_RX_pipe_address(PIPE_P0, RxPipeConfig[PIPE_P0].address);
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <NRF24L01p_TransmitPayload+0x184>)
 8001660:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001664:	461a      	mov	r2, r3
 8001666:	4623      	mov	r3, r4
 8001668:	2000      	movs	r0, #0
 800166a:	f000 faec 	bl	8001c46 <NRF24L01p_set_RX_pipe_address>
	    if(RxPipeConfig[PIPE_P0].autoAckEnabled == 0){
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <NRF24L01p_TransmitPayload+0x184>)
 8001670:	785b      	ldrb	r3, [r3, #1]
 8001672:	f083 0301 	eor.w	r3, r3, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <NRF24L01p_TransmitPayload+0x10c>
	    	NRF24L01p_enable_auto_ack(PIPE_P0, 0);
 800167c:	2100      	movs	r1, #0
 800167e:	2000      	movs	r0, #0
 8001680:	f000 f9ae 	bl	80019e0 <NRF24L01p_enable_auto_ack>
	    }
	    if(RxPipeConfig[PIPE_P0].PipeEnabled == 0){
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <NRF24L01p_TransmitPayload+0x184>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f083 0301 	eor.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d028      	beq.n	80016e4 <NRF24L01p_TransmitPayload+0x16c>
	    	NRF24L01p_enable_rx_on_pipe(PIPE_P0, 0);
 8001692:	2100      	movs	r1, #0
 8001694:	2000      	movs	r0, #0
 8001696:	f000 f9dd 	bl	8001a54 <NRF24L01p_enable_rx_on_pipe>
 800169a:	e023      	b.n	80016e4 <NRF24L01p_TransmitPayload+0x16c>
	    }
	    }else{
	    	NRF24L01p_set_TX_pipe_address(payload->address);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	cb18      	ldmia	r3, {r3, r4}
 80016a0:	4618      	mov	r0, r3
 80016a2:	4621      	mov	r1, r4
 80016a4:	f000 fb17 	bl	8001cd6 <NRF24L01p_set_TX_pipe_address>
			NRF24L01p_writePayload(payload);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff3b 	bl	8001524 <NRF24L01p_writePayload>
			NRF24L01p_RadioState_t originalState = RadioState;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <NRF24L01p_TransmitPayload+0x17c>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	737b      	strb	r3, [r7, #13]
			if(NRF24L01p_writable()){
 80016b4:	f7ff ff24 	bl	8001500 <NRF24L01p_writable>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00e      	beq.n	80016dc <NRF24L01p_TransmitPayload+0x164>
				NRF24L01p_clear_data_sent_flag();
 80016be:	f000 fa94 	bl	8001bea <NRF24L01p_clear_data_sent_flag>
				while(1){
					NRF24L01p_RadioMode(NRF24L01P_MODE_TX);
 80016c2:	2004      	movs	r0, #4
 80016c4:	f7ff feac 	bl	8001420 <NRF24L01p_RadioMode>
					NRF24L01p_RadioMode(NRF24L01P_MODE_STANDBY);
 80016c8:	2002      	movs	r0, #2
 80016ca:	f7ff fea9 	bl	8001420 <NRF24L01p_RadioMode>
					if(NRF24L01p_get_data_sent_flag()){
 80016ce:	f000 fa7e 	bl	8001bce <NRF24L01p_get_data_sent_flag>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f4      	beq.n	80016c2 <NRF24L01p_TransmitPayload+0x14a>
						error = NRF24L01P_SUCCESS;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
						break;
					}
				}
			}
			NRF24L01p_RadioMode(originalState);
 80016dc:	7b7b      	ldrb	r3, [r7, #13]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fe9e 	bl	8001420 <NRF24L01p_RadioMode>
		}

    NRF24L01p_flush_tx();
 80016e4:	f000 f8c9 	bl	800187a <NRF24L01p_flush_tx>
    return error;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd90      	pop	{r4, r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000200 	.word	0x20000200
 80016f8:	20000218 	.word	0x20000218
 80016fc:	20000220 	.word	0x20000220
 8001700:	20000204 	.word	0x20000204

08001704 <NRF24L01p_read_register>:

#include "NRF24L01pDriver.h"



uint8_t NRF24L01p_read_register(uint8_t address){
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_write_Pin_CSN(0);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 fc3e 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	b2db      	uxtb	r3, r3
 800171c:	73fb      	strb	r3, [r7, #15]


    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 800171e:	f107 010f 	add.w	r1, r7, #15
 8001722:	f107 030f 	add.w	r3, r7, #15
 8001726:	2201      	movs	r2, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fcd1 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 800172e:	f107 010f 	add.w	r1, r7, #15
 8001732:	f107 030f 	add.w	r3, r7, #15
 8001736:	2201      	movs	r2, #1
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fcc9 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(&temp, 1);
    NRF24L01p_port_write_Pin_CSN(1);
 800173e:	2001      	movs	r0, #1
 8001740:	f000 fc26 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 8001744:	7bfb      	ldrb	r3, [r7, #15]

}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <NRF24L01p_read_register_buffer>:
void NRF24L01p_read_register_buffer(uint8_t address, uint8_t *dataout, int len){
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_write_Pin_CSN(0);
 800175c:	2000      	movs	r0, #0
 800175e:	f000 fc17 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	f003 031f 	and.w	r3, r3, #31
 8001768:	b2db      	uxtb	r3, r3
 800176a:	75fb      	strb	r3, [r7, #23]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 800176c:	f107 0117 	add.w	r1, r7, #23
 8001770:	f107 0317 	add.w	r3, r7, #23
 8001774:	2201      	movs	r2, #1
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fcaa 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(dataout, dataout,len);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	461a      	mov	r2, r3
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	68b8      	ldr	r0, [r7, #8]
 8001784:	f000 fca4 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(dataout, len);
    NRF24L01p_port_write_Pin_CSN(1);
 8001788:	2001      	movs	r0, #1
 800178a:	f000 fc01 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <NRF24L01p_write_register>:
void NRF24L01p_write_register(uint8_t address, uint8_t datain){
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	460a      	mov	r2, r1
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	4613      	mov	r3, r2
 80017a4:	71bb      	strb	r3, [r7, #6]
    NRF24L01p_port_write_Pin_CSN(0);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 fbf2 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80017c0:	f107 010f 	add.w	r1, r7, #15
 80017c4:	f107 030f 	add.w	r3, r7, #15
 80017c8:	2201      	movs	r2, #1
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fc80 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&datain, &datain,1);
 80017d0:	1db9      	adds	r1, r7, #6
 80017d2:	1dbb      	adds	r3, r7, #6
 80017d4:	2201      	movs	r2, #1
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fc7a 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(&datain, 1);
    NRF24L01p_port_write_Pin_CSN(1);
 80017dc:	2001      	movs	r0, #1
 80017de:	f000 fbd7 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <NRF24L01p_write_register_buffer>:
void NRF24L01p_write_register_buffer(uint8_t address, uint8_t *datain, int len){
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_write_Pin_CSN(0);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f000 fbc9 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	b25b      	sxtb	r3, r3
 8001808:	f043 0320 	orr.w	r3, r3, #32
 800180c:	b25b      	sxtb	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	75fb      	strb	r3, [r7, #23]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001812:	f107 0117 	add.w	r1, r7, #23
 8001816:	f107 0317 	add.w	r3, r7, #23
 800181a:	2201      	movs	r2, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f000 fc57 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(datain, datain,len);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	461a      	mov	r2, r3
 8001826:	68b9      	ldr	r1, [r7, #8]
 8001828:	68b8      	ldr	r0, [r7, #8]
 800182a:	f000 fc51 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(datain, len);
    NRF24L01p_port_write_Pin_CSN(1);
 800182e:	2001      	movs	r0, #1
 8001830:	f000 fbae 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
}
 8001834:	bf00      	nop
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <NRF24L01p_write_tx_payload>:

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(dataout,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
}
void NRF24L01p_write_tx_payload(uint8_t *datain, int pay_len){
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_write_Pin_CSN(0);
 8001846:	2000      	movs	r0, #0
 8001848:	f000 fba2 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
 800184c:	23a0      	movs	r3, #160	; 0xa0
 800184e:	73fb      	strb	r3, [r7, #15]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001850:	f107 010f 	add.w	r1, r7, #15
 8001854:	f107 030f 	add.w	r3, r7, #15
 8001858:	2201      	movs	r2, #1
 800185a:	4618      	mov	r0, r3
 800185c:	f000 fc38 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(datain,datain,pay_len);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 fc32 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
 800186c:	2001      	movs	r0, #1
 800186e:	f000 fb8f 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <NRF24L01p_flush_tx>:
void NRF24L01p_flush_tx(){
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 8001880:	2000      	movs	r0, #0
 8001882:	f000 fb85 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_TX);
 8001886:	23e1      	movs	r3, #225	; 0xe1
 8001888:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 800188a:	1df9      	adds	r1, r7, #7
 800188c:	1dfb      	adds	r3, r7, #7
 800188e:	2201      	movs	r2, #1
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fc1d 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f000 fb7a 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <NRF24L01p_flush_rx>:
void NRF24L01p_flush_rx(){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 fb70 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_RX);
 80018b0:	23e2      	movs	r3, #226	; 0xe2
 80018b2:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80018b4:	1df9      	adds	r1, r7, #7
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	2201      	movs	r2, #1
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fc08 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 80018c0:	2001      	movs	r0, #1
 80018c2:	f000 fb65 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <NRF24L01p_write_tx_payload_noack>:
    NRF24L01p_port_SPI_Transcieve(datain, datain, pay_len);
    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
}
void NRF24L01p_write_tx_payload_noack(uint8_t *datain, int pay_len){
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_write_Pin_CSN(0);
 80018d8:	2000      	movs	r0, #0
 80018da:	f000 fb59 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_W_TX_PYLD_NO_ACK);
 80018de:	23b0      	movs	r3, #176	; 0xb0
 80018e0:	73fb      	strb	r3, [r7, #15]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80018e2:	f107 010f 	add.w	r1, r7, #15
 80018e6:	f107 030f 	add.w	r3, r7, #15
 80018ea:	2201      	movs	r2, #1
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 fbef 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(datain, datain, pay_len);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fbe9 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
 80018fe:	2001      	movs	r0, #1
 8001900:	f000 fb46 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <NRF24L01p_get_status>:
int NRF24L01p_get_status(){
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 8001912:	2000      	movs	r0, #0
 8001914:	f000 fb3c 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_NOP );
 8001918:	23ff      	movs	r3, #255	; 0xff
 800191a:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp, 1);
 800191c:	1df9      	adds	r1, r7, #7
 800191e:	1dfb      	adds	r3, r7, #7
 8001920:	2201      	movs	r2, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fbd4 	bl	80020d0 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001928:	2001      	movs	r0, #1
 800192a:	f000 fb31 	bl	8001f90 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 800192e:	79fb      	ldrb	r3, [r7, #7]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <NRF24L01p_power_up>:


void NRF24L01p_power_up(){
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_CONFIG);
 800193e:	2000      	movs	r0, #0
 8001940:	f7ff fee0 	bl	8001704 <NRF24L01p_read_register>
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
    temp |= _NRF24L01P_CONFIG_PWR_UP;
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,temp);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4619      	mov	r1, r3
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff ff1e 	bl	8001796 <NRF24L01p_write_register>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <NRF24L01p_power_down>:
void NRF24L01p_power_down(){
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_CONFIG);
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff fecb 	bl	8001704 <NRF24L01p_read_register>
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
    temp &= ~_NRF24L01P_CONFIG_PWR_UP;
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f023 0302 	bic.w	r3, r3, #2
 8001978:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,temp);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	4619      	mov	r1, r3
 800197e:	2000      	movs	r0, #0
 8001980:	f7ff ff09 	bl	8001796 <NRF24L01p_write_register>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <NRF24L01p_rx_mode>:
void NRF24L01p_rx_mode(){
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_CONFIG);
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff feb6 	bl	8001704 <NRF24L01p_read_register>
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
    temp |= _NRF24L01P_CONFIG_PRIM_RX;
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,temp);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4619      	mov	r1, r3
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff fef4 	bl	8001796 <NRF24L01p_write_register>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <NRF24L01p_tx_mode>:
void NRF24L01p_tx_mode(){
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_CONFIG);
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff fea1 	bl	8001704 <NRF24L01p_read_register>
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
    temp &= ~_NRF24L01P_CONFIG_PRIM_RX;
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,temp);
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4619      	mov	r1, r3
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff fedf 	bl	8001796 <NRF24L01p_write_register>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <NRF24L01p_enable_auto_ack>:
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_MASK_MAX_RT);
else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_MASK_MAX_RT);
}


void NRF24L01p_enable_auto_ack(NRF24L01p_pipe_t pipe, bool sel){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	460a      	mov	r2, r1
 80019ea:	71fb      	strb	r3, [r7, #7]
 80019ec:	4613      	mov	r3, r2
 80019ee:	71bb      	strb	r3, [r7, #6]
    if (sel){
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d014      	beq.n	8001a20 <NRF24L01p_enable_auto_ack+0x40>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7ff fe84 	bl	8001704 <NRF24L01p_read_register>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_set_bit(temp,pipe);
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	2201      	movs	r2, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	b25a      	sxtb	r2, r3
 8001a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b25b      	sxtb	r3, r3
 8001a12:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	4619      	mov	r1, r3
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f7ff febc 	bl	8001796 <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
        _nrf24l01p_clr_bit(temp,pipe);
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
    }

}
 8001a1e:	e015      	b.n	8001a4c <NRF24L01p_enable_auto_ack+0x6c>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
 8001a20:	2001      	movs	r0, #1
 8001a22:	f7ff fe6f 	bl	8001704 <NRF24L01p_read_register>
 8001a26:	4603      	mov	r3, r0
 8001a28:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_clr_bit(temp,pipe);
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	b25b      	sxtb	r3, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	b25a      	sxtb	r2, r3
 8001a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	b25b      	sxtb	r3, r3
 8001a40:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
 8001a42:	7bbb      	ldrb	r3, [r7, #14]
 8001a44:	4619      	mov	r1, r3
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff fea5 	bl	8001796 <NRF24L01p_write_register>
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <NRF24L01p_enable_rx_on_pipe>:



void NRF24L01p_enable_rx_on_pipe(NRF24L01p_pipe_t pipe, bool sel){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	4613      	mov	r3, r2
 8001a62:	71bb      	strb	r3, [r7, #6]
    if(sel){
 8001a64:	79bb      	ldrb	r3, [r7, #6]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d014      	beq.n	8001a94 <NRF24L01p_enable_rx_on_pipe+0x40>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	f7ff fe4a 	bl	8001704 <NRF24L01p_read_register>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_set_bit(temp,pipe);
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2201      	movs	r2, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	b25a      	sxtb	r2, r3
 8001a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	b25b      	sxtb	r3, r3
 8001a86:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	2002      	movs	r0, #2
 8001a8e:	f7ff fe82 	bl	8001796 <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
        _nrf24l01p_clr_bit(temp,pipe);
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
    }

}
 8001a92:	e015      	b.n	8001ac0 <NRF24L01p_enable_rx_on_pipe+0x6c>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
 8001a94:	2002      	movs	r0, #2
 8001a96:	f7ff fe35 	bl	8001704 <NRF24L01p_read_register>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_clr_bit(temp,pipe);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	b25a      	sxtb	r2, r3
 8001aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	b25b      	sxtb	r3, r3
 8001ab4:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 8001ab6:	7bbb      	ldrb	r3, [r7, #14]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	2002      	movs	r0, #2
 8001abc:	f7ff fe6b 	bl	8001796 <NRF24L01p_write_register>
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <NRF24L01p_set_auto_retransmission_count>:
}
NRF24L01p_aw_t NRF24L01p_get_address_width(){
    return (NRF24L01p_aw_t) NRF24L01p_read_register(_NRF24L01P_REG_SETUP_AW);
}

void NRF24L01p_set_auto_retransmission_count(uint8_t count){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
 8001ad2:	2004      	movs	r0, #4
 8001ad4:	f7ff fe16 	bl	8001704 <NRF24L01p_read_register>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	73fb      	strb	r3, [r7, #15]
    temp &= ~ 0x0F;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	f023 030f 	bic.w	r3, r3, #15
 8001ae2:	73fb      	strb	r3, [r7, #15]
    temp |= (count<<0);
 8001ae4:	7bfa      	ldrb	r2, [r7, #15]
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	4619      	mov	r1, r3
 8001af0:	2004      	movs	r0, #4
 8001af2:	f7ff fe50 	bl	8001796 <NRF24L01p_write_register>
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <NRF24L01p_set_auto_retransmission_delay>:
uint8_t NRF24L01p_read_auto_retransmission_count(){
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
    return temp & 0x0F;
}

void NRF24L01p_set_auto_retransmission_delay(uint8_t times250us){
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
 8001b08:	2004      	movs	r0, #4
 8001b0a:	f7ff fdfb 	bl	8001704 <NRF24L01p_read_register>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	73fb      	strb	r3, [r7, #15]
    temp &= ~(0xF0);
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	73fb      	strb	r3, [r7, #15]
    temp |= (times250us<<4);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	b25a      	sxtb	r2, r3
 8001b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	b25b      	sxtb	r3, r3
 8001b28:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	2004      	movs	r0, #4
 8001b30:	f7ff fe31 	bl	8001796 <NRF24L01p_write_register>
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <NRF24L01p_set_frequency_offset>:
uint8_t NRF24L01p_read_auto_retransmission_delay(){
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
    return temp & 0xF0;
}

void NRF24L01p_set_frequency_offset(uint8_t offset){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
    if( (offset >=0)  && ( offset <= 125)){
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2b7d      	cmp	r3, #125	; 0x7d
 8001b4a:	d804      	bhi.n	8001b56 <NRF24L01p_set_frequency_offset+0x1a>
            NRF24L01p_write_register(_NRF24L01P_REG_RF_CH,offset);
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	2005      	movs	r0, #5
 8001b52:	f7ff fe20 	bl	8001796 <NRF24L01p_write_register>
    }
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <NRF24L01p_set_DataRate>:
uint8_t NRF24L01p_get_frequency_offset(){
    return NRF24L01p_read_register(_NRF24L01P_REG_RF_CH);
}

void NRF24L01p_set_DataRate(NRF24L01p_datarate_t DataRate){
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_RF_SETUP);
 8001b68:	2006      	movs	r0, #6
 8001b6a:	f7ff fdcb 	bl	8001704 <NRF24L01p_read_register>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_RF_SETUP_RF_DR_MASK;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001b78:	73fb      	strb	r3, [r7, #15]
    temp |= DataRate;
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_RF_SETUP,temp);
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	4619      	mov	r1, r3
 8001b86:	2006      	movs	r0, #6
 8001b88:	f7ff fe05 	bl	8001796 <NRF24L01p_write_register>
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <NRF24L01p_get_max_retry_flag>:

bool NRF24L01p_get_tx_fifo_full_flag(){
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_TX_FULL) return 1;
    else return 0;
}
bool NRF24L01p_get_max_retry_flag(){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_MAX_RT) return 1;
 8001b98:	f7ff feb8 	bl	800190c <NRF24L01p_get_status>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <NRF24L01p_get_max_retry_flag+0x16>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <NRF24L01p_get_max_retry_flag+0x18>
    else return 0;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <NRF24L01p_clear_max_retry_flag>:
void NRF24L01p_clear_max_retry_flag(){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
    uint8_t temp = _NRF24L01P_STATUS_MAX_RT;
 8001bb6:	2310      	movs	r3, #16
 8001bb8:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	2007      	movs	r0, #7
 8001bc2:	f7ff fe12 	bl	80017ea <NRF24L01p_write_register_buffer>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <NRF24L01p_get_data_sent_flag>:
bool NRF24L01p_get_data_sent_flag(){
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_TX_DS) return 1;
 8001bd2:	f7ff fe9b 	bl	800190c <NRF24L01p_get_status>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <NRF24L01p_get_data_sent_flag+0x16>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <NRF24L01p_get_data_sent_flag+0x18>
    else return 0;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}

08001bea <NRF24L01p_clear_data_sent_flag>:
void NRF24L01p_clear_data_sent_flag(){
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
    uint8_t temp = _NRF24L01P_STATUS_TX_DS;
 8001bf0:	2320      	movs	r3, #32
 8001bf2:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 8001bf4:	1dfb      	adds	r3, r7, #7
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	2007      	movs	r0, #7
 8001bfc:	f7ff fdf5 	bl	80017ea <NRF24L01p_write_register_buffer>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <NRF24L01p_clear_data_ready_flag>:
bool NRF24L01p_get_data_ready_flag(){
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_RX_DR) return 1;
    else return 0;
}
void NRF24L01p_clear_data_ready_flag(){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
    uint8_t temp = _NRF24L01P_STATUS_RX_DR;
 8001c0e:	2340      	movs	r3, #64	; 0x40
 8001c10:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	2201      	movs	r2, #1
 8001c16:	4619      	mov	r1, r3
 8001c18:	2007      	movs	r0, #7
 8001c1a:	f7ff fde6 	bl	80017ea <NRF24L01p_write_register_buffer>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <NRF24L01p_get_plos_count>:
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_OBSERVE_TX);
    return ((temp&_NRF24L01P_OBSERVE_TX_ARC_CNT_MASK)>>_NRF24L01P_OBSERVE_TX_ARC_CNT_BP);
    //return (temp&0x0F)>>0;

}
uint8_t NRF24L01p_get_plos_count(){
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
    uint8_t temp;
    NRF24L01p_read_register_buffer(_NRF24L01P_REG_OBSERVE_TX,&temp,sizeof(temp));
 8001c2c:	1dfb      	adds	r3, r7, #7
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4619      	mov	r1, r3
 8001c32:	2008      	movs	r0, #8
 8001c34:	f7ff fd8b 	bl	800174e <NRF24L01p_read_register_buffer>
    return ((temp&_NRF24L01P_OBSERVE_TX_PLOS_CNT_MASK)>>_NRF24L01P_OBSERVE_TX_PLOS_CNT_BP);
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	b2db      	uxtb	r3, r3
    //return (temp&0xF0)>>4;
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <NRF24L01p_set_RX_pipe_address>:
bool NRF24L01p_get_rpd(){
    if(NRF24L01p_read_register(_NRF24L01P_REG_RPD)) return 1;
    else return 0;
}

void NRF24L01p_set_RX_pipe_address(NRF24L01p_pipe_t pipe,NRF24L01p_PipeAddr_t address){
 8001c46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c48:	b089      	sub	sp, #36	; 0x24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4601      	mov	r1, r0
 8001c4e:	e9c7 2300 	strd	r2, r3, [r7]
 8001c52:	460b      	mov	r3, r1
 8001c54:	73fb      	strb	r3, [r7, #15]
    int max_pipe_addr_width = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
    if((pipe>=0) && (pipe<=1)   ){max_pipe_addr_width = 5;}
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d802      	bhi.n	8001c66 <NRF24L01p_set_RX_pipe_address+0x20>
 8001c60:	2305      	movs	r3, #5
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	e007      	b.n	8001c76 <NRF24L01p_set_RX_pipe_address+0x30>
    else if ((pipe>=2) && (pipe<=5)   ){max_pipe_addr_width = 1;}
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d904      	bls.n	8001c76 <NRF24L01p_set_RX_pipe_address+0x30>
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d801      	bhi.n	8001c76 <NRF24L01p_set_RX_pipe_address+0x30>
 8001c72:	2301      	movs	r3, #1
 8001c74:	61fb      	str	r3, [r7, #28]
    uint8_t temp[5];
    int i;
    for(i=0;i<max_pipe_addr_width;i++){
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	e01b      	b.n	8001cb4 <NRF24L01p_set_RX_pipe_address+0x6e>
            temp[i] = (address>>(8*i))&0xFF;
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	00d9      	lsls	r1, r3, #3
 8001c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c84:	f1c1 0620 	rsb	r6, r1, #32
 8001c88:	f1a1 0020 	sub.w	r0, r1, #32
 8001c8c:	fa22 f401 	lsr.w	r4, r2, r1
 8001c90:	fa03 f606 	lsl.w	r6, r3, r6
 8001c94:	4334      	orrs	r4, r6
 8001c96:	fa23 f000 	lsr.w	r0, r3, r0
 8001c9a:	4304      	orrs	r4, r0
 8001c9c:	fa23 f501 	lsr.w	r5, r3, r1
 8001ca0:	b2e1      	uxtb	r1, r4
 8001ca2:	f107 0210 	add.w	r2, r7, #16
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	4413      	add	r3, r2
 8001caa:	460a      	mov	r2, r1
 8001cac:	701a      	strb	r2, [r3, #0]
    for(i=0;i<max_pipe_addr_width;i++){
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	dbdf      	blt.n	8001c7c <NRF24L01p_set_RX_pipe_address+0x36>
    }
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	330a      	adds	r3, #10
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f107 0110 	add.w	r1, r7, #16
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fd8e 	bl	80017ea <NRF24L01p_write_register_buffer>
}
 8001cce:	bf00      	nop
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cd6 <NRF24L01p_set_TX_pipe_address>:
    }

    return temp_addr;
}

void NRF24L01p_set_TX_pipe_address(NRF24L01p_PipeAddr_t address){
 8001cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd8:	b087      	sub	sp, #28
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t temp[5];
    int i;
    for( i=0;i<5;i++){
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	617a      	str	r2, [r7, #20]
 8001ce4:	e01b      	b.n	8001d1e <NRF24L01p_set_TX_pipe_address+0x48>
            temp[i] = (address>>(8*i))&0xFF;
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	00d0      	lsls	r0, r2, #3
 8001cea:	e897 0006 	ldmia.w	r7, {r1, r2}
 8001cee:	f1c0 0620 	rsb	r6, r0, #32
 8001cf2:	f1a0 0520 	sub.w	r5, r0, #32
 8001cf6:	fa21 f300 	lsr.w	r3, r1, r0
 8001cfa:	fa02 f606 	lsl.w	r6, r2, r6
 8001cfe:	4333      	orrs	r3, r6
 8001d00:	fa22 f505 	lsr.w	r5, r2, r5
 8001d04:	432b      	orrs	r3, r5
 8001d06:	fa22 f400 	lsr.w	r4, r2, r0
 8001d0a:	b2d8      	uxtb	r0, r3
 8001d0c:	f107 010c 	add.w	r1, r7, #12
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	440a      	add	r2, r1
 8001d14:	4601      	mov	r1, r0
 8001d16:	7011      	strb	r1, [r2, #0]
    for( i=0;i<5;i++){
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	3201      	adds	r2, #1
 8001d1c:	617a      	str	r2, [r7, #20]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	2a04      	cmp	r2, #4
 8001d22:	dde0      	ble.n	8001ce6 <NRF24L01p_set_TX_pipe_address+0x10>
    }
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_TX_ADDR,temp,5);
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	2205      	movs	r2, #5
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	2010      	movs	r0, #16
 8001d2e:	f7ff fd5c 	bl	80017ea <NRF24L01p_write_register_buffer>
}
 8001d32:	bf00      	nop
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d3a <NRF24L01p_get_fifo_flag_rx_empty>:
    uint8_t temp;
    NRF24L01p_read_register_buffer((_NRF24L01P_REG_RX_PW_P0+pipe),&temp,sizeof(temp));
    return (temp&(0x3F));
}

bool NRF24L01p_get_fifo_flag_rx_empty(){
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	af00      	add	r7, sp, #0
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_EMPTY ) return 1;
 8001d3e:	2017      	movs	r0, #23
 8001d40:	f7ff fce0 	bl	8001704 <NRF24L01p_read_register>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <NRF24L01p_get_fifo_flag_rx_empty+0x18>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <NRF24L01p_get_fifo_flag_rx_empty+0x1a>
    else return 0;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <NRF24L01p_get_fifo_flag_tx_full>:
}
bool NRF24L01p_get_fifo_flag_tx_empty(){
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_TX_EMPTY ) return 1;
    else return 0;
}
bool NRF24L01p_get_fifo_flag_tx_full(){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_TX_FULL ) return 1;
 8001d5c:	2017      	movs	r0, #23
 8001d5e:	f7ff fcd1 	bl	8001704 <NRF24L01p_read_register>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <NRF24L01p_get_fifo_flag_tx_full+0x18>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <NRF24L01p_get_fifo_flag_tx_full+0x1a>
    else return 0;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <NRF24L01p_enable_dynamic_payload_pipe>:
bool NRF24L01p_get_fifo_flag_tx_reuse(){
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_REUSE ) return 1;
    else return 0;
}

void NRF24L01p_enable_dynamic_payload_pipe(NRF24L01p_pipe_t pipe, bool sel){
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	460a      	mov	r2, r1
 8001d80:	71fb      	strb	r3, [r7, #7]
 8001d82:	4613      	mov	r3, r2
 8001d84:	71bb      	strb	r3, [r7, #6]
    if(sel){
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d014      	beq.n	8001db6 <NRF24L01p_enable_dynamic_payload_pipe+0x40>
          uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_DYNPD);
 8001d8c:	201c      	movs	r0, #28
 8001d8e:	f7ff fcb9 	bl	8001704 <NRF24L01p_read_register>
 8001d92:	4603      	mov	r3, r0
 8001d94:	73fb      	strb	r3, [r7, #15]
        temp |= (1<<pipe);
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	b25a      	sxtb	r2, r3
 8001da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	b25b      	sxtb	r3, r3
 8001da8:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,temp);
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	4619      	mov	r1, r3
 8001dae:	201c      	movs	r0, #28
 8001db0:	f7ff fcf1 	bl	8001796 <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_DYNPD);
        temp &= ~(1<<pipe);
        NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,temp);
    }

}
 8001db4:	e015      	b.n	8001de2 <NRF24L01p_enable_dynamic_payload_pipe+0x6c>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_DYNPD);
 8001db6:	201c      	movs	r0, #28
 8001db8:	f7ff fca4 	bl	8001704 <NRF24L01p_read_register>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73bb      	strb	r3, [r7, #14]
        temp &= ~(1<<pipe);
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	b25a      	sxtb	r2, r3
 8001dce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,temp);
 8001dd8:	7bbb      	ldrb	r3, [r7, #14]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	201c      	movs	r0, #28
 8001dde:	f7ff fcda 	bl	8001796 <NRF24L01p_write_register>
}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <NRF24L01p_enable_dynamic_payload>:



void NRF24L01p_enable_dynamic_payload(bool sel){
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
    if(sel){
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00e      	beq.n	8001e18 <NRF24L01p_enable_dynamic_payload+0x2e>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001dfa:	201d      	movs	r0, #29
 8001dfc:	f7ff fc82 	bl	8001704 <NRF24L01p_read_register>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_DPL;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	201d      	movs	r0, #29
 8001e12:	f7ff fcc0 	bl	8001796 <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
    }

}
 8001e16:	e00d      	b.n	8001e34 <NRF24L01p_enable_dynamic_payload+0x4a>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001e18:	201d      	movs	r0, #29
 8001e1a:	f7ff fc73 	bl	8001704 <NRF24L01p_read_register>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
 8001e22:	7bbb      	ldrb	r3, [r7, #14]
 8001e24:	f023 0304 	bic.w	r3, r3, #4
 8001e28:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8001e2a:	7bbb      	ldrb	r3, [r7, #14]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	201d      	movs	r0, #29
 8001e30:	f7ff fcb1 	bl	8001796 <NRF24L01p_write_register>
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <NRF24L01p_enable_payload_with_ack>:



void NRF24L01p_enable_payload_with_ack(bool sel){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
    if(sel){
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00e      	beq.n	8001e6a <NRF24L01p_enable_payload_with_ack+0x2e>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001e4c:	201d      	movs	r0, #29
 8001e4e:	f7ff fc59 	bl	8001704 <NRF24L01p_read_register>
 8001e52:	4603      	mov	r3, r0
 8001e54:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	4619      	mov	r1, r3
 8001e62:	201d      	movs	r0, #29
 8001e64:	f7ff fc97 	bl	8001796 <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
    }

}
 8001e68:	e00d      	b.n	8001e86 <NRF24L01p_enable_payload_with_ack+0x4a>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001e6a:	201d      	movs	r0, #29
 8001e6c:	f7ff fc4a 	bl	8001704 <NRF24L01p_read_register>
 8001e70:	4603      	mov	r3, r0
 8001e72:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	f023 0302 	bic.w	r3, r3, #2
 8001e7a:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8001e7c:	7bbb      	ldrb	r3, [r7, #14]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	201d      	movs	r0, #29
 8001e82:	f7ff fc88 	bl	8001796 <NRF24L01p_write_register>
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <NRF24L01p_enable_dynamic_payload_with_no_ack>:



void NRF24L01p_enable_dynamic_payload_with_no_ack(bool sel){
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	71fb      	strb	r3, [r7, #7]
    if(sel){
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00e      	beq.n	8001ebc <NRF24L01p_enable_dynamic_payload_with_no_ack+0x2e>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001e9e:	201d      	movs	r0, #29
 8001ea0:	f7ff fc30 	bl	8001704 <NRF24L01p_read_register>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_DYN_ACK;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	201d      	movs	r0, #29
 8001eb6:	f7ff fc6e 	bl	8001796 <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
    }

}
 8001eba:	e00d      	b.n	8001ed8 <NRF24L01p_enable_dynamic_payload_with_no_ack+0x4a>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001ebc:	201d      	movs	r0, #29
 8001ebe:	f7ff fc21 	bl	8001704 <NRF24L01p_read_register>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8001ece:	7bbb      	ldrb	r3, [r7, #14]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	201d      	movs	r0, #29
 8001ed4:	f7ff fc5f 	bl	8001796 <NRF24L01p_write_register>
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <NRF24L01p_port_Initialize>:
static GPIO_InitTypeDef nrf24l01p_CSN_pin_Struct = {NRF24L01P_CSN_PIN,GPIO_MODE_OUTPUT_PP,GPIO_NOPULL,GPIO_SPEED_FREQ_LOW,};
static GPIO_InitTypeDef nrf24l01p_IRQ_pin_Struct = {NRF24L01P_IRQ_PIN,GPIO_MODE_IT_FALLING,GPIO_NOPULL,GPIO_SPEED_FREQ_LOW,};



void NRF24L01p_port_Initialize(){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
	NRF24L01p_port_SPI_initialize();
 8001ee6:	f000 f865 	bl	8001fb4 <NRF24L01p_port_SPI_initialize>

	/* Enable GPIOA clock */
	//__HAL_RCC_GPIOA_CLK_ENABLE();
	//__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001eea:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <NRF24L01p_port_Initialize+0x3c>)
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <NRF24L01p_port_Initialize+0x3c>)
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <NRF24L01p_port_Initialize+0x3c>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]


	HAL_SPI_Init(&nrf24l01p_SpiHandle);
 8001f02:	4807      	ldr	r0, [pc, #28]	; (8001f20 <NRF24L01p_port_Initialize+0x40>)
 8001f04:	f002 fc32 	bl	800476c <HAL_SPI_Init>

	NRF24L01p_port_Pin_CE_Initialize();
 8001f08:	f000 f80c 	bl	8001f24 <NRF24L01p_port_Pin_CE_Initialize>
	NRF24L01p_port_Pin_CSN_Initialize();
 8001f0c:	f000 f816 	bl	8001f3c <NRF24L01p_port_Pin_CSN_Initialize>
	NRF24L01p_port_Pin_IRQ_Initialize();
 8001f10:	f000 f820 	bl	8001f54 <NRF24L01p_port_Pin_IRQ_Initialize>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	20000064 	.word	0x20000064

08001f24 <NRF24L01p_port_Pin_CE_Initialize>:
void NRF24L01p_port_DeInitialize(){
	HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
}
void NRF24L01p_port_Pin_CE_Initialize(){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
 8001f28:	4902      	ldr	r1, [pc, #8]	; (8001f34 <NRF24L01p_port_Pin_CE_Initialize+0x10>)
 8001f2a:	4803      	ldr	r0, [pc, #12]	; (8001f38 <NRF24L01p_port_Pin_CE_Initialize+0x14>)
 8001f2c:	f000 faa8 	bl	8002480 <HAL_GPIO_Init>
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000000 	.word	0x20000000
 8001f38:	48000800 	.word	0x48000800

08001f3c <NRF24L01p_port_Pin_CSN_Initialize>:
void NRF24L01p_port_Pin_CSN_Initialize(){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_CSN_PORT, &nrf24l01p_CSN_pin_Struct);
 8001f40:	4902      	ldr	r1, [pc, #8]	; (8001f4c <NRF24L01p_port_Pin_CSN_Initialize+0x10>)
 8001f42:	4803      	ldr	r0, [pc, #12]	; (8001f50 <NRF24L01p_port_Pin_CSN_Initialize+0x14>)
 8001f44:	f000 fa9c 	bl	8002480 <HAL_GPIO_Init>
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000014 	.word	0x20000014
 8001f50:	48000800 	.word	0x48000800

08001f54 <NRF24L01p_port_Pin_IRQ_Initialize>:
void NRF24L01p_port_Pin_IRQ_Initialize(){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_IRQ_PORT, &nrf24l01p_IRQ_pin_Struct);
 8001f58:	4902      	ldr	r1, [pc, #8]	; (8001f64 <NRF24L01p_port_Pin_IRQ_Initialize+0x10>)
 8001f5a:	4803      	ldr	r0, [pc, #12]	; (8001f68 <NRF24L01p_port_Pin_IRQ_Initialize+0x14>)
 8001f5c:	f000 fa90 	bl	8002480 <HAL_GPIO_Init>

	//HAL_NVIC_SetPriority(EXTI9_5_IRQn, 10, 0);//------------------------------------------------
	//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//---------------------------------------------------------
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000028 	.word	0x20000028
 8001f68:	48000800 	.word	0x48000800

08001f6c <NRF24L01p_port_write_Pin_CE>:
	return HAL_GPIO_ReadPin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN);
}
bool NRF24L01p_port_read_Pin_CSN(){
	return HAL_GPIO_ReadPin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN);
}
void NRF24L01p_port_write_Pin_CE(bool val){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN, (GPIO_PinState)val);
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f7e:	4803      	ldr	r0, [pc, #12]	; (8001f8c <NRF24L01p_port_write_Pin_CE+0x20>)
 8001f80:	f000 fbfc 	bl	800277c <HAL_GPIO_WritePin>
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	48000800 	.word	0x48000800

08001f90 <NRF24L01p_port_write_Pin_CSN>:
void NRF24L01p_port_write_Pin_CSN(bool val){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN, (GPIO_PinState)val);
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <NRF24L01p_port_write_Pin_CSN+0x20>)
 8001fa4:	f000 fbea 	bl	800277c <HAL_GPIO_WritePin>
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	48000800 	.word	0x48000800

08001fb4 <NRF24L01p_port_SPI_initialize>:
void NRF24L01p_port_SPI_initialize(){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
	// TODO Auto-generated destructor stub
	/*##-1- Configure the SPI peripheral #######################################*/
	/* Set the SPI parameters */
	nrf24l01p_SpiHandle.Instance               = NRF24L01P_SPIx;
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001fbc:	4a41      	ldr	r2, [pc, #260]	; (80020c4 <NRF24L01p_port_SPI_initialize+0x110>)
 8001fbe:	601a      	str	r2, [r3, #0]
	nrf24l01p_SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001fc0:	4b3f      	ldr	r3, [pc, #252]	; (80020c0 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001fc2:	2238      	movs	r2, #56	; 0x38
 8001fc4:	61da      	str	r2, [r3, #28]
	nrf24l01p_SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8001fc6:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
	nrf24l01p_SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001fcc:	4b3c      	ldr	r3, [pc, #240]	; (80020c0 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	615a      	str	r2, [r3, #20]
	nrf24l01p_SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001fd2:	4b3b      	ldr	r3, [pc, #236]	; (80020c0 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
	nrf24l01p_SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8001fd8:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001fda:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fde:	60da      	str	r2, [r3, #12]
	nrf24l01p_SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001fe0:	4b37      	ldr	r3, [pc, #220]	; (80020c0 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	621a      	str	r2, [r3, #32]
	nrf24l01p_SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001fe6:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24
	nrf24l01p_SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001fec:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28
	nrf24l01p_SpiHandle.Init.CRCPolynomial     = 7;
 8001ff2:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
	//nrf24l01p_SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
	nrf24l01p_SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8001ff8:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffe:	619a      	str	r2, [r3, #24]
	//nrf24l01p_SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

	nrf24l01p_SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8002000:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002002:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002006:	605a      	str	r2, [r3, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	NRF24L01P_SPIx_SCK_GPIO_CLK_ENABLE();
 8002008:	4a2f      	ldr	r2, [pc, #188]	; (80020c8 <NRF24L01p_port_SPI_initialize+0x114>)
 800200a:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <NRF24L01p_port_SPI_initialize+0x114>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <NRF24L01p_port_SPI_initialize+0x114>)
 8002016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	693b      	ldr	r3, [r7, #16]
	NRF24L01P_SPIx_MISO_GPIO_CLK_ENABLE();
 8002020:	4a29      	ldr	r2, [pc, #164]	; (80020c8 <NRF24L01p_port_SPI_initialize+0x114>)
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <NRF24L01p_port_SPI_initialize+0x114>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202c:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <NRF24L01p_port_SPI_initialize+0x114>)
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
	NRF24L01P_SPIx_MOSI_GPIO_CLK_ENABLE();
 8002038:	4a23      	ldr	r2, [pc, #140]	; (80020c8 <NRF24L01p_port_SPI_initialize+0x114>)
 800203a:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <NRF24L01p_port_SPI_initialize+0x114>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002044:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <NRF24L01p_port_SPI_initialize+0x114>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
	/* Enable SPI clock */
	NRF24L01P_SPIx_CLK_ENABLE();
 8002050:	4a1d      	ldr	r2, [pc, #116]	; (80020c8 <NRF24L01p_port_SPI_initialize+0x114>)
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <NRF24L01p_port_SPI_initialize+0x114>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <NRF24L01p_port_SPI_initialize+0x114>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* SPI SCK GPIO pin configuration  */
	GPIO_InitStruct.Pin       = NRF24L01P_SPIx_SCK_PIN;
 8002068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800206c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8002072:	2302      	movs	r3, #2
 8002074:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002076:	2302      	movs	r3, #2
 8002078:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_SCK_AF;
 800207a:	2306      	movs	r3, #6
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4811      	ldr	r0, [pc, #68]	; (80020cc <NRF24L01p_port_SPI_initialize+0x118>)
 8002086:	f000 f9fb 	bl	8002480 <HAL_GPIO_Init>

	/* SPI MISO GPIO pin configuration  */
	GPIO_InitStruct.Pin = NRF24L01P_SPIx_MISO_PIN;
 800208a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800208e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_MISO_AF;
 8002090:	2306      	movs	r3, #6
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	480c      	ldr	r0, [pc, #48]	; (80020cc <NRF24L01p_port_SPI_initialize+0x118>)
 800209c:	f000 f9f0 	bl	8002480 <HAL_GPIO_Init>

	/* SPI MOSI GPIO pin configuration  */
	GPIO_InitStruct.Pin = NRF24L01P_SPIx_MOSI_PIN;
 80020a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_MOSI_AF;
 80020a6:	2306      	movs	r3, #6
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4619      	mov	r1, r3
 80020b0:	4806      	ldr	r0, [pc, #24]	; (80020cc <NRF24L01p_port_SPI_initialize+0x118>)
 80020b2:	f000 f9e5 	bl	8002480 <HAL_GPIO_Init>
}
 80020b6:	bf00      	nop
 80020b8:	3728      	adds	r7, #40	; 0x28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000064 	.word	0x20000064
 80020c4:	40003c00 	.word	0x40003c00
 80020c8:	40021000 	.word	0x40021000
 80020cc:	48000800 	.word	0x48000800

080020d0 <NRF24L01p_port_SPI_Transcieve>:
int NRF24L01p_port_SPI_Transcieve(uint8_t *dataOut, uint8_t *dataIn, unsigned int size){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	return HAL_SPI_TransmitReceive(&nrf24l01p_SpiHandle, dataOut, dataIn, size,1000);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	b29a      	uxth	r2, r3
 80020e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	4613      	mov	r3, r2
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	68f9      	ldr	r1, [r7, #12]
 80020ec:	4803      	ldr	r0, [pc, #12]	; (80020fc <NRF24L01p_port_SPI_Transcieve+0x2c>)
 80020ee:	f002 fd1b 	bl	8004b28 <HAL_SPI_TransmitReceive>
 80020f2:	4603      	mov	r3, r0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000064 	.word	0x20000064

08002100 <NRF24L01p_port_DelayMs>:
int NRF24L01p_port_SPI_Receive(uint8_t *data, unsigned int size){
	HAL_SPI_Receive(&nrf24l01p_SpiHandle, data, size, 1000);
}


void NRF24L01p_port_DelayMs(unsigned int ms){
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f8bf 	bl	800228c <HAL_Delay>
	//vTaskDelay ((ms / portTICK_PERIOD_MS));

}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <NRF24L01p_port_DelayUs>:
void NRF24L01p_port_DelayUs(unsigned int us){
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	unsigned int ms = us/1000;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a07      	ldr	r2, [pc, #28]	; (8002140 <NRF24L01p_port_DelayUs+0x28>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	60fb      	str	r3, [r7, #12]
	HAL_Delay(ms + 1);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3301      	adds	r3, #1
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f8ab 	bl	800228c <HAL_Delay>
	//vTaskDelay (( ms / portTICK_PERIOD_MS));
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	10624dd3 	.word	0x10624dd3
 8002144:	00000000 	.word	0x00000000

08002148 <Si7006_temperature>:
	unit->delay(ms);
}

/////////////////////////////////////////////////////////////////////////////////////

float Si7006_temperature(Si7006_t *unit){
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	uint8_t data[3] = {0xF3, 0, 0};
 8002150:	23f3      	movs	r3, #243	; 0xf3
 8002152:	723b      	strb	r3, [r7, #8]
 8002154:	2300      	movs	r3, #0
 8002156:	727b      	strb	r3, [r7, #9]
 8002158:	2300      	movs	r3, #0
 800215a:	72bb      	strb	r3, [r7, #10]
	unit->i2c_transmit(data, 1);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f107 0208 	add.w	r2, r7, #8
 8002164:	2101      	movs	r1, #1
 8002166:	4610      	mov	r0, r2
 8002168:	4798      	blx	r3
	unit->delay(500);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002172:	4798      	blx	r3
	unit->i2c_receive(data,2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f107 0208 	add.w	r2, r7, #8
 800217c:	2102      	movs	r1, #2
 800217e:	4610      	mov	r0, r2
 8002180:	4798      	blx	r3

	uint16_t Temp_Code = data[0]<<8 | data[1];
 8002182:	7a3b      	ldrb	r3, [r7, #8]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	b21a      	sxth	r2, r3
 8002188:	7a7b      	ldrb	r3, [r7, #9]
 800218a:	b21b      	sxth	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b21b      	sxth	r3, r3
 8002190:	81fb      	strh	r3, [r7, #14]
	//printf("the data received is %d, %d\r\n", data[1], data[0]);
	//printf("temp code is is %d\r\n", tempCode );

	return ((175.72* (float)Temp_Code)/65536) - 46.85;
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	ee07 3a90 	vmov	s15, r3
 8002198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800219c:	ee17 0a90 	vmov	r0, s15
 80021a0:	f7fe f982 	bl	80004a8 <__aeabi_f2d>
 80021a4:	a315      	add	r3, pc, #84	; (adr r3, 80021fc <Si7006_temperature+0xb4>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe f9d1 	bl	8000550 <__aeabi_dmul>
 80021ae:	4603      	mov	r3, r0
 80021b0:	460c      	mov	r4, r1
 80021b2:	4618      	mov	r0, r3
 80021b4:	4621      	mov	r1, r4
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <Si7006_temperature+0xb0>)
 80021bc:	f7fe faf2 	bl	80007a4 <__aeabi_ddiv>
 80021c0:	4603      	mov	r3, r0
 80021c2:	460c      	mov	r4, r1
 80021c4:	4618      	mov	r0, r3
 80021c6:	4621      	mov	r1, r4
 80021c8:	a309      	add	r3, pc, #36	; (adr r3, 80021f0 <Si7006_temperature+0xa8>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f7fe f80b 	bl	80001e8 <__aeabi_dsub>
 80021d2:	4603      	mov	r3, r0
 80021d4:	460c      	mov	r4, r1
 80021d6:	4618      	mov	r0, r3
 80021d8:	4621      	mov	r1, r4
 80021da:	f7fe fbcb 	bl	8000974 <__aeabi_d2f>
 80021de:	4603      	mov	r3, r0
 80021e0:	ee07 3a90 	vmov	s15, r3
}
 80021e4:	eeb0 0a67 	vmov.f32	s0, s15
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd90      	pop	{r4, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	cccccccd 	.word	0xcccccccd
 80021f4:	40476ccc 	.word	0x40476ccc
 80021f8:	40f00000 	.word	0x40f00000
 80021fc:	3d70a3d7 	.word	0x3d70a3d7
 8002200:	4065f70a 	.word	0x4065f70a

08002204 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002208:	2003      	movs	r0, #3
 800220a:	f000 f905 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220e:	2000      	movs	r0, #0
 8002210:	f000 f806 	bl	8002220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002214:	f004 fcc6 	bl	8006ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_InitTick+0x30>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_InitTick+0x34>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	4618      	mov	r0, r3
 8002236:	f000 f916 	bl	8002466 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800223a:	2200      	movs	r2, #0
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002242:	f000 f8f4 	bl	800242e <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000040 	.word	0x20000040
 8002254:	10624dd3 	.word	0x10624dd3

08002258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  uwTick++;
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <HAL_IncTick+0x18>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3301      	adds	r3, #1
 8002262:	4a03      	ldr	r2, [pc, #12]	; (8002270 <HAL_IncTick+0x18>)
 8002264:	6013      	str	r3, [r2, #0]
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	200002b0 	.word	0x200002b0

08002274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return uwTick;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_GetTick+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	200002b0 	.word	0x200002b0

0800228c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8002298:	f7ff ffec 	bl	8002274 <HAL_GetTick>
 800229c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800229e:	bf00      	nop
 80022a0:	f7ff ffe8 	bl	8002274 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad2      	subs	r2, r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d3f7      	bcc.n	80022a0 <HAL_Delay+0x14>
  {
  }
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <NVIC_SetPriorityGrouping+0x44>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	; (80022fc <NVIC_SetPriorityGrouping+0x44>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <NVIC_GetPriorityGrouping+0x18>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0307 	and.w	r3, r3, #7
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	2b00      	cmp	r3, #0
 800232e:	da0b      	bge.n	8002348 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002330:	490d      	ldr	r1, [pc, #52]	; (8002368 <NVIC_SetPriority+0x4c>)
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	3b04      	subs	r3, #4
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	440b      	add	r3, r1
 8002344:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002346:	e009      	b.n	800235c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	4908      	ldr	r1, [pc, #32]	; (800236c <NVIC_SetPriority+0x50>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00
 800236c:	e000e100 	.word	0xe000e100

08002370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	; 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f1c3 0307 	rsb	r3, r3, #7
 800238a:	2b04      	cmp	r3, #4
 800238c:	bf28      	it	cs
 800238e:	2304      	movcs	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	2b06      	cmp	r3, #6
 8002398:	d902      	bls.n	80023a0 <NVIC_EncodePriority+0x30>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3b03      	subs	r3, #3
 800239e:	e000      	b.n	80023a2 <NVIC_EncodePriority+0x32>
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	2201      	movs	r2, #1
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	1e5a      	subs	r2, r3, #1
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	401a      	ands	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b6:	2101      	movs	r1, #1
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	1e59      	subs	r1, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023f8:	f7ff ff90 	bl	800231c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff49 	bl	80022b8 <NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff5e 	bl	8002300 <NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff90 	bl	8002370 <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5f 	bl	800231c <NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ffb0 	bl	80023d4 <SysTick_Config>
 8002474:	4603      	mov	r3, r0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002496:	e154      	b.n	8002742 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2101      	movs	r1, #1
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8146 	beq.w	800273c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x40>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b12      	cmp	r3, #18
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	6939      	ldr	r1, [r7, #16]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d00b      	beq.n	800255c <HAL_GPIO_Init+0xdc>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d007      	beq.n	800255c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002550:	2b11      	cmp	r3, #17
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b12      	cmp	r3, #18
 800255a:	d130      	bne.n	80025be <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002592:	2201      	movs	r2, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 0201 	and.w	r2, r3, #1
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2203      	movs	r2, #3
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80a0 	beq.w	800273c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fc:	4a58      	ldr	r2, [pc, #352]	; (8002760 <HAL_GPIO_Init+0x2e0>)
 80025fe:	4b58      	ldr	r3, [pc, #352]	; (8002760 <HAL_GPIO_Init+0x2e0>)
 8002600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6613      	str	r3, [r2, #96]	; 0x60
 8002608:	4b55      	ldr	r3, [pc, #340]	; (8002760 <HAL_GPIO_Init+0x2e0>)
 800260a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002614:	4a53      	ldr	r2, [pc, #332]	; (8002764 <HAL_GPIO_Init+0x2e4>)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	3302      	adds	r3, #2
 800261c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800263e:	d019      	beq.n	8002674 <HAL_GPIO_Init+0x1f4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a49      	ldr	r2, [pc, #292]	; (8002768 <HAL_GPIO_Init+0x2e8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d013      	beq.n	8002670 <HAL_GPIO_Init+0x1f0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a48      	ldr	r2, [pc, #288]	; (800276c <HAL_GPIO_Init+0x2ec>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00d      	beq.n	800266c <HAL_GPIO_Init+0x1ec>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a47      	ldr	r2, [pc, #284]	; (8002770 <HAL_GPIO_Init+0x2f0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d007      	beq.n	8002668 <HAL_GPIO_Init+0x1e8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a46      	ldr	r2, [pc, #280]	; (8002774 <HAL_GPIO_Init+0x2f4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_GPIO_Init+0x1e4>
 8002660:	2304      	movs	r3, #4
 8002662:	e008      	b.n	8002676 <HAL_GPIO_Init+0x1f6>
 8002664:	2307      	movs	r3, #7
 8002666:	e006      	b.n	8002676 <HAL_GPIO_Init+0x1f6>
 8002668:	2303      	movs	r3, #3
 800266a:	e004      	b.n	8002676 <HAL_GPIO_Init+0x1f6>
 800266c:	2302      	movs	r3, #2
 800266e:	e002      	b.n	8002676 <HAL_GPIO_Init+0x1f6>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_GPIO_Init+0x1f6>
 8002674:	2300      	movs	r3, #0
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	f002 0203 	and.w	r2, r2, #3
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	4093      	lsls	r3, r2
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002686:	4937      	ldr	r1, [pc, #220]	; (8002764 <HAL_GPIO_Init+0x2e4>)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002694:	4b38      	ldr	r3, [pc, #224]	; (8002778 <HAL_GPIO_Init+0x2f8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	43db      	mvns	r3, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026b8:	4a2f      	ldr	r2, [pc, #188]	; (8002778 <HAL_GPIO_Init+0x2f8>)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026be:	4b2e      	ldr	r3, [pc, #184]	; (8002778 <HAL_GPIO_Init+0x2f8>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026e2:	4a25      	ldr	r2, [pc, #148]	; (8002778 <HAL_GPIO_Init+0x2f8>)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026e8:	4b23      	ldr	r3, [pc, #140]	; (8002778 <HAL_GPIO_Init+0x2f8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800270c:	4a1a      	ldr	r2, [pc, #104]	; (8002778 <HAL_GPIO_Init+0x2f8>)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_GPIO_Init+0x2f8>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002736:	4a10      	ldr	r2, [pc, #64]	; (8002778 <HAL_GPIO_Init+0x2f8>)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3301      	adds	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	f47f aea3 	bne.w	8002498 <HAL_GPIO_Init+0x18>
  }
}
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	40010000 	.word	0x40010000
 8002768:	48000400 	.word	0x48000400
 800276c:	48000800 	.word	0x48000800
 8002770:	48000c00 	.word	0x48000c00
 8002774:	48001000 	.word	0x48001000
 8002778:	40010400 	.word	0x40010400

0800277c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800278c:	787b      	ldrb	r3, [r7, #1]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002798:	e002      	b.n	80027a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e080      	b.n	80028c0 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f004 fa0e 	bl	8006bf4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2224      	movs	r2, #36	; 0x24
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6852      	ldr	r2, [r2, #4]
 80027f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	6892      	ldr	r2, [r2, #8]
 8002808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800280c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6892      	ldr	r2, [r2, #8]
 800281e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	e006      	b.n	8002834 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6892      	ldr	r2, [r2, #8]
 800282e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002832:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d104      	bne.n	8002846 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002844:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002858:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	68d2      	ldr	r2, [r2, #12]
 8002864:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002868:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6911      	ldr	r1, [r2, #16]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6952      	ldr	r2, [r2, #20]
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6992      	ldr	r2, [r2, #24]
 800287c:	0212      	lsls	r2, r2, #8
 800287e:	430a      	orrs	r2, r1
 8002880:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	69d1      	ldr	r1, [r2, #28]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6a12      	ldr	r2, [r2, #32]
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	f042 0201 	orr.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	461a      	mov	r2, r3
 80028d4:	460b      	mov	r3, r1
 80028d6:	817b      	strh	r3, [r7, #10]
 80028d8:	4613      	mov	r3, r2
 80028da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b20      	cmp	r3, #32
 80028ea:	f040 80e6 	bne.w	8002aba <HAL_I2C_Master_Transmit+0x1f2>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_I2C_Master_Transmit+0x34>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e0df      	b.n	8002abc <HAL_I2C_Master_Transmit+0x1f4>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002904:	f7ff fcb6 	bl	8002274 <HAL_GetTick>
 8002908:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2319      	movs	r3, #25
 8002910:	2201      	movs	r2, #1
 8002912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fada 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0ca      	b.n	8002abc <HAL_I2C_Master_Transmit+0x1f4>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2221      	movs	r2, #33	; 0x21
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2210      	movs	r2, #16
 8002932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	893a      	ldrh	r2, [r7, #8]
 8002946:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	2bff      	cmp	r3, #255	; 0xff
 8002956:	d90f      	bls.n	8002978 <HAL_I2C_Master_Transmit+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	22ff      	movs	r2, #255	; 0xff
 800295c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	b2da      	uxtb	r2, r3
 8002964:	8979      	ldrh	r1, [r7, #10]
 8002966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 fc1f 	bl	80031b4 <I2C_TransferConfig>
 8002976:	e071      	b.n	8002a5c <HAL_I2C_Master_Transmit+0x194>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002986:	b2da      	uxtb	r2, r3
 8002988:	8979      	ldrh	r1, [r7, #10]
 800298a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fc0d 	bl	80031b4 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 800299a:	e05f      	b.n	8002a5c <HAL_I2C_Master_Transmit+0x194>
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	6a39      	ldr	r1, [r7, #32]
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 facf 	bl	8002f44 <I2C_WaitOnTXISFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <HAL_I2C_Master_Transmit+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d101      	bne.n	80029b8 <HAL_I2C_Master_Transmit+0xf0>
        {
          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e081      	b.n	8002abc <HAL_I2C_Master_Transmit+0x1f4>
        }
        else
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e07f      	b.n	8002abc <HAL_I2C_Master_Transmit+0x1f4>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	1c58      	adds	r0, r3, #1
 80029c6:	68f9      	ldr	r1, [r7, #12]
 80029c8:	6248      	str	r0, [r1, #36]	; 0x24
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d135      	bne.n	8002a5c <HAL_I2C_Master_Transmit+0x194>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d030      	beq.n	8002a5c <HAL_I2C_Master_Transmit+0x194>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fa63 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Master_Transmit+0x14c>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e053      	b.n	8002abc <HAL_I2C_Master_Transmit+0x1f4>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2bff      	cmp	r3, #255	; 0xff
 8002a1c:	d90e      	bls.n	8002a3c <HAL_I2C_Master_Transmit+0x174>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	22ff      	movs	r2, #255	; 0xff
 8002a22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	8979      	ldrh	r1, [r7, #10]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fbbd 	bl	80031b4 <I2C_TransferConfig>
 8002a3a:	e00f      	b.n	8002a5c <HAL_I2C_Master_Transmit+0x194>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	8979      	ldrh	r1, [r7, #10]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fbac 	bl	80031b4 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d19a      	bne.n	800299c <HAL_I2C_Master_Transmit+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	6a39      	ldr	r1, [r7, #32]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 faaa 	bl	8002fc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <HAL_I2C_Master_Transmit+0x1be>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d101      	bne.n	8002a82 <HAL_I2C_Master_Transmit+0x1ba>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e01c      	b.n	8002abc <HAL_I2C_Master_Transmit+0x1f4>
      }
      else
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e01a      	b.n	8002abc <HAL_I2C_Master_Transmit+0x1f4>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_I2C_Master_Transmit+0x1fc>)
 8002a9a:	400b      	ands	r3, r1
 8002a9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e000      	b.n	8002abc <HAL_I2C_Master_Transmit+0x1f4>
  }
  else
  {
    return HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
  }
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	fe00e800 	.word	0xfe00e800

08002ac8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	817b      	strh	r3, [r7, #10]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	f040 80e7 	bne.w	8002cbc <HAL_I2C_Master_Receive+0x1f4>
  {    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_I2C_Master_Receive+0x34>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e0e0      	b.n	8002cbe <HAL_I2C_Master_Receive+0x1f6>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b04:	f7ff fbb6 	bl	8002274 <HAL_GetTick>
 8002b08:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	2319      	movs	r3, #25
 8002b10:	2201      	movs	r2, #1
 8002b12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f9da 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e0cb      	b.n	8002cbe <HAL_I2C_Master_Receive+0x1f6>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2222      	movs	r2, #34	; 0x22
 8002b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2210      	movs	r2, #16
 8002b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	893a      	ldrh	r2, [r7, #8]
 8002b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2bff      	cmp	r3, #255	; 0xff
 8002b56:	d90f      	bls.n	8002b78 <HAL_I2C_Master_Receive+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	22ff      	movs	r2, #255	; 0xff
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	8979      	ldrh	r1, [r7, #10]
 8002b66:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fb1f 	bl	80031b4 <I2C_TransferConfig>
 8002b76:	e072      	b.n	8002c5e <HAL_I2C_Master_Receive+0x196>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	8979      	ldrh	r1, [r7, #10]
 8002b8a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fb0d 	bl	80031b4 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8002b9a:	e060      	b.n	8002c5e <HAL_I2C_Master_Receive+0x196>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	6a39      	ldr	r1, [r7, #32]
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 fa4b 	bl	800303c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_I2C_Master_Receive+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d101      	bne.n	8002bb8 <HAL_I2C_Master_Receive+0xf0>
        {
          return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e082      	b.n	8002cbe <HAL_I2C_Master_Receive+0x1f6>
        }
        else
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e080      	b.n	8002cbe <HAL_I2C_Master_Receive+0x1f6>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	1c59      	adds	r1, r3, #1
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	6251      	str	r1, [r2, #36]	; 0x24
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d135      	bne.n	8002c5e <HAL_I2C_Master_Receive+0x196>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d030      	beq.n	8002c5e <HAL_I2C_Master_Receive+0x196>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2200      	movs	r2, #0
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f962 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Master_Receive+0x14e>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e053      	b.n	8002cbe <HAL_I2C_Master_Receive+0x1f6>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2bff      	cmp	r3, #255	; 0xff
 8002c1e:	d90e      	bls.n	8002c3e <HAL_I2C_Master_Receive+0x176>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	22ff      	movs	r2, #255	; 0xff
 8002c24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	8979      	ldrh	r1, [r7, #10]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fabc 	bl	80031b4 <I2C_TransferConfig>
 8002c3c:	e00f      	b.n	8002c5e <HAL_I2C_Master_Receive+0x196>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	8979      	ldrh	r1, [r7, #10]
 8002c50:	2300      	movs	r3, #0
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 faab 	bl	80031b4 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d199      	bne.n	8002b9c <HAL_I2C_Master_Receive+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	6a39      	ldr	r1, [r7, #32]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f9a9 	bl	8002fc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d007      	beq.n	8002c88 <HAL_I2C_Master_Receive+0x1c0>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d101      	bne.n	8002c84 <HAL_I2C_Master_Receive+0x1bc>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e01c      	b.n	8002cbe <HAL_I2C_Master_Receive+0x1f6>
      }
      else
      {
        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e01a      	b.n	8002cbe <HAL_I2C_Master_Receive+0x1f6>
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_I2C_Master_Receive+0x200>)
 8002c9c:	400b      	ands	r3, r1
 8002c9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e000      	b.n	8002cbe <HAL_I2C_Master_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 8002cbc:	2302      	movs	r3, #2
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	fe00e800 	.word	0xfe00e800

08002ccc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]

  __IO uint32_t I2C_Trials = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	f040 80c6 	bne.w	8002e7e <HAL_I2C_IsDeviceReady+0x1b2>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d00:	d101      	bne.n	8002d06 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
 8002d04:	e0bc      	b.n	8002e80 <HAL_I2C_IsDeviceReady+0x1b4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_I2C_IsDeviceReady+0x48>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e0b5      	b.n	8002e80 <HAL_I2C_IsDeviceReady+0x1b4>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode,DevAddress);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d107      	bne.n	8002d46 <HAL_I2C_IsDeviceReady+0x7a>
 8002d36:	897b      	ldrh	r3, [r7, #10]
 8002d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d44:	e004      	b.n	8002d50 <HAL_I2C_IsDeviceReady+0x84>
 8002d46:	897b      	ldrh	r3, [r7, #10]
 8002d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002d50:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002d52:	f7ff fa8f 	bl	8002274 <HAL_GetTick>
 8002d56:	6178      	str	r0, [r7, #20]
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8002d58:	e018      	b.n	8002d8c <HAL_I2C_IsDeviceReady+0xc0>
      {
      	if(Timeout != HAL_MAX_DELAY)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d60:	d014      	beq.n	8002d8c <HAL_I2C_IsDeviceReady+0xc0>
      	{
          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <HAL_I2C_IsDeviceReady+0xac>
 8002d68:	f7ff fa84 	bl	8002274 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d909      	bls.n	8002d8c <HAL_I2C_IsDeviceReady+0xc0>
          {
            /* Device is ready */
            hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e079      	b.n	8002e80 <HAL_I2C_IsDeviceReady+0x1b4>
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d00c      	beq.n	8002db4 <HAL_I2C_IsDeviceReady+0xe8>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d005      	beq.n	8002db4 <HAL_I2C_IsDeviceReady+0xe8>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2ba0      	cmp	r3, #160	; 0xa0
 8002db2:	d1d2      	bne.n	8002d5a <HAL_I2C_IsDeviceReady+0x8e>
          }
        } 
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b10      	cmp	r3, #16
 8002dc0:	d01a      	beq.n	8002df8 <HAL_I2C_IsDeviceReady+0x12c>
      {
        /* Wait until STOPF flag is reset */ 
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2120      	movs	r1, #32
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f87f 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_I2C_IsDeviceReady+0x110>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e051      	b.n	8002e80 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2220      	movs	r2, #32
 8002de2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e043      	b.n	8002e80 <HAL_I2C_IsDeviceReady+0x1b4>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2120      	movs	r1, #32
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f864 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_IsDeviceReady+0x146>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e036      	b.n	8002e80 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2210      	movs	r2, #16
 8002e18:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials++ == Trials)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	613a      	str	r2, [r7, #16]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d118      	bne.n	8002e60 <HAL_I2C_IsDeviceReady+0x194>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	6852      	ldr	r2, [r2, #4]
 8002e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e3c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */ 
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2200      	movs	r2, #0
 8002e46:	2120      	movs	r1, #32
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f841 	bl	8002ed0 <I2C_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_I2C_IsDeviceReady+0x18c>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e013      	b.n	8002e80 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	61da      	str	r2, [r3, #28]
      }
    }while(I2C_Trials < Trials);
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	f4ff af60 	bcc.w	8002d2a <HAL_I2C_IsDeviceReady+0x5e>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e000      	b.n	8002e80 <HAL_I2C_IsDeviceReady+0x1b4>
  }
  else
  {
    return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
  }
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d103      	bne.n	8002ea6 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d007      	beq.n	8002ec4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	6992      	ldr	r2, [r2, #24]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	619a      	str	r2, [r3, #24]
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee0:	e01c      	b.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee8:	d018      	beq.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d007      	beq.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ef0:	f7ff f9c0 	bl	8002274 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	1ad2      	subs	r2, r2, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d90d      	bls.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e00f      	b.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x6c>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	401a      	ands	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d0d3      	beq.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f50:	e02c      	b.n	8002fac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f8ce 	bl	80030f8 <I2C_IsAcknowledgeFailed>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e02a      	b.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f6c:	d01e      	beq.n	8002fac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f74:	f7ff f97e 	bl	8002274 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	1ad2      	subs	r2, r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d913      	bls.n	8002fac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e007      	b.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d1cb      	bne.n	8002f52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fd0:	e028      	b.n	8003024 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f88e 	bl	80030f8 <I2C_IsAcknowledgeFailed>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e026      	b.n	8003034 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fec:	f7ff f942 	bl	8002274 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	1ad2      	subs	r2, r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d913      	bls.n	8003024 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e007      	b.n	8003034 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b20      	cmp	r3, #32
 8003030:	d1cf      	bne.n	8002fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003048:	e048      	b.n	80030dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f852 	bl	80030f8 <I2C_IsAcknowledgeFailed>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e046      	b.n	80030ec <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b20      	cmp	r3, #32
 800306a:	d11c      	bne.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2220      	movs	r2, #32
 8003072:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 8003080:	400b      	ands	r3, r1
 8003082:	6053      	str	r3, [r2, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e022      	b.n	80030ec <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 80030ac:	f7ff f8e2 	bl	8002274 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	1ad2      	subs	r2, r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d90f      	bls.n	80030dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e007      	b.n	80030ec <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d1af      	bne.n	800304a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	fe00e800 	.word	0xfe00e800

080030f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b10      	cmp	r3, #16
 8003110:	d148      	bne.n	80031a4 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003112:	e01c      	b.n	800314e <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800311a:	d018      	beq.n	800314e <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <I2C_IsAcknowledgeFailed+0x3a>
 8003122:	f7ff f8a7 	bl	8002274 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	1ad2      	subs	r2, r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d90d      	bls.n	800314e <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e02b      	b.n	80031a6 <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b20      	cmp	r3, #32
 800315a:	d1db      	bne.n	8003114 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2210      	movs	r2, #16
 8003162:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2220      	movs	r2, #32
 800316a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7ff fe8b 	bl	8002e88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <I2C_IsAcknowledgeFailed+0xb8>)
 800317e:	400b      	ands	r3, r1
 8003180:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2204      	movs	r2, #4
 8003186:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	fe00e800 	.word	0xfe00e800

080031b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	817b      	strh	r3, [r7, #10]
 80031c2:	4613      	mov	r3, r2
 80031c4:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <I2C_TransferConfig+0x58>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 80031da:	897b      	ldrh	r3, [r7, #10]
 80031dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031e0:	7a7b      	ldrb	r3, [r7, #9]
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	605a      	str	r2, [r3, #4]
}
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	fc009800 	.word	0xfc009800

08003210 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8003214:	4a05      	ldr	r2, [pc, #20]	; (800322c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003216:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321e:	6013      	str	r3, [r2, #0]
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40007000 	.word	0x40007000

08003230 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <HAL_PWREx_GetVoltageRange+0x18>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40007000 	.word	0x40007000

0800324c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800325e:	d12f      	bne.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003260:	4b22      	ldr	r3, [pc, #136]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800326c:	d037      	beq.n	80032de <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800326e:	4a1f      	ldr	r2, [pc, #124]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003270:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800327c:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800327e:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	0c9b      	lsrs	r3, r3, #18
 800328a:	2232      	movs	r2, #50	; 0x32
 800328c:	fb02 f303 	mul.w	r3, r2, r3
 8003290:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8003292:	e002      	b.n	800329a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3b01      	subs	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d006      	beq.n	80032ae <HAL_PWREx_ControlVoltageScaling+0x62>
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ac:	d0f2      	beq.n	8003294 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ae:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ba:	d110      	bne.n	80032de <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e00f      	b.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032cc:	d007      	beq.n	80032de <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032ce:	4a07      	ldr	r2, [pc, #28]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032dc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}  
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40007000 	.word	0x40007000
 80032f0:	20000040 	.word	0x20000040
 80032f4:	431bde83 	.word	0x431bde83

080032f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08c      	sub	sp, #48	; 0x30
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80db 	beq.w	80034c8 <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8003312:	4ba2      	ldr	r3, [pc, #648]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b00      	cmp	r3, #0
 800331c:	f040 8084 	bne.w	8003428 <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003320:	4b9e      	ldr	r3, [pc, #632]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_OscConfig+0x40>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e39b      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1a      	ldr	r2, [r3, #32]
 800333c:	4b97      	ldr	r3, [pc, #604]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <HAL_RCC_OscConfig+0x5a>
 8003348:	4b94      	ldr	r3, [pc, #592]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003350:	e005      	b.n	800335e <HAL_RCC_OscConfig+0x66>
 8003352:	4b92      	ldr	r3, [pc, #584]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800335e:	429a      	cmp	r2, r3
 8003360:	d923      	bls.n	80033aa <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fdf4 	bl	8003f54 <RCC_SetFlashLatencyFromMSIRange>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e37c      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003376:	4a89      	ldr	r2, [pc, #548]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003378:	4b88      	ldr	r3, [pc, #544]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f043 0308 	orr.w	r3, r3, #8
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4986      	ldr	r1, [pc, #536]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003384:	4b85      	ldr	r3, [pc, #532]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4313      	orrs	r3, r2
 8003392:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003394:	4981      	ldr	r1, [pc, #516]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003396:	4b81      	ldr	r3, [pc, #516]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	021b      	lsls	r3, r3, #8
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
 80033a8:	e022      	b.n	80033f0 <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033aa:	4a7c      	ldr	r2, [pc, #496]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 80033ac:	4b7b      	ldr	r3, [pc, #492]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f043 0308 	orr.w	r3, r3, #8
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4979      	ldr	r1, [pc, #484]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 80033b8:	4b78      	ldr	r3, [pc, #480]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c8:	4974      	ldr	r1, [pc, #464]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 80033ca:	4b74      	ldr	r3, [pc, #464]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fdb7 	bl	8003f54 <RCC_SetFlashLatencyFromMSIRange>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e33f      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80033f0:	f000 fc66 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 80033f4:	4601      	mov	r1, r0
 80033f6:	4b69      	ldr	r3, [pc, #420]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033fe:	23f0      	movs	r3, #240	; 0xf0
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
 8003414:	4a62      	ldr	r2, [pc, #392]	; (80035a0 <HAL_RCC_OscConfig+0x2a8>)
 8003416:	5cd3      	ldrb	r3, [r2, r3]
 8003418:	fa21 f303 	lsr.w	r3, r1, r3
 800341c:	4a61      	ldr	r2, [pc, #388]	; (80035a4 <HAL_RCC_OscConfig+0x2ac>)
 800341e:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8003420:	2000      	movs	r0, #0
 8003422:	f7fe fefd 	bl	8002220 <HAL_InitTick>
 8003426:	e04f      	b.n	80034c8 <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d032      	beq.n	8003496 <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003430:	4a5a      	ldr	r2, [pc, #360]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003432:	4b5a      	ldr	r3, [pc, #360]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800343c:	f7fe ff1a 	bl	8002274 <HAL_GetTick>
 8003440:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003444:	f7fe ff16 	bl	8002274 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e30c      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8003456:	4b51      	ldr	r3, [pc, #324]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003462:	4a4e      	ldr	r2, [pc, #312]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003464:	4b4d      	ldr	r3, [pc, #308]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f043 0308 	orr.w	r3, r3, #8
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	494b      	ldr	r1, [pc, #300]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003470:	4b4a      	ldr	r3, [pc, #296]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003480:	4946      	ldr	r1, [pc, #280]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003482:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
 8003494:	e018      	b.n	80034c8 <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003496:	4a41      	ldr	r2, [pc, #260]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003498:	4b40      	ldr	r3, [pc, #256]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034a2:	f7fe fee7 	bl	8002274 <HAL_GetTick>
 80034a6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034aa:	f7fe fee3 	bl	8002274 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e2d9      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80034bc:	4b37      	ldr	r3, [pc, #220]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f0      	bne.n	80034aa <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d07a      	beq.n	80035ca <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80034d4:	4b31      	ldr	r3, [pc, #196]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d00b      	beq.n	80034f8 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034e0:	4b2e      	ldr	r3, [pc, #184]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80034e8:	2b0c      	cmp	r3, #12
 80034ea:	d111      	bne.n	8003510 <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034ec:	4b2b      	ldr	r3, [pc, #172]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d10b      	bne.n	8003510 <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	4b28      	ldr	r3, [pc, #160]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d061      	beq.n	80035c8 <HAL_RCC_OscConfig+0x2d0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d15d      	bne.n	80035c8 <HAL_RCC_OscConfig+0x2d0>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e2af      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d106      	bne.n	8003528 <HAL_RCC_OscConfig+0x230>
 800351a:	4a20      	ldr	r2, [pc, #128]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e01d      	b.n	8003564 <HAL_RCC_OscConfig+0x26c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0x254>
 8003532:	4a1a      	ldr	r2, [pc, #104]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4a17      	ldr	r2, [pc, #92]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003540:	4b16      	ldr	r3, [pc, #88]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e00b      	b.n	8003564 <HAL_RCC_OscConfig+0x26c>
 800354c:	4a13      	ldr	r2, [pc, #76]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 800354e:	4b13      	ldr	r3, [pc, #76]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	4a10      	ldr	r2, [pc, #64]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <HAL_RCC_OscConfig+0x29c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe fe82 	bl	8002274 <HAL_GetTick>
 8003570:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003574:	f7fe fe7e 	bl	8002274 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	; 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e274      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_RCC_OscConfig+0x2a4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x27c>
 8003592:	e01a      	b.n	80035ca <HAL_RCC_OscConfig+0x2d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fe fe6e 	bl	8002274 <HAL_GetTick>
 8003598:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800359a:	e00e      	b.n	80035ba <HAL_RCC_OscConfig+0x2c2>
 800359c:	40021000 	.word	0x40021000
 80035a0:	080072e8 	.word	0x080072e8
 80035a4:	20000040 	.word	0x20000040
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe fe64 	bl	8002274 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e25a      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80035ba:	4bb0      	ldr	r3, [pc, #704]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x2b0>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d07f      	beq.n	80036d6 <HAL_RCC_OscConfig+0x3de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80035d6:	4ba9      	ldr	r3, [pc, #676]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d00b      	beq.n	80035fa <HAL_RCC_OscConfig+0x302>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035e2:	4ba6      	ldr	r3, [pc, #664]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80035ea:	2b0c      	cmp	r3, #12
 80035ec:	d127      	bne.n	800363e <HAL_RCC_OscConfig+0x346>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035ee:	4ba3      	ldr	r3, [pc, #652]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d121      	bne.n	800363e <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035fa:	4ba0      	ldr	r3, [pc, #640]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_RCC_OscConfig+0x31a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e22e      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003612:	489a      	ldr	r0, [pc, #616]	; (800387c <HAL_RCC_OscConfig+0x584>)
 8003614:	4b99      	ldr	r3, [pc, #612]	; (800387c <HAL_RCC_OscConfig+0x584>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6919      	ldr	r1, [r3, #16]
 8003620:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8003624:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	61bb      	str	r3, [r7, #24]
  return(result);
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	fab3 f383 	clz	r3, r3
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	4313      	orrs	r3, r2
 800363a:	6043      	str	r3, [r0, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363c:	e04b      	b.n	80036d6 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d02e      	beq.n	80036a4 <HAL_RCC_OscConfig+0x3ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003646:	4a8d      	ldr	r2, [pc, #564]	; (800387c <HAL_RCC_OscConfig+0x584>)
 8003648:	4b8c      	ldr	r3, [pc, #560]	; (800387c <HAL_RCC_OscConfig+0x584>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7fe fe0f 	bl	8002274 <HAL_GetTick>
 8003656:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365a:	f7fe fe0b 	bl	8002274 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e201      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800366c:	4b83      	ldr	r3, [pc, #524]	; (800387c <HAL_RCC_OscConfig+0x584>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4880      	ldr	r0, [pc, #512]	; (800387c <HAL_RCC_OscConfig+0x584>)
 800367a:	4b80      	ldr	r3, [pc, #512]	; (800387c <HAL_RCC_OscConfig+0x584>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6919      	ldr	r1, [r3, #16]
 8003686:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 800368a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	613b      	str	r3, [r7, #16]
  return(result);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	4313      	orrs	r3, r2
 80036a0:	6043      	str	r3, [r0, #4]
 80036a2:	e018      	b.n	80036d6 <HAL_RCC_OscConfig+0x3de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a4:	4a75      	ldr	r2, [pc, #468]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80036a6:	4b75      	ldr	r3, [pc, #468]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fe fde0 	bl	8002274 <HAL_GetTick>
 80036b4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b8:	f7fe fddc 	bl	8002274 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1d2      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80036ca:	4b6c      	ldr	r3, [pc, #432]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d03c      	beq.n	800375c <HAL_RCC_OscConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d01c      	beq.n	8003724 <HAL_RCC_OscConfig+0x42c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ea:	4a64      	ldr	r2, [pc, #400]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80036ec:	4b63      	ldr	r3, [pc, #396]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80036ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fe fdbb 	bl	8002274 <HAL_GetTick>
 80036fe:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003702:	f7fe fdb7 	bl	8002274 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1ad      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8003714:	4b59      	ldr	r3, [pc, #356]	; (800387c <HAL_RCC_OscConfig+0x584>)
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0ef      	beq.n	8003702 <HAL_RCC_OscConfig+0x40a>
 8003722:	e01b      	b.n	800375c <HAL_RCC_OscConfig+0x464>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003724:	4a55      	ldr	r2, [pc, #340]	; (800387c <HAL_RCC_OscConfig+0x584>)
 8003726:	4b55      	ldr	r3, [pc, #340]	; (800387c <HAL_RCC_OscConfig+0x584>)
 8003728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7fe fd9e 	bl	8002274 <HAL_GetTick>
 8003738:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373c:	f7fe fd9a 	bl	8002274 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e190      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800374e:	4b4b      	ldr	r3, [pc, #300]	; (800387c <HAL_RCC_OscConfig+0x584>)
 8003750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1ef      	bne.n	800373c <HAL_RCC_OscConfig+0x444>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80a9 	beq.w	80038bc <HAL_RCC_OscConfig+0x5c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003770:	4b42      	ldr	r3, [pc, #264]	; (800387c <HAL_RCC_OscConfig+0x584>)
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10e      	bne.n	800379a <HAL_RCC_OscConfig+0x4a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377c:	4a3f      	ldr	r2, [pc, #252]	; (800387c <HAL_RCC_OscConfig+0x584>)
 800377e:	4b3f      	ldr	r3, [pc, #252]	; (800387c <HAL_RCC_OscConfig+0x584>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003786:	6593      	str	r3, [r2, #88]	; 0x58
 8003788:	4b3c      	ldr	r3, [pc, #240]	; (800387c <HAL_RCC_OscConfig+0x584>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003794:	2301      	movs	r3, #1
 8003796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379a:	4b39      	ldr	r3, [pc, #228]	; (8003880 <HAL_RCC_OscConfig+0x588>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d118      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4e0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a6:	4a36      	ldr	r2, [pc, #216]	; (8003880 <HAL_RCC_OscConfig+0x588>)
 80037a8:	4b35      	ldr	r3, [pc, #212]	; (8003880 <HAL_RCC_OscConfig+0x588>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b2:	f7fe fd5f 	bl	8002274 <HAL_GetTick>
 80037b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fe fd5b 	bl	8002274 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e151      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037cc:	4b2c      	ldr	r3, [pc, #176]	; (8003880 <HAL_RCC_OscConfig+0x588>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x4c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d108      	bne.n	80037f2 <HAL_RCC_OscConfig+0x4fa>
 80037e0:	4a26      	ldr	r2, [pc, #152]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80037e2:	4b26      	ldr	r3, [pc, #152]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f0:	e024      	b.n	800383c <HAL_RCC_OscConfig+0x544>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b05      	cmp	r3, #5
 80037f8:	d110      	bne.n	800381c <HAL_RCC_OscConfig+0x524>
 80037fa:	4a20      	ldr	r2, [pc, #128]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80037fc:	4b1f      	ldr	r3, [pc, #124]	; (800387c <HAL_RCC_OscConfig+0x584>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800380a:	4a1c      	ldr	r2, [pc, #112]	; (800387c <HAL_RCC_OscConfig+0x584>)
 800380c:	4b1b      	ldr	r3, [pc, #108]	; (800387c <HAL_RCC_OscConfig+0x584>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800381a:	e00f      	b.n	800383c <HAL_RCC_OscConfig+0x544>
 800381c:	4a17      	ldr	r2, [pc, #92]	; (800387c <HAL_RCC_OscConfig+0x584>)
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <HAL_RCC_OscConfig+0x584>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800382c:	4a13      	ldr	r2, [pc, #76]	; (800387c <HAL_RCC_OscConfig+0x584>)
 800382e:	4b13      	ldr	r3, [pc, #76]	; (800387c <HAL_RCC_OscConfig+0x584>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d016      	beq.n	8003872 <HAL_RCC_OscConfig+0x57a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe fd16 	bl	8002274 <HAL_GetTick>
 8003848:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x56a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fe fd12 	bl	8002274 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x56a>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e106      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_RCC_OscConfig+0x584>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ed      	beq.n	800384c <HAL_RCC_OscConfig+0x554>
 8003870:	e01a      	b.n	80038a8 <HAL_RCC_OscConfig+0x5b0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fe fcff 	bl	8002274 <HAL_GetTick>
 8003876:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8003878:	e00f      	b.n	800389a <HAL_RCC_OscConfig+0x5a2>
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000
 8003880:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003884:	f7fe fcf6 	bl	8002274 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x5a2>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e0ea      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800389a:	4b77      	ldr	r3, [pc, #476]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ed      	bne.n	8003884 <HAL_RCC_OscConfig+0x58c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d105      	bne.n	80038bc <HAL_RCC_OscConfig+0x5c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b0:	4a71      	ldr	r2, [pc, #452]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 80038b2:	4b71      	ldr	r3, [pc, #452]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d03c      	beq.n	8003942 <HAL_RCC_OscConfig+0x64a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01c      	beq.n	800390a <HAL_RCC_OscConfig+0x612>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038d0:	4a69      	ldr	r2, [pc, #420]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 80038d2:	4b69      	ldr	r3, [pc, #420]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 80038d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fe fcc8 	bl	8002274 <HAL_GetTick>
 80038e4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x602>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038e8:	f7fe fcc4 	bl	8002274 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x602>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e0ba      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80038fa:	4b5f      	ldr	r3, [pc, #380]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 80038fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0ef      	beq.n	80038e8 <HAL_RCC_OscConfig+0x5f0>
 8003908:	e01b      	b.n	8003942 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800390a:	4a5b      	ldr	r2, [pc, #364]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 800390c:	4b5a      	ldr	r3, [pc, #360]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 800390e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003912:	f023 0301 	bic.w	r3, r3, #1
 8003916:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391a:	f7fe fcab 	bl	8002274 <HAL_GetTick>
 800391e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x63c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003922:	f7fe fca7 	bl	8002274 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e09d      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8003934:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 8003936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1ef      	bne.n	8003922 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8091 	beq.w	8003a6e <HAL_RCC_OscConfig+0x776>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800394c:	4b4a      	ldr	r3, [pc, #296]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b0c      	cmp	r3, #12
 8003956:	f000 8088 	beq.w	8003a6a <HAL_RCC_OscConfig+0x772>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	2b02      	cmp	r3, #2
 8003960:	d155      	bne.n	8003a0e <HAL_RCC_OscConfig+0x716>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003962:	4a45      	ldr	r2, [pc, #276]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 8003964:	4b44      	ldr	r3, [pc, #272]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800396c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396e:	f7fe fc81 	bl	8002274 <HAL_GetTick>
 8003972:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003976:	f7fe fc7d 	bl	8002274 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e073      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003988:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f0      	bne.n	8003976 <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003994:	4938      	ldr	r1, [pc, #224]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	3b01      	subs	r3, #1
 800399c:	011a      	lsls	r2, r3, #4
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	3b01      	subs	r3, #1
 80039b4:	055b      	lsls	r3, r3, #21
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	085b      	lsrs	r3, r3, #1
 80039be:	3b01      	subs	r3, #1
 80039c0:	065b      	lsls	r3, r3, #25
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	06db      	lsls	r3, r3, #27
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ce:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 80039d0:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039da:	4a27      	ldr	r2, [pc, #156]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 80039dc:	4b26      	ldr	r3, [pc, #152]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7fe fc45 	bl	8002274 <HAL_GetTick>
 80039ea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x708>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ee:	f7fe fc41 	bl	8002274 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x708>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e037      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003a00:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x6f6>
 8003a0c:	e02f      	b.n	8003a6e <HAL_RCC_OscConfig+0x776>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0e:	4a1a      	ldr	r2, [pc, #104]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a18:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8003a1a:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <HAL_RCC_OscConfig+0x73a>
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a26:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 8003a28:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f023 0303 	bic.w	r3, r3, #3
 8003a30:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003a32:	4a11      	ldr	r2, [pc, #68]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a40:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fe fc17 	bl	8002274 <HAL_GetTick>
 8003a46:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x764>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4a:	f7fe fc13 	bl	8002274 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x764>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e009      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003a5c:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_RCC_OscConfig+0x780>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f0      	bne.n	8003a4a <HAL_RCC_OscConfig+0x752>
 8003a68:	e001      	b.n	8003a6e <HAL_RCC_OscConfig+0x776>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_RCC_OscConfig+0x778>
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3730      	adds	r7, #48	; 0x30
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000

08003a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003a8a:	4b89      	ldr	r3, [pc, #548]	; (8003cb0 <HAL_RCC_ClockConfig+0x234>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0207 	and.w	r2, r3, #7
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d210      	bcs.n	8003aba <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a98:	4985      	ldr	r1, [pc, #532]	; (8003cb0 <HAL_RCC_ClockConfig+0x234>)
 8003a9a:	4b85      	ldr	r3, [pc, #532]	; (8003cb0 <HAL_RCC_ClockConfig+0x234>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 0207 	bic.w	r2, r3, #7
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003aa8:	4b81      	ldr	r3, [pc, #516]	; (8003cb0 <HAL_RCC_ClockConfig+0x234>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0207 	and.w	r2, r3, #7
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e0f6      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac6:	497b      	ldr	r1, [pc, #492]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003ac8:	4b7a      	ldr	r3, [pc, #488]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 808e 	beq.w	8003c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d107      	bne.n	8003afe <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003aee:	4b71      	ldr	r3, [pc, #452]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d121      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e0d4      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d107      	bne.n	8003b16 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003b06:	4b6b      	ldr	r3, [pc, #428]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d115      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e0c8      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8003b1e:	4b65      	ldr	r3, [pc, #404]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e0bc      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003b2e:	4b61      	ldr	r3, [pc, #388]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e0b4      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b3e:	495d      	ldr	r1, [pc, #372]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003b40:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f023 0203 	bic.w	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b50:	f7fe fb90 	bl	8002274 <HAL_GetTick>
 8003b54:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d112      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b60:	f7fe fb88 	bl	8002274 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e098      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8003b76:	4b4f      	ldr	r3, [pc, #316]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d1ee      	bne.n	8003b60 <HAL_RCC_ClockConfig+0xe4>
 8003b82:	e03e      	b.n	8003c02 <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d112      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8e:	f7fe fb71 	bl	8002274 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e081      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ba4:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	d1ee      	bne.n	8003b8e <HAL_RCC_ClockConfig+0x112>
 8003bb0:	e027      	b.n	8003c02 <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11d      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bbc:	f7fe fb5a 	bl	8002274 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e06a      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8003bd2:	4b38      	ldr	r3, [pc, #224]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1ee      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x140>
 8003bde:	e010      	b.n	8003c02 <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be0:	f7fe fb48 	bl	8002274 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e058      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8003bf6:	4b2f      	ldr	r3, [pc, #188]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d1ee      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003c02:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCC_ClockConfig+0x234>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0207 	and.w	r2, r3, #7
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d910      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c10:	4927      	ldr	r1, [pc, #156]	; (8003cb0 <HAL_RCC_ClockConfig+0x234>)
 8003c12:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <HAL_RCC_ClockConfig+0x234>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 0207 	bic.w	r2, r3, #7
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c20:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <HAL_RCC_ClockConfig+0x234>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0207 	and.w	r2, r3, #7
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e03a      	b.n	8003ca8 <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c3e:	491d      	ldr	r1, [pc, #116]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c5c:	4915      	ldr	r1, [pc, #84]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003c5e:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003c70:	f000 f826 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c74:	4601      	mov	r1, r0
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <HAL_RCC_ClockConfig+0x238>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c7e:	23f0      	movs	r3, #240	; 0xf0
 8003c80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	fa93 f3a3 	rbit	r3, r3
 8003c88:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	fab3 f383 	clz	r3, r3
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
 8003c94:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <HAL_RCC_ClockConfig+0x23c>)
 8003c96:	5cd3      	ldrb	r3, [r2, r3]
 8003c98:	fa21 f303 	lsr.w	r3, r1, r3
 8003c9c:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <HAL_RCC_ClockConfig+0x240>)
 8003c9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7fe fabd 	bl	8002220 <HAL_InitTick>

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40022000 	.word	0x40022000
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	080072e8 	.word	0x080072e8
 8003cbc:	20000040 	.word	0x20000040

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b095      	sub	sp, #84	; 0x54
 8003cc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cca:	2300      	movs	r3, #0
 8003ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cce:	2300      	movs	r3, #0
 8003cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8003cde:	4b71      	ldr	r3, [pc, #452]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8003cea:	4b6e      	ldr	r3, [pc, #440]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8003cf2:	2b0c      	cmp	r3, #12
 8003cf4:	d13c      	bne.n	8003d70 <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8003cf6:	4b6b      	ldr	r3, [pc, #428]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d136      	bne.n	8003d70 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8003d02:	4b68      	ldr	r3, [pc, #416]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d112      	bne.n	8003d34 <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8003d0e:	4b65      	ldr	r3, [pc, #404]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d14:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003d18:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d32:	e00f      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8003d34:	4b5b      	ldr	r3, [pc, #364]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d3c:	23f0      	movs	r3, #240	; 0xf0
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	fab3 f383 	clz	r3, r3
 8003d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d52:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d54:	4a54      	ldr	r2, [pc, #336]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8003d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5c:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8003d5e:	4b51      	ldr	r3, [pc, #324]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d113      	bne.n	8003d92 <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6c:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8003d6e:	e010      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d70:	4b4c      	ldr	r3, [pc, #304]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 030c 	and.w	r3, r3, #12
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d102      	bne.n	8003d82 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d7c:	4b4b      	ldr	r3, [pc, #300]	; (8003eac <HAL_RCC_GetSysClockFreq+0x1ec>)
 8003d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d80:	e007      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d82:	4b48      	ldr	r3, [pc, #288]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d8e:	4b48      	ldr	r3, [pc, #288]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003d90:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d92:	4b44      	ldr	r3, [pc, #272]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b0c      	cmp	r3, #12
 8003d9c:	d17b      	bne.n	8003e96 <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d9e:	4b41      	ldr	r3, [pc, #260]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8003da8:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003db0:	2370      	movs	r3, #112	; 0x70
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	fa93 f3a3 	rbit	r3, r3
 8003dba:	623b      	str	r3, [r7, #32]
  return(result);
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 8003dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d002      	beq.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x116>
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d018      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x146>
 8003dd4:	e02f      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8003dd6:	4a35      	ldr	r2, [pc, #212]	; (8003eac <HAL_RCC_GetSysClockFreq+0x1ec>)
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	4a31      	ldr	r2, [pc, #196]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003de0:	68d2      	ldr	r2, [r2, #12]
 8003de2:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8003de6:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003dea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	fa92 f2a2 	rbit	r2, r2
 8003df2:	61ba      	str	r2, [r7, #24]
  return(result);
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	fab2 f282 	clz	r2, r2
 8003dfa:	fa21 f202 	lsr.w	r2, r1, r2
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e04:	e02f      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8003e06:	4a2a      	ldr	r2, [pc, #168]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003e10:	68d2      	ldr	r2, [r2, #12]
 8003e12:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8003e16:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003e1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	fa92 f2a2 	rbit	r2, r2
 8003e22:	613a      	str	r2, [r7, #16]
  return(result);
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	fab2 f282 	clz	r2, r2
 8003e2a:	fa21 f202 	lsr.w	r2, r1, r2
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e34:	e017      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8003e36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003e40:	68d2      	ldr	r2, [r2, #12]
 8003e42:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8003e46:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003e4a:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	fa92 f2a2 	rbit	r2, r2
 8003e52:	60ba      	str	r2, [r7, #8]
  return(result);
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	fab2 f282 	clz	r2, r2
 8003e5a:	fa21 f202 	lsr.w	r2, r1, r2
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e64:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e6e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003e72:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	fa93 f3a3 	rbit	r3, r3
 8003e7a:	603b      	str	r3, [r7, #0]
  return(result);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	fab3 f383 	clz	r3, r3
 8003e82:	fa22 f303 	lsr.w	r3, r2, r3
 8003e86:	3301      	adds	r3, #1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 8003e8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 8003e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3754      	adds	r7, #84	; 0x54
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	08007300 	.word	0x08007300
 8003eac:	00f42400 	.word	0x00f42400
 8003eb0:	007a1200 	.word	0x007a1200

08003eb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	20000040 	.word	0x20000040

08003ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003ed2:	f7ff ffef 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003ed6:	4601      	mov	r1, r0
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ee0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003ee4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	603b      	str	r3, [r7, #0]
  return(result);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	fab3 f383 	clz	r3, r3
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef8:	4a04      	ldr	r2, [pc, #16]	; (8003f0c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003efa:	5cd3      	ldrb	r3, [r2, r3]
 8003efc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	080072f8 	.word	0x080072f8

08003f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003f16:	f7ff ffcd 	bl	8003eb4 <HAL_RCC_GetHCLKFreq>
 8003f1a:	4601      	mov	r1, r0
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003f24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f28:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	fa93 f3a3 	rbit	r3, r3
 8003f30:	603b      	str	r3, [r7, #0]
  return(result);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f3e:	5cd3      	ldrb	r3, [r2, r3]
 8003f40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	080072f8 	.word	0x080072f8

08003f54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f64:	4b2a      	ldr	r3, [pc, #168]	; (8004010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f70:	f7ff f95e 	bl	8003230 <HAL_PWREx_GetVoltageRange>
 8003f74:	6178      	str	r0, [r7, #20]
 8003f76:	e014      	b.n	8003fa2 <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f78:	4a25      	ldr	r2, [pc, #148]	; (8004010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f7a:	4b25      	ldr	r3, [pc, #148]	; (8004010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f82:	6593      	str	r3, [r2, #88]	; 0x58
 8003f84:	4b22      	ldr	r3, [pc, #136]	; (8004010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f90:	f7ff f94e 	bl	8003230 <HAL_PWREx_GetVoltageRange>
 8003f94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f96:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa8:	d10b      	bne.n	8003fc2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d919      	bls.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2ba0      	cmp	r3, #160	; 0xa0
 8003fb4:	d902      	bls.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	e013      	b.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	e010      	b.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b80      	cmp	r3, #128	; 0x80
 8003fc6:	d902      	bls.n	8003fce <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fc8:	2303      	movs	r3, #3
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e00a      	b.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b80      	cmp	r3, #128	; 0x80
 8003fd2:	d102      	bne.n	8003fda <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	e004      	b.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b70      	cmp	r3, #112	; 0x70
 8003fde:	d101      	bne.n	8003fe4 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8003fe4:	490b      	ldr	r1, [pc, #44]	; (8004014 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 0207 	bic.w	r2, r3, #7
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003ff4:	4b07      	ldr	r3, [pc, #28]	; (8004014 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0207 	and.w	r2, r3, #7
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d001      	beq.n	8004006 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40021000 	.word	0x40021000
 8004014:	40022000 	.word	0x40022000

08004018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004028:	2300      	movs	r3, #0
 800402a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800402c:	2300      	movs	r3, #0
 800402e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004038:	2b00      	cmp	r3, #0
 800403a:	d02f      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004040:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004044:	d005      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8004046:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800404a:	d015      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004050:	e00f      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004052:	4a5a      	ldr	r2, [pc, #360]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004054:	4b59      	ldr	r3, [pc, #356]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800405e:	e00c      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x62>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fa2c 	bl	80044c4 <RCCEx_PLLSAI1_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004070:	e003      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x62>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	74fb      	strb	r3, [r7, #19]
      break;
 8004076:	e000      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x62>
      break;
 8004078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800407a:	7cfb      	ldrb	r3, [r7, #19]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10b      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004080:	494e      	ldr	r1, [pc, #312]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004082:	4b4e      	ldr	r3, [pc, #312]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004088:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004096:	e001      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8098 	beq.w	80041da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040aa:	2300      	movs	r3, #0
 80040ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ae:	4b43      	ldr	r3, [pc, #268]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	4a40      	ldr	r2, [pc, #256]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040bc:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6593      	str	r3, [r2, #88]	; 0x58
 80040c6:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d2:	2301      	movs	r3, #1
 80040d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d6:	4a3a      	ldr	r2, [pc, #232]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80040d8:	4b39      	ldr	r3, [pc, #228]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040e2:	f7fe f8c7 	bl	8002274 <HAL_GetTick>
 80040e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040e8:	e009      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ea:	f7fe f8c3 	bl	8002274 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d902      	bls.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
      {
        ret = HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	74fb      	strb	r3, [r7, #19]
        break;
 80040fc:	e005      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xf2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040fe:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ef      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }

    if(ret == HAL_OK)
 800410a:	7cfb      	ldrb	r3, [r7, #19]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d159      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004110:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01e      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	429a      	cmp	r2, r3
 800412a:	d019      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x148>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800412c:	4b23      	ldr	r3, [pc, #140]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004136:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004138:	4a20      	ldr	r2, [pc, #128]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004148:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800414a:	4b1c      	ldr	r3, [pc, #112]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004158:	4a18      	ldr	r2, [pc, #96]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d016      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x180>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fe f883 	bl	8002274 <HAL_GetTick>
 800416e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8004170:	e00b      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x172>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7fe f87f 	bl	8002274 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d902      	bls.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x172>
          {
            ret = HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	74fb      	strb	r3, [r7, #19]
            break;
 8004188:	e006      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x180>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ec      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800419e:	4907      	ldr	r1, [pc, #28]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041b4:	e008      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041b6:	7cfb      	ldrb	r3, [r7, #19]
 80041b8:	74bb      	strb	r3, [r7, #18]
 80041ba:	e005      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041c8:	7c7b      	ldrb	r3, [r7, #17]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d105      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ce:	4a8d      	ldr	r2, [pc, #564]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80041d0:	4b8c      	ldr	r3, [pc, #560]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041e6:	4987      	ldr	r1, [pc, #540]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80041e8:	4b86      	ldr	r3, [pc, #536]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	f023 0203 	bic.w	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004208:	497e      	ldr	r1, [pc, #504]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800420a:	4b7e      	ldr	r3, [pc, #504]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f023 020c 	bic.w	r2, r3, #12
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800422a:	4976      	ldr	r1, [pc, #472]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800422c:	4b75      	ldr	r3, [pc, #468]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004232:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800424c:	496d      	ldr	r1, [pc, #436]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800424e:	4b6d      	ldr	r3, [pc, #436]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800426e:	4965      	ldr	r1, [pc, #404]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004270:	4b64      	ldr	r3, [pc, #400]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004290:	495c      	ldr	r1, [pc, #368]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004292:	4b5c      	ldr	r3, [pc, #368]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042b2:	4954      	ldr	r1, [pc, #336]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80042b4:	4b53      	ldr	r3, [pc, #332]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)  

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042d4:	494b      	ldr	r1, [pc, #300]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80042d6:	4b4b      	ldr	r3, [pc, #300]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042f6:	4943      	ldr	r1, [pc, #268]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80042f8:	4b42      	ldr	r3, [pc, #264]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d028      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004318:	493a      	ldr	r1, [pc, #232]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800431a:	4b3a      	ldr	r3, [pc, #232]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004336:	d106      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004338:	4a32      	ldr	r2, [pc, #200]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800433a:	4b32      	ldr	r3, [pc, #200]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004342:	60d3      	str	r3, [r2, #12]
 8004344:	e011      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x352>
    }
    else if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800434e:	d10c      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x352>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	2101      	movs	r1, #1
 8004356:	4618      	mov	r0, r3
 8004358:	f000 f8b4 	bl	80044c4 <RCCEx_PLLSAI1_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x352>
      {
        /* set overall return value */
        status = ret;
 8004366:	7cfb      	ldrb	r3, [r7, #19]
 8004368:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d028      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004376:	4923      	ldr	r1, [pc, #140]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004394:	d106      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004396:	4a1b      	ldr	r2, [pc, #108]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004398:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043a0:	60d3      	str	r3, [r2, #12]
 80043a2:	e011      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2101      	movs	r1, #1
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f885 	bl	80044c4 <RCCEx_PLLSAI1_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 80043be:	7cfb      	ldrb	r3, [r7, #19]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      {
        /* set overall return value */
        status = ret;
 80043c4:	7cfb      	ldrb	r3, [r7, #19]
 80043c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d02b      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x414>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043d4:	490b      	ldr	r1, [pc, #44]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043f2:	d109      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f4:	4a03      	ldr	r2, [pc, #12]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80043f6:	4b03      	ldr	r3, [pc, #12]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043fe:	60d3      	str	r3, [r2, #12]
 8004400:	e014      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004410:	d10c      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	2101      	movs	r1, #1
 8004418:	4618      	mov	r0, r3
 800441a:	f000 f853 	bl	80044c4 <RCCEx_PLLSAI1_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8004422:	7cfb      	ldrb	r3, [r7, #19]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x414>
      {
        /* set overall return value */
        status = ret;
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01c      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004438:	4919      	ldr	r1, [pc, #100]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443a:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004452:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004456:	d10c      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	2102      	movs	r1, #2
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f830 	bl	80044c4 <RCCEx_PLLSAI1_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004468:	7cfb      	ldrb	r3, [r7, #19]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x45a>
      {
        /* set overall return value */
        status = ret;
 800446e:	7cfb      	ldrb	r3, [r7, #19]
 8004470:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800447e:	4908      	ldr	r1, [pc, #32]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8004494:	7cbb      	ldrb	r3, [r7, #18]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40021000 	.word	0x40021000

080044a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80044a8:	4a05      	ldr	r2, [pc, #20]	; (80044c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f043 0304 	orr.w	r3, r3, #4
 80044b2:	6013      	str	r3, [r2, #0]
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40021000 	.word	0x40021000

080044c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b095      	sub	sp, #84	; 0x54
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044d8:	4ba3      	ldr	r3, [pc, #652]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d023      	beq.n	800452c <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044e4:	4ba0      	ldr	r3, [pc, #640]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0203 	and.w	r2, r3, #3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d117      	bne.n	8004524 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
       || 
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d013      	beq.n	8004524 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 80044fc:	4b9a      	ldr	r3, [pc, #616]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004504:	2370      	movs	r3, #112	; 0x70
 8004506:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450a:	fa93 f3a3 	rbit	r3, r3
 800450e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8004510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004512:	fab3 f383 	clz	r3, r3
 8004516:	fa22 f303 	lsr.w	r3, r2, r3
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
       || 
 8004520:	429a      	cmp	r2, r3
 8004522:	d054      	beq.n	80045ce <RCCEx_PLLSAI1_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800452a:	e050      	b.n	80045ce <RCCEx_PLLSAI1_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d00d      	beq.n	8004550 <RCCEx_PLLSAI1_Config+0x8c>
 8004534:	2b03      	cmp	r3, #3
 8004536:	d015      	beq.n	8004564 <RCCEx_PLLSAI1_Config+0xa0>
 8004538:	2b01      	cmp	r3, #1
 800453a:	d123      	bne.n	8004584 <RCCEx_PLLSAI1_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800453c:	4b8a      	ldr	r3, [pc, #552]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d121      	bne.n	800458c <RCCEx_PLLSAI1_Config+0xc8>
      {
        status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 800454e:	e01d      	b.n	800458c <RCCEx_PLLSAI1_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004550:	4b85      	ldr	r3, [pc, #532]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004558:	2b00      	cmp	r3, #0
 800455a:	d119      	bne.n	8004590 <RCCEx_PLLSAI1_Config+0xcc>
      {
        status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8004562:	e015      	b.n	8004590 <RCCEx_PLLSAI1_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004564:	4b80      	ldr	r3, [pc, #512]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d111      	bne.n	8004594 <RCCEx_PLLSAI1_Config+0xd0>
 8004570:	4b7d      	ldr	r3, [pc, #500]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <RCCEx_PLLSAI1_Config+0xd0>
      {
        status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8004582:	e007      	b.n	8004594 <RCCEx_PLLSAI1_Config+0xd0>
    default:
      status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      break;
 800458a:	e004      	b.n	8004596 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 800458c:	bf00      	nop
 800458e:	e002      	b.n	8004596 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8004590:	bf00      	nop
 8004592:	e000      	b.n	8004596 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8004594:	bf00      	nop
    }
    
    if(status == HAL_OK)
 8004596:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800459a:	2b00      	cmp	r3, #0
 800459c:	d117      	bne.n	80045ce <RCCEx_PLLSAI1_Config+0x10a>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 800459e:	4c72      	ldr	r4, [pc, #456]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 80045a0:	4b71      	ldr	r3, [pc, #452]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6819      	ldr	r1, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	1e58      	subs	r0, r3, #1
 80045b2:	2370      	movs	r3, #112	; 0x70
 80045b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b8:	fa93 f3a3 	rbit	r3, r3
 80045bc:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	fab3 f383 	clz	r3, r3
 80045c4:	fa00 f303 	lsl.w	r3, r0, r3
 80045c8:	430b      	orrs	r3, r1
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 80045ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f040 80c1 	bne.w	800475a <RCCEx_PLLSAI1_Config+0x296>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045d8:	4a63      	ldr	r2, [pc, #396]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 80045da:	4b63      	ldr	r3, [pc, #396]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e4:	f7fd fe46 	bl	8002274 <HAL_GetTick>
 80045e8:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80045ea:	e00a      	b.n	8004602 <RCCEx_PLLSAI1_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045ec:	f7fd fe42 	bl	8002274 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d903      	bls.n	8004602 <RCCEx_PLLSAI1_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        break;
 8004600:	e005      	b.n	800460e <RCCEx_PLLSAI1_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8004602:	4b59      	ldr	r3, [pc, #356]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1ee      	bne.n	80045ec <RCCEx_PLLSAI1_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 800460e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004612:	2b00      	cmp	r3, #0
 8004614:	f040 80a1 	bne.w	800475a <RCCEx_PLLSAI1_Config+0x296>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d125      	bne.n	800466a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800461e:	4c52      	ldr	r4, [pc, #328]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004620:	4b51      	ldr	r3, [pc, #324]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004628:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6891      	ldr	r1, [r2, #8]
 8004630:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004634:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004638:	fa92 f2a2 	rbit	r2, r2
 800463c:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 800463e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004640:	fab2 f282 	clz	r2, r2
 8004644:	4091      	lsls	r1, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68d0      	ldr	r0, [r2, #12]
 800464a:	f04f 4278 	mov.w	r2, #4160749568	; 0xf8000000
 800464e:	637a      	str	r2, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004652:	fa92 f2a2 	rbit	r2, r2
 8004656:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8004658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800465a:	fab2 f282 	clz	r2, r2
 800465e:	fa00 f202 	lsl.w	r2, r0, r2
 8004662:	430a      	orrs	r2, r1
 8004664:	4313      	orrs	r3, r2
 8004666:	6123      	str	r3, [r4, #16]
 8004668:	e051      	b.n	800470e <RCCEx_PLLSAI1_Config+0x24a>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d127      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0x1fc>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8004670:	4c3d      	ldr	r4, [pc, #244]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004672:	4b3d      	ldr	r3, [pc, #244]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800467a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6891      	ldr	r1, [r2, #8]
 8004682:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004686:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	fa92 f2a2 	rbit	r2, r2
 800468e:	61ba      	str	r2, [r7, #24]
  return(result);
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	fab2 f282 	clz	r2, r2
 8004696:	4091      	lsls	r1, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6912      	ldr	r2, [r2, #16]
 800469c:	0852      	lsrs	r2, r2, #1
 800469e:	1e50      	subs	r0, r2, #1
 80046a0:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80046a4:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a8:	fa92 f2a2 	rbit	r2, r2
 80046ac:	623a      	str	r2, [r7, #32]
  return(result);
 80046ae:	6a3a      	ldr	r2, [r7, #32]
 80046b0:	fab2 f282 	clz	r2, r2
 80046b4:	fa00 f202 	lsl.w	r2, r0, r2
 80046b8:	430a      	orrs	r2, r1
 80046ba:	4313      	orrs	r3, r2
 80046bc:	6123      	str	r3, [r4, #16]
 80046be:	e026      	b.n	800470e <RCCEx_PLLSAI1_Config+0x24a>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80046c0:	4c29      	ldr	r4, [pc, #164]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 80046c2:	4b29      	ldr	r3, [pc, #164]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6891      	ldr	r1, [r2, #8]
 80046d2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80046d6:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	fa92 f2a2 	rbit	r2, r2
 80046de:	60ba      	str	r2, [r7, #8]
  return(result);
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	fab2 f282 	clz	r2, r2
 80046e6:	4091      	lsls	r1, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6952      	ldr	r2, [r2, #20]
 80046ec:	0852      	lsrs	r2, r2, #1
 80046ee:	1e50      	subs	r0, r2, #1
 80046f0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80046f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	fa92 f2a2 	rbit	r2, r2
 80046fc:	613a      	str	r2, [r7, #16]
  return(result);
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	fab2 f282 	clz	r2, r2
 8004704:	fa00 f202 	lsl.w	r2, r0, r2
 8004708:	430a      	orrs	r2, r1
 800470a:	4313      	orrs	r3, r2
 800470c:	6123      	str	r3, [r4, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800470e:	4a16      	ldr	r2, [pc, #88]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004710:	4b15      	ldr	r3, [pc, #84]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004718:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fd fdab 	bl	8002274 <HAL_GetTick>
 800471e:	64b8      	str	r0, [r7, #72]	; 0x48

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004720:	e00a      	b.n	8004738 <RCCEx_PLLSAI1_Config+0x274>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004722:	f7fd fda7 	bl	8002274 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d903      	bls.n	8004738 <RCCEx_PLLSAI1_Config+0x274>
        {
          status = HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8004736:	e005      	b.n	8004744 <RCCEx_PLLSAI1_Config+0x280>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0ee      	beq.n	8004722 <RCCEx_PLLSAI1_Config+0x25e>
        }
      }

      if(status == HAL_OK)    
 8004744:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <RCCEx_PLLSAI1_Config+0x296>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800474c:	4906      	ldr	r1, [pc, #24]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 800475a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800475e:	4618      	mov	r0, r3
 8004760:	3754      	adds	r7, #84	; 0x54
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000

0800476c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e07a      	b.n	8004874 <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f002 fa6f 	bl	8006c7c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2202      	movs	r2, #2
 80047a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047b4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047be:	d902      	bls.n	80047c6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	e002      	b.n	80047cc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047d4:	d007      	beq.n	80047e6 <HAL_SPI_Init+0x7a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047de:	d002      	beq.n	80047e6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10b      	bne.n	8004806 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047f6:	d903      	bls.n	8004800 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
 80047fe:	e002      	b.n	8004806 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6851      	ldr	r1, [r2, #4]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6892      	ldr	r2, [r2, #8]
 8004812:	4311      	orrs	r1, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6912      	ldr	r2, [r2, #16]
 8004818:	4311      	orrs	r1, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6952      	ldr	r2, [r2, #20]
 800481e:	4311      	orrs	r1, r2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6992      	ldr	r2, [r2, #24]
 8004824:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004828:	4311      	orrs	r1, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	69d2      	ldr	r2, [r2, #28]
 800482e:	4311      	orrs	r1, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6a12      	ldr	r2, [r2, #32]
 8004834:	4311      	orrs	r1, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800483a:	430a      	orrs	r2, r1
 800483c:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6992      	ldr	r2, [r2, #24]
 8004846:	0c12      	lsrs	r2, r2, #16
 8004848:	f002 0104 	and.w	r1, r2, #4
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004850:	4311      	orrs	r1, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004856:	4311      	orrs	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68d2      	ldr	r2, [r2, #12]
 800485c:	4311      	orrs	r1, r2
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_SPI_Transmit+0x26>
 800489e:	2302      	movs	r3, #2
 80048a0:	e13e      	b.n	8004b20 <HAL_SPI_Transmit+0x2a4>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048aa:	f7fd fce3 	bl	8002274 <HAL_GetTick>
 80048ae:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d002      	beq.n	80048c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048bc:	2302      	movs	r3, #2
 80048be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048c0:	e125      	b.n	8004b0e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_SPI_Transmit+0x52>
 80048c8:	88fb      	ldrh	r3, [r7, #6]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048d2:	e11c      	b.n	8004b0e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2203      	movs	r2, #3
 80048d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	88fa      	ldrh	r2, [r7, #6]
 80048ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	88fa      	ldrh	r2, [r7, #6]
 80048f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491e:	d107      	bne.n	8004930 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800492e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b40      	cmp	r3, #64	; 0x40
 800493c:	d007      	beq.n	800494e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800494c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004956:	d947      	bls.n	80049e8 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <HAL_SPI_Transmit+0xee>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b01      	cmp	r3, #1
 8004968:	d138      	bne.n	80049dc <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	8812      	ldrh	r2, [r2, #0]
 8004972:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	3302      	adds	r3, #2
 8004978:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004988:	e028      	b.n	80049dc <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b02      	cmp	r3, #2
 8004996:	d10f      	bne.n	80049b8 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	8812      	ldrh	r2, [r2, #0]
 80049a0:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	3302      	adds	r3, #2
 80049a6:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049b6:	e011      	b.n	80049dc <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <HAL_SPI_Transmit+0x15a>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c4:	d00a      	beq.n	80049dc <HAL_SPI_Transmit+0x160>
 80049c6:	f7fd fc55 	bl	8002274 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d302      	bcc.n	80049dc <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049da:	e098      	b.n	8004b0e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1d1      	bne.n	800498a <HAL_SPI_Transmit+0x10e>
 80049e6:	e072      	b.n	8004ace <HAL_SPI_Transmit+0x252>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <HAL_SPI_Transmit+0x17e>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d164      	bne.n	8004ac4 <HAL_SPI_Transmit+0x248>
    {
      if (hspi->TxXferCount > 1U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d90f      	bls.n	8004a24 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	8812      	ldrh	r2, [r2, #0]
 8004a0c:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	3302      	adds	r3, #2
 8004a12:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b02      	subs	r3, #2
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a22:	e04f      	b.n	8004ac4 <HAL_SPI_Transmit+0x248>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f103 020c 	add.w	r2, r3, #12
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	1c59      	adds	r1, r3, #1
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a44:	e03e      	b.n	8004ac4 <HAL_SPI_Transmit+0x248>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d125      	bne.n	8004aa0 <HAL_SPI_Transmit+0x224>
      {
        if (hspi->TxXferCount > 1U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d90f      	bls.n	8004a7e <HAL_SPI_Transmit+0x202>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	8812      	ldrh	r2, [r2, #0]
 8004a66:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	3302      	adds	r3, #2
 8004a6c:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b02      	subs	r3, #2
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a7c:	e022      	b.n	8004ac4 <HAL_SPI_Transmit+0x248>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f103 020c 	add.w	r2, r3, #12
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	1c59      	adds	r1, r3, #1
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a9e:	e011      	b.n	8004ac4 <HAL_SPI_Transmit+0x248>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <HAL_SPI_Transmit+0x242>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aac:	d00a      	beq.n	8004ac4 <HAL_SPI_Transmit+0x248>
 8004aae:	f7fd fbe1 	bl	8002274 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	1ad2      	subs	r2, r2, r3
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d302      	bcc.n	8004ac4 <HAL_SPI_Transmit+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ac2:	e024      	b.n	8004b0e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1bb      	bne.n	8004a46 <HAL_SPI_Transmit+0x1ca>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 fb01 	bl	80050da <SPI_EndRxTxTransaction>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_SPI_Transmit+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <HAL_SPI_Transmit+0x286>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_SPI_Transmit+0x292>
  {
    errorcode = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08a      	sub	sp, #40	; 0x28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8004b42:	2301      	movs	r3, #1
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_SPI_TransmitReceive+0x32>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e1e1      	b.n	8004f1e <HAL_SPI_TransmitReceive+0x3f6>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b62:	f7fd fb87 	bl	8002274 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d00e      	beq.n	8004b9c <HAL_SPI_TransmitReceive+0x74>
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b84:	d106      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x6c>
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d003      	beq.n	8004b9c <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8004b94:	2302      	movs	r3, #2
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b9a:	e1b6      	b.n	8004f0a <HAL_SPI_TransmitReceive+0x3e2>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x86>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x86>
 8004ba8:	887b      	ldrh	r3, [r7, #2]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004bb4:	e1a9      	b.n	8004f0a <HAL_SPI_TransmitReceive+0x3e2>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d003      	beq.n	8004bca <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2205      	movs	r2, #5
 8004bc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	887a      	ldrh	r2, [r7, #2]
 8004bda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	887a      	ldrh	r2, [r7, #2]
 8004be2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	887a      	ldrh	r2, [r7, #2]
 8004bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	887a      	ldrh	r2, [r7, #2]
 8004bf6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fido threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c0c:	d805      	bhi.n	8004c1a <HAL_SPI_TransmitReceive+0xf2>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d908      	bls.n	8004c2c <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	6852      	ldr	r2, [r2, #4]
 8004c24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	e007      	b.n	8004c3c <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	6852      	ldr	r2, [r2, #4]
 8004c36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c3a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d007      	beq.n	8004c5a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c62:	d975      	bls.n	8004d50 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0x14e>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d160      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	8812      	ldrh	r2, [r2, #0]
 8004c7e:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	3302      	adds	r3, #2
 8004c84:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c94:	e050      	b.n	8004d38 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01c      	beq.n	8004cd6 <HAL_SPI_TransmitReceive+0x1ae>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d017      	beq.n	8004cd6 <HAL_SPI_TransmitReceive+0x1ae>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d110      	bne.n	8004cd6 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	8812      	ldrh	r2, [r2, #0]
 8004cbc:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01a      	beq.n	8004d18 <HAL_SPI_TransmitReceive+0x1f0>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d113      	bne.n	8004d18 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3302      	adds	r3, #2
 8004d00:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d14:	2301      	movs	r3, #1
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d1e:	d00b      	beq.n	8004d38 <HAL_SPI_TransmitReceive+0x210>
 8004d20:	f7fd faa8 	bl	8002274 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	1ad2      	subs	r2, r2, r3
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d303      	bcc.n	8004d38 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d36:	e0e8      	b.n	8004f0a <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1a9      	bne.n	8004c96 <HAL_SPI_TransmitReceive+0x16e>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1a3      	bne.n	8004c96 <HAL_SPI_TransmitReceive+0x16e>
 8004d4e:	e0ca      	b.n	8004ee6 <HAL_SPI_TransmitReceive+0x3be>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_SPI_TransmitReceive+0x23c>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	f040 80b4 	bne.w	8004ecc <HAL_SPI_TransmitReceive+0x3a4>
    {
      if (hspi->TxXferCount > 1U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d90f      	bls.n	8004d8e <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	8812      	ldrh	r2, [r2, #0]
 8004d76:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	3302      	adds	r3, #2
 8004d7c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b02      	subs	r3, #2
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d8c:	e09e      	b.n	8004ecc <HAL_SPI_TransmitReceive+0x3a4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f103 020c 	add.w	r2, r3, #12
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	1c59      	adds	r1, r3, #1
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dae:	e08d      	b.n	8004ecc <HAL_SPI_TransmitReceive+0x3a4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d032      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x2f4>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d02d      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x2f4>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d126      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x2f4>
      {
        if (hspi->TxXferCount > 1U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d90f      	bls.n	8004df8 <HAL_SPI_TransmitReceive+0x2d0>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	8812      	ldrh	r2, [r2, #0]
 8004de0:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	3302      	adds	r3, #2
 8004de6:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b02      	subs	r3, #2
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004df6:	e00f      	b.n	8004e18 <HAL_SPI_TransmitReceive+0x2f0>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f103 020c 	add.w	r2, r3, #12
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	1c59      	adds	r1, r3, #1
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d041      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x384>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d13a      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x384>
      {
        if (hspi->RxXferCount > 1U)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d920      	bls.n	8004e84 <HAL_SPI_TransmitReceive+0x35c>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3302      	adds	r3, #2
 8004e52:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b02      	subs	r3, #2
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d81a      	bhi.n	8004ea8 <HAL_SPI_TransmitReceive+0x380>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	6852      	ldr	r2, [r2, #4]
 8004e7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e80:	605a      	str	r2, [r3, #4]
 8004e82:	e011      	b.n	8004ea8 <HAL_SPI_TransmitReceive+0x380>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	607a      	str	r2, [r7, #4]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	320c      	adds	r2, #12
 8004e90:	7812      	ldrb	r2, [r2, #0]
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eb2:	d00b      	beq.n	8004ecc <HAL_SPI_TransmitReceive+0x3a4>
 8004eb4:	f7fd f9de 	bl	8002274 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	1ad2      	subs	r2, r2, r3
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d303      	bcc.n	8004ecc <HAL_SPI_TransmitReceive+0x3a4>
      {
        errorcode = HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004eca:	e01e      	b.n	8004f0a <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f47f af6c 	bne.w	8004db0 <HAL_SPI_TransmitReceive+0x288>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f47f af65 	bne.w	8004db0 <HAL_SPI_TransmitReceive+0x288>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f8f5 	bl	80050da <SPI_EndRxTxTransaction>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <HAL_SPI_TransmitReceive+0x3d4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3728      	adds	r7, #40	; 0x28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b084      	sub	sp, #16
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
 8004f32:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f34:	e04d      	b.n	8004fd2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f3c:	d049      	beq.n	8004fd2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8004f44:	f7fd f996 	bl	8002274 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	1ad2      	subs	r2, r2, r3
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d33e      	bcc.n	8004fd2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	6852      	ldr	r2, [r2, #4]
 8004f5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f6c:	d111      	bne.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f76:	d004      	beq.n	8004f82 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f80:	d107      	bne.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f9a:	d110      	bne.n	8004fbe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6819      	ldr	r1, [r3, #0]
 8004fa6:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8004faa:	400b      	ands	r3, r1
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e00e      	b.n	8004ff0 <SPI_WaitFlagStateUntilTimeout+0xca>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	401a      	ands	r2, r3
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d101      	bne.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	e000      	b.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d1a3      	bne.n	8004f36 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8005006:	e05b      	b.n	80050c0 <SPI_WaitFifoStateUntilTimeout+0xc8>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800500e:	d109      	bne.n	8005024 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005022:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800502a:	d049      	beq.n	80050c0 <SPI_WaitFifoStateUntilTimeout+0xc8>
    {
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d007      	beq.n	8005042 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8005032:	f7fd f91f 	bl	8002274 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	1ad2      	subs	r2, r2, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d33e      	bcc.n	80050c0 <SPI_WaitFifoStateUntilTimeout+0xc8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	6852      	ldr	r2, [r2, #4]
 800504c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800505a:	d111      	bne.n	8005080 <SPI_WaitFifoStateUntilTimeout+0x88>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005064:	d004      	beq.n	8005070 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506e:	d107      	bne.n	8005080 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005088:	d110      	bne.n	80050ac <SPI_WaitFifoStateUntilTimeout+0xb4>
        {
          SPI_RESET_CRC(hspi);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6819      	ldr	r1, [r3, #0]
 8005094:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005098:	400b      	ands	r3, r1
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	6812      	ldr	r2, [r2, #0]
 80050a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e008      	b.n	80050d2 <SPI_WaitFifoStateUntilTimeout+0xda>
  while ((hspi->Instance->SR & Fifo) != State)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	401a      	ands	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d19b      	bne.n	8005008 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <SPI_EndRxTxTransaction>:
  * @param hspi: SPI handle
  * @param Timeout: Timeout duration
  * @param  Tickstart: tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af02      	add	r7, sp, #8
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f7ff ff80 	bl	8004ff8 <SPI_WaitFifoStateUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d007      	beq.n	800510e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005102:	f043 0220 	orr.w	r2, r3, #32
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e013      	b.n	8005136 <SPI_EndRxTxTransaction+0x5c>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2200      	movs	r2, #0
 8005116:	2180      	movs	r1, #128	; 0x80
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff ff04 	bl	8004f26 <SPI_WaitFlagStateUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d007      	beq.n	8005134 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005128:	f043 0220 	orr.w	r2, r3, #32
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e000      	b.n	8005136 <SPI_EndRxTxTransaction+0x5c>
  }
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e043      	b.n	80051d8 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d106      	bne.n	800516a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 fd93 	bl	8006c90 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2224      	movs	r2, #36	; 0x24
 800516e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	6812      	ldr	r2, [r2, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f8ba 	bl	80052fc <UART_SetConfig>
 8005188:	4603      	mov	r3, r0
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e022      	b.n	80051d8 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fb7c 	bl	8005898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	6852      	ldr	r2, [r2, #4]
 80051aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	6892      	ldr	r2, [r2, #8]
 80051ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051be:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fc03 	bl	80059dc <UART_CheckIdleState>
 80051d6:	4603      	mov	r3, r0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	4613      	mov	r3, r2
 80051ee:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d177      	bne.n	80052f0 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UART_Transmit+0x2c>
 8005206:	88fb      	ldrh	r3, [r7, #6]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e070      	b.n	80052f2 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_UART_Transmit+0x3e>
 800521a:	2302      	movs	r3, #2
 800521c:	e069      	b.n	80052f2 <HAL_UART_Transmit+0x112>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2221      	movs	r2, #33	; 0x21
 8005230:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005234:	f7fd f81e 	bl	8002274 <HAL_GetTick>
 8005238:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	88fa      	ldrh	r2, [r7, #6]
 800523e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	88fa      	ldrh	r2, [r7, #6]
 8005246:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0)
 800524a:	e034      	b.n	80052b6 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2200      	movs	r2, #0
 8005266:	2180      	movs	r1, #128	; 0x80
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fc00 	bl	8005a6e <UART_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e03c      	b.n	80052f2 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005280:	d111      	bne.n	80052a6 <HAL_UART_Transmit+0xc6>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10d      	bne.n	80052a6 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	8812      	ldrh	r2, [r2, #0]
 8005296:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800529a:	b292      	uxth	r2, r2
 800529c:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	3302      	adds	r3, #2
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	e007      	b.n	80052b6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	1c59      	adds	r1, r3, #1
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1c4      	bne.n	800524c <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2200      	movs	r2, #0
 80052ca:	2140      	movs	r1, #64	; 0x40
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fbce 	bl	8005a6e <UART_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e00a      	b.n	80052f2 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	e000      	b.n	80052f2 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
  }
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005300:	b086      	sub	sp, #24
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800530a:	2310      	movs	r3, #16
 800530c:	74fb      	strb	r3, [r7, #19]
  uint16_t brrtemp                    = 0x0000;
 800530e:	2300      	movs	r3, #0
 8005310:	81bb      	strh	r3, [r7, #12]
  uint16_t usartdiv                   = 0x0000;
 8005312:	2300      	movs	r3, #0
 8005314:	823b      	strh	r3, [r7, #16]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	73fb      	strb	r3, [r7, #15]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6819      	ldr	r1, [r3, #0]
 800533c:	4bb8      	ldr	r3, [pc, #736]	; (8005620 <UART_SetConfig+0x324>)
 800533e:	400b      	ands	r3, r1
 8005340:	6979      	ldr	r1, [r7, #20]
 8005342:	430b      	orrs	r3, r1
 8005344:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	6852      	ldr	r2, [r2, #4]
 8005350:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	68d2      	ldr	r2, [r2, #12]
 8005358:	430a      	orrs	r2, r1
 800535a:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4aaf      	ldr	r2, [pc, #700]	; (8005624 <UART_SetConfig+0x328>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d004      	beq.n	8005376 <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	6892      	ldr	r2, [r2, #8]
 8005380:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	430a      	orrs	r2, r1
 8005388:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4aa6      	ldr	r2, [pc, #664]	; (8005628 <UART_SetConfig+0x32c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d121      	bne.n	80053d8 <UART_SetConfig+0xdc>
 8005394:	4ba5      	ldr	r3, [pc, #660]	; (800562c <UART_SetConfig+0x330>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d816      	bhi.n	80053d0 <UART_SetConfig+0xd4>
 80053a2:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <UART_SetConfig+0xac>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053b9 	.word	0x080053b9
 80053ac:	080053c5 	.word	0x080053c5
 80053b0:	080053bf 	.word	0x080053bf
 80053b4:	080053cb 	.word	0x080053cb
 80053b8:	2301      	movs	r3, #1
 80053ba:	74fb      	strb	r3, [r7, #19]
 80053bc:	e094      	b.n	80054e8 <UART_SetConfig+0x1ec>
 80053be:	2302      	movs	r3, #2
 80053c0:	74fb      	strb	r3, [r7, #19]
 80053c2:	e091      	b.n	80054e8 <UART_SetConfig+0x1ec>
 80053c4:	2304      	movs	r3, #4
 80053c6:	74fb      	strb	r3, [r7, #19]
 80053c8:	e08e      	b.n	80054e8 <UART_SetConfig+0x1ec>
 80053ca:	2308      	movs	r3, #8
 80053cc:	74fb      	strb	r3, [r7, #19]
 80053ce:	e08b      	b.n	80054e8 <UART_SetConfig+0x1ec>
 80053d0:	2310      	movs	r3, #16
 80053d2:	74fb      	strb	r3, [r7, #19]
 80053d4:	bf00      	nop
 80053d6:	e087      	b.n	80054e8 <UART_SetConfig+0x1ec>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a94      	ldr	r2, [pc, #592]	; (8005630 <UART_SetConfig+0x334>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d134      	bne.n	800544c <UART_SetConfig+0x150>
 80053e2:	4b92      	ldr	r3, [pc, #584]	; (800562c <UART_SetConfig+0x330>)
 80053e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e8:	f003 030c 	and.w	r3, r3, #12
 80053ec:	2b0c      	cmp	r3, #12
 80053ee:	d829      	bhi.n	8005444 <UART_SetConfig+0x148>
 80053f0:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <UART_SetConfig+0xfc>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	0800542d 	.word	0x0800542d
 80053fc:	08005445 	.word	0x08005445
 8005400:	08005445 	.word	0x08005445
 8005404:	08005445 	.word	0x08005445
 8005408:	08005439 	.word	0x08005439
 800540c:	08005445 	.word	0x08005445
 8005410:	08005445 	.word	0x08005445
 8005414:	08005445 	.word	0x08005445
 8005418:	08005433 	.word	0x08005433
 800541c:	08005445 	.word	0x08005445
 8005420:	08005445 	.word	0x08005445
 8005424:	08005445 	.word	0x08005445
 8005428:	0800543f 	.word	0x0800543f
 800542c:	2300      	movs	r3, #0
 800542e:	74fb      	strb	r3, [r7, #19]
 8005430:	e05a      	b.n	80054e8 <UART_SetConfig+0x1ec>
 8005432:	2302      	movs	r3, #2
 8005434:	74fb      	strb	r3, [r7, #19]
 8005436:	e057      	b.n	80054e8 <UART_SetConfig+0x1ec>
 8005438:	2304      	movs	r3, #4
 800543a:	74fb      	strb	r3, [r7, #19]
 800543c:	e054      	b.n	80054e8 <UART_SetConfig+0x1ec>
 800543e:	2308      	movs	r3, #8
 8005440:	74fb      	strb	r3, [r7, #19]
 8005442:	e051      	b.n	80054e8 <UART_SetConfig+0x1ec>
 8005444:	2310      	movs	r3, #16
 8005446:	74fb      	strb	r3, [r7, #19]
 8005448:	bf00      	nop
 800544a:	e04d      	b.n	80054e8 <UART_SetConfig+0x1ec>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a78      	ldr	r2, [pc, #480]	; (8005634 <UART_SetConfig+0x338>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d120      	bne.n	8005498 <UART_SetConfig+0x19c>
 8005456:	4b75      	ldr	r3, [pc, #468]	; (800562c <UART_SetConfig+0x330>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005460:	2b10      	cmp	r3, #16
 8005462:	d00f      	beq.n	8005484 <UART_SetConfig+0x188>
 8005464:	2b10      	cmp	r3, #16
 8005466:	d802      	bhi.n	800546e <UART_SetConfig+0x172>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <UART_SetConfig+0x17c>
 800546c:	e010      	b.n	8005490 <UART_SetConfig+0x194>
 800546e:	2b20      	cmp	r3, #32
 8005470:	d005      	beq.n	800547e <UART_SetConfig+0x182>
 8005472:	2b30      	cmp	r3, #48	; 0x30
 8005474:	d009      	beq.n	800548a <UART_SetConfig+0x18e>
 8005476:	e00b      	b.n	8005490 <UART_SetConfig+0x194>
 8005478:	2300      	movs	r3, #0
 800547a:	74fb      	strb	r3, [r7, #19]
 800547c:	e034      	b.n	80054e8 <UART_SetConfig+0x1ec>
 800547e:	2302      	movs	r3, #2
 8005480:	74fb      	strb	r3, [r7, #19]
 8005482:	e031      	b.n	80054e8 <UART_SetConfig+0x1ec>
 8005484:	2304      	movs	r3, #4
 8005486:	74fb      	strb	r3, [r7, #19]
 8005488:	e02e      	b.n	80054e8 <UART_SetConfig+0x1ec>
 800548a:	2308      	movs	r3, #8
 800548c:	74fb      	strb	r3, [r7, #19]
 800548e:	e02b      	b.n	80054e8 <UART_SetConfig+0x1ec>
 8005490:	2310      	movs	r3, #16
 8005492:	74fb      	strb	r3, [r7, #19]
 8005494:	bf00      	nop
 8005496:	e027      	b.n	80054e8 <UART_SetConfig+0x1ec>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a61      	ldr	r2, [pc, #388]	; (8005624 <UART_SetConfig+0x328>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d123      	bne.n	80054ea <UART_SetConfig+0x1ee>
 80054a2:	4b62      	ldr	r3, [pc, #392]	; (800562c <UART_SetConfig+0x330>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b0:	d012      	beq.n	80054d8 <UART_SetConfig+0x1dc>
 80054b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b6:	d802      	bhi.n	80054be <UART_SetConfig+0x1c2>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <UART_SetConfig+0x1d0>
 80054bc:	e012      	b.n	80054e4 <UART_SetConfig+0x1e8>
 80054be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c2:	d006      	beq.n	80054d2 <UART_SetConfig+0x1d6>
 80054c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054c8:	d009      	beq.n	80054de <UART_SetConfig+0x1e2>
 80054ca:	e00b      	b.n	80054e4 <UART_SetConfig+0x1e8>
 80054cc:	2300      	movs	r3, #0
 80054ce:	74fb      	strb	r3, [r7, #19]
 80054d0:	e00a      	b.n	80054e8 <UART_SetConfig+0x1ec>
 80054d2:	2302      	movs	r3, #2
 80054d4:	74fb      	strb	r3, [r7, #19]
 80054d6:	e007      	b.n	80054e8 <UART_SetConfig+0x1ec>
 80054d8:	2304      	movs	r3, #4
 80054da:	74fb      	strb	r3, [r7, #19]
 80054dc:	e004      	b.n	80054e8 <UART_SetConfig+0x1ec>
 80054de:	2308      	movs	r3, #8
 80054e0:	74fb      	strb	r3, [r7, #19]
 80054e2:	e001      	b.n	80054e8 <UART_SetConfig+0x1ec>
 80054e4:	2310      	movs	r3, #16
 80054e6:	74fb      	strb	r3, [r7, #19]
 80054e8:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a4d      	ldr	r2, [pc, #308]	; (8005624 <UART_SetConfig+0x328>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	f040 80ec 	bne.w	80056ce <UART_SetConfig+0x3d2>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]

    switch (clocksource)
 80054fa:	7cfb      	ldrb	r3, [r7, #19]
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d824      	bhi.n	800554a <UART_SetConfig+0x24e>
 8005500:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <UART_SetConfig+0x20c>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	0800552d 	.word	0x0800552d
 800550c:	0800554b 	.word	0x0800554b
 8005510:	08005535 	.word	0x08005535
 8005514:	0800554b 	.word	0x0800554b
 8005518:	0800553b 	.word	0x0800553b
 800551c:	0800554b 	.word	0x0800554b
 8005520:	0800554b 	.word	0x0800554b
 8005524:	0800554b 	.word	0x0800554b
 8005528:	08005543 	.word	0x08005543
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800552c:	f7fe fcce 	bl	8003ecc <HAL_RCC_GetPCLK1Freq>
 8005530:	6178      	str	r0, [r7, #20]
      break;
 8005532:	e00d      	b.n	8005550 <UART_SetConfig+0x254>
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8005534:	4b40      	ldr	r3, [pc, #256]	; (8005638 <UART_SetConfig+0x33c>)
 8005536:	617b      	str	r3, [r7, #20]
      break;
 8005538:	e00a      	b.n	8005550 <UART_SetConfig+0x254>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 800553a:	f7fe fbc1 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 800553e:	6178      	str	r0, [r7, #20]
      break;
 8005540:	e006      	b.n	8005550 <UART_SetConfig+0x254>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8005542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005546:	617b      	str	r3, [r7, #20]
      break;
 8005548:	e002      	b.n	8005550 <UART_SetConfig+0x254>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
      break;
 800554e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 8199 	beq.w	800588a <UART_SetConfig+0x58e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	4613      	mov	r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	441a      	add	r2, r3
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	429a      	cmp	r2, r3
 8005566:	d805      	bhi.n	8005574 <UART_SetConfig+0x278>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	429a      	cmp	r2, r3
 8005572:	d202      	bcs.n	800557a <UART_SetConfig+0x27e>
      {
        ret = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
 8005578:	e187      	b.n	800588a <UART_SetConfig+0x58e>
      }
      else
      {
        switch (clocksource)
 800557a:	7cfb      	ldrb	r3, [r7, #19]
 800557c:	2b08      	cmp	r3, #8
 800557e:	f200 8093 	bhi.w	80056a8 <UART_SetConfig+0x3ac>
 8005582:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <UART_SetConfig+0x28c>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055ad 	.word	0x080055ad
 800558c:	080056a9 	.word	0x080056a9
 8005590:	080055ed 	.word	0x080055ed
 8005594:	080056a9 	.word	0x080056a9
 8005598:	08005641 	.word	0x08005641
 800559c:	080056a9 	.word	0x080056a9
 80055a0:	080056a9 	.word	0x080056a9
 80055a4:	080056a9 	.word	0x080056a9
 80055a8:	0800567f 	.word	0x0800567f
        {
        case UART_CLOCKSOURCE_PCLK1:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80055ac:	f7fe fc8e 	bl	8003ecc <HAL_RCC_GetPCLK1Freq>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f04f 0400 	mov.w	r4, #0
 80055b6:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80055ba:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80055be:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	f04f 0400 	mov.w	r4, #0
 80055cc:	eb18 0003 	adds.w	r0, r8, r3
 80055d0:	eb49 0104 	adc.w	r1, r9, r4
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f04f 0400 	mov.w	r4, #0
 80055dc:	461a      	mov	r2, r3
 80055de:	4623      	mov	r3, r4
 80055e0:	f7fb fa18 	bl	8000a14 <__aeabi_uldivmod>
 80055e4:	4603      	mov	r3, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	617b      	str	r3, [r7, #20]
          break;
 80055ea:	e060      	b.n	80056ae <UART_SetConfig+0x3b2>
        case UART_CLOCKSOURCE_HSI:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	f04f 0400 	mov.w	r4, #0
 80055f6:	4911      	ldr	r1, [pc, #68]	; (800563c <UART_SetConfig+0x340>)
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	eb13 0801 	adds.w	r8, r3, r1
 8005600:	eb44 0902 	adc.w	r9, r4, r2
 8005604:	4640      	mov	r0, r8
 8005606:	4649      	mov	r1, r9
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f04f 0400 	mov.w	r4, #0
 8005610:	461a      	mov	r2, r3
 8005612:	4623      	mov	r3, r4
 8005614:	f7fb f9fe 	bl	8000a14 <__aeabi_uldivmod>
 8005618:	4603      	mov	r3, r0
 800561a:	460c      	mov	r4, r1
 800561c:	617b      	str	r3, [r7, #20]
          break;
 800561e:	e046      	b.n	80056ae <UART_SetConfig+0x3b2>
 8005620:	efff69f3 	.word	0xefff69f3
 8005624:	40008000 	.word	0x40008000
 8005628:	40013800 	.word	0x40013800
 800562c:	40021000 	.word	0x40021000
 8005630:	40004400 	.word	0x40004400
 8005634:	40004800 	.word	0x40004800
 8005638:	00f42400 	.word	0x00f42400
 800563c:	f4240000 	.word	0xf4240000
        case UART_CLOCKSOURCE_SYSCLK:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005640:	f7fe fb3e 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	021d      	lsls	r5, r3, #8
 800564e:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8005652:	0214      	lsls	r4, r2, #8
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	461a      	mov	r2, r3
 800565c:	f04f 0300 	mov.w	r3, #0
 8005660:	18a0      	adds	r0, r4, r2
 8005662:	eb45 0103 	adc.w	r1, r5, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f04f 0400 	mov.w	r4, #0
 800566e:	461a      	mov	r2, r3
 8005670:	4623      	mov	r3, r4
 8005672:	f7fb f9cf 	bl	8000a14 <__aeabi_uldivmod>
 8005676:	4603      	mov	r3, r0
 8005678:	460c      	mov	r4, r1
 800567a:	617b      	str	r3, [r7, #20]
          break;
 800567c:	e017      	b.n	80056ae <UART_SetConfig+0x3b2>
        case UART_CLOCKSOURCE_LSE:
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	f04f 0400 	mov.w	r4, #0
 8005688:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800568c:	f144 0100 	adc.w	r1, r4, #0
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f04f 0400 	mov.w	r4, #0
 8005698:	461a      	mov	r2, r3
 800569a:	4623      	mov	r3, r4
 800569c:	f7fb f9ba 	bl	8000a14 <__aeabi_uldivmod>
 80056a0:	4603      	mov	r3, r0
 80056a2:	460c      	mov	r4, r1
 80056a4:	617b      	str	r3, [r7, #20]
          break;
 80056a6:	e002      	b.n	80056ae <UART_SetConfig+0x3b2>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
          ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
          break;
 80056ac:	bf00      	nop
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b4:	d308      	bcc.n	80056c8 <UART_SetConfig+0x3cc>
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056bc:	d204      	bcs.n	80056c8 <UART_SetConfig+0x3cc>
        {
           huart->Instance->BRR = tmpreg;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	60da      	str	r2, [r3, #12]
 80056c6:	e0e0      	b.n	800588a <UART_SetConfig+0x58e>
        }
        else
        {
          ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	73fb      	strb	r3, [r7, #15]
 80056cc:	e0dd      	b.n	800588a <UART_SetConfig+0x58e>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d6:	d16e      	bne.n	80057b6 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80056d8:	7cfb      	ldrb	r3, [r7, #19]
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d856      	bhi.n	800578c <UART_SetConfig+0x490>
 80056de:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <UART_SetConfig+0x3e8>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005725 	.word	0x08005725
 80056ec:	08005741 	.word	0x08005741
 80056f0:	0800578d 	.word	0x0800578d
 80056f4:	0800575b 	.word	0x0800575b
 80056f8:	0800578d 	.word	0x0800578d
 80056fc:	0800578d 	.word	0x0800578d
 8005700:	0800578d 	.word	0x0800578d
 8005704:	08005777 	.word	0x08005777
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005708:	f7fe fbe0 	bl	8003ecc <HAL_RCC_GetPCLK1Freq>
 800570c:	4603      	mov	r3, r0
 800570e:	005a      	lsls	r2, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	441a      	add	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	823b      	strh	r3, [r7, #16]
      break;
 8005722:	e036      	b.n	8005792 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005724:	f7fe fbf4 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 8005728:	4603      	mov	r3, r0
 800572a:	005a      	lsls	r2, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	085b      	lsrs	r3, r3, #1
 8005732:	441a      	add	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	fbb2 f3f3 	udiv	r3, r2, r3
 800573c:	823b      	strh	r3, [r7, #16]
      break;
 800573e:	e028      	b.n	8005792 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_HSI:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	085b      	lsrs	r3, r3, #1
 8005746:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800574a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6852      	ldr	r2, [r2, #4]
 8005752:	fbb3 f3f2 	udiv	r3, r3, r2
 8005756:	823b      	strh	r3, [r7, #16]
      break;
 8005758:	e01b      	b.n	8005792 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800575a:	f7fe fab1 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 800575e:	4603      	mov	r3, r0
 8005760:	005a      	lsls	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	085b      	lsrs	r3, r3, #1
 8005768:	441a      	add	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005772:	823b      	strh	r3, [r7, #16]
      break;
 8005774:	e00d      	b.n	8005792 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	085b      	lsrs	r3, r3, #1
 800577c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	823b      	strh	r3, [r7, #16]
      break;
 800578a:	e002      	b.n	8005792 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
      break;
 8005790:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 8005792:	8a3b      	ldrh	r3, [r7, #16]
 8005794:	f023 030f 	bic.w	r3, r3, #15
 8005798:	81bb      	strh	r3, [r7, #12]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 800579a:	8a3b      	ldrh	r3, [r7, #16]
 800579c:	105b      	asrs	r3, r3, #1
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	89bb      	ldrh	r3, [r7, #12]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	81bb      	strh	r3, [r7, #12]
    huart->Instance->BRR = brrtemp;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	89ba      	ldrh	r2, [r7, #12]
 80057b2:	60da      	str	r2, [r3, #12]
 80057b4:	e069      	b.n	800588a <UART_SetConfig+0x58e>
  }
  else
  {
    switch (clocksource)
 80057b6:	7cfb      	ldrb	r3, [r7, #19]
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d863      	bhi.n	8005884 <UART_SetConfig+0x588>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0x4c8>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057e9 	.word	0x080057e9
 80057c8:	08005809 	.word	0x08005809
 80057cc:	08005829 	.word	0x08005829
 80057d0:	08005885 	.word	0x08005885
 80057d4:	08005849 	.word	0x08005849
 80057d8:	08005885 	.word	0x08005885
 80057dc:	08005885 	.word	0x08005885
 80057e0:	08005885 	.word	0x08005885
 80057e4:	08005869 	.word	0x08005869
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681c      	ldr	r4, [r3, #0]
 80057ec:	f7fe fb6e 	bl	8003ecc <HAL_RCC_GetPCLK1Freq>
 80057f0:	4602      	mov	r2, r0
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	b29b      	uxth	r3, r3
 8005804:	60e3      	str	r3, [r4, #12]
      break;
 8005806:	e040      	b.n	800588a <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681c      	ldr	r4, [r3, #0]
 800580c:	f7fe fb80 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 8005810:	4602      	mov	r2, r0
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	441a      	add	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005822:	b29b      	uxth	r3, r3
 8005824:	60e3      	str	r3, [r4, #12]
      break;
 8005826:	e030      	b.n	800588a <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_HSI:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005836:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	6849      	ldr	r1, [r1, #4]
 800583e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005842:	b29b      	uxth	r3, r3
 8005844:	60d3      	str	r3, [r2, #12]
      break;
 8005846:	e020      	b.n	800588a <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681c      	ldr	r4, [r3, #0]
 800584c:	f7fe fa38 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8005850:	4602      	mov	r2, r0
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	441a      	add	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005862:	b29b      	uxth	r3, r3
 8005864:	60e3      	str	r3, [r4, #12]
      break;
 8005866:	e010      	b.n	800588a <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6852      	ldr	r2, [r2, #4]
 8005870:	0852      	lsrs	r2, r2, #1
 8005872:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6852      	ldr	r2, [r2, #4]
 800587a:	fbb1 f2f2 	udiv	r2, r1, r2
 800587e:	b292      	uxth	r2, r2
 8005880:	60da      	str	r2, [r3, #12]
      break;
 8005882:	e002      	b.n	800588a <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
      break;
 8005888:	bf00      	nop
    }
  }

  return ret;
 800588a:	7bfb      	ldrb	r3, [r7, #15]

}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005896:	bf00      	nop

08005898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	6852      	ldr	r2, [r2, #4]
 80058b6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	6852      	ldr	r2, [r2, #4]
 80058d8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80058e0:	430a      	orrs	r2, r1
 80058e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	6852      	ldr	r2, [r2, #4]
 80058fa:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	6852      	ldr	r2, [r2, #4]
 800591c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005924:	430a      	orrs	r2, r1
 8005926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6812      	ldr	r2, [r2, #0]
 800593c:	6892      	ldr	r2, [r2, #8]
 800593e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005946:	430a      	orrs	r2, r1
 8005948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	6892      	ldr	r2, [r2, #8]
 8005960:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005968:	430a      	orrs	r2, r1
 800596a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01a      	beq.n	80059ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	6852      	ldr	r2, [r2, #4]
 8005982:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800598a:	430a      	orrs	r2, r1
 800598c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005996:	d10a      	bne.n	80059ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6812      	ldr	r2, [r2, #0]
 80059a0:	6852      	ldr	r2, [r2, #4]
 80059a2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	6852      	ldr	r2, [r2, #4]
 80059c4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059cc:	430a      	orrs	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]
  }
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80059ee:	f7fc fc41 	bl	8002274 <HAL_GetTick>
 80059f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d10e      	bne.n	8005a20 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f82c 	bl	8005a6e <UART_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e022      	b.n	8005a66 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d10e      	bne.n	8005a4c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f816 	bl	8005a6e <UART_WaitOnFlagUntilTimeout>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e00c      	b.n	8005a66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b084      	sub	sp, #16
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7e:	e02c      	b.n	8005ada <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a86:	d028      	beq.n	8005ada <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a8e:	f7fc fbf1 	bl	8002274 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	1ad2      	subs	r2, r2, r3
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d91d      	bls.n	8005ada <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	6812      	ldr	r2, [r2, #0]
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005aac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	6892      	ldr	r2, [r2, #8]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e00f      	b.n	8005afa <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d0c3      	beq.n	8005a80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005b06:	f000 fbb5 	bl	8006274 <xTaskGetSchedulerState>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d001      	beq.n	8005b14 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8005b10:	f000 f924 	bl	8005d5c <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8005b14:	bf00      	nop
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	601a      	str	r2, [r3, #0]
}
 8005b54:	bf00      	nop
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b76:	d103      	bne.n	8005b80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	e00c      	b.n	8005b9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3308      	adds	r3, #8
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	e002      	b.n	8005b8e <vListInsert+0x2e>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d9f6      	bls.n	8005b88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	601a      	str	r2, [r3, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6892      	ldr	r2, [r2, #8]
 8005be8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6852      	ldr	r2, [r2, #4]
 8005bf2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d103      	bne.n	8005c06 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	1e5a      	subs	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
	...

08005c28 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c28:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <pxCurrentTCBConst2>)
 8005c2a:	6819      	ldr	r1, [r3, #0]
 8005c2c:	6808      	ldr	r0, [r1, #0]
 8005c2e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c32:	f380 8809 	msr	PSP, r0
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f04f 0000 	mov.w	r0, #0
 8005c3e:	f380 8811 	msr	BASEPRI, r0
 8005c42:	4770      	bx	lr

08005c44 <pxCurrentTCBConst2>:
 8005c44:	200000c8 	.word	0x200000c8
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop

08005c4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c64:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <vPortEnterCritical+0x54>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	4a0d      	ldr	r2, [pc, #52]	; (8005ca0 <vPortEnterCritical+0x54>)
 8005c6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <vPortEnterCritical+0x54>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d10e      	bne.n	8005c94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c76:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <vPortEnterCritical+0x58>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d009      	beq.n	8005c94 <vPortEnterCritical+0x48>
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	e7fe      	b.n	8005c92 <vPortEnterCritical+0x46>
	}
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	2000003c 	.word	0x2000003c
 8005ca4:	e000ed04 	.word	0xe000ed04

08005ca8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cae:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <vPortExitCritical+0x4c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <vPortExitCritical+0x22>
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	607b      	str	r3, [r7, #4]
 8005cc8:	e7fe      	b.n	8005cc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <vPortExitCritical+0x4c>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	4a08      	ldr	r2, [pc, #32]	; (8005cf4 <vPortExitCritical+0x4c>)
 8005cd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cd4:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <vPortExitCritical+0x4c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <vPortExitCritical+0x3e>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	2000003c 	.word	0x2000003c

08005cf8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005cf8:	f3ef 8009 	mrs	r0, PSP
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	4b14      	ldr	r3, [pc, #80]	; (8005d54 <pxCurrentTCBConst>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	f01e 0f10 	tst.w	lr, #16
 8005d08:	bf08      	it	eq
 8005d0a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d0e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d12:	6010      	str	r0, [r2, #0]
 8005d14:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005d18:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d1c:	f380 8811 	msr	BASEPRI, r0
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f000 f9ee 	bl	8006108 <vTaskSwitchContext>
 8005d2c:	f04f 0000 	mov.w	r0, #0
 8005d30:	f380 8811 	msr	BASEPRI, r0
 8005d34:	bc08      	pop	{r3}
 8005d36:	6819      	ldr	r1, [r3, #0]
 8005d38:	6808      	ldr	r0, [r1, #0]
 8005d3a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3e:	f01e 0f10 	tst.w	lr, #16
 8005d42:	bf08      	it	eq
 8005d44:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d48:	f380 8809 	msr	PSP, r0
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop

08005d54 <pxCurrentTCBConst>:
 8005d54:	200000c8 	.word	0x200000c8
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop

08005d5c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
	__asm volatile
 8005d62:	f3ef 8211 	mrs	r2, BASEPRI
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	60fa      	str	r2, [r7, #12]
 8005d78:	60bb      	str	r3, [r7, #8]
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d7a:	f000 f907 	bl	8005f8c <xTaskIncrementTick>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d84:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <xPortSysTickHandler+0x44>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	607b      	str	r3, [r7, #4]
	__asm volatile
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
}
 8005d96:	bf00      	nop
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d02f      	beq.n	8005e16 <vTaskDelay+0x72>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005db6:	4b1f      	ldr	r3, [pc, #124]	; (8005e34 <vTaskDelay+0x90>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <vTaskDelay+0x2e>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e7fe      	b.n	8005dd0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005dd2:	f000 f839 	bl	8005e48 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8005dd6:	4b18      	ldr	r3, [pc, #96]	; (8005e38 <vTaskDelay+0x94>)
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4413      	add	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8005de0:	4b16      	ldr	r3, [pc, #88]	; (8005e3c <vTaskDelay+0x98>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff fef3 	bl	8005bd2 <uxListRemove>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10b      	bne.n	8005e0a <vTaskDelay+0x66>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005df2:	4b12      	ldr	r3, [pc, #72]	; (8005e3c <vTaskDelay+0x98>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	2201      	movs	r2, #1
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43da      	mvns	r2, r3
 8005e00:	4b0f      	ldr	r3, [pc, #60]	; (8005e40 <vTaskDelay+0x9c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4013      	ands	r3, r2
 8005e06:	4a0e      	ldr	r2, [pc, #56]	; (8005e40 <vTaskDelay+0x9c>)
 8005e08:	6013      	str	r3, [r2, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8005e0a:	6938      	ldr	r0, [r7, #16]
 8005e0c:	f000 f9d6 	bl	80061bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e10:	f000 f828 	bl	8005e64 <xTaskResumeAll>
 8005e14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d107      	bne.n	8005e2c <vTaskDelay+0x88>
		{
			portYIELD_WITHIN_API();
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <vTaskDelay+0xa0>)
 8005e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e2c:	bf00      	nop
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20000194 	.word	0x20000194
 8005e38:	20000178 	.word	0x20000178
 8005e3c:	200000c8 	.word	0x200000c8
 8005e40:	2000017c 	.word	0x2000017c
 8005e44:	e000ed04 	.word	0xe000ed04

08005e48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e4c:	4b04      	ldr	r3, [pc, #16]	; (8005e60 <vTaskSuspendAll+0x18>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	4a03      	ldr	r2, [pc, #12]	; (8005e60 <vTaskSuspendAll+0x18>)
 8005e54:	6013      	str	r3, [r2, #0]
}
 8005e56:	bf00      	nop
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	20000194 	.word	0x20000194

08005e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e6e:	4b3e      	ldr	r3, [pc, #248]	; (8005f68 <xTaskResumeAll+0x104>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <xTaskResumeAll+0x26>
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	607b      	str	r3, [r7, #4]
 8005e88:	e7fe      	b.n	8005e88 <xTaskResumeAll+0x24>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e8a:	f7ff fedf 	bl	8005c4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e8e:	4b36      	ldr	r3, [pc, #216]	; (8005f68 <xTaskResumeAll+0x104>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	4a34      	ldr	r2, [pc, #208]	; (8005f68 <xTaskResumeAll+0x104>)
 8005e96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e98:	4b33      	ldr	r3, [pc, #204]	; (8005f68 <xTaskResumeAll+0x104>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d15b      	bne.n	8005f58 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ea0:	4b32      	ldr	r3, [pc, #200]	; (8005f6c <xTaskResumeAll+0x108>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d057      	beq.n	8005f58 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ea8:	e02e      	b.n	8005f08 <xTaskResumeAll+0xa4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005eaa:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <xTaskResumeAll+0x10c>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	60bb      	str	r3, [r7, #8]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	3318      	adds	r3, #24
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fe8b 	bl	8005bd2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff fe86 	bl	8005bd2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	2201      	movs	r2, #1
 8005ecc:	409a      	lsls	r2, r3
 8005ece:	4b29      	ldr	r3, [pc, #164]	; (8005f74 <xTaskResumeAll+0x110>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	4a27      	ldr	r2, [pc, #156]	; (8005f74 <xTaskResumeAll+0x110>)
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4a24      	ldr	r2, [pc, #144]	; (8005f78 <xTaskResumeAll+0x114>)
 8005ee6:	441a      	add	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f7ff fe12 	bl	8005b18 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <xTaskResumeAll+0x118>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d302      	bcc.n	8005f08 <xTaskResumeAll+0xa4>
					{
						xYieldPending = pdTRUE;
 8005f02:	4b1f      	ldr	r3, [pc, #124]	; (8005f80 <xTaskResumeAll+0x11c>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f08:	4b19      	ldr	r3, [pc, #100]	; (8005f70 <xTaskResumeAll+0x10c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1cc      	bne.n	8005eaa <xTaskResumeAll+0x46>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8005f10:	4b1c      	ldr	r3, [pc, #112]	; (8005f84 <xTaskResumeAll+0x120>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d011      	beq.n	8005f3c <xTaskResumeAll+0xd8>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8005f18:	e00c      	b.n	8005f34 <xTaskResumeAll+0xd0>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8005f1a:	f000 f837 	bl	8005f8c <xTaskIncrementTick>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <xTaskResumeAll+0xc6>
						{
							xYieldPending = pdTRUE;
 8005f24:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <xTaskResumeAll+0x11c>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8005f2a:	4b16      	ldr	r3, [pc, #88]	; (8005f84 <xTaskResumeAll+0x120>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	4a14      	ldr	r2, [pc, #80]	; (8005f84 <xTaskResumeAll+0x120>)
 8005f32:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8005f34:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <xTaskResumeAll+0x120>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1ee      	bne.n	8005f1a <xTaskResumeAll+0xb6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8005f3c:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <xTaskResumeAll+0x11c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d109      	bne.n	8005f58 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f44:	2301      	movs	r3, #1
 8005f46:	60fb      	str	r3, [r7, #12]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f48:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <xTaskResumeAll+0x124>)
 8005f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f58:	f7ff fea6 	bl	8005ca8 <vPortExitCritical>

	return xAlreadyYielded;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000194 	.word	0x20000194
 8005f6c:	20000174 	.word	0x20000174
 8005f70:	20000160 	.word	0x20000160
 8005f74:	2000017c 	.word	0x2000017c
 8005f78:	200000cc 	.word	0x200000cc
 8005f7c:	200000c8 	.word	0x200000c8
 8005f80:	20000188 	.word	0x20000188
 8005f84:	20000184 	.word	0x20000184
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f96:	4b51      	ldr	r3, [pc, #324]	; (80060dc <xTaskIncrementTick+0x150>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f040 808d 	bne.w	80060ba <xTaskIncrementTick+0x12e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8005fa0:	4b4f      	ldr	r3, [pc, #316]	; (80060e0 <xTaskIncrementTick+0x154>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	4a4e      	ldr	r2, [pc, #312]	; (80060e0 <xTaskIncrementTick+0x154>)
 8005fa8:	6013      	str	r3, [r2, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005faa:	4b4d      	ldr	r3, [pc, #308]	; (80060e0 <xTaskIncrementTick+0x154>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d11f      	bne.n	8005ff6 <xTaskIncrementTick+0x6a>
			{
				taskSWITCH_DELAYED_LISTS();
 8005fb6:	4b4b      	ldr	r3, [pc, #300]	; (80060e4 <xTaskIncrementTick+0x158>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d009      	beq.n	8005fd4 <xTaskIncrementTick+0x48>
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	603b      	str	r3, [r7, #0]
 8005fd2:	e7fe      	b.n	8005fd2 <xTaskIncrementTick+0x46>
 8005fd4:	4b43      	ldr	r3, [pc, #268]	; (80060e4 <xTaskIncrementTick+0x158>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	4b43      	ldr	r3, [pc, #268]	; (80060e8 <xTaskIncrementTick+0x15c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a41      	ldr	r2, [pc, #260]	; (80060e4 <xTaskIncrementTick+0x158>)
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	4a41      	ldr	r2, [pc, #260]	; (80060e8 <xTaskIncrementTick+0x15c>)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	4b40      	ldr	r3, [pc, #256]	; (80060ec <xTaskIncrementTick+0x160>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3301      	adds	r3, #1
 8005fee:	4a3f      	ldr	r2, [pc, #252]	; (80060ec <xTaskIncrementTick+0x160>)
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	f000 f919 	bl	8006228 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8005ff6:	4b3e      	ldr	r3, [pc, #248]	; (80060f0 <xTaskIncrementTick+0x164>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d34d      	bcc.n	800609c <xTaskIncrementTick+0x110>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006000:	4b38      	ldr	r3, [pc, #224]	; (80060e4 <xTaskIncrementTick+0x158>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <xTaskIncrementTick+0x82>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <xTaskIncrementTick+0x84>
 800600e:	2300      	movs	r3, #0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d004      	beq.n	800601e <xTaskIncrementTick+0x92>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8006014:	4b36      	ldr	r3, [pc, #216]	; (80060f0 <xTaskIncrementTick+0x164>)
 8006016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800601a:	601a      	str	r2, [r3, #0]
						break;
 800601c:	e03e      	b.n	800609c <xTaskIncrementTick+0x110>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800601e:	4b31      	ldr	r3, [pc, #196]	; (80060e4 <xTaskIncrementTick+0x158>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	429a      	cmp	r2, r3
 8006034:	d203      	bcs.n	800603e <xTaskIncrementTick+0xb2>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8006036:	4a2e      	ldr	r2, [pc, #184]	; (80060f0 <xTaskIncrementTick+0x164>)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6013      	str	r3, [r2, #0]
							break;
 800603c:	e02e      	b.n	800609c <xTaskIncrementTick+0x110>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	3304      	adds	r3, #4
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff fdc5 	bl	8005bd2 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <xTaskIncrementTick+0xce>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	3318      	adds	r3, #24
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fdbc 	bl	8005bd2 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605e:	2201      	movs	r2, #1
 8006060:	409a      	lsls	r2, r3
 8006062:	4b24      	ldr	r3, [pc, #144]	; (80060f4 <xTaskIncrementTick+0x168>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4313      	orrs	r3, r2
 8006068:	4a22      	ldr	r2, [pc, #136]	; (80060f4 <xTaskIncrementTick+0x168>)
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4a1f      	ldr	r2, [pc, #124]	; (80060f8 <xTaskIncrementTick+0x16c>)
 800607a:	441a      	add	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	3304      	adds	r3, #4
 8006080:	4619      	mov	r1, r3
 8006082:	4610      	mov	r0, r2
 8006084:	f7ff fd48 	bl	8005b18 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608c:	4b1b      	ldr	r3, [pc, #108]	; (80060fc <xTaskIncrementTick+0x170>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	429a      	cmp	r2, r3
 8006094:	d3b4      	bcc.n	8006000 <xTaskIncrementTick+0x74>
							{
								xSwitchRequired = pdTRUE;
 8006096:	2301      	movs	r3, #1
 8006098:	617b      	str	r3, [r7, #20]
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800609a:	e7b1      	b.n	8006000 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800609c:	4b17      	ldr	r3, [pc, #92]	; (80060fc <xTaskIncrementTick+0x170>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a2:	4915      	ldr	r1, [pc, #84]	; (80060f8 <xTaskIncrementTick+0x16c>)
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d907      	bls.n	80060c4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80060b4:	2301      	movs	r3, #1
 80060b6:	617b      	str	r3, [r7, #20]
 80060b8:	e004      	b.n	80060c4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80060ba:	4b11      	ldr	r3, [pc, #68]	; (8006100 <xTaskIncrementTick+0x174>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3301      	adds	r3, #1
 80060c0:	4a0f      	ldr	r2, [pc, #60]	; (8006100 <xTaskIncrementTick+0x174>)
 80060c2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80060c4:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <xTaskIncrementTick+0x178>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80060cc:	2301      	movs	r3, #1
 80060ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80060d0:	697b      	ldr	r3, [r7, #20]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20000194 	.word	0x20000194
 80060e0:	20000178 	.word	0x20000178
 80060e4:	20000158 	.word	0x20000158
 80060e8:	2000015c 	.word	0x2000015c
 80060ec:	2000018c 	.word	0x2000018c
 80060f0:	20000190 	.word	0x20000190
 80060f4:	2000017c 	.word	0x2000017c
 80060f8:	200000cc 	.word	0x200000cc
 80060fc:	200000c8 	.word	0x200000c8
 8006100:	20000184 	.word	0x20000184
 8006104:	20000188 	.word	0x20000188

08006108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800610e:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <vTaskSwitchContext+0xa0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006116:	4b25      	ldr	r3, [pc, #148]	; (80061ac <vTaskSwitchContext+0xa4>)
 8006118:	2201      	movs	r2, #1
 800611a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800611c:	e03e      	b.n	800619c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800611e:	4b23      	ldr	r3, [pc, #140]	; (80061ac <vTaskSwitchContext+0xa4>)
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006124:	4b22      	ldr	r3, [pc, #136]	; (80061b0 <vTaskSwitchContext+0xa8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	fab3 f383 	clz	r3, r3
 8006130:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006132:	7afb      	ldrb	r3, [r7, #11]
 8006134:	f1c3 031f 	rsb	r3, r3, #31
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	491e      	ldr	r1, [pc, #120]	; (80061b4 <vTaskSwitchContext+0xac>)
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	440b      	add	r3, r1
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d109      	bne.n	8006162 <vTaskSwitchContext+0x5a>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	607b      	str	r3, [r7, #4]
 8006160:	e7fe      	b.n	8006160 <vTaskSwitchContext+0x58>
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4a11      	ldr	r2, [pc, #68]	; (80061b4 <vTaskSwitchContext+0xac>)
 800616e:	4413      	add	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	605a      	str	r2, [r3, #4]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	3308      	adds	r3, #8
 8006184:	429a      	cmp	r2, r3
 8006186:	d104      	bne.n	8006192 <vTaskSwitchContext+0x8a>
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	605a      	str	r2, [r3, #4]
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	4a07      	ldr	r2, [pc, #28]	; (80061b8 <vTaskSwitchContext+0xb0>)
 800619a:	6013      	str	r3, [r2, #0]
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	20000194 	.word	0x20000194
 80061ac:	20000188 	.word	0x20000188
 80061b0:	2000017c 	.word	0x2000017c
 80061b4:	200000cc 	.word	0x200000cc
 80061b8:	200000c8 	.word	0x200000c8

080061bc <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80061c4:	4b13      	ldr	r3, [pc, #76]	; (8006214 <prvAddCurrentTaskToDelayedList+0x58>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 80061cc:	4b12      	ldr	r3, [pc, #72]	; (8006218 <prvAddCurrentTaskToDelayedList+0x5c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d209      	bcs.n	80061ea <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80061d6:	4b11      	ldr	r3, [pc, #68]	; (800621c <prvAddCurrentTaskToDelayedList+0x60>)
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4b0e      	ldr	r3, [pc, #56]	; (8006214 <prvAddCurrentTaskToDelayedList+0x58>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3304      	adds	r3, #4
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f7ff fcbc 	bl	8005b60 <vListInsert>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061e8:	e010      	b.n	800620c <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80061ea:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <prvAddCurrentTaskToDelayedList+0x64>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b09      	ldr	r3, [pc, #36]	; (8006214 <prvAddCurrentTaskToDelayedList+0x58>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4619      	mov	r1, r3
 80061f6:	4610      	mov	r0, r2
 80061f8:	f7ff fcb2 	bl	8005b60 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 80061fc:	4b09      	ldr	r3, [pc, #36]	; (8006224 <prvAddCurrentTaskToDelayedList+0x68>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	429a      	cmp	r2, r3
 8006204:	d202      	bcs.n	800620c <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
 8006206:	4a07      	ldr	r2, [pc, #28]	; (8006224 <prvAddCurrentTaskToDelayedList+0x68>)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6013      	str	r3, [r2, #0]
}
 800620c:	bf00      	nop
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	200000c8 	.word	0x200000c8
 8006218:	20000178 	.word	0x20000178
 800621c:	2000015c 	.word	0x2000015c
 8006220:	20000158 	.word	0x20000158
 8006224:	20000190 	.word	0x20000190

08006228 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800622e:	4b0f      	ldr	r3, [pc, #60]	; (800626c <prvResetNextTaskUnblockTime+0x44>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <prvResetNextTaskUnblockTime+0x14>
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <prvResetNextTaskUnblockTime+0x16>
 800623c:	2300      	movs	r3, #0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006242:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <prvResetNextTaskUnblockTime+0x48>)
 8006244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006248:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800624a:	e008      	b.n	800625e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800624c:	4b07      	ldr	r3, [pc, #28]	; (800626c <prvResetNextTaskUnblockTime+0x44>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	4a05      	ldr	r2, [pc, #20]	; (8006270 <prvResetNextTaskUnblockTime+0x48>)
 800625c:	6013      	str	r3, [r2, #0]
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	20000158 	.word	0x20000158
 8006270:	20000190 	.word	0x20000190

08006274 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800627a:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <xTaskGetSchedulerState+0x34>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d102      	bne.n	8006288 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006282:	2301      	movs	r3, #1
 8006284:	607b      	str	r3, [r7, #4]
 8006286:	e008      	b.n	800629a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006288:	4b08      	ldr	r3, [pc, #32]	; (80062ac <xTaskGetSchedulerState+0x38>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d102      	bne.n	8006296 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006290:	2302      	movs	r3, #2
 8006292:	607b      	str	r3, [r7, #4]
 8006294:	e001      	b.n	800629a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006296:	2300      	movs	r3, #0
 8006298:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800629a:	687b      	ldr	r3, [r7, #4]
	}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	20000180 	.word	0x20000180
 80062ac:	20000194 	.word	0x20000194

080062b0 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */


	hi2c1.Instance = I2C1;
 80062b4:	4b15      	ldr	r3, [pc, #84]	; (800630c <MX_I2C1_SMBUS_Init+0x5c>)
 80062b6:	4a16      	ldr	r2, [pc, #88]	; (8006310 <MX_I2C1_SMBUS_Init+0x60>)
 80062b8:	601a      	str	r2, [r3, #0]
	hi2c1.Mode = HAL_I2C_MODE_MASTER;
 80062ba:	4b14      	ldr	r3, [pc, #80]	; (800630c <MX_I2C1_SMBUS_Init+0x5c>)
 80062bc:	2210      	movs	r2, #16
 80062be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	hi2c1.Init.Timing = 0xA0120227;
 80062c2:	4b12      	ldr	r3, [pc, #72]	; (800630c <MX_I2C1_SMBUS_Init+0x5c>)
 80062c4:	4a13      	ldr	r2, [pc, #76]	; (8006314 <MX_I2C1_SMBUS_Init+0x64>)
 80062c6:	605a      	str	r2, [r3, #4]

	//hi2c1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
	hi2c1.Init.OwnAddress1 = 0;
 80062c8:	4b10      	ldr	r3, [pc, #64]	; (800630c <MX_I2C1_SMBUS_Init+0x5c>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80062ce:	4b0f      	ldr	r3, [pc, #60]	; (800630c <MX_I2C1_SMBUS_Init+0x5c>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80062d4:	4b0d      	ldr	r3, [pc, #52]	; (800630c <MX_I2C1_SMBUS_Init+0x5c>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80062da:	4b0c      	ldr	r3, [pc, #48]	; (800630c <MX_I2C1_SMBUS_Init+0x5c>)
 80062dc:	2200      	movs	r2, #0
 80062de:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80062e0:	4b0a      	ldr	r3, [pc, #40]	; (800630c <MX_I2C1_SMBUS_Init+0x5c>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80062e6:	4b09      	ldr	r3, [pc, #36]	; (800630c <MX_I2C1_SMBUS_Init+0x5c>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80062ec:	4b07      	ldr	r3, [pc, #28]	; (800630c <MX_I2C1_SMBUS_Init+0x5c>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	621a      	str	r2, [r3, #32]
	//hi2c1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
	//hi2c1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
	//hi2c1.Init.SMBusTimeout = 0x0000836E;
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80062f2:	4806      	ldr	r0, [pc, #24]	; (800630c <MX_I2C1_SMBUS_Init+0x5c>)
 80062f4:	f7fc fa5a 	bl	80027ac <HAL_I2C_Init>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <MX_I2C1_SMBUS_Init+0x52>
	{
	Error_Handler();
 80062fe:	f000 fc1f 	bl	8006b40 <Error_Handler>
	}

	HAL_I2C_MspInit(&hi2c1);
 8006302:	4802      	ldr	r0, [pc, #8]	; (800630c <MX_I2C1_SMBUS_Init+0x5c>)
 8006304:	f000 fc76 	bl	8006bf4 <HAL_I2C_MspInit>

  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006308:	bf00      	nop
 800630a:	bd80      	pop	{r7, pc}
 800630c:	200002b8 	.word	0x200002b8
 8006310:	40005400 	.word	0x40005400
 8006314:	a0120227 	.word	0xa0120227

08006318 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800631c:	4b15      	ldr	r3, [pc, #84]	; (8006374 <MX_USART1_UART_Init+0x5c>)
 800631e:	4a16      	ldr	r2, [pc, #88]	; (8006378 <MX_USART1_UART_Init+0x60>)
 8006320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006322:	4b14      	ldr	r3, [pc, #80]	; (8006374 <MX_USART1_UART_Init+0x5c>)
 8006324:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <MX_USART1_UART_Init+0x5c>)
 800632c:	2200      	movs	r2, #0
 800632e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006330:	4b10      	ldr	r3, [pc, #64]	; (8006374 <MX_USART1_UART_Init+0x5c>)
 8006332:	2200      	movs	r2, #0
 8006334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006336:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <MX_USART1_UART_Init+0x5c>)
 8006338:	2200      	movs	r2, #0
 800633a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800633c:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <MX_USART1_UART_Init+0x5c>)
 800633e:	220c      	movs	r2, #12
 8006340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006342:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <MX_USART1_UART_Init+0x5c>)
 8006344:	2200      	movs	r2, #0
 8006346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <MX_USART1_UART_Init+0x5c>)
 800634a:	2200      	movs	r2, #0
 800634c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800634e:	4b09      	ldr	r3, [pc, #36]	; (8006374 <MX_USART1_UART_Init+0x5c>)
 8006350:	2200      	movs	r2, #0
 8006352:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006354:	4b07      	ldr	r3, [pc, #28]	; (8006374 <MX_USART1_UART_Init+0x5c>)
 8006356:	2200      	movs	r2, #0
 8006358:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800635a:	4806      	ldr	r0, [pc, #24]	; (8006374 <MX_USART1_UART_Init+0x5c>)
 800635c:	f7fe feef 	bl	800513e <HAL_UART_Init>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006366:	f000 fbeb 	bl	8006b40 <Error_Handler>
  }

  HAL_UART_MspInit(&huart1);
 800636a:	4802      	ldr	r0, [pc, #8]	; (8006374 <MX_USART1_UART_Init+0x5c>)
 800636c:	f000 fc90 	bl	8006c90 <HAL_UART_MspInit>

  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006370:	bf00      	nop
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20000338 	.word	0x20000338
 8006378:	40013800 	.word	0x40013800

0800637c <initLEDs>:


void initLEDs(){
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006382:	1d3b      	adds	r3, r7, #4
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	605a      	str	r2, [r3, #4]
 800638a:	609a      	str	r2, [r3, #8]
 800638c:	60da      	str	r2, [r3, #12]
 800638e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8006390:	23f0      	movs	r3, #240	; 0xf0
 8006392:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006394:	2301      	movs	r3, #1
 8006396:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006398:	2300      	movs	r3, #0
 800639a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800639c:	2300      	movs	r3, #0
 800639e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063a0:	1d3b      	adds	r3, r7, #4
 80063a2:	4619      	mov	r1, r3
 80063a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063a8:	f7fc f86a 	bl	8002480 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80063ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80063b0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063b2:	2301      	movs	r3, #1
 80063b4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ba:	2300      	movs	r3, #0
 80063bc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063be:	1d3b      	adds	r3, r7, #4
 80063c0:	4619      	mov	r1, r3
 80063c2:	4803      	ldr	r0, [pc, #12]	; (80063d0 <initLEDs+0x54>)
 80063c4:	f7fc f85c 	bl	8002480 <HAL_GPIO_Init>

}
 80063c8:	bf00      	nop
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	48000400 	.word	0x48000400

080063d4 <initButtons>:


void initButtons(){
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063da:	1d3b      	adds	r3, r7, #4
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	609a      	str	r2, [r3, #8]
 80063e4:	60da      	str	r2, [r3, #12]
 80063e6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2 | GPIO_PIN_1 | GPIO_PIN_0 ;
 80063e8:	230f      	movs	r3, #15
 80063ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063f4:	2300      	movs	r3, #0
 80063f6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063f8:	1d3b      	adds	r3, r7, #4
 80063fa:	4619      	mov	r1, r3
 80063fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006400:	f7fc f83e 	bl	8002480 <HAL_GPIO_Init>


}
 8006404:	bf00      	nop
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <Si7006_port_init>:





Si7006_error_t Si7006_port_init(void){
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0

}
 8006410:	bf00      	nop
 8006412:	4618      	mov	r0, r3
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <Si7006_port_i2c_init>:
Si7006_error_t Si7006_port_i2c_init(void){
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0

}
 8006420:	bf00      	nop
 8006422:	4618      	mov	r0, r3
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <Si7006_port_i2c_transmit>:
Si7006_error_t Si7006_port_i2c_transmit(uint8_t *data, unsigned int size){
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af02      	add	r7, sp, #8
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1,(0x40<<1) ,data,size, 1000);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	b29a      	uxth	r2, r3
 800643a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	2180      	movs	r1, #128	; 0x80
 8006446:	4807      	ldr	r0, [pc, #28]	; (8006464 <Si7006_port_i2c_transmit+0x38>)
 8006448:	f7fc fa3e 	bl	80028c8 <HAL_I2C_Master_Transmit>
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <Si7006_port_i2c_transmit+0x2e>
 8006456:	2300      	movs	r3, #0
 8006458:	e000      	b.n	800645c <Si7006_port_i2c_transmit+0x30>
	else return SI7006_ERROR;
 800645a:	2301      	movs	r3, #1
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	200002b8 	.word	0x200002b8

08006468 <Si7006_port_i2c_receive>:
Si7006_error_t Si7006_port_i2c_receive(uint8_t *data, unsigned int size){
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af02      	add	r7, sp, #8
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c1,(0x40<<1) ,data,size, 1000);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	b29a      	uxth	r2, r3
 8006476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	2180      	movs	r1, #128	; 0x80
 8006482:	4807      	ldr	r0, [pc, #28]	; (80064a0 <Si7006_port_i2c_receive+0x38>)
 8006484:	f7fc fb20 	bl	8002ac8 <HAL_I2C_Master_Receive>
 8006488:	4603      	mov	r3, r0
 800648a:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <Si7006_port_i2c_receive+0x2e>
 8006492:	2300      	movs	r3, #0
 8006494:	e000      	b.n	8006498 <Si7006_port_i2c_receive+0x30>
	else return SI7006_ERROR;
 8006496:	2301      	movs	r3, #1
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	200002b8 	.word	0x200002b8

080064a4 <Si7006_port_check_hardware>:
Si7006_error_t Si7006_port_check_hardware(){
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1,(0x40<<1), 1000, 1000);
 80064aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064b2:	2180      	movs	r1, #128	; 0x80
 80064b4:	4807      	ldr	r0, [pc, #28]	; (80064d4 <Si7006_port_check_hardware+0x30>)
 80064b6:	f7fc fc09 	bl	8002ccc <HAL_I2C_IsDeviceReady>
 80064ba:	4603      	mov	r3, r0
 80064bc:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <Si7006_port_check_hardware+0x24>
 80064c4:	2300      	movs	r3, #0
 80064c6:	e000      	b.n	80064ca <Si7006_port_check_hardware+0x26>
	else return SI7006_ERROR;
 80064c8:	2301      	movs	r3, #1
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	200002b8 	.word	0x200002b8

080064d8 <Si7006_port_delay>:
Si7006_error_t Si7006_port_delay(unsigned int ms){
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]

	HAL_Delay(ms);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7fb fed3 	bl	800228c <HAL_Delay>
}
 80064e6:	bf00      	nop
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <RadioReset>:


NRF24L01p_RadioConfig_t NRF24L01p_RadioConfig;
NRF24L01p_RxPipeConfig_t RxPipeConfig[6];

void RadioReset(){
 80064f0:	b590      	push	{r4, r7, lr}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0

	NRF24L01p_RadioConfig.DataReadyInterruptEnabled = 0;
 80064f6:	4b48      	ldr	r3, [pc, #288]	; (8006618 <RadioReset+0x128>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	701a      	strb	r2, [r3, #0]
	NRF24L01p_RadioConfig.DataSentInterruptFlagEnabled = 0;
 80064fc:	4b46      	ldr	r3, [pc, #280]	; (8006618 <RadioReset+0x128>)
 80064fe:	2200      	movs	r2, #0
 8006500:	705a      	strb	r2, [r3, #1]
	NRF24L01p_RadioConfig.MaxRetryInterruptFlagEnabled = 0;
 8006502:	4b45      	ldr	r3, [pc, #276]	; (8006618 <RadioReset+0x128>)
 8006504:	2200      	movs	r2, #0
 8006506:	709a      	strb	r2, [r3, #2]
	NRF24L01p_RadioConfig.Crc = CONFIG_CRC_16BIT;
 8006508:	4b43      	ldr	r3, [pc, #268]	; (8006618 <RadioReset+0x128>)
 800650a:	220c      	movs	r2, #12
 800650c:	70da      	strb	r2, [r3, #3]
	NRF24L01p_RadioConfig.AutoReTransmissionCount = 15;
 800650e:	4b42      	ldr	r3, [pc, #264]	; (8006618 <RadioReset+0x128>)
 8006510:	220f      	movs	r2, #15
 8006512:	711a      	strb	r2, [r3, #4]
	NRF24L01p_RadioConfig.AutoReTransmitDelayX250us = 15;
 8006514:	4b40      	ldr	r3, [pc, #256]	; (8006618 <RadioReset+0x128>)
 8006516:	220f      	movs	r2, #15
 8006518:	715a      	strb	r2, [r3, #5]
	NRF24L01p_RadioConfig.frequencyOffset = 2;
 800651a:	4b3f      	ldr	r3, [pc, #252]	; (8006618 <RadioReset+0x128>)
 800651c:	2202      	movs	r2, #2
 800651e:	719a      	strb	r2, [r3, #6]
	NRF24L01p_RadioConfig.datarate = RF_SETUP_RF_DR_2MBPS;
 8006520:	4b3d      	ldr	r3, [pc, #244]	; (8006618 <RadioReset+0x128>)
 8006522:	2208      	movs	r2, #8
 8006524:	71da      	strb	r2, [r3, #7]
	NRF24L01p_RadioConfig.RfPower = RF_SETUP_RF_PWR_0DBM;
 8006526:	4b3c      	ldr	r3, [pc, #240]	; (8006618 <RadioReset+0x128>)
 8006528:	2206      	movs	r2, #6
 800652a:	721a      	strb	r2, [r3, #8]
	NRF24L01p_RadioConfig.PllLock = 0;
 800652c:	4b3a      	ldr	r3, [pc, #232]	; (8006618 <RadioReset+0x128>)
 800652e:	2200      	movs	r2, #0
 8006530:	725a      	strb	r2, [r3, #9]
	NRF24L01p_RadioConfig.ContWaveEnabled = 0;
 8006532:	4b39      	ldr	r3, [pc, #228]	; (8006618 <RadioReset+0x128>)
 8006534:	2200      	movs	r2, #0
 8006536:	729a      	strb	r2, [r3, #10]
	NRF24L01p_RadioConfig.FeatureDynamicPayloadEnabled = 1;
 8006538:	4b37      	ldr	r3, [pc, #220]	; (8006618 <RadioReset+0x128>)
 800653a:	2201      	movs	r2, #1
 800653c:	72da      	strb	r2, [r3, #11]
	NRF24L01p_RadioConfig.FeaturePayloadWithAckEnabled = 1;
 800653e:	4b36      	ldr	r3, [pc, #216]	; (8006618 <RadioReset+0x128>)
 8006540:	2201      	movs	r2, #1
 8006542:	731a      	strb	r2, [r3, #12]
	NRF24L01p_RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
 8006544:	4b34      	ldr	r3, [pc, #208]	; (8006618 <RadioReset+0x128>)
 8006546:	2201      	movs	r2, #1
 8006548:	735a      	strb	r2, [r3, #13]

    RxPipeConfig[0].address = 0x11223344EE;
 800654a:	4a34      	ldr	r2, [pc, #208]	; (800661c <RadioReset+0x12c>)
 800654c:	a426      	add	r4, pc, #152	; (adr r4, 80065e8 <RadioReset+0xf8>)
 800654e:	cc18      	ldmia	r4, {r3, r4}
 8006550:	e9c2 3402 	strd	r3, r4, [r2, #8]
    RxPipeConfig[1].address = 0x9A4524CE01;
 8006554:	4a31      	ldr	r2, [pc, #196]	; (800661c <RadioReset+0x12c>)
 8006556:	a426      	add	r4, pc, #152	; (adr r4, 80065f0 <RadioReset+0x100>)
 8006558:	cc18      	ldmia	r4, {r3, r4}
 800655a:	e9c2 3408 	strd	r3, r4, [r2, #32]
    RxPipeConfig[2].address = 0x9A4524CE02;
 800655e:	4a2f      	ldr	r2, [pc, #188]	; (800661c <RadioReset+0x12c>)
 8006560:	a425      	add	r4, pc, #148	; (adr r4, 80065f8 <RadioReset+0x108>)
 8006562:	cc18      	ldmia	r4, {r3, r4}
 8006564:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    RxPipeConfig[3].address = 0x9A4524CE03;
 8006568:	4a2c      	ldr	r2, [pc, #176]	; (800661c <RadioReset+0x12c>)
 800656a:	a425      	add	r4, pc, #148	; (adr r4, 8006600 <RadioReset+0x110>)
 800656c:	cc18      	ldmia	r4, {r3, r4}
 800656e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    RxPipeConfig[4].address = 0x9A4524CE04;
 8006572:	4a2a      	ldr	r2, [pc, #168]	; (800661c <RadioReset+0x12c>)
 8006574:	a424      	add	r4, pc, #144	; (adr r4, 8006608 <RadioReset+0x118>)
 8006576:	cc18      	ldmia	r4, {r3, r4}
 8006578:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    RxPipeConfig[5].address = 0x9A4524CE05;
 800657c:	4a27      	ldr	r2, [pc, #156]	; (800661c <RadioReset+0x12c>)
 800657e:	a424      	add	r4, pc, #144	; (adr r4, 8006610 <RadioReset+0x120>)
 8006580:	cc18      	ldmia	r4, {r3, r4}
 8006582:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80


	int i;
	for(i=0;i<6;i++){
 8006586:	2300      	movs	r3, #0
 8006588:	607b      	str	r3, [r7, #4]
 800658a:	e01f      	b.n	80065cc <RadioReset+0xdc>
		RxPipeConfig[i].PipeEnabled = 1;
 800658c:	4923      	ldr	r1, [pc, #140]	; (800661c <RadioReset+0x12c>)
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	4613      	mov	r3, r2
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	4413      	add	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	440b      	add	r3, r1
 800659a:	2201      	movs	r2, #1
 800659c:	701a      	strb	r2, [r3, #0]
		RxPipeConfig[i].autoAckEnabled = 1;
 800659e:	491f      	ldr	r1, [pc, #124]	; (800661c <RadioReset+0x12c>)
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	4613      	mov	r3, r2
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	4413      	add	r3, r2
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	440b      	add	r3, r1
 80065ac:	3301      	adds	r3, #1
 80065ae:	2201      	movs	r2, #1
 80065b0:	701a      	strb	r2, [r3, #0]
		RxPipeConfig[i].dynamicPayloadEnabled = 1;
 80065b2:	491a      	ldr	r1, [pc, #104]	; (800661c <RadioReset+0x12c>)
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	4413      	add	r3, r2
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	440b      	add	r3, r1
 80065c0:	3311      	adds	r3, #17
 80065c2:	2201      	movs	r2, #1
 80065c4:	701a      	strb	r2, [r3, #0]
	for(i=0;i<6;i++){
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3301      	adds	r3, #1
 80065ca:	607b      	str	r3, [r7, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	dddc      	ble.n	800658c <RadioReset+0x9c>
	}


	NRF24L01p_ResetConfigValues(&NRF24L01p_RadioConfig, RxPipeConfig);
 80065d2:	4912      	ldr	r1, [pc, #72]	; (800661c <RadioReset+0x12c>)
 80065d4:	4810      	ldr	r0, [pc, #64]	; (8006618 <RadioReset+0x128>)
 80065d6:	f7fa fe35 	bl	8001244 <NRF24L01p_ResetConfigValues>
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd90      	pop	{r4, r7, pc}
 80065e2:	bf00      	nop
 80065e4:	f3af 8000 	nop.w
 80065e8:	223344ee 	.word	0x223344ee
 80065ec:	00000011 	.word	0x00000011
 80065f0:	4524ce01 	.word	0x4524ce01
 80065f4:	0000009a 	.word	0x0000009a
 80065f8:	4524ce02 	.word	0x4524ce02
 80065fc:	0000009a 	.word	0x0000009a
 8006600:	4524ce03 	.word	0x4524ce03
 8006604:	0000009a 	.word	0x0000009a
 8006608:	4524ce04 	.word	0x4524ce04
 800660c:	0000009a 	.word	0x0000009a
 8006610:	4524ce05 	.word	0x4524ce05
 8006614:	0000009a 	.word	0x0000009a
 8006618:	200003a8 	.word	0x200003a8
 800661c:	20000220 	.word	0x20000220

08006620 <custom_print>:

static void custom_print(char *str){
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str),0xFFFF);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7f9 fdd1 	bl	80001d0 <strlen>
 800662e:	4603      	mov	r3, r0
 8006630:	b29a      	uxth	r2, r3
 8006632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4803      	ldr	r0, [pc, #12]	; (8006648 <custom_print+0x28>)
 800663a:	f7fe fdd1 	bl	80051e0 <HAL_UART_Transmit>
}
 800663e:	bf00      	nop
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20000338 	.word	0x20000338
 800664c:	00000000 	.word	0x00000000

08006650 <main>:




int main(void)
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b0b1      	sub	sp, #196	; 0xc4
 8006654:	af00      	add	r7, sp, #0

	HAL_Init();
 8006656:	f7fb fdd5 	bl	8002204 <HAL_Init>
	SystemClock_Config();
 800665a:	f000 f9d5 	bl	8006a08 <SystemClock_Config>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 800665e:	4aba      	ldr	r2, [pc, #744]	; (8006948 <main+0x2f8>)
 8006660:	4bb9      	ldr	r3, [pc, #740]	; (8006948 <main+0x2f8>)
 8006662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006664:	f043 0304 	orr.w	r3, r3, #4
 8006668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800666a:	4bb7      	ldr	r3, [pc, #732]	; (8006948 <main+0x2f8>)
 800666c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	//__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006676:	4ab4      	ldr	r2, [pc, #720]	; (8006948 <main+0x2f8>)
 8006678:	4bb3      	ldr	r3, [pc, #716]	; (8006948 <main+0x2f8>)
 800667a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667c:	f043 0301 	orr.w	r3, r3, #1
 8006680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006682:	4bb1      	ldr	r3, [pc, #708]	; (8006948 <main+0x2f8>)
 8006684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	64bb      	str	r3, [r7, #72]	; 0x48
 800668c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800668e:	4aae      	ldr	r2, [pc, #696]	; (8006948 <main+0x2f8>)
 8006690:	4bad      	ldr	r3, [pc, #692]	; (8006948 <main+0x2f8>)
 8006692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006694:	f043 0302 	orr.w	r3, r3, #2
 8006698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800669a:	4bab      	ldr	r3, [pc, #684]	; (8006948 <main+0x2f8>)
 800669c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	647b      	str	r3, [r7, #68]	; 0x44
 80066a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80066a6:	4aa8      	ldr	r2, [pc, #672]	; (8006948 <main+0x2f8>)
 80066a8:	4ba7      	ldr	r3, [pc, #668]	; (8006948 <main+0x2f8>)
 80066aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ac:	f043 0308 	orr.w	r3, r3, #8
 80066b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066b2:	4ba5      	ldr	r3, [pc, #660]	; (8006948 <main+0x2f8>)
 80066b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	643b      	str	r3, [r7, #64]	; 0x40
 80066bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40

	c12832_hal_spi_init();
 80066be:	f7fa fb31 	bl	8000d24 <c12832_hal_spi_init>
	c12832_hal_gpio_init();
 80066c2:	f7fa fba5 	bl	8000e10 <c12832_hal_gpio_init>


	MX_I2C1_SMBUS_Init();
 80066c6:	f7ff fdf3 	bl	80062b0 <MX_I2C1_SMBUS_Init>
	MX_USART1_UART_Init();
 80066ca:	f7ff fe25 	bl	8006318 <MX_USART1_UART_Init>


	initLEDs();
 80066ce:	f7ff fe55 	bl	800637c <initLEDs>
	initButtons();
 80066d2:	f7ff fe7f 	bl	80063d4 <initButtons>


	//testLedAndButtones();


	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80066d6:	2201      	movs	r2, #1
 80066d8:	2110      	movs	r1, #16
 80066da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066de:	f7fc f84d 	bl	800277c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80066e2:	2201      	movs	r2, #1
 80066e4:	2120      	movs	r1, #32
 80066e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066ea:	f7fc f847 	bl	800277c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80066ee:	2201      	movs	r2, #1
 80066f0:	2140      	movs	r1, #64	; 0x40
 80066f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066f6:	f7fc f841 	bl	800277c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80066fa:	2201      	movs	r2, #1
 80066fc:	2180      	movs	r1, #128	; 0x80
 80066fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006702:	f7fc f83b 	bl	800277c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8006706:	2201      	movs	r2, #1
 8006708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800670c:	488f      	ldr	r0, [pc, #572]	; (800694c <main+0x2fc>)
 800670e:	f7fc f835 	bl	800277c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8006712:	2201      	movs	r2, #1
 8006714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006718:	488c      	ldr	r0, [pc, #560]	; (800694c <main+0x2fc>)
 800671a:	f7fc f82f 	bl	800277c <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(DISPLAY_BACKLIGHT_GPIO_Port, DISPLAY_BACKLIGHT_Pin, GPIO_PIN_RESET);
 800671e:	2200      	movs	r2, #0
 8006720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006728:	f7fc f828 	bl	800277c <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800672c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	609a      	str	r2, [r3, #8]
 8006738:	60da      	str	r2, [r3, #12]
 800673a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DISPLAY_BACKLIGHT_Pin;
 800673c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006744:	2301      	movs	r3, #1
 8006746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800674a:	2300      	movs	r3, #0
 800674c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006750:	2300      	movs	r3, #0
 8006752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	HAL_GPIO_Init(DISPLAY_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8006756:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800675a:	4619      	mov	r1, r3
 800675c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006760:	f7fb fe8e 	bl	8002480 <HAL_GPIO_Init>

	DISPLAY_BACKLIGHT_OFF;
 8006764:	2200      	movs	r2, #0
 8006766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800676a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800676e:	f7fc f805 	bl	800277c <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 8006772:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006776:	f7fb fd89 	bl	800228c <HAL_Delay>

	graphic_lcd_initialize ();
 800677a:	f7fa fc57 	bl	800102c <graphic_lcd_initialize>
	graphic_lcd_clear_screen ();
 800677e:	f7fa fbeb 	bl	8000f58 <graphic_lcd_clear_screen>
	DISPLAY_BACKLIGHT_ON;
 8006782:	2201      	movs	r2, #1
 8006784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800678c:	f7fb fff6 	bl	800277c <HAL_GPIO_WritePin>
	graphic_lcd_write(0, 0, "TX NODE");
 8006790:	4a6f      	ldr	r2, [pc, #444]	; (8006950 <main+0x300>)
 8006792:	2100      	movs	r1, #0
 8006794:	2000      	movs	r0, #0
 8006796:	f7fa fc07 	bl	8000fa8 <graphic_lcd_write>
	HAL_Delay(1000);
 800679a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800679e:	f7fb fd75 	bl	800228c <HAL_Delay>



	uint8_t Si7006DevAddr = 0x40<<1;
 80067a2:	2380      	movs	r3, #128	; 0x80
 80067a4:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	uint8_t Si1133DevAddr = 0x55<<1;
 80067a8:	23aa      	movs	r3, #170	; 0xaa
 80067aa:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2


	Si7006_t sensor;
	sensor.init = Si7006_port_init;
 80067ae:	4b69      	ldr	r3, [pc, #420]	; (8006954 <main+0x304>)
 80067b0:	673b      	str	r3, [r7, #112]	; 0x70
	sensor.i2c_init = Si7006_port_i2c_init;
 80067b2:	4b69      	ldr	r3, [pc, #420]	; (8006958 <main+0x308>)
 80067b4:	677b      	str	r3, [r7, #116]	; 0x74
	sensor.i2c_transmit = Si7006_port_i2c_transmit;
 80067b6:	4b69      	ldr	r3, [pc, #420]	; (800695c <main+0x30c>)
 80067b8:	67bb      	str	r3, [r7, #120]	; 0x78
	sensor.i2c_receive = Si7006_port_i2c_receive;
 80067ba:	4b69      	ldr	r3, [pc, #420]	; (8006960 <main+0x310>)
 80067bc:	67fb      	str	r3, [r7, #124]	; 0x7c
	sensor.check_hardware = Si7006_port_check_hardware;
 80067be:	4b69      	ldr	r3, [pc, #420]	; (8006964 <main+0x314>)
 80067c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	sensor.delay = Si7006_port_delay;
 80067c4:	4b68      	ldr	r3, [pc, #416]	; (8006968 <main+0x318>)
 80067c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84



	if(sensor.check_hardware() == SI7006_ERROR){
 80067ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067ce:	4798      	blx	r3
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d105      	bne.n	80067e2 <main+0x192>
		graphic_lcd_write(0, 0, "Si7006 NOT READY");
 80067d6:	4a65      	ldr	r2, [pc, #404]	; (800696c <main+0x31c>)
 80067d8:	2100      	movs	r1, #0
 80067da:	2000      	movs	r0, #0
 80067dc:	f7fa fbe4 	bl	8000fa8 <graphic_lcd_write>
 80067e0:	e004      	b.n	80067ec <main+0x19c>
	}else{
		graphic_lcd_write(0, 0, "Si7006 READY");
 80067e2:	4a63      	ldr	r2, [pc, #396]	; (8006970 <main+0x320>)
 80067e4:	2100      	movs	r1, #0
 80067e6:	2000      	movs	r0, #0
 80067e8:	f7fa fbde 	bl	8000fa8 <graphic_lcd_write>
	}


	int x = HAL_I2C_IsDeviceReady(&hi2c1,Si1133DevAddr, 1000, 1000);
 80067ec:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80067f0:	b299      	uxth	r1, r3
 80067f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067fa:	485e      	ldr	r0, [pc, #376]	; (8006974 <main+0x324>)
 80067fc:	f7fc fa66 	bl	8002ccc <HAL_I2C_IsDeviceReady>
 8006800:	4603      	mov	r3, r0
 8006802:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if(x == HAL_OK) graphic_lcd_write(1, 0, "Si1133 READY");
 8006806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800680a:	2b00      	cmp	r3, #0
 800680c:	d105      	bne.n	800681a <main+0x1ca>
 800680e:	4a5a      	ldr	r2, [pc, #360]	; (8006978 <main+0x328>)
 8006810:	2100      	movs	r1, #0
 8006812:	2001      	movs	r0, #1
 8006814:	f7fa fbc8 	bl	8000fa8 <graphic_lcd_write>
 8006818:	e004      	b.n	8006824 <main+0x1d4>
	else graphic_lcd_write(1, 0, "Si1133 NOT READY");
 800681a:	4a58      	ldr	r2, [pc, #352]	; (800697c <main+0x32c>)
 800681c:	2100      	movs	r1, #0
 800681e:	2001      	movs	r0, #1
 8006820:	f7fa fbc2 	bl	8000fa8 <graphic_lcd_write>



	HAL_Delay(3000);
 8006824:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006828:	f7fb fd30 	bl	800228c <HAL_Delay>
	graphic_lcd_clear_screen ();
 800682c:	f7fa fb94 	bl	8000f58 <graphic_lcd_clear_screen>


	RadioReset();
 8006830:	f7ff fe5e 	bl	80064f0 <RadioReset>

	char myMesg[32];

	Rxpayload.UseAck = 1;
 8006834:	4b52      	ldr	r3, [pc, #328]	; (8006980 <main+0x330>)
 8006836:	2201      	movs	r2, #1
 8006838:	725a      	strb	r2, [r3, #9]


	Rxpayload.address = 0x11223344EE;
 800683a:	4a51      	ldr	r2, [pc, #324]	; (8006980 <main+0x330>)
 800683c:	a440      	add	r4, pc, #256	; (adr r4, 8006940 <main+0x2f0>)
 800683e:	cc18      	ldmia	r4, {r3, r4}
 8006840:	e882 0018 	stmia.w	r2, {r3, r4}
	Rxpayload.data = (uint8_t*)myMesg;
 8006844:	4a4e      	ldr	r2, [pc, #312]	; (8006980 <main+0x330>)
 8006846:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800684a:	60d3      	str	r3, [r2, #12]
	Rxpayload.length = strlen(myMesg);
 800684c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006850:	4618      	mov	r0, r3
 8006852:	f7f9 fcbd 	bl	80001d0 <strlen>
 8006856:	4602      	mov	r2, r0
 8006858:	4b49      	ldr	r3, [pc, #292]	; (8006980 <main+0x330>)
 800685a:	611a      	str	r2, [r3, #16]
	Rxpayload.retransmitCount = 15;
 800685c:	4b48      	ldr	r3, [pc, #288]	; (8006980 <main+0x330>)
 800685e:	220f      	movs	r2, #15
 8006860:	751a      	strb	r2, [r3, #20]


	int count = 0;
 8006862:	2300      	movs	r3, #0
 8006864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int success = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	int fail = 0;
 800686e:	2300      	movs	r3, #0
 8006870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	//testLedAndButtones();



	while(1){
		custom_print("what the hell \r\n");
 8006874:	4843      	ldr	r0, [pc, #268]	; (8006984 <main+0x334>)
 8006876:	f7ff fed3 	bl	8006620 <custom_print>
		float temperature = Si7006_temperature(&sensor);
 800687a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800687e:	4618      	mov	r0, r3
 8006880:	f7fb fc62 	bl	8002148 <Si7006_temperature>
 8006884:	ed87 0a2a 	vstr	s0, [r7, #168]	; 0xa8

		int tempInteger = (int)temperature;
 8006888:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800688c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006890:	ee17 3a90 	vmov	r3, s15
 8006894:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		int tempDecimel = ((float)temperature - (int)temperature)*100;
 8006898:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800689c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068a4:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80068a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068ac:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006988 <main+0x338>
 80068b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068b8:	ee17 3a90 	vmov	r3, s15
 80068bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

		char tempString[30];

		sprintf(tempString, "Temp: %d.%d deg C", tempInteger,tempDecimel );
 80068c0:	f107 0020 	add.w	r0, r7, #32
 80068c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80068cc:	492f      	ldr	r1, [pc, #188]	; (800698c <main+0x33c>)
 80068ce:	f000 fb77 	bl	8006fc0 <siprintf>
		graphic_lcd_write(0, 0,tempString);
 80068d2:	f107 0320 	add.w	r3, r7, #32
 80068d6:	461a      	mov	r2, r3
 80068d8:	2100      	movs	r1, #0
 80068da:	2000      	movs	r0, #0
 80068dc:	f7fa fb64 	bl	8000fa8 <graphic_lcd_write>
		//sprintf(tempString, "Humidity: %d.%d %%", tempInteger,tempDecimel );
		//graphic_lcd_write(1, 0,tempString);



		sprintf(TxData, "message %d", count++);
 80068e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068ea:	461a      	mov	r2, r3
 80068ec:	4928      	ldr	r1, [pc, #160]	; (8006990 <main+0x340>)
 80068ee:	4829      	ldr	r0, [pc, #164]	; (8006994 <main+0x344>)
 80068f0:	f000 fb66 	bl	8006fc0 <siprintf>
		//TxPayload.data = tempString;
		TxPayload.data = TxData;
 80068f4:	4b28      	ldr	r3, [pc, #160]	; (8006998 <main+0x348>)
 80068f6:	4a27      	ldr	r2, [pc, #156]	; (8006994 <main+0x344>)
 80068f8:	60da      	str	r2, [r3, #12]
		TxPayload.UseAck = 1;
 80068fa:	4b27      	ldr	r3, [pc, #156]	; (8006998 <main+0x348>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	725a      	strb	r2, [r3, #9]
		TxPayload.length = strlen(TxData);
 8006900:	4824      	ldr	r0, [pc, #144]	; (8006994 <main+0x344>)
 8006902:	f7f9 fc65 	bl	80001d0 <strlen>
 8006906:	4602      	mov	r2, r0
 8006908:	4b23      	ldr	r3, [pc, #140]	; (8006998 <main+0x348>)
 800690a:	611a      	str	r2, [r3, #16]
		//TxPayload.length = strlen(tempString);
		TxPayload.address = 0x11223344EE;
 800690c:	4a22      	ldr	r2, [pc, #136]	; (8006998 <main+0x348>)
 800690e:	a40c      	add	r4, pc, #48	; (adr r4, 8006940 <main+0x2f0>)
 8006910:	cc18      	ldmia	r4, {r3, r4}
 8006912:	e882 0018 	stmia.w	r2, {r3, r4}

		NRF24L01p_writePayload(&TxPayload);
 8006916:	4820      	ldr	r0, [pc, #128]	; (8006998 <main+0x348>)
 8006918:	f7fa fe04 	bl	8001524 <NRF24L01p_writePayload>

		NRF24L01p_ErrorStatus_t ret = NRF24L01p_TransmitPayload(&TxPayload);
 800691c:	481e      	ldr	r0, [pc, #120]	; (8006998 <main+0x348>)
 800691e:	f7fa fe2b 	bl	8001578 <NRF24L01p_TransmitPayload>
 8006922:	4603      	mov	r3, r0
 8006924:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

		if(ret == NRF24L01P_SUCCESS){
 8006928:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800692c:	2b01      	cmp	r3, #1
 800692e:	d135      	bne.n	800699c <main+0x34c>
			success ++;
 8006930:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006934:	3301      	adds	r3, #1
 8006936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800693a:	e034      	b.n	80069a6 <main+0x356>
 800693c:	f3af 8000 	nop.w
 8006940:	223344ee 	.word	0x223344ee
 8006944:	00000011 	.word	0x00000011
 8006948:	40021000 	.word	0x40021000
 800694c:	48000400 	.word	0x48000400
 8006950:	08007070 	.word	0x08007070
 8006954:	0800640d 	.word	0x0800640d
 8006958:	0800641d 	.word	0x0800641d
 800695c:	0800642d 	.word	0x0800642d
 8006960:	08006469 	.word	0x08006469
 8006964:	080064a5 	.word	0x080064a5
 8006968:	080064d9 	.word	0x080064d9
 800696c:	08007078 	.word	0x08007078
 8006970:	0800708c 	.word	0x0800708c
 8006974:	200002b8 	.word	0x200002b8
 8006978:	0800709c 	.word	0x0800709c
 800697c:	080070ac 	.word	0x080070ac
 8006980:	20000308 	.word	0x20000308
 8006984:	080070c0 	.word	0x080070c0
 8006988:	42c80000 	.word	0x42c80000
 800698c:	080070d4 	.word	0x080070d4
 8006990:	080070e8 	.word	0x080070e8
 8006994:	200003b8 	.word	0x200003b8
 8006998:	20000320 	.word	0x20000320
		}
		else{
			fail++;
 800699c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80069a0:	3301      	adds	r3, #1
 80069a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}


		char msg [30];
		sprintf(msg, "success %d", success);
 80069a6:	463b      	mov	r3, r7
 80069a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069ac:	4913      	ldr	r1, [pc, #76]	; (80069fc <main+0x3ac>)
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fb06 	bl	8006fc0 <siprintf>
		graphic_lcd_write(1, 0, msg);
 80069b4:	463b      	mov	r3, r7
 80069b6:	461a      	mov	r2, r3
 80069b8:	2100      	movs	r1, #0
 80069ba:	2001      	movs	r0, #1
 80069bc:	f7fa faf4 	bl	8000fa8 <graphic_lcd_write>
		sprintf(msg, "fail %d", fail);
 80069c0:	463b      	mov	r3, r7
 80069c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069c6:	490e      	ldr	r1, [pc, #56]	; (8006a00 <main+0x3b0>)
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 faf9 	bl	8006fc0 <siprintf>
		graphic_lcd_write(2, 0, msg);
 80069ce:	463b      	mov	r3, r7
 80069d0:	461a      	mov	r2, r3
 80069d2:	2100      	movs	r1, #0
 80069d4:	2002      	movs	r0, #2
 80069d6:	f7fa fae7 	bl	8000fa8 <graphic_lcd_write>

		NRF24L01p_flush_tx();
 80069da:	f7fa ff4e 	bl	800187a <NRF24L01p_flush_tx>
		NRF24L01p_flush_rx();
 80069de:	f7fa ff61 	bl	80018a4 <NRF24L01p_flush_rx>

		HAL_Delay(200);
 80069e2:	20c8      	movs	r0, #200	; 0xc8
 80069e4:	f7fb fc52 	bl	800228c <HAL_Delay>

		if(NRF24L01p_readable()){
 80069e8:	f7fa fd78 	bl	80014dc <NRF24L01p_readable>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f43f af40 	beq.w	8006874 <main+0x224>

			custom_print("received data\r\n");
 80069f4:	4803      	ldr	r0, [pc, #12]	; (8006a04 <main+0x3b4>)
 80069f6:	f7ff fe13 	bl	8006620 <custom_print>
	while(1){
 80069fa:	e73b      	b.n	8006874 <main+0x224>
 80069fc:	080070f4 	.word	0x080070f4
 8006a00:	08007100 	.word	0x08007100
 8006a04:	08007108 	.word	0x08007108

08006a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b0ae      	sub	sp, #184	; 0xb8
 8006a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006a12:	2244      	movs	r2, #68	; 0x44
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fb0c 	bl	8007034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006a1c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	605a      	str	r2, [r3, #4]
 8006a26:	609a      	str	r2, [r3, #8]
 8006a28:	60da      	str	r2, [r3, #12]
 8006a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	2260      	movs	r2, #96	; 0x60
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fafe 	bl	8007034 <memset>

  /**Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8006a38:	f7fc fbea 	bl	8003210 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8006a3c:	4a3e      	ldr	r2, [pc, #248]	; (8006b38 <SystemClock_Config+0x130>)
 8006a3e:	4b3e      	ldr	r3, [pc, #248]	; (8006b38 <SystemClock_Config+0x130>)
 8006a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a44:	f023 0318 	bic.w	r3, r3, #24
 8006a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8006a4c:	2314      	movs	r3, #20
 8006a4e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006a50:	2301      	movs	r3, #1
 8006a52:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8006a60:	2370      	movs	r3, #112	; 0x70
 8006a62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006a66:	2302      	movs	r3, #2
 8006a68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 36;
 8006a78:	2324      	movs	r3, #36	; 0x24
 8006a7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006a7e:	2307      	movs	r3, #7
 8006a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8006a84:	2306      	movs	r3, #6
 8006a86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8006a8a:	2304      	movs	r3, #4
 8006a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fc fc2f 	bl	80032f8 <HAL_RCC_OscConfig>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8006aa0:	f000 f84e 	bl	8006b40 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006aa4:	230f      	movs	r3, #15
 8006aa6:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006aac:	2300      	movs	r3, #0
 8006aae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006ab8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006abc:	2104      	movs	r1, #4
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fc ffdc 	bl	8003a7c <HAL_RCC_ClockConfig>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8006aca:	f000 f839 	bl	8006b40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8006ace:	4b1b      	ldr	r3, [pc, #108]	; (8006b3c <SystemClock_Config+0x134>)
 8006ad0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8006ada:	2300      	movs	r3, #0
 8006adc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8006ae4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8006aea:	2301      	movs	r3, #1
 8006aec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006aee:	2301      	movs	r3, #1
 8006af0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 26;
 8006af2:	231a      	movs	r3, #26
 8006af4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8006af6:	2311      	movs	r3, #17
 8006af8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006afa:	2302      	movs	r3, #2
 8006afc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006afe:	2302      	movs	r3, #2
 8006b00:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8006b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b06:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b08:	463b      	mov	r3, r7
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fd fa84 	bl	8004018 <HAL_RCCEx_PeriphCLKConfig>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <SystemClock_Config+0x112>
  {
    Error_Handler();
 8006b16:	f000 f813 	bl	8006b40 <Error_Handler>
  }
  /**Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006b1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006b1e:	f7fc fb95 	bl	800324c <HAL_PWREx_ControlVoltageScaling>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <SystemClock_Config+0x124>
  {
    Error_Handler();
 8006b28:	f000 f80a 	bl	8006b40 <Error_Handler>
  }
  /**Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8006b2c:	f7fd fcba 	bl	80044a4 <HAL_RCCEx_EnableMSIPLLMode>


}
 8006b30:	bf00      	nop
 8006b32:	37b8      	adds	r7, #184	; 0xb8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40021000 	.word	0x40021000
 8006b3c:	00022841 	.word	0x00022841

08006b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b40:	b480      	push	{r7}
 8006b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006b44:	bf00      	nop
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
	...

08006b50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b88 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006b54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006b56:	e003      	b.n	8006b60 <LoopCopyDataInit>

08006b58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006b58:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006b5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006b5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006b5e:	3104      	adds	r1, #4

08006b60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006b60:	480b      	ldr	r0, [pc, #44]	; (8006b90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006b62:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006b64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006b66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006b68:	d3f6      	bcc.n	8006b58 <CopyDataInit>
	ldr	r2, =_sbss
 8006b6a:	4a0b      	ldr	r2, [pc, #44]	; (8006b98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006b6c:	e002      	b.n	8006b74 <LoopFillZerobss>

08006b6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006b6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006b70:	f842 3b04 	str.w	r3, [r2], #4

08006b74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006b74:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <LoopForever+0x16>)
	cmp	r2, r3
 8006b76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006b78:	d3f9      	bcc.n	8006b6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006b7a:	f000 f90b 	bl	8006d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b7e:	f000 fa35 	bl	8006fec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006b82:	f7ff fd65 	bl	8006650 <main>

08006b86 <LoopForever>:

LoopForever:
    b LoopForever
 8006b86:	e7fe      	b.n	8006b86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006b88:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8006b8c:	08007348 	.word	0x08007348
	ldr	r0, =_sdata
 8006b90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006b94:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 8006b98:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 8006b9c:	200003f8 	.word	0x200003f8

08006ba0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006ba0:	e7fe      	b.n	8006ba0 <ADC1_IRQHandler>
	...

08006ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006baa:	4a11      	ldr	r2, [pc, #68]	; (8006bf0 <HAL_MspInit+0x4c>)
 8006bac:	4b10      	ldr	r3, [pc, #64]	; (8006bf0 <HAL_MspInit+0x4c>)
 8006bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb0:	f043 0301 	orr.w	r3, r3, #1
 8006bb4:	6613      	str	r3, [r2, #96]	; 0x60
 8006bb6:	4b0e      	ldr	r3, [pc, #56]	; (8006bf0 <HAL_MspInit+0x4c>)
 8006bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	607b      	str	r3, [r7, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006bc2:	4a0b      	ldr	r2, [pc, #44]	; (8006bf0 <HAL_MspInit+0x4c>)
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <HAL_MspInit+0x4c>)
 8006bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8006bce:	4b08      	ldr	r3, [pc, #32]	; (8006bf0 <HAL_MspInit+0x4c>)
 8006bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006bda:	2200      	movs	r2, #0
 8006bdc:	210f      	movs	r1, #15
 8006bde:	f06f 0001 	mvn.w	r0, #1
 8006be2:	f7fb fc24 	bl	800242e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006be6:	bf00      	nop
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40021000 	.word	0x40021000

08006bf4 <HAL_I2C_MspInit>:
  }

}


void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08a      	sub	sp, #40	; 0x28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bfc:	f107 0314 	add.w	r3, r7, #20
 8006c00:	2200      	movs	r2, #0
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	605a      	str	r2, [r3, #4]
 8006c06:	609a      	str	r2, [r3, #8]
 8006c08:	60da      	str	r2, [r3, #12]
 8006c0a:	611a      	str	r2, [r3, #16]
	  if(hi2c->Instance==I2C1)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a18      	ldr	r2, [pc, #96]	; (8006c74 <HAL_I2C_MspInit+0x80>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d129      	bne.n	8006c6a <HAL_I2C_MspInit+0x76>
	  {
	  /* USER CODE BEGIN I2C1_MspInit 0 */

	  /* USER CODE END I2C1_MspInit 0 */

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <HAL_I2C_MspInit+0x84>)
 8006c18:	4b17      	ldr	r3, [pc, #92]	; (8006c78 <HAL_I2C_MspInit+0x84>)
 8006c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1c:	f043 0301 	orr.w	r3, r3, #1
 8006c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c22:	4b15      	ldr	r3, [pc, #84]	; (8006c78 <HAL_I2C_MspInit+0x84>)
 8006c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	613b      	str	r3, [r7, #16]
 8006c2c:	693b      	ldr	r3, [r7, #16]
	    /**I2C1 GPIO Configuration
	    PA9     ------> I2C1_SCL
	    PA10     ------> I2C1_SDA
	    */
	    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8006c2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006c32:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c34:	2312      	movs	r3, #18
 8006c36:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c40:	2304      	movs	r3, #4
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c44:	f107 0314 	add.w	r3, r7, #20
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c4e:	f7fb fc17 	bl	8002480 <HAL_GPIO_Init>

	    /* Peripheral clock enable */
	    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c52:	4a09      	ldr	r2, [pc, #36]	; (8006c78 <HAL_I2C_MspInit+0x84>)
 8006c54:	4b08      	ldr	r3, [pc, #32]	; (8006c78 <HAL_I2C_MspInit+0x84>)
 8006c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8006c5e:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <HAL_I2C_MspInit+0x84>)
 8006c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
	  /* USER CODE BEGIN I2C1_MspInit 1 */

	  /* USER CODE END I2C1_MspInit 1 */
	  }
}
 8006c6a:	bf00      	nop
 8006c6c:	3728      	adds	r7, #40	; 0x28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	40005400 	.word	0x40005400
 8006c78:	40021000 	.word	0x40021000

08006c7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]



}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08a      	sub	sp, #40	; 0x28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c98:	f107 0314 	add.w	r3, r7, #20
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	609a      	str	r2, [r3, #8]
 8006ca4:	60da      	str	r2, [r3, #12]
 8006ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a17      	ldr	r2, [pc, #92]	; (8006d0c <HAL_UART_MspInit+0x7c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d127      	bne.n	8006d02 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006cb2:	4a17      	ldr	r2, [pc, #92]	; (8006d10 <HAL_UART_MspInit+0x80>)
 8006cb4:	4b16      	ldr	r3, [pc, #88]	; (8006d10 <HAL_UART_MspInit+0x80>)
 8006cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cbc:	6613      	str	r3, [r2, #96]	; 0x60
 8006cbe:	4b14      	ldr	r3, [pc, #80]	; (8006d10 <HAL_UART_MspInit+0x80>)
 8006cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cca:	4a11      	ldr	r2, [pc, #68]	; (8006d10 <HAL_UART_MspInit+0x80>)
 8006ccc:	4b10      	ldr	r3, [pc, #64]	; (8006d10 <HAL_UART_MspInit+0x80>)
 8006cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd0:	f043 0302 	orr.w	r3, r3, #2
 8006cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cd6:	4b0e      	ldr	r3, [pc, #56]	; (8006d10 <HAL_UART_MspInit+0x80>)
 8006cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006ce2:	23c0      	movs	r3, #192	; 0xc0
 8006ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006cf2:	2307      	movs	r3, #7
 8006cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cf6:	f107 0314 	add.w	r3, r7, #20
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4805      	ldr	r0, [pc, #20]	; (8006d14 <HAL_UART_MspInit+0x84>)
 8006cfe:	f7fb fbbf 	bl	8002480 <HAL_GPIO_Init>
	/* USER CODE BEGIN USART1_MspInit 1 */

	/* USER CODE END USART1_MspInit 1 */
  }

}
 8006d02:	bf00      	nop
 8006d04:	3728      	adds	r7, #40	; 0x28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40013800 	.word	0x40013800
 8006d10:	40021000 	.word	0x40021000
 8006d14:	48000400 	.word	0x48000400

08006d18 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006d1c:	bf00      	nop
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8006d26:	b480      	push	{r7}
 8006d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d2a:	e7fe      	b.n	8006d2a <HardFault_Handler+0x4>

08006d2c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d30:	e7fe      	b.n	8006d30 <MemManage_Handler+0x4>

08006d32 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8006d32:	b480      	push	{r7}
 8006d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d36:	e7fe      	b.n	8006d36 <BusFault_Handler+0x4>

08006d38 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d3c:	e7fe      	b.n	8006d3c <UsageFault_Handler+0x4>

08006d3e <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d42:	bf00      	nop
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8006d50:	f7fe fed7 	bl	8005b02 <osSystickHandler>
  HAL_IncTick();
 8006d54:	f7fb fa80 	bl	8002258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006d58:	bf00      	nop
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <TIM1_UP_TIM16_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
*/
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006d60:	bf00      	nop
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <DMA2_Channel1_IRQHandler>:

/**
* @brief This function handles DMA2 channel1 global interrupt.
*/
void DMA2_Channel1_IRQHandler(void)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8006d6e:	bf00      	nop
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <DMA2_Channel2_IRQHandler>:

/**
* @brief This function handles DMA2 channel2 global interrupt.
*/
void DMA2_Channel2_IRQHandler(void)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8006d7c:	bf00      	nop
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <USB_IRQHandler>:

/**
* @brief This function handles USB event interrupt through EXTI line 17.
*/
void USB_IRQHandler(void)
{
 8006d86:	b480      	push	{r7}
 8006d88:	af00      	add	r7, sp, #0
  /* USER CODE END USB_IRQn 0 */

  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8006d8a:	bf00      	nop
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d98:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <SystemInit+0x64>)
 8006d9a:	4b17      	ldr	r3, [pc, #92]	; (8006df8 <SystemInit+0x64>)
 8006d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006da8:	4a14      	ldr	r2, [pc, #80]	; (8006dfc <SystemInit+0x68>)
 8006daa:	4b14      	ldr	r3, [pc, #80]	; (8006dfc <SystemInit+0x68>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006db4:	4b11      	ldr	r3, [pc, #68]	; (8006dfc <SystemInit+0x68>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006dba:	4a10      	ldr	r2, [pc, #64]	; (8006dfc <SystemInit+0x68>)
 8006dbc:	4b0f      	ldr	r3, [pc, #60]	; (8006dfc <SystemInit+0x68>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006dc4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006dc8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006dca:	4b0c      	ldr	r3, [pc, #48]	; (8006dfc <SystemInit+0x68>)
 8006dcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dd0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006dd2:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <SystemInit+0x68>)
 8006dd4:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <SystemInit+0x68>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ddc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006dde:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <SystemInit+0x68>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006de4:	4b04      	ldr	r3, [pc, #16]	; (8006df8 <SystemInit+0x64>)
 8006de6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006dea:	609a      	str	r2, [r3, #8]
#endif
}
 8006dec:	bf00      	nop
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	e000ed00 	.word	0xe000ed00
 8006dfc:	40021000 	.word	0x40021000

08006e00 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
	int div = 1;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8006e10:	e004      	b.n	8006e1c <ts_itoa+0x1c>
		div *= base;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	fb02 f303 	mul.w	r3, r2, r3
 8006e1a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d2f3      	bcs.n	8006e12 <ts_itoa+0x12>

	while (div != 0)
 8006e2a:	e029      	b.n	8006e80 <ts_itoa+0x80>
	{
		int num = d/div;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e34:	613b      	str	r3, [r7, #16]
		d = d%div;
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e3e:	fb02 f201 	mul.w	r2, r2, r1
 8006e42:	1a9b      	subs	r3, r3, r2
 8006e44:	60bb      	str	r3, [r7, #8]
		div /= base;
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8006e4e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	2b09      	cmp	r3, #9
 8006e54:	dd0a      	ble.n	8006e6c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	1c59      	adds	r1, r3, #1
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	6011      	str	r1, [r2, #0]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	3237      	adds	r2, #55	; 0x37
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]
 8006e6a:	e009      	b.n	8006e80 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	1c59      	adds	r1, r3, #1
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	6011      	str	r1, [r2, #0]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	3230      	adds	r2, #48	; 0x30
 8006e7c:	b2d2      	uxtb	r2, r2
 8006e7e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1d2      	bne.n	8006e2c <ts_itoa+0x2c>
	}
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b088      	sub	sp, #32
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	60f8      	str	r0, [r7, #12]
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8006ea2:	e07d      	b.n	8006fa0 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b25      	cmp	r3, #37	; 0x25
 8006eaa:	d171      	bne.n	8006f90 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	60bb      	str	r3, [r7, #8]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b64      	cmp	r3, #100	; 0x64
 8006eb8:	d01e      	beq.n	8006ef8 <ts_formatstring+0x66>
 8006eba:	2b64      	cmp	r3, #100	; 0x64
 8006ebc:	dc06      	bgt.n	8006ecc <ts_formatstring+0x3a>
 8006ebe:	2b58      	cmp	r3, #88	; 0x58
 8006ec0:	d050      	beq.n	8006f64 <ts_formatstring+0xd2>
 8006ec2:	2b63      	cmp	r3, #99	; 0x63
 8006ec4:	d00e      	beq.n	8006ee4 <ts_formatstring+0x52>
 8006ec6:	2b25      	cmp	r3, #37	; 0x25
 8006ec8:	d058      	beq.n	8006f7c <ts_formatstring+0xea>
 8006eca:	e05d      	b.n	8006f88 <ts_formatstring+0xf6>
 8006ecc:	2b73      	cmp	r3, #115	; 0x73
 8006ece:	d02b      	beq.n	8006f28 <ts_formatstring+0x96>
 8006ed0:	2b73      	cmp	r3, #115	; 0x73
 8006ed2:	dc02      	bgt.n	8006eda <ts_formatstring+0x48>
 8006ed4:	2b69      	cmp	r3, #105	; 0x69
 8006ed6:	d00f      	beq.n	8006ef8 <ts_formatstring+0x66>
 8006ed8:	e056      	b.n	8006f88 <ts_formatstring+0xf6>
 8006eda:	2b75      	cmp	r3, #117	; 0x75
 8006edc:	d037      	beq.n	8006f4e <ts_formatstring+0xbc>
 8006ede:	2b78      	cmp	r3, #120	; 0x78
 8006ee0:	d040      	beq.n	8006f64 <ts_formatstring+0xd2>
 8006ee2:	e051      	b.n	8006f88 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	60fa      	str	r2, [r7, #12]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	1d11      	adds	r1, r2, #4
 8006eee:	6079      	str	r1, [r7, #4]
 8006ef0:	6812      	ldr	r2, [r2, #0]
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]
				break;
 8006ef6:	e047      	b.n	8006f88 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	1d1a      	adds	r2, r3, #4
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	da07      	bge.n	8006f18 <ts_formatstring+0x86>
					{
						val *= -1;
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	425b      	negs	r3, r3
 8006f0c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	60fa      	str	r2, [r7, #12]
 8006f14:	222d      	movs	r2, #45	; 0x2d
 8006f16:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8006f18:	69f9      	ldr	r1, [r7, #28]
 8006f1a:	f107 030c 	add.w	r3, r7, #12
 8006f1e:	220a      	movs	r2, #10
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff ff6d 	bl	8006e00 <ts_itoa>
				}
				break;
 8006f26:	e02f      	b.n	8006f88 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	1d1a      	adds	r2, r3, #4
 8006f2c:	607a      	str	r2, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8006f32:	e007      	b.n	8006f44 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	60fa      	str	r2, [r7, #12]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	1c51      	adds	r1, r2, #1
 8006f3e:	61b9      	str	r1, [r7, #24]
 8006f40:	7812      	ldrb	r2, [r2, #0]
 8006f42:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1f3      	bne.n	8006f34 <ts_formatstring+0xa2>
					}
				}
				break;
 8006f4c:	e01c      	b.n	8006f88 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	1d1a      	adds	r2, r3, #4
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	6819      	ldr	r1, [r3, #0]
 8006f56:	f107 030c 	add.w	r3, r7, #12
 8006f5a:	220a      	movs	r2, #10
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff ff4f 	bl	8006e00 <ts_itoa>
				break;
 8006f62:	e011      	b.n	8006f88 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	1d1a      	adds	r2, r3, #4
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	f107 030c 	add.w	r3, r7, #12
 8006f72:	2210      	movs	r2, #16
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7ff ff43 	bl	8006e00 <ts_itoa>
				break;
 8006f7a:	e005      	b.n	8006f88 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	60fa      	str	r2, [r7, #12]
 8006f82:	2225      	movs	r2, #37	; 0x25
 8006f84:	701a      	strb	r2, [r3, #0]
				  break;
 8006f86:	bf00      	nop
			}
			fmt++;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60bb      	str	r3, [r7, #8]
 8006f8e:	e007      	b.n	8006fa0 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	60fa      	str	r2, [r7, #12]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	1c51      	adds	r1, r2, #1
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	7812      	ldrb	r2, [r2, #0]
 8006f9e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f47f af7d 	bne.w	8006ea4 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	1ad3      	subs	r3, r2, r3
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3720      	adds	r7, #32
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8006fc0:	b40e      	push	{r1, r2, r3}
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b085      	sub	sp, #20
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8006fca:	f107 0320 	add.w	r3, r7, #32
 8006fce:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	69f9      	ldr	r1, [r7, #28]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff ff5c 	bl	8006e92 <ts_formatstring>
 8006fda:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fe8:	b003      	add	sp, #12
 8006fea:	4770      	bx	lr

08006fec <__libc_init_array>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	4e0d      	ldr	r6, [pc, #52]	; (8007024 <__libc_init_array+0x38>)
 8006ff0:	4c0d      	ldr	r4, [pc, #52]	; (8007028 <__libc_init_array+0x3c>)
 8006ff2:	1ba4      	subs	r4, r4, r6
 8006ff4:	10a4      	asrs	r4, r4, #2
 8006ff6:	2500      	movs	r5, #0
 8006ff8:	42a5      	cmp	r5, r4
 8006ffa:	d109      	bne.n	8007010 <__libc_init_array+0x24>
 8006ffc:	4e0b      	ldr	r6, [pc, #44]	; (800702c <__libc_init_array+0x40>)
 8006ffe:	4c0c      	ldr	r4, [pc, #48]	; (8007030 <__libc_init_array+0x44>)
 8007000:	f000 f820 	bl	8007044 <_init>
 8007004:	1ba4      	subs	r4, r4, r6
 8007006:	10a4      	asrs	r4, r4, #2
 8007008:	2500      	movs	r5, #0
 800700a:	42a5      	cmp	r5, r4
 800700c:	d105      	bne.n	800701a <__libc_init_array+0x2e>
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007014:	4798      	blx	r3
 8007016:	3501      	adds	r5, #1
 8007018:	e7ee      	b.n	8006ff8 <__libc_init_array+0xc>
 800701a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800701e:	4798      	blx	r3
 8007020:	3501      	adds	r5, #1
 8007022:	e7f2      	b.n	800700a <__libc_init_array+0x1e>
 8007024:	08007338 	.word	0x08007338
 8007028:	08007338 	.word	0x08007338
 800702c:	08007338 	.word	0x08007338
 8007030:	0800733c 	.word	0x0800733c

08007034 <memset>:
 8007034:	4402      	add	r2, r0
 8007036:	4603      	mov	r3, r0
 8007038:	4293      	cmp	r3, r2
 800703a:	d100      	bne.n	800703e <memset+0xa>
 800703c:	4770      	bx	lr
 800703e:	f803 1b01 	strb.w	r1, [r3], #1
 8007042:	e7f9      	b.n	8007038 <memset+0x4>

08007044 <_init>:
 8007044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007046:	bf00      	nop
 8007048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800704a:	bc08      	pop	{r3}
 800704c:	469e      	mov	lr, r3
 800704e:	4770      	bx	lr

08007050 <_fini>:
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	bf00      	nop
 8007054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007056:	bc08      	pop	{r3}
 8007058:	469e      	mov	lr, r3
 800705a:	4770      	bx	lr
 800705c:	0000      	movs	r0, r0
	...
