
Cygnini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008648  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  080087d8  080087d8  000187d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cf8  08008cf8  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08008cf8  08008cf8  00018cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d00  08008d00  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008d00  08008d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008d08  08008d08  00018d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08008d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008180  20000048  08008d58  00020048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200081c8  08008d58  000281c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   000255ae  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004915  00000000  00000000  00045626  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017f0  00000000  00000000  00049f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001628  00000000  00000000  0004b730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b5fc  00000000  00000000  0004cd58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008131  00000000  00000000  00058354  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00060485  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000062c8  00000000  00000000  00060504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000048 	.word	0x20000048
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087bc 	.word	0x080087bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000004c 	.word	0x2000004c
 80001cc:	080087bc 	.word	0x080087bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f092 0f00 	teq	r2, #0
 80004ca:	bf14      	ite	ne
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e720      	b.n	8000324 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aedc 	beq.w	80002d2 <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6c1      	b.n	80002d2 <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a28:	f000 b97a 	b.w	8000d20 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	468c      	mov	ip, r1
 8000a4a:	460d      	mov	r5, r1
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	9e08      	ldr	r6, [sp, #32]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d151      	bne.n	8000af8 <__udivmoddi4+0xb4>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4617      	mov	r7, r2
 8000a58:	d96d      	bls.n	8000b36 <__udivmoddi4+0xf2>
 8000a5a:	fab2 fe82 	clz	lr, r2
 8000a5e:	f1be 0f00 	cmp.w	lr, #0
 8000a62:	d00b      	beq.n	8000a7c <__udivmoddi4+0x38>
 8000a64:	f1ce 0c20 	rsb	ip, lr, #32
 8000a68:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a70:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a74:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a78:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a7c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a80:	0c25      	lsrs	r5, r4, #16
 8000a82:	fbbc f8fa 	udiv	r8, ip, sl
 8000a86:	fa1f f987 	uxth.w	r9, r7
 8000a8a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a8e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a92:	fb08 f309 	mul.w	r3, r8, r9
 8000a96:	42ab      	cmp	r3, r5
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x6c>
 8000a9a:	19ed      	adds	r5, r5, r7
 8000a9c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000aa0:	f080 8123 	bcs.w	8000cea <__udivmoddi4+0x2a6>
 8000aa4:	42ab      	cmp	r3, r5
 8000aa6:	f240 8120 	bls.w	8000cea <__udivmoddi4+0x2a6>
 8000aaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000aae:	443d      	add	r5, r7
 8000ab0:	1aed      	subs	r5, r5, r3
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ab8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000abc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ac0:	fb00 f909 	mul.w	r9, r0, r9
 8000ac4:	45a1      	cmp	r9, r4
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x98>
 8000ac8:	19e4      	adds	r4, r4, r7
 8000aca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ace:	f080 810a 	bcs.w	8000ce6 <__udivmoddi4+0x2a2>
 8000ad2:	45a1      	cmp	r9, r4
 8000ad4:	f240 8107 	bls.w	8000ce6 <__udivmoddi4+0x2a2>
 8000ad8:	3802      	subs	r0, #2
 8000ada:	443c      	add	r4, r7
 8000adc:	eba4 0409 	sub.w	r4, r4, r9
 8000ae0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d061      	beq.n	8000bae <__udivmoddi4+0x16a>
 8000aea:	fa24 f40e 	lsr.w	r4, r4, lr
 8000aee:	2300      	movs	r3, #0
 8000af0:	6034      	str	r4, [r6, #0]
 8000af2:	6073      	str	r3, [r6, #4]
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d907      	bls.n	8000b0c <__udivmoddi4+0xc8>
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d054      	beq.n	8000baa <__udivmoddi4+0x166>
 8000b00:	2100      	movs	r1, #0
 8000b02:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b06:	4608      	mov	r0, r1
 8000b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0c:	fab3 f183 	clz	r1, r3
 8000b10:	2900      	cmp	r1, #0
 8000b12:	f040 808e 	bne.w	8000c32 <__udivmoddi4+0x1ee>
 8000b16:	42ab      	cmp	r3, r5
 8000b18:	d302      	bcc.n	8000b20 <__udivmoddi4+0xdc>
 8000b1a:	4282      	cmp	r2, r0
 8000b1c:	f200 80fa 	bhi.w	8000d14 <__udivmoddi4+0x2d0>
 8000b20:	1a84      	subs	r4, r0, r2
 8000b22:	eb65 0503 	sbc.w	r5, r5, r3
 8000b26:	2001      	movs	r0, #1
 8000b28:	46ac      	mov	ip, r5
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d03f      	beq.n	8000bae <__udivmoddi4+0x16a>
 8000b2e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	b912      	cbnz	r2, 8000b3e <__udivmoddi4+0xfa>
 8000b38:	2701      	movs	r7, #1
 8000b3a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b3e:	fab7 fe87 	clz	lr, r7
 8000b42:	f1be 0f00 	cmp.w	lr, #0
 8000b46:	d134      	bne.n	8000bb2 <__udivmoddi4+0x16e>
 8000b48:	1beb      	subs	r3, r5, r7
 8000b4a:	0c3a      	lsrs	r2, r7, #16
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	2101      	movs	r1, #1
 8000b52:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b56:	0c25      	lsrs	r5, r4, #16
 8000b58:	fb02 3318 	mls	r3, r2, r8, r3
 8000b5c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b60:	fb0c f308 	mul.w	r3, ip, r8
 8000b64:	42ab      	cmp	r3, r5
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x134>
 8000b68:	19ed      	adds	r5, r5, r7
 8000b6a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x132>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	f200 80d1 	bhi.w	8000d18 <__udivmoddi4+0x2d4>
 8000b76:	4680      	mov	r8, r0
 8000b78:	1aed      	subs	r5, r5, r3
 8000b7a:	b2a3      	uxth	r3, r4
 8000b7c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b80:	fb02 5510 	mls	r5, r2, r0, r5
 8000b84:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b88:	fb0c fc00 	mul.w	ip, ip, r0
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x15c>
 8000b90:	19e4      	adds	r4, r4, r7
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x15a>
 8000b98:	45a4      	cmp	ip, r4
 8000b9a:	f200 80b8 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	eba4 040c 	sub.w	r4, r4, ip
 8000ba4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ba8:	e79d      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000baa:	4631      	mov	r1, r6
 8000bac:	4630      	mov	r0, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	f1ce 0420 	rsb	r4, lr, #32
 8000bb6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000bba:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bbe:	fa20 f804 	lsr.w	r8, r0, r4
 8000bc2:	0c3a      	lsrs	r2, r7, #16
 8000bc4:	fa25 f404 	lsr.w	r4, r5, r4
 8000bc8:	ea48 0803 	orr.w	r8, r8, r3
 8000bcc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000bd0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bd4:	fb02 4411 	mls	r4, r2, r1, r4
 8000bd8:	fa1f fc87 	uxth.w	ip, r7
 8000bdc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000be0:	fb01 f30c 	mul.w	r3, r1, ip
 8000be4:	42ab      	cmp	r3, r5
 8000be6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x1bc>
 8000bec:	19ed      	adds	r5, r5, r7
 8000bee:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000bf2:	f080 808a 	bcs.w	8000d0a <__udivmoddi4+0x2c6>
 8000bf6:	42ab      	cmp	r3, r5
 8000bf8:	f240 8087 	bls.w	8000d0a <__udivmoddi4+0x2c6>
 8000bfc:	3902      	subs	r1, #2
 8000bfe:	443d      	add	r5, r7
 8000c00:	1aeb      	subs	r3, r5, r3
 8000c02:	fa1f f588 	uxth.w	r5, r8
 8000c06:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c0a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c0e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c12:	fb00 f30c 	mul.w	r3, r0, ip
 8000c16:	42ab      	cmp	r3, r5
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x1e6>
 8000c1a:	19ed      	adds	r5, r5, r7
 8000c1c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c20:	d26f      	bcs.n	8000d02 <__udivmoddi4+0x2be>
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d96d      	bls.n	8000d02 <__udivmoddi4+0x2be>
 8000c26:	3802      	subs	r0, #2
 8000c28:	443d      	add	r5, r7
 8000c2a:	1aeb      	subs	r3, r5, r3
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	e78f      	b.n	8000b52 <__udivmoddi4+0x10e>
 8000c32:	f1c1 0720 	rsb	r7, r1, #32
 8000c36:	fa22 f807 	lsr.w	r8, r2, r7
 8000c3a:	408b      	lsls	r3, r1
 8000c3c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c40:	ea48 0303 	orr.w	r3, r8, r3
 8000c44:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c48:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c4c:	40fd      	lsrs	r5, r7
 8000c4e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c52:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c56:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c5a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c5e:	fa1f f883 	uxth.w	r8, r3
 8000c62:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c66:	fb09 f408 	mul.w	r4, r9, r8
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	fa02 f201 	lsl.w	r2, r2, r1
 8000c70:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x244>
 8000c76:	18ed      	adds	r5, r5, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c7c:	d243      	bcs.n	8000d06 <__udivmoddi4+0x2c2>
 8000c7e:	42ac      	cmp	r4, r5
 8000c80:	d941      	bls.n	8000d06 <__udivmoddi4+0x2c2>
 8000c82:	f1a9 0902 	sub.w	r9, r9, #2
 8000c86:	441d      	add	r5, r3
 8000c88:	1b2d      	subs	r5, r5, r4
 8000c8a:	fa1f fe8e 	uxth.w	lr, lr
 8000c8e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c92:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c96:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c9a:	fb00 f808 	mul.w	r8, r0, r8
 8000c9e:	45a0      	cmp	r8, r4
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x26e>
 8000ca2:	18e4      	adds	r4, r4, r3
 8000ca4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000ca8:	d229      	bcs.n	8000cfe <__udivmoddi4+0x2ba>
 8000caa:	45a0      	cmp	r8, r4
 8000cac:	d927      	bls.n	8000cfe <__udivmoddi4+0x2ba>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	441c      	add	r4, r3
 8000cb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cb6:	eba4 0408 	sub.w	r4, r4, r8
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	454c      	cmp	r4, r9
 8000cc0:	46c6      	mov	lr, r8
 8000cc2:	464d      	mov	r5, r9
 8000cc4:	d315      	bcc.n	8000cf2 <__udivmoddi4+0x2ae>
 8000cc6:	d012      	beq.n	8000cee <__udivmoddi4+0x2aa>
 8000cc8:	b156      	cbz	r6, 8000ce0 <__udivmoddi4+0x29c>
 8000cca:	ebba 030e 	subs.w	r3, sl, lr
 8000cce:	eb64 0405 	sbc.w	r4, r4, r5
 8000cd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000cd6:	40cb      	lsrs	r3, r1
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	40cc      	lsrs	r4, r1
 8000cdc:	6037      	str	r7, [r6, #0]
 8000cde:	6074      	str	r4, [r6, #4]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	e6f8      	b.n	8000adc <__udivmoddi4+0x98>
 8000cea:	4690      	mov	r8, r2
 8000cec:	e6e0      	b.n	8000ab0 <__udivmoddi4+0x6c>
 8000cee:	45c2      	cmp	sl, r8
 8000cf0:	d2ea      	bcs.n	8000cc8 <__udivmoddi4+0x284>
 8000cf2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cf6:	eb69 0503 	sbc.w	r5, r9, r3
 8000cfa:	3801      	subs	r0, #1
 8000cfc:	e7e4      	b.n	8000cc8 <__udivmoddi4+0x284>
 8000cfe:	4628      	mov	r0, r5
 8000d00:	e7d7      	b.n	8000cb2 <__udivmoddi4+0x26e>
 8000d02:	4640      	mov	r0, r8
 8000d04:	e791      	b.n	8000c2a <__udivmoddi4+0x1e6>
 8000d06:	4681      	mov	r9, r0
 8000d08:	e7be      	b.n	8000c88 <__udivmoddi4+0x244>
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	e778      	b.n	8000c00 <__udivmoddi4+0x1bc>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	443c      	add	r4, r7
 8000d12:	e745      	b.n	8000ba0 <__udivmoddi4+0x15c>
 8000d14:	4608      	mov	r0, r1
 8000d16:	e708      	b.n	8000b2a <__udivmoddi4+0xe6>
 8000d18:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1c:	443d      	add	r5, r7
 8000d1e:	e72b      	b.n	8000b78 <__udivmoddi4+0x134>

08000d20 <__aeabi_idiv0>:
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <c12832_hal_spi_init>:
#include "C12832Port.h"

SPI_HandleTypeDef hspi2;


void c12832_hal_spi_init(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]


    /* USER CODE END SPI2_MspInit 0 */
	/* Peripheral clock enable */
	__HAL_RCC_SPI2_CLK_ENABLE();
 8000d3a:	4a31      	ldr	r2, [pc, #196]	; (8000e00 <c12832_hal_spi_init+0xdc>)
 8000d3c:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <c12832_hal_spi_init+0xdc>)
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <c12832_hal_spi_init+0xdc>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4a2b      	ldr	r2, [pc, #172]	; (8000e00 <c12832_hal_spi_init+0xdc>)
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <c12832_hal_spi_init+0xdc>)
 8000d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <c12832_hal_spi_init+0xdc>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
	/**SPI2 GPIO Configuration
	PB13     ------> SPI2_SCK
	PB14     ------> SPI2_MISO
	PB15     ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d7c:	2305      	movs	r3, #5
 8000d7e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	4619      	mov	r1, r3
 8000d86:	481f      	ldr	r0, [pc, #124]	; (8000e04 <c12832_hal_spi_init+0xe0>)
 8000d88:	f001 fc92 	bl	80026b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */


	  hspi2.Instance = SPI2;
 8000d8c:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <c12832_hal_spi_init+0xe8>)
 8000d90:	601a      	str	r2, [r3, #0]
	  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000d94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d98:	605a      	str	r2, [r3, #4]
	  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
	  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000da2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000da6:	60da      	str	r2, [r3, #12]
	  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
	  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
	  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dba:	619a      	str	r2, [r3, #24]
	  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000dbe:	2228      	movs	r2, #40	; 0x28
 8000dc0:	61da      	str	r2, [r3, #28]
	  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
	  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi2.Init.CRCPolynomial = 7;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
	  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	; 0x30
	  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000de6:	4808      	ldr	r0, [pc, #32]	; (8000e08 <c12832_hal_spi_init+0xe4>)
 8000de8:	f003 fdf0 	bl	80049cc <HAL_SPI_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <c12832_hal_spi_init+0xd2>
	  {
	    Error_Handler();
 8000df2:	f007 f90f 	bl	8008014 <Error_Handler>
	  }

}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48000400 	.word	0x48000400
 8000e08:	20007f1c 	.word	0x20007f1c
 8000e0c:	40003800 	.word	0x40003800

08000e10 <c12832_hal_gpio_init>:


void c12832_hal_gpio_init(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4a43      	ldr	r2, [pc, #268]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e18:	4b42      	ldr	r3, [pc, #264]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2e:	4a3d      	ldr	r2, [pc, #244]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e30:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4a37      	ldr	r2, [pc, #220]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e48:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e60:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4a2b      	ldr	r2, [pc, #172]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <c12832_hal_gpio_init+0x114>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]


	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, DISPLAY_NRESET_Pin|DISPLAY_A0_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2160      	movs	r1, #96	; 0x60
 8000ea2:	4821      	ldr	r0, [pc, #132]	; (8000f28 <c12832_hal_gpio_init+0x118>)
 8000ea4:	f001 fd9a 	bl	80029dc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DISPLAY_NSEL_GPIO_Port, DISPLAY_NSEL_Pin, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eae:	481f      	ldr	r0, [pc, #124]	; (8000f2c <c12832_hal_gpio_init+0x11c>)
 8000eb0:	f001 fd94 	bl	80029dc <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DISPLAY_BACKLIGHT_GPIO_Port, DISPLAY_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f001 fd8d 	bl	80029dc <HAL_GPIO_WritePin>


	  /*Configure GPIO pins : DISPLAY_NRESET_Pin DISPLAY_A0_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_NRESET_Pin|DISPLAY_A0_Pin;
 8000ec2:	2360      	movs	r3, #96	; 0x60
 8000ec4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <c12832_hal_gpio_init+0x118>)
 8000eda:	f001 fbe9 	bl	80026b0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : DISPLAY_NSEL_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_NSEL_Pin;
 8000ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(DISPLAY_NSEL_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <c12832_hal_gpio_init+0x11c>)
 8000ef8:	f001 fbda 	bl	80026b0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : DISPLAY_BACKLIGHT_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_BACKLIGHT_Pin;
 8000efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f00:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(DISPLAY_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f001 fbca 	bl	80026b0 <HAL_GPIO_Init>



}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48000800 	.word	0x48000800
 8000f2c:	48000400 	.word	0x48000400

08000f30 <c12832_hal_spi_write_read>:


int c12832_hal_spi_write_read (uint8_t *tx_data, uint8_t *rx_data, uint16_t lenght) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	80fb      	strh	r3, [r7, #6]

	HAL_SPI_Transmit (&hspi2, tx_data, 1, 200);
 8000f3e:	23c8      	movs	r3, #200	; 0xc8
 8000f40:	2201      	movs	r2, #1
 8000f42:	68f9      	ldr	r1, [r7, #12]
 8000f44:	4803      	ldr	r0, [pc, #12]	; (8000f54 <c12832_hal_spi_write_read+0x24>)
 8000f46:	f003 fdc9 	bl	8004adc <HAL_SPI_Transmit>
		//DEBUG_MESSAGE_AND_EXIT_FAILURE

	return EXIT_SUCCESS;
 8000f4a:	2300      	movs	r3, #0

}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20007f1c 	.word	0x20007f1c

08000f58 <graphic_lcd_clear_screen>:

#include "graphic_lcd.h"
#include "st7565r.h"
#include "font.h"

int graphic_lcd_clear_screen(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	e019      	b.n	8000f98 <graphic_lcd_clear_screen+0x40>
		st7565r_set_page_address(i);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f8d7 	bl	800111c <st7565r_set_page_address>
		st7565r_set_column_address(0);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 f8e8 	bl	8001144 <st7565r_set_column_address>
		st7565r_set_display_start_line_address(0);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 f902 	bl	800117e <st7565r_set_display_start_line_address>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	e005      	b.n	8000f8c <graphic_lcd_clear_screen+0x34>
			st7565r_write_data(0);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 f88b 	bl	800109c <st7565r_write_data>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b84      	cmp	r3, #132	; 0x84
 8000f90:	ddf6      	ble.n	8000f80 <graphic_lcd_clear_screen+0x28>
	for (i=0; i<LINE_COUNT; i++) {
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3301      	adds	r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	dde2      	ble.n	8000f64 <graphic_lcd_clear_screen+0xc>
	}
	
	return EXIT_SUCCESS;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <graphic_lcd_write>:

int graphic_lcd_write(int line, int offset, char *text) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]

	int i, j;
	
	st7565r_set_page_address(line);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f8af 	bl	800111c <st7565r_set_page_address>
	st7565r_set_column_address(offset + FONT_SIZE);
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	3305      	adds	r3, #5
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f8bc 	bl	8001144 <st7565r_set_column_address>
	
	for (i=0; i<strlen(text); i++) {
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e01e      	b.n	8001010 <graphic_lcd_write+0x68>
	
		for (j=0; j<FONT_SIZE; j++) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e012      	b.n	8000ffe <graphic_lcd_write+0x56>
			st7565r_write_data(font_5x8_table[(((text[i] - ASCII_FONT_FIRST) * FONT_SIZE) + j)]);
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	f1a3 0220 	sub.w	r2, r3, #32
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	441a      	add	r2, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <graphic_lcd_write+0x80>)
 8000ff0:	5cd3      	ldrb	r3, [r2, r3]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f852 	bl	800109c <st7565r_write_data>
		for (j=0; j<FONT_SIZE; j++) {
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b04      	cmp	r3, #4
 8001002:	dde9      	ble.n	8000fd8 <graphic_lcd_write+0x30>
		}
		st7565r_write_data(0);
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f849 	bl	800109c <st7565r_write_data>
	for (i=0; i<strlen(text); i++) {
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff f8dd 	bl	80001d0 <strlen>
 8001016:	4602      	mov	r2, r0
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	429a      	cmp	r2, r3
 800101c:	d8d9      	bhi.n	8000fd2 <graphic_lcd_write+0x2a>
	}
		
	return EXIT_SUCCESS;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08008ae8 	.word	0x08008ae8

0800102c <graphic_lcd_initialize>:

int graphic_lcd_initialize (void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	
	return st7565r_init ();
 8001030:	f000 f8e8 	bl	8001204 <st7565r_init>
 8001034:	4603      	mov	r3, r0
	
}
 8001036:	4618      	mov	r0, r3
 8001038:	bd80      	pop	{r7, pc}

0800103a <graphics_lcd_clear_line>:

	return EXIT_SUCCESS;
}
	

int graphics_lcd_clear_line(int line) {
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]



	return EXIT_SUCCESS;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <st7565r_write_command>:
#include "C12832Port.h"


#define HUNDRED_MILLISECONDS  	(10 / portTICK_PERIOD_MS)

void st7565r_write_command(uint8_t command) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <st7565r_write_command+0x44>)
 8001062:	f001 fcbb 	bl	80029dc <HAL_GPIO_WritePin>
        DISPLAY_A0_LOW;
 8001066:	2200      	movs	r2, #0
 8001068:	2140      	movs	r1, #64	; 0x40
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <st7565r_write_command+0x48>)
 800106c:	f001 fcb6 	bl	80029dc <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&command, &tmp, 1);
 8001070:	f107 010f 	add.w	r1, r7, #15
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	2201      	movs	r2, #1
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff59 	bl	8000f30 <c12832_hal_spi_write_read>
        DISPLAY_CHIP_SELECT_HIGH;
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <st7565r_write_command+0x44>)
 8001086:	f001 fca9 	bl	80029dc <HAL_GPIO_WritePin>
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	48000400 	.word	0x48000400
 8001098:	48000800 	.word	0x48000800

0800109c <st7565r_write_data>:

void st7565r_write_data(uint8_t data) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ac:	480e      	ldr	r0, [pc, #56]	; (80010e8 <st7565r_write_data+0x4c>)
 80010ae:	f001 fc95 	bl	80029dc <HAL_GPIO_WritePin>
        DISPLAY_A0_HIGH;
 80010b2:	2201      	movs	r2, #1
 80010b4:	2140      	movs	r1, #64	; 0x40
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <st7565r_write_data+0x50>)
 80010b8:	f001 fc90 	bl	80029dc <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&data, &tmp, 1);
 80010bc:	f107 010f 	add.w	r1, r7, #15
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	2201      	movs	r2, #1
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff33 	bl	8000f30 <c12832_hal_spi_write_read>
        DISPLAY_A0_LOW;
 80010ca:	2200      	movs	r2, #0
 80010cc:	2140      	movs	r1, #64	; 0x40
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <st7565r_write_data+0x50>)
 80010d0:	f001 fc84 	bl	80029dc <HAL_GPIO_WritePin>
        DISPLAY_CHIP_SELECT_HIGH;
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010da:	4803      	ldr	r0, [pc, #12]	; (80010e8 <st7565r_write_data+0x4c>)
 80010dc:	f001 fc7e 	bl	80029dc <HAL_GPIO_WritePin>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	48000400 	.word	0x48000400
 80010ec:	48000800 	.word	0x48000800

080010f0 <st7565r_hard_reset>:
 *
 * This functions will reset the LCD controller by setting the reset pin low.
 * \note this funtions should not be confused with the \ref st7565r_soft_reset()
 * function, this command will control the RST pin.
 */
void st7565r_hard_reset(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	
        DISPLAY_RESET_LOW;
 80010f4:	2200      	movs	r2, #0
 80010f6:	2120      	movs	r1, #32
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <st7565r_hard_reset+0x28>)
 80010fa:	f001 fc6f 	bl	80029dc <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 80010fe:	200a      	movs	r0, #10
 8001100:	f005 fb64 	bl	80067cc <vTaskDelay>
        DISPLAY_RESET_HIGH;
 8001104:	2201      	movs	r2, #1
 8001106:	2120      	movs	r1, #32
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <st7565r_hard_reset+0x28>)
 800110a:	f001 fc67 	bl	80029dc <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 800110e:	200a      	movs	r0, #10
 8001110:	f005 fb5c 	bl	80067cc <vTaskDelay>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	48000800 	.word	0x48000800

0800111c <st7565r_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
void st7565r_set_page_address(uint8_t address)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
        // Make sure that the address is 4 bits (only 8 pages)
        address &= 0x0F;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff8a 	bl	8001050 <st7565r_write_command>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <st7565r_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void st7565r_set_column_address(uint8_t address)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
        // Make sure the address is 7 bits
        address &= 0x7F;
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001154:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff74 	bl	8001050 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff6d 	bl	8001050 <st7565r_write_command>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <st7565r_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the LCD.
 */
void st7565r_set_display_start_line_address(uint8_t address)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
        // Make sure address is 6 bits
        address &= 0x3F;
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800118e:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001196:	b2db      	uxtb	r3, r3
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff59 	bl	8001050 <st7565r_write_command>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <st7565r_display_on>:
 * \brief Turn the LCD display on
 *
 * This function will turn on the LCD.
 */
void st7565r_display_on(void)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_ON);
 80011aa:	20af      	movs	r0, #175	; 0xaf
 80011ac:	f7ff ff50 	bl	8001050 <st7565r_write_command>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <st7565r_set_contrast>:
 *                 the LCD.
 *
 * \retval contrast the contrast value written to the LCD controller
 */
uint8_t st7565r_set_contrast(uint8_t contrast)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
        if (contrast < ST7565R_DISPLAY_CONTRAST_MIN) {
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b1d      	cmp	r3, #29
 80011c2:	d801      	bhi.n	80011c8 <st7565r_set_contrast+0x14>
                contrast = ST7565R_DISPLAY_CONTRAST_MIN;
 80011c4:	231e      	movs	r3, #30
 80011c6:	71fb      	strb	r3, [r7, #7]
        }
        if (contrast > ST7565R_DISPLAY_CONTRAST_MAX) {
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b28      	cmp	r3, #40	; 0x28
 80011cc:	d901      	bls.n	80011d2 <st7565r_set_contrast+0x1e>
                contrast = ST7565R_DISPLAY_CONTRAST_MAX;
 80011ce:	2328      	movs	r3, #40	; 0x28
 80011d0:	71fb      	strb	r3, [r7, #7]
        }
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME_MODE_SET);
 80011d2:	2081      	movs	r0, #129	; 0x81
 80011d4:	f7ff ff3c 	bl	8001050 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME(contrast));
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	43db      	mvns	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff33 	bl	8001050 <st7565r_write_command>
        return contrast;
 80011ea:	79fb      	ldrb	r3, [r7, #7]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <st7565r_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the LCD
 *
 */
void st7565r_display_invert_disable(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_NORMAL);
 80011f8:	20a6      	movs	r0, #166	; 0xa6
 80011fa:	f7ff ff29 	bl	8001050 <st7565r_write_command>
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <st7565r_init>:

int st7565r_init(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	
        // Do a hard reset of the LCD display controller
        st7565r_hard_reset();
 8001208:	f7ff ff72 	bl	80010f0 <st7565r_hard_reset>

        // Set the A0 pin to the default state (command)
        DISPLAY_A0_LOW;
 800120c:	2200      	movs	r2, #0
 800120e:	2140      	movs	r1, #64	; 0x40
 8001210:	4810      	ldr	r0, [pc, #64]	; (8001254 <st7565r_init+0x50>)
 8001212:	f001 fbe3 	bl	80029dc <HAL_GPIO_WritePin>

        // The column address
        st7565r_write_command(ST7565R_CMD_ADC_NORMAL);
 8001216:	20a0      	movs	r0, #160	; 0xa0
 8001218:	f7ff ff1a 	bl	8001050 <st7565r_write_command>

        // Non-inverted display
        st7565r_display_invert_disable();
 800121c:	f7ff ffea 	bl	80011f4 <st7565r_display_invert_disable>

        // The common mode scan direction
        st7565r_write_command(ST7565R_CMD_REVERSE_SCAN_DIRECTION);
 8001220:	20c8      	movs	r0, #200	; 0xc8
 8001222:	f7ff ff15 	bl	8001050 <st7565r_write_command>

        // Set the voltage bias ratio to 1/6
        st7565r_write_command(ST7565R_CMD_LCD_BIAS_1_DIV_6_DUTY33);
 8001226:	20a2      	movs	r0, #162	; 0xa2
 8001228:	f7ff ff12 	bl	8001050 <st7565r_write_command>

        // Set booster circuit, voltage regulator and voltage follower all to on
        st7565r_write_command(ST7565R_CMD_POWER_CTRL_ALL_ON);
 800122c:	202f      	movs	r0, #47	; 0x2f
 800122e:	f7ff ff0f 	bl	8001050 <st7565r_write_command>

        // Set the booster ratio to 2X,3X,4X
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_SET);
 8001232:	20f8      	movs	r0, #248	; 0xf8
 8001234:	f7ff ff0c 	bl	8001050 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_2X_3X_4X);
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff ff09 	bl	8001050 <st7565r_write_command>

        // Set voltage resistor ratio to 1
        st7565r_write_command(ST7565R_CMD_VOLTAGE_RESISTOR_RATIO_1);
 800123e:	2021      	movs	r0, #33	; 0x21
 8001240:	f7ff ff06 	bl	8001050 <st7565r_write_command>

        /* Set contrast to min value, no need to check return value as the contrast
        is set to the defined min*/
        st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);
 8001244:	201e      	movs	r0, #30
 8001246:	f7ff ffb5 	bl	80011b4 <st7565r_set_contrast>

        // Turn on the display
        st7565r_display_on();
 800124a:	f7ff ffac 	bl	80011a6 <st7565r_display_on>
		
		return EXIT_SUCCESS;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	bd80      	pop	{r7, pc}
 8001254:	48000800 	.word	0x48000800

08001258 <NRF24L01p_ResetConfigValues>:
#include "NRF24L01p.h"




void NRF24L01p_ResetConfigValues(NRF24L01p_RadioConfig_t *_RadioConfig, NRF24L01p_RxPipeConfig_t *_RxPipeConfig){
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_Initialize();
 8001262:	f000 fef5 	bl	8002050 <NRF24L01p_port_Initialize>
    //ResetConfigValues(_RadioConfig, _RxPipeConfig);


    NRF24L01p_port_write_Pin_CE(0);
 8001266:	2000      	movs	r0, #0
 8001268:	f000 ff38 	bl	80020dc <NRF24L01p_port_write_Pin_CE>
    NRF24L01p_port_write_Pin_CSN(0);
 800126c:	2000      	movs	r0, #0
 800126e:	f000 ff47 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>

    NRF24L01p_port_DelayMs(_NRF24L01P_TIMING_PowerOnReset_ms);
 8001272:	2064      	movs	r0, #100	; 0x64
 8001274:	f000 fffc 	bl	8002270 <NRF24L01p_port_DelayMs>

    NRF24L01p_RadioMode(NRF24L01P_MODE_POWER_DOWN);
 8001278:	2001      	movs	r0, #1
 800127a:	f000 f8db 	bl	8001434 <NRF24L01p_RadioMode>
    NRF24L01p_RadioMode(NRF24L01P_MODE_RX);
 800127e:	2003      	movs	r0, #3
 8001280:	f000 f8d8 	bl	8001434 <NRF24L01p_RadioMode>

    NRF24L01p_clear_data_ready_flag();
 8001284:	f000 fd57 	bl	8001d36 <NRF24L01p_clear_data_ready_flag>
    NRF24L01p_flush_rx();
 8001288:	f000 fb79 	bl	800197e <NRF24L01p_flush_rx>
    NRF24L01p_flush_tx();
 800128c:	f000 fb62 	bl	8001954 <NRF24L01p_flush_tx>

    uint8_t status_rst_val = 0x70;//reset status
 8001290:	2370      	movs	r3, #112	; 0x70
 8001292:	72fb      	strb	r3, [r7, #11]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS, &status_rst_val,1);
 8001294:	f107 030b 	add.w	r3, r7, #11
 8001298:	2201      	movs	r2, #1
 800129a:	4619      	mov	r1, r3
 800129c:	2007      	movs	r0, #7
 800129e:	f000 faf2 	bl	8001886 <NRF24L01p_write_register_buffer>
    uint8_t config_rst_val = 0x0b;//reset config
 80012a2:	230b      	movs	r3, #11
 80012a4:	72bb      	strb	r3, [r7, #10]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_CONFIG, &config_rst_val,1);
 80012a6:	f107 030a 	add.w	r3, r7, #10
 80012aa:	2201      	movs	r2, #1
 80012ac:	4619      	mov	r1, r3
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 fae9 	bl	8001886 <NRF24L01p_write_register_buffer>


    RadioConfig.DataReadyInterruptEnabled = _RadioConfig->DataReadyInterruptEnabled;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	781a      	ldrb	r2, [r3, #0]
 80012b8:	4b5c      	ldr	r3, [pc, #368]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 80012ba:	701a      	strb	r2, [r3, #0]
    RadioConfig.DataSentInterruptFlagEnabled = _RadioConfig->DataSentInterruptFlagEnabled;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	785a      	ldrb	r2, [r3, #1]
 80012c0:	4b5a      	ldr	r3, [pc, #360]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 80012c2:	705a      	strb	r2, [r3, #1]
    RadioConfig.MaxRetryInterruptFlagEnabled = _RadioConfig->MaxRetryInterruptFlagEnabled;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	789a      	ldrb	r2, [r3, #2]
 80012c8:	4b58      	ldr	r3, [pc, #352]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 80012ca:	709a      	strb	r2, [r3, #2]
    RadioConfig.Crc = _RadioConfig->Crc;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	78da      	ldrb	r2, [r3, #3]
 80012d0:	4b56      	ldr	r3, [pc, #344]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 80012d2:	70da      	strb	r2, [r3, #3]
    RadioConfig.AutoReTransmissionCount = _RadioConfig->AutoReTransmissionCount;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	791a      	ldrb	r2, [r3, #4]
 80012d8:	4b54      	ldr	r3, [pc, #336]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 80012da:	711a      	strb	r2, [r3, #4]
    RadioConfig.AutoReTransmitDelayX250us = _RadioConfig->AutoReTransmitDelayX250us;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	795a      	ldrb	r2, [r3, #5]
 80012e0:	4b52      	ldr	r3, [pc, #328]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 80012e2:	715a      	strb	r2, [r3, #5]
    RadioConfig.frequencyOffset = _RadioConfig->frequencyOffset;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	799a      	ldrb	r2, [r3, #6]
 80012e8:	4b50      	ldr	r3, [pc, #320]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 80012ea:	719a      	strb	r2, [r3, #6]
    RadioConfig.datarate = _RadioConfig->datarate;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	79da      	ldrb	r2, [r3, #7]
 80012f0:	4b4e      	ldr	r3, [pc, #312]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 80012f2:	71da      	strb	r2, [r3, #7]
    RadioConfig.RfPower = _RadioConfig->RfPower;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7a1a      	ldrb	r2, [r3, #8]
 80012f8:	4b4c      	ldr	r3, [pc, #304]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 80012fa:	721a      	strb	r2, [r3, #8]
    RadioConfig.PllLock = _RadioConfig->PllLock;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7a5a      	ldrb	r2, [r3, #9]
 8001300:	4b4a      	ldr	r3, [pc, #296]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 8001302:	725a      	strb	r2, [r3, #9]
    RadioConfig.ContWaveEnabled = _RadioConfig->ContWaveEnabled;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7a9a      	ldrb	r2, [r3, #10]
 8001308:	4b48      	ldr	r3, [pc, #288]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 800130a:	729a      	strb	r2, [r3, #10]
    RadioConfig.FeatureDynamicPayloadEnabled = _RadioConfig->FeatureDynamicPayloadEnabled;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7ada      	ldrb	r2, [r3, #11]
 8001310:	4b46      	ldr	r3, [pc, #280]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 8001312:	72da      	strb	r2, [r3, #11]
    RadioConfig.FeaturePayloadWithAckEnabled = _RadioConfig->FeaturePayloadWithAckEnabled;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	7b1a      	ldrb	r2, [r3, #12]
 8001318:	4b44      	ldr	r3, [pc, #272]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 800131a:	731a      	strb	r2, [r3, #12]
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = _RadioConfig->FeatureDynamicPayloadWithNoAckEnabled;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7b5a      	ldrb	r2, [r3, #13]
 8001320:	4b42      	ldr	r3, [pc, #264]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 8001322:	735a      	strb	r2, [r3, #13]

	int i;
    for(i=0;i<6;i++){
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	e019      	b.n	800135e <NRF24L01p_ResetConfigValues+0x106>
        RxPipeConfig[i] = _RxPipeConfig[i];
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	461a      	mov	r2, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	1898      	adds	r0, r3, r2
 800133a:	493d      	ldr	r1, [pc, #244]	; (8001430 <NRF24L01p_ResetConfigValues+0x1d8>)
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	440b      	add	r3, r1
 8001348:	461c      	mov	r4, r3
 800134a:	4605      	mov	r5, r0
 800134c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800134e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001350:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001354:	e884 0003 	stmia.w	r4, {r0, r1}
    for(i=0;i<6;i++){
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3301      	adds	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2b05      	cmp	r3, #5
 8001362:	dde2      	ble.n	800132a <NRF24L01p_ResetConfigValues+0xd2>
    }


    NRF24L01p_enable_dynamic_payload(RadioConfig.FeatureDynamicPayloadEnabled);
 8001364:	4b31      	ldr	r3, [pc, #196]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 8001366:	7adb      	ldrb	r3, [r3, #11]
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fdf6 	bl	8001f5a <NRF24L01p_enable_dynamic_payload>
    NRF24L01p_enable_payload_with_ack(RadioConfig.FeaturePayloadWithAckEnabled);
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 8001370:	7b1b      	ldrb	r3, [r3, #12]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fe1a 	bl	8001fac <NRF24L01p_enable_payload_with_ack>
    NRF24L01p_enable_dynamic_payload_with_no_ack(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled);
 8001378:	4b2c      	ldr	r3, [pc, #176]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 800137a:	7b5b      	ldrb	r3, [r3, #13]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fe3e 	bl	8001ffe <NRF24L01p_enable_dynamic_payload_with_no_ack>
    NRF24L01p_set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 8001384:	791b      	ldrb	r3, [r3, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fc27 	bl	8001bda <NRF24L01p_set_auto_retransmission_count>
    NRF24L01p_set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 800138e:	795b      	ldrb	r3, [r3, #5]
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fc3d 	bl	8001c10 <NRF24L01p_set_auto_retransmission_delay>
    NRF24L01p_set_DataRate(RadioConfig.datarate);
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <NRF24L01p_ResetConfigValues+0x1d4>)
 8001398:	79db      	ldrb	r3, [r3, #7]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fc68 	bl	8001c70 <NRF24L01p_set_DataRate>

    for(i=0;i<6;i++){
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e03a      	b.n	800141c <NRF24L01p_ResetConfigValues+0x1c4>
    	NRF24L01p_enable_rx_on_pipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].PipeEnabled );
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	b2d8      	uxtb	r0, r3
 80013aa:	4921      	ldr	r1, [pc, #132]	; (8001430 <NRF24L01p_ResetConfigValues+0x1d8>)
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	440b      	add	r3, r1
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	f000 fbd3 	bl	8001b66 <NRF24L01p_enable_rx_on_pipe>
    	NRF24L01p_enable_auto_ack((NRF24L01p_pipe_t)i,RxPipeConfig[i].autoAckEnabled );
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	b2d8      	uxtb	r0, r3
 80013c4:	491a      	ldr	r1, [pc, #104]	; (8001430 <NRF24L01p_ResetConfigValues+0x1d8>)
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	3301      	adds	r3, #1
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	4619      	mov	r1, r3
 80013d8:	f000 fb8b 	bl	8001af2 <NRF24L01p_enable_auto_ack>
    	NRF24L01p_enable_dynamic_payload_pipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	b2d8      	uxtb	r0, r3
 80013e0:	4913      	ldr	r1, [pc, #76]	; (8001430 <NRF24L01p_ResetConfigValues+0x1d8>)
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	3311      	adds	r3, #17
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	f000 fd77 	bl	8001ee6 <NRF24L01p_enable_dynamic_payload_pipe>
    	NRF24L01p_set_RX_pipe_address((NRF24L01p_pipe_t)i,RxPipeConfig[i].address);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	b2d8      	uxtb	r0, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <NRF24L01p_ResetConfigValues+0x1d8>)
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	440b      	add	r3, r1
 800140a:	3308      	adds	r3, #8
 800140c:	cb18      	ldmia	r3, {r3, r4}
 800140e:	461a      	mov	r2, r3
 8001410:	4623      	mov	r3, r4
 8001412:	f000 fcba 	bl	8001d8a <NRF24L01p_set_RX_pipe_address>
    for(i=0;i<6;i++){
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b05      	cmp	r3, #5
 8001420:	ddc1      	ble.n	80013a6 <NRF24L01p_ResetConfigValues+0x14e>
    }
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bdb0      	pop	{r4, r5, r7, pc}
 800142a:	bf00      	nop
 800142c:	20007f84 	.word	0x20007f84
 8001430:	20007fa0 	.word	0x20007fa0

08001434 <NRF24L01p_RadioMode>:

void NRF24L01p_RadioMode(NRF24L01p_RadioState_t mode){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
    switch(mode){
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	3b01      	subs	r3, #1
 8001442:	2b03      	cmp	r3, #3
 8001444:	d84e      	bhi.n	80014e4 <NRF24L01p_RadioMode+0xb0>
 8001446:	a201      	add	r2, pc, #4	; (adr r2, 800144c <NRF24L01p_RadioMode+0x18>)
 8001448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144c:	0800145d 	.word	0x0800145d
 8001450:	0800146f 	.word	0x0800146f
 8001454:	08001493 	.word	0x08001493
 8001458:	080014b9 	.word	0x080014b9
        case NRF24L01P_MODE_POWER_DOWN: {
        	NRF24L01p_power_down();
 800145c:	f000 fb0a 	bl	8001a74 <NRF24L01p_power_down>
            NRF24L01p_port_write_Pin_CE(0);
 8001460:	2000      	movs	r0, #0
 8001462:	f000 fe3b 	bl	80020dc <NRF24L01p_port_write_Pin_CE>
            RadioState = NRF24L01P_MODE_POWER_DOWN;
 8001466:	4b21      	ldr	r3, [pc, #132]	; (80014ec <NRF24L01p_RadioMode+0xb8>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
            break;
 800146c:	e03a      	b.n	80014e4 <NRF24L01p_RadioMode+0xb0>
        }
        case NRF24L01P_MODE_STANDBY: {
            if(RadioState == NRF24L01P_MODE_POWER_DOWN){
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <NRF24L01p_RadioMode+0xb8>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d106      	bne.n	8001484 <NRF24L01p_RadioMode+0x50>
            	NRF24L01p_power_up();
 8001476:	f000 fae8 	bl	8001a4a <NRF24L01p_power_up>
                    NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tpd2stby_us);
 800147a:	f241 1094 	movw	r0, #4500	; 0x1194
 800147e:	f000 ff03 	bl	8002288 <NRF24L01p_port_DelayUs>
 8001482:	e002      	b.n	800148a <NRF24L01p_RadioMode+0x56>
            }
            else{
                    NRF24L01p_port_write_Pin_CE(0);
 8001484:	2000      	movs	r0, #0
 8001486:	f000 fe29 	bl	80020dc <NRF24L01p_port_write_Pin_CE>
            }
            RadioState = NRF24L01P_MODE_STANDBY;
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <NRF24L01p_RadioMode+0xb8>)
 800148c:	2202      	movs	r2, #2
 800148e:	701a      	strb	r2, [r3, #0]
            break;
 8001490:	e028      	b.n	80014e4 <NRF24L01p_RadioMode+0xb0>
        }
        case NRF24L01P_MODE_RX: {
            if(RadioState != NRF24L01P_MODE_RX){
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <NRF24L01p_RadioMode+0xb8>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d021      	beq.n	80014de <NRF24L01p_RadioMode+0xaa>
                NRF24L01p_port_write_Pin_CE(0);
 800149a:	2000      	movs	r0, #0
 800149c:	f000 fe1e 	bl	80020dc <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_rx_mode();
 80014a0:	f000 fafd 	bl	8001a9e <NRF24L01p_rx_mode>
                NRF24L01p_port_write_Pin_CE(1);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f000 fe19 	bl	80020dc <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 80014aa:	2082      	movs	r0, #130	; 0x82
 80014ac:	f000 feec 	bl	8002288 <NRF24L01p_port_DelayUs>
                RadioState = NRF24L01P_MODE_RX;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <NRF24L01p_RadioMode+0xb8>)
 80014b2:	2203      	movs	r2, #3
 80014b4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80014b6:	e012      	b.n	80014de <NRF24L01p_RadioMode+0xaa>
        }
        case NRF24L01P_MODE_TX: {
            if(RadioState != NRF24L01P_MODE_TX){
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <NRF24L01p_RadioMode+0xb8>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d010      	beq.n	80014e2 <NRF24L01p_RadioMode+0xae>
                NRF24L01p_port_write_Pin_CE(0);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f000 fe0b 	bl	80020dc <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_tx_mode();
 80014c6:	f000 faff 	bl	8001ac8 <NRF24L01p_tx_mode>
                NRF24L01p_port_write_Pin_CE(1);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f000 fe06 	bl	80020dc <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 80014d0:	2082      	movs	r0, #130	; 0x82
 80014d2:	f000 fed9 	bl	8002288 <NRF24L01p_port_DelayUs>
                RadioState = NRF24L01P_MODE_TX;
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <NRF24L01p_RadioMode+0xb8>)
 80014d8:	2204      	movs	r2, #4
 80014da:	701a      	strb	r2, [r3, #0]
            }
            break;
 80014dc:	e001      	b.n	80014e2 <NRF24L01p_RadioMode+0xae>
            break;
 80014de:	bf00      	nop
 80014e0:	e000      	b.n	80014e4 <NRF24L01p_RadioMode+0xb0>
            break;
 80014e2:	bf00      	nop
        }
    }
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20007f80 	.word	0x20007f80

080014f0 <NRF24L01p_readable>:


bool NRF24L01p_readable(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    return (NRF24L01p_get_data_ready_flag() || !NRF24L01p_get_fifo_flag_rx_empty())&& (NRF24L01p_get_rx_payload_pipe() != 7)  ;
 80014f4:	f000 fc11 	bl	8001d1a <NRF24L01p_get_data_ready_flag>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d107      	bne.n	800150e <NRF24L01p_readable+0x1e>
 80014fe:	f000 fcd4 	bl	8001eaa <NRF24L01p_get_fifo_flag_rx_empty>
 8001502:	4603      	mov	r3, r0
 8001504:	f083 0301 	eor.w	r3, r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <NRF24L01p_readable+0x2c>
 800150e:	f000 fc21 	bl	8001d54 <NRF24L01p_get_rx_payload_pipe>
 8001512:	4603      	mov	r3, r0
 8001514:	2b07      	cmp	r3, #7
 8001516:	d001      	beq.n	800151c <NRF24L01p_readable+0x2c>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <NRF24L01p_readable+0x2e>
 800151c:	2300      	movs	r3, #0
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	b2db      	uxtb	r3, r3
	//return (!NRF24L01p_get_fifo_flag_rx_empty()) ;

}
 8001524:	4618      	mov	r0, r3
 8001526:	bd80      	pop	{r7, pc}

08001528 <NRF24L01p_writable>:
bool NRF24L01p_writable(){
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
    return !NRF24L01p_get_fifo_flag_tx_full();
 800152c:	f000 fccc 	bl	8001ec8 <NRF24L01p_get_fifo_flag_tx_full>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	bf14      	ite	ne
 8001536:	2301      	movne	r3, #1
 8001538:	2300      	moveq	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f083 0301 	eor.w	r3, r3, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3

}
 8001548:	4618      	mov	r0, r3
 800154a:	bd80      	pop	{r7, pc}

0800154c <NRF24L01p_writePayload>:
bool NRF24L01p_readableOnPipe(NRF24L01p_pipe_t pipe){

}


NRF24L01p_ErrorStatus_t NRF24L01p_writePayload(NRF24L01p_Payload_t *payload){
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	NRF24L01p_set_TX_pipe_address(payload->address);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	cb18      	ldmia	r3, {r3, r4}
 8001558:	4618      	mov	r0, r3
 800155a:	4621      	mov	r1, r4
 800155c:	f000 fc5d 	bl	8001e1a <NRF24L01p_set_TX_pipe_address>
    if(payload->UseAck == 1){
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7a5b      	ldrb	r3, [r3, #9]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <NRF24L01p_writePayload+0x2e>
    	NRF24L01p_write_tx_payload(payload->data,payload->length);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	4619      	mov	r1, r3
 8001572:	4610      	mov	r0, r2
 8001574:	f000 f9cf 	bl	8001916 <NRF24L01p_write_tx_payload>
 8001578:	e00b      	b.n	8001592 <NRF24L01p_writePayload+0x46>
    }else{
        if(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled == 1){
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <NRF24L01p_writePayload+0x50>)
 800157c:	7b5b      	ldrb	r3, [r3, #13]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <NRF24L01p_writePayload+0x46>
        	NRF24L01p_write_tx_payload_noack(payload->data,payload->length);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	4619      	mov	r1, r3
 800158c:	4610      	mov	r0, r2
 800158e:	f000 fa27 	bl	80019e0 <NRF24L01p_write_tx_payload_noack>
        }
    }
}
 8001592:	bf00      	nop
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	20007f84 	.word	0x20007f84

080015a0 <NRF24L01p_readPayload>:

NRF24L01p_ErrorStatus_t NRF24L01p_writeAckPayload(NRF24L01p_Payload_t *payload){
	NRF24L01p_write_ack_payload(payload->pipe, payload->data, payload->length);
}
NRF24L01p_ErrorStatus_t NRF24L01p_readPayload(NRF24L01p_Payload_t *payload){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
    NRF24L01p_ErrorStatus_t error;
    payload->pipe = NRF24L01p_get_rx_payload_pipe();
 80015a8:	f000 fbd4 	bl	8001d54 <NRF24L01p_get_rx_payload_pipe>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	721a      	strb	r2, [r3, #8]

    if(payload->pipe>=0 && payload->pipe<=5){
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7a1b      	ldrb	r3, [r3, #8]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d824      	bhi.n	8001606 <NRF24L01p_readPayload+0x66>
        if(RadioConfig.FeatureDynamicPayloadEnabled == 1){
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <NRF24L01p_readPayload+0x70>)
 80015be:	7adb      	ldrb	r3, [r3, #11]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <NRF24L01p_readPayload+0x32>
            payload->length = NRF24L01p_read_rx_payload_width();
 80015c4:	f000 f9f0 	bl	80019a8 <NRF24L01p_read_rx_payload_width>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	e008      	b.n	80015e4 <NRF24L01p_readPayload+0x44>
        }else{
            payload->length = NRF24L01p_get_RX_pipe_width(payload->pipe);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7a1b      	ldrb	r3, [r3, #8]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fc51 	bl	8001e7e <NRF24L01p_get_RX_pipe_width>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	611a      	str	r2, [r3, #16]
        }


        if(payload->length <= 32){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	d80a      	bhi.n	8001602 <NRF24L01p_readPayload+0x62>
        	NRF24L01p_read_rx_payload(payload->data,payload->length);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4610      	mov	r0, r2
 80015f8:	f000 f96e 	bl	80018d8 <NRF24L01p_read_rx_payload>
            error = NRF24L01P_SUCCESS;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e001      	b.n	8001606 <NRF24L01p_readPayload+0x66>
        }
        else{
            error = NRF24L01P_ERROR;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
        }

    }
    return error;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20007f84 	.word	0x20007f84

08001614 <NRF24L01p_TransmitPayload>:


NRF24L01p_ErrorStatus_t NRF24L01p_TransmitPayload(NRF24L01p_Payload_t *payload){
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
    NRF24L01p_ErrorStatus_t error;
    NRF24L01p_RadioState_t originalState = RadioState;
 800161c:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <NRF24L01p_TransmitPayload+0x17c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	73bb      	strb	r3, [r7, #14]
    NRF24L01p_RadioMode(NRF24L01P_MODE_STANDBY);
 8001622:	2002      	movs	r0, #2
 8001624:	f7ff ff06 	bl	8001434 <NRF24L01p_RadioMode>




    if(TxPipeAddress != payload->address){
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800162e:	4b59      	ldr	r3, [pc, #356]	; (8001794 <NRF24L01p_TransmitPayload+0x180>)
 8001630:	cb18      	ldmia	r3, {r3, r4}
 8001632:	42a2      	cmp	r2, r4
 8001634:	bf08      	it	eq
 8001636:	4299      	cmpeq	r1, r3
 8001638:	d00a      	beq.n	8001650 <NRF24L01p_TransmitPayload+0x3c>
    	NRF24L01p_set_TX_pipe_address(payload->address);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	cb18      	ldmia	r3, {r3, r4}
 800163e:	4618      	mov	r0, r3
 8001640:	4621      	mov	r1, r4
 8001642:	f000 fbea 	bl	8001e1a <NRF24L01p_set_TX_pipe_address>
	    TxPipeAddress = payload->address;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	cb18      	ldmia	r3, {r3, r4}
 800164a:	4a52      	ldr	r2, [pc, #328]	; (8001794 <NRF24L01p_TransmitPayload+0x180>)
 800164c:	e882 0018 	stmia.w	r2, {r3, r4}
    }

    if(payload->UseAck){
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7a5b      	ldrb	r3, [r3, #9]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d06f      	beq.n	8001738 <NRF24L01p_TransmitPayload+0x124>

	    if(RxPipeConfig[PIPE_P0].autoAckEnabled == 0){
 8001658:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <NRF24L01p_TransmitPayload+0x184>)
 800165a:	785b      	ldrb	r3, [r3, #1]
 800165c:	f083 0301 	eor.w	r3, r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <NRF24L01p_TransmitPayload+0x5a>
	    	NRF24L01p_enable_auto_ack(PIPE_P0, 1);
 8001666:	2101      	movs	r1, #1
 8001668:	2000      	movs	r0, #0
 800166a:	f000 fa42 	bl	8001af2 <NRF24L01p_enable_auto_ack>
	    }
	    if(RxPipeConfig[PIPE_P0].PipeEnabled == 0){
 800166e:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <NRF24L01p_TransmitPayload+0x184>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	f083 0301 	eor.w	r3, r3, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <NRF24L01p_TransmitPayload+0x70>
	    	NRF24L01p_enable_rx_on_pipe(PIPE_P0, 1);
 800167c:	2101      	movs	r1, #1
 800167e:	2000      	movs	r0, #0
 8001680:	f000 fa71 	bl	8001b66 <NRF24L01p_enable_rx_on_pipe>
	    }
	    NRF24L01p_set_RX_pipe_address(PIPE_P0, payload->address);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	cb18      	ldmia	r3, {r3, r4}
 8001688:	461a      	mov	r2, r3
 800168a:	4623      	mov	r3, r4
 800168c:	2000      	movs	r0, #0
 800168e:	f000 fb7c 	bl	8001d8a <NRF24L01p_set_RX_pipe_address>


	    NRF24L01p_writePayload(payload);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff5a 	bl	800154c <NRF24L01p_writePayload>
	    NRF24L01p_clear_data_sent_flag();
 8001698:	f000 fb30 	bl	8001cfc <NRF24L01p_clear_data_sent_flag>


	    if(NRF24L01p_writable()){
 800169c:	f7ff ff44 	bl	8001528 <NRF24L01p_writable>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d025      	beq.n	80016f2 <NRF24L01p_TransmitPayload+0xde>
	    	NRF24L01p_clear_data_sent_flag();
 80016a6:	f000 fb29 	bl	8001cfc <NRF24L01p_clear_data_sent_flag>
		    while(1){
			    NRF24L01p_RadioMode(NRF24L01P_MODE_TX);
 80016aa:	2004      	movs	r0, #4
 80016ac:	f7ff fec2 	bl	8001434 <NRF24L01p_RadioMode>
			    NRF24L01p_RadioMode(NRF24L01P_MODE_STANDBY);
 80016b0:	2002      	movs	r0, #2
 80016b2:	f7ff febf 	bl	8001434 <NRF24L01p_RadioMode>

			    if(NRF24L01p_get_data_sent_flag()){
 80016b6:	f000 fb13 	bl	8001ce0 <NRF24L01p_get_data_sent_flag>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <NRF24L01p_TransmitPayload+0xb2>
				    error = NRF24L01P_SUCCESS;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
				    break;
 80016c4:	e015      	b.n	80016f2 <NRF24L01p_TransmitPayload+0xde>
			    }
			    if(NRF24L01p_get_max_retry_flag()){
 80016c6:	f000 faee 	bl	8001ca6 <NRF24L01p_get_max_retry_flag>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0ec      	beq.n	80016aa <NRF24L01p_TransmitPayload+0x96>
			    	NRF24L01p_clear_max_retry_flag();
 80016d0:	f000 faf7 	bl	8001cc2 <NRF24L01p_clear_max_retry_flag>
				    if(NRF24L01p_get_plos_count()>=payload->retransmitCount){
 80016d4:	f000 fb49 	bl	8001d6a <NRF24L01p_get_plos_count>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7d1b      	ldrb	r3, [r3, #20]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d3e2      	bcc.n	80016aa <NRF24L01p_TransmitPayload+0x96>
				    	NRF24L01p_set_frequency_offset(RadioConfig.frequencyOffset);
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <NRF24L01p_TransmitPayload+0x188>)
 80016e6:	799b      	ldrb	r3, [r3, #6]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fab0 	bl	8001c4e <NRF24L01p_set_frequency_offset>
					    error = NRF24L01P_ERROR;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]
			    }
		    }

	    }

	    NRF24L01p_RadioMode(originalState);
 80016f2:	7bbb      	ldrb	r3, [r7, #14]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fe9d 	bl	8001434 <NRF24L01p_RadioMode>

	    NRF24L01p_set_RX_pipe_address(PIPE_P0, RxPipeConfig[PIPE_P0].address);
 80016fa:	4b27      	ldr	r3, [pc, #156]	; (8001798 <NRF24L01p_TransmitPayload+0x184>)
 80016fc:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001700:	461a      	mov	r2, r3
 8001702:	4623      	mov	r3, r4
 8001704:	2000      	movs	r0, #0
 8001706:	f000 fb40 	bl	8001d8a <NRF24L01p_set_RX_pipe_address>
	    if(RxPipeConfig[PIPE_P0].autoAckEnabled == 0){
 800170a:	4b23      	ldr	r3, [pc, #140]	; (8001798 <NRF24L01p_TransmitPayload+0x184>)
 800170c:	785b      	ldrb	r3, [r3, #1]
 800170e:	f083 0301 	eor.w	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <NRF24L01p_TransmitPayload+0x10c>
	    	NRF24L01p_enable_auto_ack(PIPE_P0, 0);
 8001718:	2100      	movs	r1, #0
 800171a:	2000      	movs	r0, #0
 800171c:	f000 f9e9 	bl	8001af2 <NRF24L01p_enable_auto_ack>
	    }
	    if(RxPipeConfig[PIPE_P0].PipeEnabled == 0){
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <NRF24L01p_TransmitPayload+0x184>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	f083 0301 	eor.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d028      	beq.n	8001780 <NRF24L01p_TransmitPayload+0x16c>
	    	NRF24L01p_enable_rx_on_pipe(PIPE_P0, 0);
 800172e:	2100      	movs	r1, #0
 8001730:	2000      	movs	r0, #0
 8001732:	f000 fa18 	bl	8001b66 <NRF24L01p_enable_rx_on_pipe>
 8001736:	e023      	b.n	8001780 <NRF24L01p_TransmitPayload+0x16c>
	    }
	    }else{
	    	NRF24L01p_set_TX_pipe_address(payload->address);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	cb18      	ldmia	r3, {r3, r4}
 800173c:	4618      	mov	r0, r3
 800173e:	4621      	mov	r1, r4
 8001740:	f000 fb6b 	bl	8001e1a <NRF24L01p_set_TX_pipe_address>
			NRF24L01p_writePayload(payload);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff01 	bl	800154c <NRF24L01p_writePayload>
			NRF24L01p_RadioState_t originalState = RadioState;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <NRF24L01p_TransmitPayload+0x17c>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	737b      	strb	r3, [r7, #13]
			if(NRF24L01p_writable()){
 8001750:	f7ff feea 	bl	8001528 <NRF24L01p_writable>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00e      	beq.n	8001778 <NRF24L01p_TransmitPayload+0x164>
				NRF24L01p_clear_data_sent_flag();
 800175a:	f000 facf 	bl	8001cfc <NRF24L01p_clear_data_sent_flag>
				while(1){
					NRF24L01p_RadioMode(NRF24L01P_MODE_TX);
 800175e:	2004      	movs	r0, #4
 8001760:	f7ff fe68 	bl	8001434 <NRF24L01p_RadioMode>
					NRF24L01p_RadioMode(NRF24L01P_MODE_STANDBY);
 8001764:	2002      	movs	r0, #2
 8001766:	f7ff fe65 	bl	8001434 <NRF24L01p_RadioMode>
					if(NRF24L01p_get_data_sent_flag()){
 800176a:	f000 fab9 	bl	8001ce0 <NRF24L01p_get_data_sent_flag>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f4      	beq.n	800175e <NRF24L01p_TransmitPayload+0x14a>
						error = NRF24L01P_SUCCESS;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
						break;
					}
				}
			}
			NRF24L01p_RadioMode(originalState);
 8001778:	7b7b      	ldrb	r3, [r7, #13]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fe5a 	bl	8001434 <NRF24L01p_RadioMode>
		}

    NRF24L01p_flush_tx();
 8001780:	f000 f8e8 	bl	8001954 <NRF24L01p_flush_tx>
    return error;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}
 800178e:	bf00      	nop
 8001790:	20007f80 	.word	0x20007f80
 8001794:	20007f98 	.word	0x20007f98
 8001798:	20007fa0 	.word	0x20007fa0
 800179c:	20007f84 	.word	0x20007f84

080017a0 <NRF24L01p_read_register>:

#include "NRF24L01pDriver.h"



uint8_t NRF24L01p_read_register(uint8_t address){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_write_Pin_CSN(0);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 fca8 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	73fb      	strb	r3, [r7, #15]


    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80017ba:	f107 010f 	add.w	r1, r7, #15
 80017be:	f107 030f 	add.w	r3, r7, #15
 80017c2:	2201      	movs	r2, #1
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fd3b 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80017ca:	f107 010f 	add.w	r1, r7, #15
 80017ce:	f107 030f 	add.w	r3, r7, #15
 80017d2:	2201      	movs	r2, #1
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 fd33 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(&temp, 1);
    NRF24L01p_port_write_Pin_CSN(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 fc90 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]

}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <NRF24L01p_read_register_buffer>:
void NRF24L01p_read_register_buffer(uint8_t address, uint8_t *dataout, int len){
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_write_Pin_CSN(0);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f000 fc81 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	b2db      	uxtb	r3, r3
 8001806:	75fb      	strb	r3, [r7, #23]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001808:	f107 0117 	add.w	r1, r7, #23
 800180c:	f107 0317 	add.w	r3, r7, #23
 8001810:	2201      	movs	r2, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fd14 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(dataout, dataout,len);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	461a      	mov	r2, r3
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	68b8      	ldr	r0, [r7, #8]
 8001820:	f000 fd0e 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(dataout, len);
    NRF24L01p_port_write_Pin_CSN(1);
 8001824:	2001      	movs	r0, #1
 8001826:	f000 fc6b 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <NRF24L01p_write_register>:
void NRF24L01p_write_register(uint8_t address, uint8_t datain){
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	460a      	mov	r2, r1
 800183c:	71fb      	strb	r3, [r7, #7]
 800183e:	4613      	mov	r3, r2
 8001840:	71bb      	strb	r3, [r7, #6]
    NRF24L01p_port_write_Pin_CSN(0);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 fc5c 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	f003 031f 	and.w	r3, r3, #31
 8001850:	b25b      	sxtb	r3, r3
 8001852:	f043 0320 	orr.w	r3, r3, #32
 8001856:	b25b      	sxtb	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 800185c:	f107 010f 	add.w	r1, r7, #15
 8001860:	f107 030f 	add.w	r3, r7, #15
 8001864:	2201      	movs	r2, #1
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fcea 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&datain, &datain,1);
 800186c:	1db9      	adds	r1, r7, #6
 800186e:	1dbb      	adds	r3, r7, #6
 8001870:	2201      	movs	r2, #1
 8001872:	4618      	mov	r0, r3
 8001874:	f000 fce4 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(&datain, 1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001878:	2001      	movs	r0, #1
 800187a:	f000 fc41 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <NRF24L01p_write_register_buffer>:
void NRF24L01p_write_register_buffer(uint8_t address, uint8_t *datain, int len){
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_write_Pin_CSN(0);
 8001894:	2000      	movs	r0, #0
 8001896:	f000 fc33 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	b25b      	sxtb	r3, r3
 80018a4:	f043 0320 	orr.w	r3, r3, #32
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	75fb      	strb	r3, [r7, #23]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80018ae:	f107 0117 	add.w	r1, r7, #23
 80018b2:	f107 0317 	add.w	r3, r7, #23
 80018b6:	2201      	movs	r2, #1
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fcc1 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(datain, datain,len);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	461a      	mov	r2, r3
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	68b8      	ldr	r0, [r7, #8]
 80018c6:	f000 fcbb 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(datain, len);
    NRF24L01p_port_write_Pin_CSN(1);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f000 fc18 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
}
 80018d0:	bf00      	nop
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <NRF24L01p_read_rx_payload>:
void NRF24L01p_read_rx_payload(uint8_t *dataout, int pay_len){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_write_Pin_CSN(0);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 fc0c 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_RD_RX_PAYLOAD);
 80018e8:	2361      	movs	r3, #97	; 0x61
 80018ea:	73fb      	strb	r3, [r7, #15]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80018ec:	f107 010f 	add.w	r1, r7, #15
 80018f0:	f107 030f 	add.w	r3, r7, #15
 80018f4:	2201      	movs	r2, #1
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fca2 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(dataout,dataout,pay_len);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fc9c 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(dataout,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
 8001908:	2001      	movs	r0, #1
 800190a:	f000 fbf9 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <NRF24L01p_write_tx_payload>:
void NRF24L01p_write_tx_payload(uint8_t *datain, int pay_len){
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_write_Pin_CSN(0);
 8001920:	2000      	movs	r0, #0
 8001922:	f000 fbed 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
 8001926:	23a0      	movs	r3, #160	; 0xa0
 8001928:	73fb      	strb	r3, [r7, #15]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 800192a:	f107 010f 	add.w	r1, r7, #15
 800192e:	f107 030f 	add.w	r3, r7, #15
 8001932:	2201      	movs	r2, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fc83 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(datain,datain,pay_len);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 fc7d 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
 8001946:	2001      	movs	r0, #1
 8001948:	f000 fbda 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <NRF24L01p_flush_tx>:
void NRF24L01p_flush_tx(){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 fbd0 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_TX);
 8001960:	23e1      	movs	r3, #225	; 0xe1
 8001962:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001964:	1df9      	adds	r1, r7, #7
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	2201      	movs	r2, #1
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fc68 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001970:	2001      	movs	r0, #1
 8001972:	f000 fbc5 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <NRF24L01p_flush_rx>:
void NRF24L01p_flush_rx(){
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 8001984:	2000      	movs	r0, #0
 8001986:	f000 fbbb 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_RX);
 800198a:	23e2      	movs	r3, #226	; 0xe2
 800198c:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 800198e:	1df9      	adds	r1, r7, #7
 8001990:	1dfb      	adds	r3, r7, #7
 8001992:	2201      	movs	r2, #1
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fc53 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 800199a:	2001      	movs	r0, #1
 800199c:	f000 fbb0 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <NRF24L01p_read_rx_payload_width>:
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
    //port_SPI_Transcieve(&temp,1);

    NRF24L01p_port_write_Pin_CSN(1);
}
int NRF24L01p_read_rx_payload_width(){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f000 fba6 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_R_RX_PL_WID);
 80019b4:	2360      	movs	r3, #96	; 0x60
 80019b6:	71fb      	strb	r3, [r7, #7]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80019b8:	1df9      	adds	r1, r7, #7
 80019ba:	1dfb      	adds	r3, r7, #7
 80019bc:	2201      	movs	r2, #1
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fc3e 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80019c4:	1df9      	adds	r1, r7, #7
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	2201      	movs	r2, #1
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fc38 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f000 fb95 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 80019d6:	79fb      	ldrb	r3, [r7, #7]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <NRF24L01p_write_tx_payload_noack>:
    NRF24L01p_port_SPI_Transcieve(datain, datain, pay_len);
    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
}
void NRF24L01p_write_tx_payload_noack(uint8_t *datain, int pay_len){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_write_Pin_CSN(0);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f000 fb88 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_W_TX_PYLD_NO_ACK);
 80019f0:	23b0      	movs	r3, #176	; 0xb0
 80019f2:	73fb      	strb	r3, [r7, #15]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80019f4:	f107 010f 	add.w	r1, r7, #15
 80019f8:	f107 030f 	add.w	r3, r7, #15
 80019fc:	2201      	movs	r2, #1
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fc1e 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(datain, datain, pay_len);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fc18 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
 8001a10:	2001      	movs	r0, #1
 8001a12:	f000 fb75 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <NRF24L01p_get_status>:
int NRF24L01p_get_status(){
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f000 fb6b 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_NOP );
 8001a2a:	23ff      	movs	r3, #255	; 0xff
 8001a2c:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp, 1);
 8001a2e:	1df9      	adds	r1, r7, #7
 8001a30:	1dfb      	adds	r3, r7, #7
 8001a32:	2201      	movs	r2, #1
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fc03 	bl	8002240 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f000 fb60 	bl	8002100 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 8001a40:	79fb      	ldrb	r3, [r7, #7]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <NRF24L01p_power_up>:


void NRF24L01p_power_up(){
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_CONFIG);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff fea5 	bl	80017a0 <NRF24L01p_read_register>
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
    temp |= _NRF24L01P_CONFIG_PWR_UP;
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,temp);
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	4619      	mov	r1, r3
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff fee3 	bl	8001832 <NRF24L01p_write_register>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <NRF24L01p_power_down>:
void NRF24L01p_power_down(){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_CONFIG);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fe90 	bl	80017a0 <NRF24L01p_read_register>
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
    temp &= ~_NRF24L01P_CONFIG_PWR_UP;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f023 0302 	bic.w	r3, r3, #2
 8001a8a:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,temp);
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff fece 	bl	8001832 <NRF24L01p_write_register>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <NRF24L01p_rx_mode>:
void NRF24L01p_rx_mode(){
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_CONFIG);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff fe7b 	bl	80017a0 <NRF24L01p_read_register>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
    temp |= _NRF24L01P_CONFIG_PRIM_RX;
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,temp);
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff feb9 	bl	8001832 <NRF24L01p_write_register>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <NRF24L01p_tx_mode>:
void NRF24L01p_tx_mode(){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_CONFIG);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff fe66 	bl	80017a0 <NRF24L01p_read_register>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
    temp &= ~_NRF24L01P_CONFIG_PRIM_RX;
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,temp);
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff fea4 	bl	8001832 <NRF24L01p_write_register>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <NRF24L01p_enable_auto_ack>:
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_MASK_MAX_RT);
else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_MASK_MAX_RT);
}


void NRF24L01p_enable_auto_ack(NRF24L01p_pipe_t pipe, bool sel){
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	460a      	mov	r2, r1
 8001afc:	71fb      	strb	r3, [r7, #7]
 8001afe:	4613      	mov	r3, r2
 8001b00:	71bb      	strb	r3, [r7, #6]
    if (sel){
 8001b02:	79bb      	ldrb	r3, [r7, #6]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d014      	beq.n	8001b32 <NRF24L01p_enable_auto_ack+0x40>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f7ff fe49 	bl	80017a0 <NRF24L01p_read_register>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_set_bit(temp,pipe);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2201      	movs	r2, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	b25a      	sxtb	r2, r3
 8001b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7ff fe81 	bl	8001832 <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
        _nrf24l01p_clr_bit(temp,pipe);
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
    }

}
 8001b30:	e015      	b.n	8001b5e <NRF24L01p_enable_auto_ack+0x6c>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f7ff fe34 	bl	80017a0 <NRF24L01p_read_register>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_clr_bit(temp,pipe);
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	b25a      	sxtb	r2, r3
 8001b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
 8001b56:	4619      	mov	r1, r3
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f7ff fe6a 	bl	8001832 <NRF24L01p_write_register>
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <NRF24L01p_enable_rx_on_pipe>:



void NRF24L01p_enable_rx_on_pipe(NRF24L01p_pipe_t pipe, bool sel){
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	460a      	mov	r2, r1
 8001b70:	71fb      	strb	r3, [r7, #7]
 8001b72:	4613      	mov	r3, r2
 8001b74:	71bb      	strb	r3, [r7, #6]
    if(sel){
 8001b76:	79bb      	ldrb	r3, [r7, #6]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d014      	beq.n	8001ba6 <NRF24L01p_enable_rx_on_pipe+0x40>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f7ff fe0f 	bl	80017a0 <NRF24L01p_read_register>
 8001b82:	4603      	mov	r3, r0
 8001b84:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_set_bit(temp,pipe);
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	b25a      	sxtb	r2, r3
 8001b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	2002      	movs	r0, #2
 8001ba0:	f7ff fe47 	bl	8001832 <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
        _nrf24l01p_clr_bit(temp,pipe);
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
    }

}
 8001ba4:	e015      	b.n	8001bd2 <NRF24L01p_enable_rx_on_pipe+0x6c>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f7ff fdfa 	bl	80017a0 <NRF24L01p_read_register>
 8001bac:	4603      	mov	r3, r0
 8001bae:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_clr_bit(temp,pipe);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	b25b      	sxtb	r3, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	b25a      	sxtb	r2, r3
 8001bbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 8001bc8:	7bbb      	ldrb	r3, [r7, #14]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	2002      	movs	r0, #2
 8001bce:	f7ff fe30 	bl	8001832 <NRF24L01p_write_register>
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <NRF24L01p_set_auto_retransmission_count>:
}
NRF24L01p_aw_t NRF24L01p_get_address_width(){
    return (NRF24L01p_aw_t) NRF24L01p_read_register(_NRF24L01P_REG_SETUP_AW);
}

void NRF24L01p_set_auto_retransmission_count(uint8_t count){
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
 8001be4:	2004      	movs	r0, #4
 8001be6:	f7ff fddb 	bl	80017a0 <NRF24L01p_read_register>
 8001bea:	4603      	mov	r3, r0
 8001bec:	73fb      	strb	r3, [r7, #15]
    temp &= ~ 0x0F;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	f023 030f 	bic.w	r3, r3, #15
 8001bf4:	73fb      	strb	r3, [r7, #15]
    temp |= (count<<0);
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	4619      	mov	r1, r3
 8001c02:	2004      	movs	r0, #4
 8001c04:	f7ff fe15 	bl	8001832 <NRF24L01p_write_register>
}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <NRF24L01p_set_auto_retransmission_delay>:
uint8_t NRF24L01p_read_auto_retransmission_count(){
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
    return temp & 0x0F;
}

void NRF24L01p_set_auto_retransmission_delay(uint8_t times250us){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
 8001c1a:	2004      	movs	r0, #4
 8001c1c:	f7ff fdc0 	bl	80017a0 <NRF24L01p_read_register>
 8001c20:	4603      	mov	r3, r0
 8001c22:	73fb      	strb	r3, [r7, #15]
    temp &= ~(0xF0);
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	73fb      	strb	r3, [r7, #15]
    temp |= (times250us<<4);
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	b25a      	sxtb	r2, r3
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	2004      	movs	r0, #4
 8001c42:	f7ff fdf6 	bl	8001832 <NRF24L01p_write_register>
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <NRF24L01p_set_frequency_offset>:
uint8_t NRF24L01p_read_auto_retransmission_delay(){
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
    return temp & 0xF0;
}

void NRF24L01p_set_frequency_offset(uint8_t offset){
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	71fb      	strb	r3, [r7, #7]
    if( (offset >=0)  && ( offset <= 125)){
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b7d      	cmp	r3, #125	; 0x7d
 8001c5c:	d804      	bhi.n	8001c68 <NRF24L01p_set_frequency_offset+0x1a>
            NRF24L01p_write_register(_NRF24L01P_REG_RF_CH,offset);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	4619      	mov	r1, r3
 8001c62:	2005      	movs	r0, #5
 8001c64:	f7ff fde5 	bl	8001832 <NRF24L01p_write_register>
    }
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <NRF24L01p_set_DataRate>:
uint8_t NRF24L01p_get_frequency_offset(){
    return NRF24L01p_read_register(_NRF24L01P_REG_RF_CH);
}

void NRF24L01p_set_DataRate(NRF24L01p_datarate_t DataRate){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_RF_SETUP);
 8001c7a:	2006      	movs	r0, #6
 8001c7c:	f7ff fd90 	bl	80017a0 <NRF24L01p_read_register>
 8001c80:	4603      	mov	r3, r0
 8001c82:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_RF_SETUP_RF_DR_MASK;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001c8a:	73fb      	strb	r3, [r7, #15]
    temp |= DataRate;
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_RF_SETUP,temp);
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	4619      	mov	r1, r3
 8001c98:	2006      	movs	r0, #6
 8001c9a:	f7ff fdca 	bl	8001832 <NRF24L01p_write_register>
}
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <NRF24L01p_get_max_retry_flag>:

bool NRF24L01p_get_tx_fifo_full_flag(){
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_TX_FULL) return 1;
    else return 0;
}
bool NRF24L01p_get_max_retry_flag(){
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_MAX_RT) return 1;
 8001caa:	f7ff feb8 	bl	8001a1e <NRF24L01p_get_status>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <NRF24L01p_get_max_retry_flag+0x16>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <NRF24L01p_get_max_retry_flag+0x18>
    else return 0;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <NRF24L01p_clear_max_retry_flag>:
void NRF24L01p_clear_max_retry_flag(){
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
    uint8_t temp = _NRF24L01P_STATUS_MAX_RT;
 8001cc8:	2310      	movs	r3, #16
 8001cca:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 8001ccc:	1dfb      	adds	r3, r7, #7
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	2007      	movs	r0, #7
 8001cd4:	f7ff fdd7 	bl	8001886 <NRF24L01p_write_register_buffer>
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <NRF24L01p_get_data_sent_flag>:
bool NRF24L01p_get_data_sent_flag(){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_TX_DS) return 1;
 8001ce4:	f7ff fe9b 	bl	8001a1e <NRF24L01p_get_status>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <NRF24L01p_get_data_sent_flag+0x16>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <NRF24L01p_get_data_sent_flag+0x18>
    else return 0;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <NRF24L01p_clear_data_sent_flag>:
void NRF24L01p_clear_data_sent_flag(){
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
    uint8_t temp = _NRF24L01P_STATUS_TX_DS;
 8001d02:	2320      	movs	r3, #32
 8001d04:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 8001d06:	1dfb      	adds	r3, r7, #7
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	2007      	movs	r0, #7
 8001d0e:	f7ff fdba 	bl	8001886 <NRF24L01p_write_register_buffer>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <NRF24L01p_get_data_ready_flag>:
bool NRF24L01p_get_data_ready_flag(){
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_RX_DR) return 1;
 8001d1e:	f7ff fe7e 	bl	8001a1e <NRF24L01p_get_status>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <NRF24L01p_get_data_ready_flag+0x16>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <NRF24L01p_get_data_ready_flag+0x18>
    else return 0;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <NRF24L01p_clear_data_ready_flag>:
void NRF24L01p_clear_data_ready_flag(){
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
    uint8_t temp = _NRF24L01P_STATUS_RX_DR;
 8001d3c:	2340      	movs	r3, #64	; 0x40
 8001d3e:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 8001d40:	1dfb      	adds	r3, r7, #7
 8001d42:	2201      	movs	r2, #1
 8001d44:	4619      	mov	r1, r3
 8001d46:	2007      	movs	r0, #7
 8001d48:	f7ff fd9d 	bl	8001886 <NRF24L01p_write_register_buffer>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <NRF24L01p_get_rx_payload_pipe>:
NRF24L01p_pipe_t NRF24L01p_get_rx_payload_pipe(){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
    return (NRF24L01p_pipe_t) ((NRF24L01p_get_status()&_NRF24L01P_STATUS_RX_P_NO)>>1);
 8001d58:	f7ff fe61 	bl	8001a1e <NRF24L01p_get_status>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	105b      	asrs	r3, r3, #1
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	b2db      	uxtb	r3, r3
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <NRF24L01p_get_plos_count>:
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_OBSERVE_TX);
    return ((temp&_NRF24L01P_OBSERVE_TX_ARC_CNT_MASK)>>_NRF24L01P_OBSERVE_TX_ARC_CNT_BP);
    //return (temp&0x0F)>>0;

}
uint8_t NRF24L01p_get_plos_count(){
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
    uint8_t temp;
    NRF24L01p_read_register_buffer(_NRF24L01P_REG_OBSERVE_TX,&temp,sizeof(temp));
 8001d70:	1dfb      	adds	r3, r7, #7
 8001d72:	2201      	movs	r2, #1
 8001d74:	4619      	mov	r1, r3
 8001d76:	2008      	movs	r0, #8
 8001d78:	f7ff fd37 	bl	80017ea <NRF24L01p_read_register_buffer>
    return ((temp&_NRF24L01P_OBSERVE_TX_PLOS_CNT_MASK)>>_NRF24L01P_OBSERVE_TX_PLOS_CNT_BP);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	b2db      	uxtb	r3, r3
    //return (temp&0xF0)>>4;
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <NRF24L01p_set_RX_pipe_address>:
bool NRF24L01p_get_rpd(){
    if(NRF24L01p_read_register(_NRF24L01P_REG_RPD)) return 1;
    else return 0;
}

void NRF24L01p_set_RX_pipe_address(NRF24L01p_pipe_t pipe,NRF24L01p_PipeAddr_t address){
 8001d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8c:	b089      	sub	sp, #36	; 0x24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4601      	mov	r1, r0
 8001d92:	e9c7 2300 	strd	r2, r3, [r7]
 8001d96:	460b      	mov	r3, r1
 8001d98:	73fb      	strb	r3, [r7, #15]
    int max_pipe_addr_width = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
    if((pipe>=0) && (pipe<=1)   ){max_pipe_addr_width = 5;}
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d802      	bhi.n	8001daa <NRF24L01p_set_RX_pipe_address+0x20>
 8001da4:	2305      	movs	r3, #5
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	e007      	b.n	8001dba <NRF24L01p_set_RX_pipe_address+0x30>
    else if ((pipe>=2) && (pipe<=5)   ){max_pipe_addr_width = 1;}
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d904      	bls.n	8001dba <NRF24L01p_set_RX_pipe_address+0x30>
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d801      	bhi.n	8001dba <NRF24L01p_set_RX_pipe_address+0x30>
 8001db6:	2301      	movs	r3, #1
 8001db8:	61fb      	str	r3, [r7, #28]
    uint8_t temp[5];
    int i;
    for(i=0;i<max_pipe_addr_width;i++){
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	e01b      	b.n	8001df8 <NRF24L01p_set_RX_pipe_address+0x6e>
            temp[i] = (address>>(8*i))&0xFF;
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	00d9      	lsls	r1, r3, #3
 8001dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dc8:	f1c1 0620 	rsb	r6, r1, #32
 8001dcc:	f1a1 0020 	sub.w	r0, r1, #32
 8001dd0:	fa22 f401 	lsr.w	r4, r2, r1
 8001dd4:	fa03 f606 	lsl.w	r6, r3, r6
 8001dd8:	4334      	orrs	r4, r6
 8001dda:	fa23 f000 	lsr.w	r0, r3, r0
 8001dde:	4304      	orrs	r4, r0
 8001de0:	fa23 f501 	lsr.w	r5, r3, r1
 8001de4:	b2e1      	uxtb	r1, r4
 8001de6:	f107 0210 	add.w	r2, r7, #16
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	4413      	add	r3, r2
 8001dee:	460a      	mov	r2, r1
 8001df0:	701a      	strb	r2, [r3, #0]
    for(i=0;i<max_pipe_addr_width;i++){
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dbdf      	blt.n	8001dc0 <NRF24L01p_set_RX_pipe_address+0x36>
    }
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	330a      	adds	r3, #10
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f107 0110 	add.w	r1, r7, #16
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fd3a 	bl	8001886 <NRF24L01p_write_register_buffer>
}
 8001e12:	bf00      	nop
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e1a <NRF24L01p_set_TX_pipe_address>:
    }

    return temp_addr;
}

void NRF24L01p_set_TX_pipe_address(NRF24L01p_PipeAddr_t address){
 8001e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1c:	b087      	sub	sp, #28
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t temp[5];
    int i;
    for( i=0;i<5;i++){
 8001e24:	2200      	movs	r2, #0
 8001e26:	617a      	str	r2, [r7, #20]
 8001e28:	e01b      	b.n	8001e62 <NRF24L01p_set_TX_pipe_address+0x48>
            temp[i] = (address>>(8*i))&0xFF;
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	00d0      	lsls	r0, r2, #3
 8001e2e:	e897 0006 	ldmia.w	r7, {r1, r2}
 8001e32:	f1c0 0620 	rsb	r6, r0, #32
 8001e36:	f1a0 0520 	sub.w	r5, r0, #32
 8001e3a:	fa21 f300 	lsr.w	r3, r1, r0
 8001e3e:	fa02 f606 	lsl.w	r6, r2, r6
 8001e42:	4333      	orrs	r3, r6
 8001e44:	fa22 f505 	lsr.w	r5, r2, r5
 8001e48:	432b      	orrs	r3, r5
 8001e4a:	fa22 f400 	lsr.w	r4, r2, r0
 8001e4e:	b2d8      	uxtb	r0, r3
 8001e50:	f107 010c 	add.w	r1, r7, #12
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	440a      	add	r2, r1
 8001e58:	4601      	mov	r1, r0
 8001e5a:	7011      	strb	r1, [r2, #0]
    for( i=0;i<5;i++){
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	3201      	adds	r2, #1
 8001e60:	617a      	str	r2, [r7, #20]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	2a04      	cmp	r2, #4
 8001e66:	dde0      	ble.n	8001e2a <NRF24L01p_set_TX_pipe_address+0x10>
    }
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_TX_ADDR,temp,5);
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2205      	movs	r2, #5
 8001e6e:	4619      	mov	r1, r3
 8001e70:	2010      	movs	r0, #16
 8001e72:	f7ff fd08 	bl	8001886 <NRF24L01p_write_register_buffer>
}
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e7e <NRF24L01p_get_RX_pipe_width>:
            *(temp_addr_ptr+i)|= (temp[i]);
    }
    return temp_addr;
}

uint8_t NRF24L01p_get_RX_pipe_width(NRF24L01p_pipe_t pipe){
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	71fb      	strb	r3, [r7, #7]
    uint8_t temp;
    NRF24L01p_read_register_buffer((_NRF24L01P_REG_RX_PW_P0+pipe),&temp,sizeof(temp));
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	3311      	adds	r3, #17
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f107 010f 	add.w	r1, r7, #15
 8001e92:	2201      	movs	r2, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fca8 	bl	80017ea <NRF24L01p_read_register_buffer>
    return (temp&(0x3F));
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ea0:	b2db      	uxtb	r3, r3
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <NRF24L01p_get_fifo_flag_rx_empty>:

bool NRF24L01p_get_fifo_flag_rx_empty(){
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	af00      	add	r7, sp, #0
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_EMPTY ) return 1;
 8001eae:	2017      	movs	r0, #23
 8001eb0:	f7ff fc76 	bl	80017a0 <NRF24L01p_read_register>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <NRF24L01p_get_fifo_flag_rx_empty+0x18>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <NRF24L01p_get_fifo_flag_rx_empty+0x1a>
    else return 0;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <NRF24L01p_get_fifo_flag_tx_full>:
}
bool NRF24L01p_get_fifo_flag_tx_empty(){
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_TX_EMPTY ) return 1;
    else return 0;
}
bool NRF24L01p_get_fifo_flag_tx_full(){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_TX_FULL ) return 1;
 8001ecc:	2017      	movs	r0, #23
 8001ece:	f7ff fc67 	bl	80017a0 <NRF24L01p_read_register>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <NRF24L01p_get_fifo_flag_tx_full+0x18>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <NRF24L01p_get_fifo_flag_tx_full+0x1a>
    else return 0;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <NRF24L01p_enable_dynamic_payload_pipe>:
bool NRF24L01p_get_fifo_flag_tx_reuse(){
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_REUSE ) return 1;
    else return 0;
}

void NRF24L01p_enable_dynamic_payload_pipe(NRF24L01p_pipe_t pipe, bool sel){
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	460a      	mov	r2, r1
 8001ef0:	71fb      	strb	r3, [r7, #7]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	71bb      	strb	r3, [r7, #6]
    if(sel){
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d014      	beq.n	8001f26 <NRF24L01p_enable_dynamic_payload_pipe+0x40>
          uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_DYNPD);
 8001efc:	201c      	movs	r0, #28
 8001efe:	f7ff fc4f 	bl	80017a0 <NRF24L01p_read_register>
 8001f02:	4603      	mov	r3, r0
 8001f04:	73fb      	strb	r3, [r7, #15]
        temp |= (1<<pipe);
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	b25a      	sxtb	r2, r3
 8001f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	b25b      	sxtb	r3, r3
 8001f18:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,temp);
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	201c      	movs	r0, #28
 8001f20:	f7ff fc87 	bl	8001832 <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_DYNPD);
        temp &= ~(1<<pipe);
        NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,temp);
    }

}
 8001f24:	e015      	b.n	8001f52 <NRF24L01p_enable_dynamic_payload_pipe+0x6c>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_DYNPD);
 8001f26:	201c      	movs	r0, #28
 8001f28:	f7ff fc3a 	bl	80017a0 <NRF24L01p_read_register>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73bb      	strb	r3, [r7, #14]
        temp &= ~(1<<pipe);
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	2201      	movs	r2, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	b25a      	sxtb	r2, r3
 8001f3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f42:	4013      	ands	r3, r2
 8001f44:	b25b      	sxtb	r3, r3
 8001f46:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,temp);
 8001f48:	7bbb      	ldrb	r3, [r7, #14]
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	201c      	movs	r0, #28
 8001f4e:	f7ff fc70 	bl	8001832 <NRF24L01p_write_register>
}
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <NRF24L01p_enable_dynamic_payload>:



void NRF24L01p_enable_dynamic_payload(bool sel){
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
    if(sel){
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00e      	beq.n	8001f88 <NRF24L01p_enable_dynamic_payload+0x2e>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001f6a:	201d      	movs	r0, #29
 8001f6c:	f7ff fc18 	bl	80017a0 <NRF24L01p_read_register>
 8001f70:	4603      	mov	r3, r0
 8001f72:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_DPL;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	201d      	movs	r0, #29
 8001f82:	f7ff fc56 	bl	8001832 <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
    }

}
 8001f86:	e00d      	b.n	8001fa4 <NRF24L01p_enable_dynamic_payload+0x4a>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001f88:	201d      	movs	r0, #29
 8001f8a:	f7ff fc09 	bl	80017a0 <NRF24L01p_read_register>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
 8001f92:	7bbb      	ldrb	r3, [r7, #14]
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8001f9a:	7bbb      	ldrb	r3, [r7, #14]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	201d      	movs	r0, #29
 8001fa0:	f7ff fc47 	bl	8001832 <NRF24L01p_write_register>
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <NRF24L01p_enable_payload_with_ack>:



void NRF24L01p_enable_payload_with_ack(bool sel){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
    if(sel){
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00e      	beq.n	8001fda <NRF24L01p_enable_payload_with_ack+0x2e>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001fbc:	201d      	movs	r0, #29
 8001fbe:	f7ff fbef 	bl	80017a0 <NRF24L01p_read_register>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	201d      	movs	r0, #29
 8001fd4:	f7ff fc2d 	bl	8001832 <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
    }

}
 8001fd8:	e00d      	b.n	8001ff6 <NRF24L01p_enable_payload_with_ack+0x4a>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001fda:	201d      	movs	r0, #29
 8001fdc:	f7ff fbe0 	bl	80017a0 <NRF24L01p_read_register>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
 8001fe4:	7bbb      	ldrb	r3, [r7, #14]
 8001fe6:	f023 0302 	bic.w	r3, r3, #2
 8001fea:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8001fec:	7bbb      	ldrb	r3, [r7, #14]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	201d      	movs	r0, #29
 8001ff2:	f7ff fc1e 	bl	8001832 <NRF24L01p_write_register>
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <NRF24L01p_enable_dynamic_payload_with_no_ack>:



void NRF24L01p_enable_dynamic_payload_with_no_ack(bool sel){
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	71fb      	strb	r3, [r7, #7]
    if(sel){
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00e      	beq.n	800202c <NRF24L01p_enable_dynamic_payload_with_no_ack+0x2e>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 800200e:	201d      	movs	r0, #29
 8002010:	f7ff fbc6 	bl	80017a0 <NRF24L01p_read_register>
 8002014:	4603      	mov	r3, r0
 8002016:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_DYN_ACK;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	4619      	mov	r1, r3
 8002024:	201d      	movs	r0, #29
 8002026:	f7ff fc04 	bl	8001832 <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
    }

}
 800202a:	e00d      	b.n	8002048 <NRF24L01p_enable_dynamic_payload_with_no_ack+0x4a>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 800202c:	201d      	movs	r0, #29
 800202e:	f7ff fbb7 	bl	80017a0 <NRF24L01p_read_register>
 8002032:	4603      	mov	r3, r0
 8002034:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
 8002036:	7bbb      	ldrb	r3, [r7, #14]
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 800203e:	7bbb      	ldrb	r3, [r7, #14]
 8002040:	4619      	mov	r1, r3
 8002042:	201d      	movs	r0, #29
 8002044:	f7ff fbf5 	bl	8001832 <NRF24L01p_write_register>
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <NRF24L01p_port_Initialize>:
static GPIO_InitTypeDef nrf24l01p_CSN_pin_Struct = {NRF24L01P_CSN_PIN,GPIO_MODE_OUTPUT_PP,GPIO_NOPULL,GPIO_SPEED_FREQ_LOW,};
static GPIO_InitTypeDef nrf24l01p_IRQ_pin_Struct = {NRF24L01P_IRQ_PIN,GPIO_MODE_IT_FALLING,GPIO_NOPULL,GPIO_SPEED_FREQ_LOW,};



void NRF24L01p_port_Initialize(){
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
	NRF24L01p_port_SPI_initialize();
 8002056:	f000 f865 	bl	8002124 <NRF24L01p_port_SPI_initialize>

	/* Enable GPIOA clock */
	//__HAL_RCC_GPIOA_CLK_ENABLE();
	//__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800205a:	4a0c      	ldr	r2, [pc, #48]	; (800208c <NRF24L01p_port_Initialize+0x3c>)
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <NRF24L01p_port_Initialize+0x3c>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <NRF24L01p_port_Initialize+0x3c>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]


	HAL_SPI_Init(&nrf24l01p_SpiHandle);
 8002072:	4807      	ldr	r0, [pc, #28]	; (8002090 <NRF24L01p_port_Initialize+0x40>)
 8002074:	f002 fcaa 	bl	80049cc <HAL_SPI_Init>

	NRF24L01p_port_Pin_CE_Initialize();
 8002078:	f000 f80c 	bl	8002094 <NRF24L01p_port_Pin_CE_Initialize>
	NRF24L01p_port_Pin_CSN_Initialize();
 800207c:	f000 f816 	bl	80020ac <NRF24L01p_port_Pin_CSN_Initialize>
	NRF24L01p_port_Pin_IRQ_Initialize();
 8002080:	f000 f820 	bl	80020c4 <NRF24L01p_port_Pin_IRQ_Initialize>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	20000064 	.word	0x20000064

08002094 <NRF24L01p_port_Pin_CE_Initialize>:
void NRF24L01p_port_DeInitialize(){
	HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
}
void NRF24L01p_port_Pin_CE_Initialize(){
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
 8002098:	4902      	ldr	r1, [pc, #8]	; (80020a4 <NRF24L01p_port_Pin_CE_Initialize+0x10>)
 800209a:	4803      	ldr	r0, [pc, #12]	; (80020a8 <NRF24L01p_port_Pin_CE_Initialize+0x14>)
 800209c:	f000 fb08 	bl	80026b0 <HAL_GPIO_Init>
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000000 	.word	0x20000000
 80020a8:	48000800 	.word	0x48000800

080020ac <NRF24L01p_port_Pin_CSN_Initialize>:
void NRF24L01p_port_Pin_CSN_Initialize(){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_CSN_PORT, &nrf24l01p_CSN_pin_Struct);
 80020b0:	4902      	ldr	r1, [pc, #8]	; (80020bc <NRF24L01p_port_Pin_CSN_Initialize+0x10>)
 80020b2:	4803      	ldr	r0, [pc, #12]	; (80020c0 <NRF24L01p_port_Pin_CSN_Initialize+0x14>)
 80020b4:	f000 fafc 	bl	80026b0 <HAL_GPIO_Init>
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000014 	.word	0x20000014
 80020c0:	48000800 	.word	0x48000800

080020c4 <NRF24L01p_port_Pin_IRQ_Initialize>:
void NRF24L01p_port_Pin_IRQ_Initialize(){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_IRQ_PORT, &nrf24l01p_IRQ_pin_Struct);
 80020c8:	4902      	ldr	r1, [pc, #8]	; (80020d4 <NRF24L01p_port_Pin_IRQ_Initialize+0x10>)
 80020ca:	4803      	ldr	r0, [pc, #12]	; (80020d8 <NRF24L01p_port_Pin_IRQ_Initialize+0x14>)
 80020cc:	f000 faf0 	bl	80026b0 <HAL_GPIO_Init>

	//HAL_NVIC_SetPriority(EXTI9_5_IRQn, 10, 0);//------------------------------------------------
	//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//---------------------------------------------------------
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000028 	.word	0x20000028
 80020d8:	48000800 	.word	0x48000800

080020dc <NRF24L01p_port_write_Pin_CE>:
	return HAL_GPIO_ReadPin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN);
}
bool NRF24L01p_port_read_Pin_CSN(){
	return HAL_GPIO_ReadPin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN);
}
void NRF24L01p_port_write_Pin_CE(bool val){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN, (GPIO_PinState)val);
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <NRF24L01p_port_write_Pin_CE+0x20>)
 80020f0:	f000 fc74 	bl	80029dc <HAL_GPIO_WritePin>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	48000800 	.word	0x48000800

08002100 <NRF24L01p_port_write_Pin_CSN>:
void NRF24L01p_port_write_Pin_CSN(bool val){
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN, (GPIO_PinState)val);
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	461a      	mov	r2, r3
 800210e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002112:	4803      	ldr	r0, [pc, #12]	; (8002120 <NRF24L01p_port_write_Pin_CSN+0x20>)
 8002114:	f000 fc62 	bl	80029dc <HAL_GPIO_WritePin>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	48000800 	.word	0x48000800

08002124 <NRF24L01p_port_SPI_initialize>:
void NRF24L01p_port_SPI_initialize(){
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
	// TODO Auto-generated destructor stub
	/*##-1- Configure the SPI peripheral #######################################*/
	/* Set the SPI parameters */
	nrf24l01p_SpiHandle.Instance               = NRF24L01P_SPIx;
 800212a:	4b41      	ldr	r3, [pc, #260]	; (8002230 <NRF24L01p_port_SPI_initialize+0x10c>)
 800212c:	4a41      	ldr	r2, [pc, #260]	; (8002234 <NRF24L01p_port_SPI_initialize+0x110>)
 800212e:	601a      	str	r2, [r3, #0]
	nrf24l01p_SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002130:	4b3f      	ldr	r3, [pc, #252]	; (8002230 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002132:	2238      	movs	r2, #56	; 0x38
 8002134:	61da      	str	r2, [r3, #28]
	nrf24l01p_SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8002136:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
	nrf24l01p_SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800213c:	4b3c      	ldr	r3, [pc, #240]	; (8002230 <NRF24L01p_port_SPI_initialize+0x10c>)
 800213e:	2200      	movs	r2, #0
 8002140:	615a      	str	r2, [r3, #20]
	nrf24l01p_SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002142:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
	nrf24l01p_SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8002148:	4b39      	ldr	r3, [pc, #228]	; (8002230 <NRF24L01p_port_SPI_initialize+0x10c>)
 800214a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800214e:	60da      	str	r2, [r3, #12]
	nrf24l01p_SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002150:	4b37      	ldr	r3, [pc, #220]	; (8002230 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002152:	2200      	movs	r2, #0
 8002154:	621a      	str	r2, [r3, #32]
	nrf24l01p_SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002156:	4b36      	ldr	r3, [pc, #216]	; (8002230 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002158:	2200      	movs	r2, #0
 800215a:	625a      	str	r2, [r3, #36]	; 0x24
	nrf24l01p_SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800215c:	4b34      	ldr	r3, [pc, #208]	; (8002230 <NRF24L01p_port_SPI_initialize+0x10c>)
 800215e:	2200      	movs	r2, #0
 8002160:	629a      	str	r2, [r3, #40]	; 0x28
	nrf24l01p_SpiHandle.Init.CRCPolynomial     = 7;
 8002162:	4b33      	ldr	r3, [pc, #204]	; (8002230 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002164:	2207      	movs	r2, #7
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c
	//nrf24l01p_SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
	nrf24l01p_SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8002168:	4b31      	ldr	r3, [pc, #196]	; (8002230 <NRF24L01p_port_SPI_initialize+0x10c>)
 800216a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800216e:	619a      	str	r2, [r3, #24]
	//nrf24l01p_SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

	nrf24l01p_SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <NRF24L01p_port_SPI_initialize+0x10c>)
 8002172:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002176:	605a      	str	r2, [r3, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	NRF24L01P_SPIx_SCK_GPIO_CLK_ENABLE();
 8002178:	4a2f      	ldr	r2, [pc, #188]	; (8002238 <NRF24L01p_port_SPI_initialize+0x114>)
 800217a:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <NRF24L01p_port_SPI_initialize+0x114>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002184:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <NRF24L01p_port_SPI_initialize+0x114>)
 8002186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	693b      	ldr	r3, [r7, #16]
	NRF24L01P_SPIx_MISO_GPIO_CLK_ENABLE();
 8002190:	4a29      	ldr	r2, [pc, #164]	; (8002238 <NRF24L01p_port_SPI_initialize+0x114>)
 8002192:	4b29      	ldr	r3, [pc, #164]	; (8002238 <NRF24L01p_port_SPI_initialize+0x114>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219c:	4b26      	ldr	r3, [pc, #152]	; (8002238 <NRF24L01p_port_SPI_initialize+0x114>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
	NRF24L01P_SPIx_MOSI_GPIO_CLK_ENABLE();
 80021a8:	4a23      	ldr	r2, [pc, #140]	; (8002238 <NRF24L01p_port_SPI_initialize+0x114>)
 80021aa:	4b23      	ldr	r3, [pc, #140]	; (8002238 <NRF24L01p_port_SPI_initialize+0x114>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b4:	4b20      	ldr	r3, [pc, #128]	; (8002238 <NRF24L01p_port_SPI_initialize+0x114>)
 80021b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
	/* Enable SPI clock */
	NRF24L01P_SPIx_CLK_ENABLE();
 80021c0:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <NRF24L01p_port_SPI_initialize+0x114>)
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <NRF24L01p_port_SPI_initialize+0x114>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ca:	6593      	str	r3, [r2, #88]	; 0x58
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <NRF24L01p_port_SPI_initialize+0x114>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* SPI SCK GPIO pin configuration  */
	GPIO_InitStruct.Pin       = NRF24L01P_SPIx_SCK_PIN;
 80021d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 80021e2:	2302      	movs	r3, #2
 80021e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80021e6:	2302      	movs	r3, #2
 80021e8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_SCK_AF;
 80021ea:	2306      	movs	r3, #6
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	4811      	ldr	r0, [pc, #68]	; (800223c <NRF24L01p_port_SPI_initialize+0x118>)
 80021f6:	f000 fa5b 	bl	80026b0 <HAL_GPIO_Init>

	/* SPI MISO GPIO pin configuration  */
	GPIO_InitStruct.Pin = NRF24L01P_SPIx_MISO_PIN;
 80021fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_MISO_AF;
 8002200:	2306      	movs	r3, #6
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	480c      	ldr	r0, [pc, #48]	; (800223c <NRF24L01p_port_SPI_initialize+0x118>)
 800220c:	f000 fa50 	bl	80026b0 <HAL_GPIO_Init>

	/* SPI MOSI GPIO pin configuration  */
	GPIO_InitStruct.Pin = NRF24L01P_SPIx_MOSI_PIN;
 8002210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002214:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_MOSI_AF;
 8002216:	2306      	movs	r3, #6
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4806      	ldr	r0, [pc, #24]	; (800223c <NRF24L01p_port_SPI_initialize+0x118>)
 8002222:	f000 fa45 	bl	80026b0 <HAL_GPIO_Init>
}
 8002226:	bf00      	nop
 8002228:	3728      	adds	r7, #40	; 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000064 	.word	0x20000064
 8002234:	40003c00 	.word	0x40003c00
 8002238:	40021000 	.word	0x40021000
 800223c:	48000800 	.word	0x48000800

08002240 <NRF24L01p_port_SPI_Transcieve>:
int NRF24L01p_port_SPI_Transcieve(uint8_t *dataOut, uint8_t *dataIn, unsigned int size){
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
	return HAL_SPI_TransmitReceive(&nrf24l01p_SpiHandle, dataOut, dataIn, size,1000);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	b29a      	uxth	r2, r3
 8002250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	4613      	mov	r3, r2
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	68f9      	ldr	r1, [r7, #12]
 800225c:	4803      	ldr	r0, [pc, #12]	; (800226c <NRF24L01p_port_SPI_Transcieve+0x2c>)
 800225e:	f002 fd93 	bl	8004d88 <HAL_SPI_TransmitReceive>
 8002262:	4603      	mov	r3, r0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000064 	.word	0x20000064

08002270 <NRF24L01p_port_DelayMs>:
int NRF24L01p_port_SPI_Receive(uint8_t *data, unsigned int size){
	HAL_SPI_Receive(&nrf24l01p_SpiHandle, data, size, 1000);
}


void NRF24L01p_port_DelayMs(unsigned int ms){
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f91f 	bl	80024bc <HAL_Delay>
	//vTaskDelay ((ms / portTICK_PERIOD_MS));

}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <NRF24L01p_port_DelayUs>:
void NRF24L01p_port_DelayUs(unsigned int us){
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	unsigned int ms = us/1000;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <NRF24L01p_port_DelayUs+0x28>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	60fb      	str	r3, [r7, #12]
	HAL_Delay(ms + 1);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3301      	adds	r3, #1
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 f90b 	bl	80024bc <HAL_Delay>
	//vTaskDelay (( ms / portTICK_PERIOD_MS));
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	10624dd3 	.word	0x10624dd3
 80022b4:	00000000 	.word	0x00000000

080022b8 <Si7006_temperature>:
	unit->delay(ms);
}

/////////////////////////////////////////////////////////////////////////////////////

float Si7006_temperature(Si7006_t *unit){
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	uint8_t data[3] = {0xF3, 0, 0};
 80022c0:	23f3      	movs	r3, #243	; 0xf3
 80022c2:	723b      	strb	r3, [r7, #8]
 80022c4:	2300      	movs	r3, #0
 80022c6:	727b      	strb	r3, [r7, #9]
 80022c8:	2300      	movs	r3, #0
 80022ca:	72bb      	strb	r3, [r7, #10]
	unit->i2c_transmit(data, 1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f107 0208 	add.w	r2, r7, #8
 80022d4:	2101      	movs	r1, #1
 80022d6:	4610      	mov	r0, r2
 80022d8:	4798      	blx	r3
	unit->delay(500);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022e2:	4798      	blx	r3
	unit->i2c_receive(data,2);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f107 0208 	add.w	r2, r7, #8
 80022ec:	2102      	movs	r1, #2
 80022ee:	4610      	mov	r0, r2
 80022f0:	4798      	blx	r3

	uint16_t Temp_Code = data[0]<<8 | data[1];
 80022f2:	7a3b      	ldrb	r3, [r7, #8]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	b21a      	sxth	r2, r3
 80022f8:	7a7b      	ldrb	r3, [r7, #9]
 80022fa:	b21b      	sxth	r3, r3
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b21b      	sxth	r3, r3
 8002300:	81fb      	strh	r3, [r7, #14]
	//printf("the data received is %d, %d\r\n", data[1], data[0]);
	//printf("temp code is is %d\r\n", tempCode );

	return ((175.72* (float)Temp_Code)/65536) - 46.85;
 8002302:	89fb      	ldrh	r3, [r7, #14]
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230c:	ee17 0a90 	vmov	r0, s15
 8002310:	f7fe f8ca 	bl	80004a8 <__aeabi_f2d>
 8002314:	a315      	add	r3, pc, #84	; (adr r3, 800236c <Si7006_temperature+0xb4>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f7fe f919 	bl	8000550 <__aeabi_dmul>
 800231e:	4603      	mov	r3, r0
 8002320:	460c      	mov	r4, r1
 8002322:	4618      	mov	r0, r3
 8002324:	4621      	mov	r1, r4
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <Si7006_temperature+0xb0>)
 800232c:	f7fe fa3a 	bl	80007a4 <__aeabi_ddiv>
 8002330:	4603      	mov	r3, r0
 8002332:	460c      	mov	r4, r1
 8002334:	4618      	mov	r0, r3
 8002336:	4621      	mov	r1, r4
 8002338:	a309      	add	r3, pc, #36	; (adr r3, 8002360 <Si7006_temperature+0xa8>)
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	f7fd ff53 	bl	80001e8 <__aeabi_dsub>
 8002342:	4603      	mov	r3, r0
 8002344:	460c      	mov	r4, r1
 8002346:	4618      	mov	r0, r3
 8002348:	4621      	mov	r1, r4
 800234a:	f7fe fb13 	bl	8000974 <__aeabi_d2f>
 800234e:	4603      	mov	r3, r0
 8002350:	ee07 3a90 	vmov	s15, r3
}
 8002354:	eeb0 0a67 	vmov.f32	s0, s15
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bd90      	pop	{r4, r7, pc}
 800235e:	bf00      	nop
 8002360:	cccccccd 	.word	0xcccccccd
 8002364:	40476ccc 	.word	0x40476ccc
 8002368:	40f00000 	.word	0x40f00000
 800236c:	3d70a3d7 	.word	0x3d70a3d7
 8002370:	4065f70a 	.word	0x4065f70a

08002374 <Si7006_relativeHumidity>:

float Si7006_relativeHumidity(Si7006_t *unit){
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0xF5, 0};
 800237c:	23f5      	movs	r3, #245	; 0xf5
 800237e:	733b      	strb	r3, [r7, #12]
 8002380:	2300      	movs	r3, #0
 8002382:	737b      	strb	r3, [r7, #13]
	unit->i2c_transmit(data, 1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f107 020c 	add.w	r2, r7, #12
 800238c:	2101      	movs	r1, #1
 800238e:	4610      	mov	r0, r2
 8002390:	4798      	blx	r3
	unit->delay(500);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800239a:	4798      	blx	r3
	unit->i2c_receive(data,2);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f107 020c 	add.w	r2, r7, #12
 80023a4:	2102      	movs	r1, #2
 80023a6:	4610      	mov	r0, r2
 80023a8:	4798      	blx	r3

	uint16_t RH_Code = data[0]<<8 | data[1];
 80023aa:	7b3b      	ldrb	r3, [r7, #12]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	b21a      	sxth	r2, r3
 80023b0:	7b7b      	ldrb	r3, [r7, #13]
 80023b2:	b21b      	sxth	r3, r3
 80023b4:	4313      	orrs	r3, r2
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	82fb      	strh	r3, [r7, #22]
	//printf("the data received is %d, %d\r\n", data[1], data[0]);
	printf("RH code is is %d\r\n", RH_Code );
 80023ba:	8afb      	ldrh	r3, [r7, #22]
 80023bc:	4619      	mov	r1, r3
 80023be:	4819      	ldr	r0, [pc, #100]	; (8002424 <Si7006_relativeHumidity+0xb0>)
 80023c0:	f006 f95a 	bl	8008678 <iprintf>

	//float step1 = ((float) RH_Code * 125.0 );
	//float step2 = (((float) RH_Code * 125.0 ) / 65536 ) - 6.0;

	float relativeHumidity = (((float) RH_Code * 125.0 ) / 65536 ) - 6.0;
 80023c4:	8afb      	ldrh	r3, [r7, #22]
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ce:	ee17 0a90 	vmov	r0, s15
 80023d2:	f7fe f869 	bl	80004a8 <__aeabi_f2d>
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	4b13      	ldr	r3, [pc, #76]	; (8002428 <Si7006_relativeHumidity+0xb4>)
 80023dc:	f7fe f8b8 	bl	8000550 <__aeabi_dmul>
 80023e0:	4603      	mov	r3, r0
 80023e2:	460c      	mov	r4, r1
 80023e4:	4618      	mov	r0, r3
 80023e6:	4621      	mov	r1, r4
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <Si7006_relativeHumidity+0xb8>)
 80023ee:	f7fe f9d9 	bl	80007a4 <__aeabi_ddiv>
 80023f2:	4603      	mov	r3, r0
 80023f4:	460c      	mov	r4, r1
 80023f6:	4618      	mov	r0, r3
 80023f8:	4621      	mov	r1, r4
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <Si7006_relativeHumidity+0xbc>)
 8002400:	f7fd fef2 	bl	80001e8 <__aeabi_dsub>
 8002404:	4603      	mov	r3, r0
 8002406:	460c      	mov	r4, r1
 8002408:	4618      	mov	r0, r3
 800240a:	4621      	mov	r1, r4
 800240c:	f7fe fab2 	bl	8000974 <__aeabi_d2f>
 8002410:	4603      	mov	r3, r0
 8002412:	613b      	str	r3, [r7, #16]
	return relativeHumidity;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	ee07 3a90 	vmov	s15, r3
}
 800241a:	eeb0 0a67 	vmov.f32	s0, s15
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	bd90      	pop	{r4, r7, pc}
 8002424:	080087d8 	.word	0x080087d8
 8002428:	405f4000 	.word	0x405f4000
 800242c:	40f00000 	.word	0x40f00000
 8002430:	40180000 	.word	0x40180000

08002434 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002438:	2003      	movs	r0, #3
 800243a:	f000 f905 	bl	8002648 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243e:	2000      	movs	r0, #0
 8002440:	f000 f806 	bl	8002450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002444:	f005 fe18 	bl	8008078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_InitTick+0x30>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a09      	ldr	r2, [pc, #36]	; (8002484 <HAL_InitTick+0x34>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	4618      	mov	r0, r3
 8002466:	f000 f916 	bl	8002696 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800246a:	2200      	movs	r2, #0
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002472:	f000 f8f4 	bl	800265e <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000040 	.word	0x20000040
 8002484:	10624dd3 	.word	0x10624dd3

08002488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  uwTick++;
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <HAL_IncTick+0x18>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	3301      	adds	r3, #1
 8002492:	4a03      	ldr	r2, [pc, #12]	; (80024a0 <HAL_IncTick+0x18>)
 8002494:	6013      	str	r3, [r2, #0]
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	20008030 	.word	0x20008030

080024a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20008030 	.word	0x20008030

080024bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80024c8:	f7ff ffec 	bl	80024a4 <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80024ce:	bf00      	nop
 80024d0:	f7ff ffe8 	bl	80024a4 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad2      	subs	r2, r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d3f7      	bcc.n	80024d0 <HAL_Delay+0x14>
  {
  }
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <NVIC_SetPriorityGrouping+0x44>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002504:	4013      	ands	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <NVIC_SetPriorityGrouping+0x44>)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	60d3      	str	r3, [r2, #12]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <NVIC_GetPriorityGrouping+0x18>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 0307 	and.w	r3, r3, #7
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	da0b      	bge.n	8002578 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002560:	490d      	ldr	r1, [pc, #52]	; (8002598 <NVIC_SetPriority+0x4c>)
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	3b04      	subs	r3, #4
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	0112      	lsls	r2, r2, #4
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	440b      	add	r3, r1
 8002574:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002576:	e009      	b.n	800258c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002578:	4908      	ldr	r1, [pc, #32]	; (800259c <NVIC_SetPriority+0x50>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	0112      	lsls	r2, r2, #4
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	440b      	add	r3, r1
 8002588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00
 800259c:	e000e100 	.word	0xe000e100

080025a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f1c3 0307 	rsb	r3, r3, #7
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	bf28      	it	cs
 80025be:	2304      	movcs	r3, #4
 80025c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d902      	bls.n	80025d0 <NVIC_EncodePriority+0x30>
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3b03      	subs	r3, #3
 80025ce:	e000      	b.n	80025d2 <NVIC_EncodePriority+0x32>
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	2201      	movs	r2, #1
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	1e5a      	subs	r2, r3, #1
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	401a      	ands	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e6:	2101      	movs	r1, #1
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	1e59      	subs	r1, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	4313      	orrs	r3, r2
         );
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002614:	d301      	bcc.n	800261a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002616:	2301      	movs	r3, #1
 8002618:	e00f      	b.n	800263a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <SysTick_Config+0x40>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002622:	210f      	movs	r1, #15
 8002624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002628:	f7ff ff90 	bl	800254c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <SysTick_Config+0x40>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002632:	4b04      	ldr	r3, [pc, #16]	; (8002644 <SysTick_Config+0x40>)
 8002634:	2207      	movs	r2, #7
 8002636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	e000e010 	.word	0xe000e010

08002648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ff49 	bl	80024e8 <NVIC_SetPriorityGrouping>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002670:	f7ff ff5e 	bl	8002530 <NVIC_GetPriorityGrouping>
 8002674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	6978      	ldr	r0, [r7, #20]
 800267c:	f7ff ff90 	bl	80025a0 <NVIC_EncodePriority>
 8002680:	4602      	mov	r2, r0
 8002682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff5f 	bl	800254c <NVIC_SetPriority>
}
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ffb0 	bl	8002604 <SysTick_Config>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80026c6:	e154      	b.n	8002972 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	4013      	ands	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8146 	beq.w	800296c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x40>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b12      	cmp	r3, #18
 80026ee:	d123      	bne.n	8002738 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	08da      	lsrs	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	220f      	movs	r2, #15
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	08da      	lsrs	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3208      	adds	r2, #8
 8002732:	6939      	ldr	r1, [r7, #16]
 8002734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0203 	and.w	r2, r3, #3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d00b      	beq.n	800278c <HAL_GPIO_Init+0xdc>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d007      	beq.n	800278c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002780:	2b11      	cmp	r3, #17
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b12      	cmp	r3, #18
 800278a:	d130      	bne.n	80027ee <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027c2:	2201      	movs	r2, #1
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 0201 	and.w	r2, r3, #1
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80a0 	beq.w	800296c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282c:	4a58      	ldr	r2, [pc, #352]	; (8002990 <HAL_GPIO_Init+0x2e0>)
 800282e:	4b58      	ldr	r3, [pc, #352]	; (8002990 <HAL_GPIO_Init+0x2e0>)
 8002830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6613      	str	r3, [r2, #96]	; 0x60
 8002838:	4b55      	ldr	r3, [pc, #340]	; (8002990 <HAL_GPIO_Init+0x2e0>)
 800283a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002844:	4a53      	ldr	r2, [pc, #332]	; (8002994 <HAL_GPIO_Init+0x2e4>)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	3302      	adds	r3, #2
 800284c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800286e:	d019      	beq.n	80028a4 <HAL_GPIO_Init+0x1f4>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a49      	ldr	r2, [pc, #292]	; (8002998 <HAL_GPIO_Init+0x2e8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d013      	beq.n	80028a0 <HAL_GPIO_Init+0x1f0>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a48      	ldr	r2, [pc, #288]	; (800299c <HAL_GPIO_Init+0x2ec>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00d      	beq.n	800289c <HAL_GPIO_Init+0x1ec>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a47      	ldr	r2, [pc, #284]	; (80029a0 <HAL_GPIO_Init+0x2f0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <HAL_GPIO_Init+0x1e8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a46      	ldr	r2, [pc, #280]	; (80029a4 <HAL_GPIO_Init+0x2f4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_GPIO_Init+0x1e4>
 8002890:	2304      	movs	r3, #4
 8002892:	e008      	b.n	80028a6 <HAL_GPIO_Init+0x1f6>
 8002894:	2307      	movs	r3, #7
 8002896:	e006      	b.n	80028a6 <HAL_GPIO_Init+0x1f6>
 8002898:	2303      	movs	r3, #3
 800289a:	e004      	b.n	80028a6 <HAL_GPIO_Init+0x1f6>
 800289c:	2302      	movs	r3, #2
 800289e:	e002      	b.n	80028a6 <HAL_GPIO_Init+0x1f6>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_GPIO_Init+0x1f6>
 80028a4:	2300      	movs	r3, #0
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	f002 0203 	and.w	r2, r2, #3
 80028ac:	0092      	lsls	r2, r2, #2
 80028ae:	4093      	lsls	r3, r2
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028b6:	4937      	ldr	r1, [pc, #220]	; (8002994 <HAL_GPIO_Init+0x2e4>)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	3302      	adds	r3, #2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028c4:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028e8:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002912:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002918:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	43db      	mvns	r3, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800293c:	4a1a      	ldr	r2, [pc, #104]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002942:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002966:	4a10      	ldr	r2, [pc, #64]	; (80029a8 <HAL_GPIO_Init+0x2f8>)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	3301      	adds	r3, #1
 8002970:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	f47f aea3 	bne.w	80026c8 <HAL_GPIO_Init+0x18>
  }
}
 8002982:	bf00      	nop
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	40010000 	.word	0x40010000
 8002998:	48000400 	.word	0x48000400
 800299c:	48000800 	.word	0x48000800
 80029a0:	48000c00 	.word	0x48000c00
 80029a4:	48001000 	.word	0x48001000
 80029a8:	40010400 	.word	0x40010400

080029ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	e001      	b.n	80029ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	807b      	strh	r3, [r7, #2]
 80029e8:	4613      	mov	r3, r2
 80029ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029ec:	787b      	ldrb	r3, [r7, #1]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e080      	b.n	8002b20 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f005 fb48 	bl	80080c8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2224      	movs	r2, #36	; 0x24
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6852      	ldr	r2, [r2, #4]
 8002a58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	6892      	ldr	r2, [r2, #8]
 8002a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d107      	bne.n	8002a86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6892      	ldr	r2, [r2, #8]
 8002a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	e006      	b.n	8002a94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6892      	ldr	r2, [r2, #8]
 8002a8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d104      	bne.n	8002aa6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	68d2      	ldr	r2, [r2, #12]
 8002ac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ac8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6911      	ldr	r1, [r2, #16]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6952      	ldr	r2, [r2, #20]
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6992      	ldr	r2, [r2, #24]
 8002adc:	0212      	lsls	r2, r2, #8
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	69d1      	ldr	r1, [r2, #28]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6a12      	ldr	r2, [r2, #32]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	461a      	mov	r2, r3
 8002b34:	460b      	mov	r3, r1
 8002b36:	817b      	strh	r3, [r7, #10]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	f040 80e6 	bne.w	8002d1a <HAL_I2C_Master_Transmit+0x1f2>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_I2C_Master_Transmit+0x34>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e0df      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x1f4>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b64:	f7ff fc9e 	bl	80024a4 <HAL_GetTick>
 8002b68:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	2319      	movs	r3, #25
 8002b70:	2201      	movs	r2, #1
 8002b72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fada 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0ca      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x1f4>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2221      	movs	r2, #33	; 0x21
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2210      	movs	r2, #16
 8002b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	893a      	ldrh	r2, [r7, #8]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2bff      	cmp	r3, #255	; 0xff
 8002bb6:	d90f      	bls.n	8002bd8 <HAL_I2C_Master_Transmit+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	22ff      	movs	r2, #255	; 0xff
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	8979      	ldrh	r1, [r7, #10]
 8002bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fc1f 	bl	8003414 <I2C_TransferConfig>
 8002bd6:	e071      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x194>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	8979      	ldrh	r1, [r7, #10]
 8002bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fc0d 	bl	8003414 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8002bfa:	e05f      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x194>
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	6a39      	ldr	r1, [r7, #32]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 facf 	bl	80031a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_I2C_Master_Transmit+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d101      	bne.n	8002c18 <HAL_I2C_Master_Transmit+0xf0>
        {
          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e081      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x1f4>
        }
        else
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e07f      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x1f4>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	1c58      	adds	r0, r3, #1
 8002c26:	68f9      	ldr	r1, [r7, #12]
 8002c28:	6248      	str	r0, [r1, #36]	; 0x24
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d135      	bne.n	8002cbc <HAL_I2C_Master_Transmit+0x194>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d030      	beq.n	8002cbc <HAL_I2C_Master_Transmit+0x194>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	2200      	movs	r2, #0
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fa63 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Master_Transmit+0x14c>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e053      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x1f4>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2bff      	cmp	r3, #255	; 0xff
 8002c7c:	d90e      	bls.n	8002c9c <HAL_I2C_Master_Transmit+0x174>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	22ff      	movs	r2, #255	; 0xff
 8002c82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	8979      	ldrh	r1, [r7, #10]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fbbd 	bl	8003414 <I2C_TransferConfig>
 8002c9a:	e00f      	b.n	8002cbc <HAL_I2C_Master_Transmit+0x194>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	8979      	ldrh	r1, [r7, #10]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fbac 	bl	8003414 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d19a      	bne.n	8002bfc <HAL_I2C_Master_Transmit+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	6a39      	ldr	r1, [r7, #32]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 faaa 	bl	8003224 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_I2C_Master_Transmit+0x1be>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2C_Master_Transmit+0x1ba>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e01c      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x1f4>
      }
      else
      {
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e01a      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x1f4>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2220      	movs	r2, #32
 8002cec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_I2C_Master_Transmit+0x1fc>)
 8002cfa:	400b      	ands	r3, r1
 8002cfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x1f4>
  }
  else
  {
    return HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
  }
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	fe00e800 	.word	0xfe00e800

08002d28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	461a      	mov	r2, r3
 8002d34:	460b      	mov	r3, r1
 8002d36:	817b      	strh	r3, [r7, #10]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	f040 80e7 	bne.w	8002f1c <HAL_I2C_Master_Receive+0x1f4>
  {    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_I2C_Master_Receive+0x34>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e0e0      	b.n	8002f1e <HAL_I2C_Master_Receive+0x1f6>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d64:	f7ff fb9e 	bl	80024a4 <HAL_GetTick>
 8002d68:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	2319      	movs	r3, #25
 8002d70:	2201      	movs	r2, #1
 8002d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f9da 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e0cb      	b.n	8002f1e <HAL_I2C_Master_Receive+0x1f6>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2222      	movs	r2, #34	; 0x22
 8002d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2210      	movs	r2, #16
 8002d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	893a      	ldrh	r2, [r7, #8]
 8002da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2bff      	cmp	r3, #255	; 0xff
 8002db6:	d90f      	bls.n	8002dd8 <HAL_I2C_Master_Receive+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	22ff      	movs	r2, #255	; 0xff
 8002dbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	8979      	ldrh	r1, [r7, #10]
 8002dc6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fb1f 	bl	8003414 <I2C_TransferConfig>
 8002dd6:	e072      	b.n	8002ebe <HAL_I2C_Master_Receive+0x196>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	8979      	ldrh	r1, [r7, #10]
 8002dea:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fb0d 	bl	8003414 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8002dfa:	e060      	b.n	8002ebe <HAL_I2C_Master_Receive+0x196>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	6a39      	ldr	r1, [r7, #32]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fa4b 	bl	800329c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <HAL_I2C_Master_Receive+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d101      	bne.n	8002e18 <HAL_I2C_Master_Receive+0xf0>
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e082      	b.n	8002f1e <HAL_I2C_Master_Receive+0x1f6>
        }
        else
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e080      	b.n	8002f1e <HAL_I2C_Master_Receive+0x1f6>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c59      	adds	r1, r3, #1
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	6251      	str	r1, [r2, #36]	; 0x24
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d135      	bne.n	8002ebe <HAL_I2C_Master_Receive+0x196>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d030      	beq.n	8002ebe <HAL_I2C_Master_Receive+0x196>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	2200      	movs	r2, #0
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f962 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_I2C_Master_Receive+0x14e>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e053      	b.n	8002f1e <HAL_I2C_Master_Receive+0x1f6>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2bff      	cmp	r3, #255	; 0xff
 8002e7e:	d90e      	bls.n	8002e9e <HAL_I2C_Master_Receive+0x176>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	22ff      	movs	r2, #255	; 0xff
 8002e84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	8979      	ldrh	r1, [r7, #10]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fabc 	bl	8003414 <I2C_TransferConfig>
 8002e9c:	e00f      	b.n	8002ebe <HAL_I2C_Master_Receive+0x196>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	8979      	ldrh	r1, [r7, #10]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 faab 	bl	8003414 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d199      	bne.n	8002dfc <HAL_I2C_Master_Receive+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	6a39      	ldr	r1, [r7, #32]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f9a9 	bl	8003224 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d007      	beq.n	8002ee8 <HAL_I2C_Master_Receive+0x1c0>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d101      	bne.n	8002ee4 <HAL_I2C_Master_Receive+0x1bc>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e01c      	b.n	8002f1e <HAL_I2C_Master_Receive+0x1f6>
      }
      else
      {
        return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e01a      	b.n	8002f1e <HAL_I2C_Master_Receive+0x1f6>
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2220      	movs	r2, #32
 8002eee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_I2C_Master_Receive+0x200>)
 8002efc:	400b      	ands	r3, r1
 8002efe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <HAL_I2C_Master_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	fe00e800 	.word	0xfe00e800

08002f2c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]

  __IO uint32_t I2C_Trials = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	f040 80c6 	bne.w	80030de <HAL_I2C_IsDeviceReady+0x1b2>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f60:	d101      	bne.n	8002f66 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
 8002f64:	e0bc      	b.n	80030e0 <HAL_I2C_IsDeviceReady+0x1b4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_I2C_IsDeviceReady+0x48>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e0b5      	b.n	80030e0 <HAL_I2C_IsDeviceReady+0x1b4>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2224      	movs	r2, #36	; 0x24
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode,DevAddress);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d107      	bne.n	8002fa6 <HAL_I2C_IsDeviceReady+0x7a>
 8002f96:	897b      	ldrh	r3, [r7, #10]
 8002f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fa4:	e004      	b.n	8002fb0 <HAL_I2C_IsDeviceReady+0x84>
 8002fa6:	897b      	ldrh	r3, [r7, #10]
 8002fa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fac:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002fb0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002fb2:	f7ff fa77 	bl	80024a4 <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8002fb8:	e018      	b.n	8002fec <HAL_I2C_IsDeviceReady+0xc0>
      {
      	if(Timeout != HAL_MAX_DELAY)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc0:	d014      	beq.n	8002fec <HAL_I2C_IsDeviceReady+0xc0>
      	{
          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d007      	beq.n	8002fd8 <HAL_I2C_IsDeviceReady+0xac>
 8002fc8:	f7ff fa6c 	bl	80024a4 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	1ad2      	subs	r2, r2, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d909      	bls.n	8002fec <HAL_I2C_IsDeviceReady+0xc0>
          {
            /* Device is ready */
            hi2c->State = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e079      	b.n	80030e0 <HAL_I2C_IsDeviceReady+0x1b4>
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d00c      	beq.n	8003014 <HAL_I2C_IsDeviceReady+0xe8>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b10      	cmp	r3, #16
 8003006:	d005      	beq.n	8003014 <HAL_I2C_IsDeviceReady+0xe8>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2ba0      	cmp	r3, #160	; 0xa0
 8003012:	d1d2      	bne.n	8002fba <HAL_I2C_IsDeviceReady+0x8e>
          }
        } 
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b10      	cmp	r3, #16
 8003020:	d01a      	beq.n	8003058 <HAL_I2C_IsDeviceReady+0x12c>
      {
        /* Wait until STOPF flag is reset */ 
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2200      	movs	r2, #0
 800302a:	2120      	movs	r1, #32
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f87f 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_IsDeviceReady+0x110>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e051      	b.n	80030e0 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2220      	movs	r2, #32
 8003042:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e043      	b.n	80030e0 <HAL_I2C_IsDeviceReady+0x1b4>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2200      	movs	r2, #0
 8003060:	2120      	movs	r1, #32
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f864 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_IsDeviceReady+0x146>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e036      	b.n	80030e0 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2210      	movs	r2, #16
 8003078:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2220      	movs	r2, #32
 8003080:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials++ == Trials)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	613a      	str	r2, [r7, #16]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4293      	cmp	r3, r2
 800308c:	d118      	bne.n	80030c0 <HAL_I2C_IsDeviceReady+0x194>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	6852      	ldr	r2, [r2, #4]
 8003098:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800309c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */ 
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2120      	movs	r1, #32
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f841 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_I2C_IsDeviceReady+0x18c>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e013      	b.n	80030e0 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2220      	movs	r2, #32
 80030be:	61da      	str	r2, [r3, #28]
      }
    }while(I2C_Trials < Trials);
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	f4ff af60 	bcc.w	8002f8a <HAL_I2C_IsDeviceReady+0x5e>

    hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e000      	b.n	80030e0 <HAL_I2C_IsDeviceReady+0x1b4>
  }
  else
  {
    return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
  }
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d103      	bne.n	8003106 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2200      	movs	r2, #0
 8003104:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d007      	beq.n	8003124 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	6992      	ldr	r2, [r2, #24]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	619a      	str	r2, [r3, #24]
  }
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003140:	e01c      	b.n	800317c <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003148:	d018      	beq.n	800317c <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003150:	f7ff f9a8 	bl	80024a4 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	1ad2      	subs	r2, r2, r3
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d90d      	bls.n	800317c <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e00f      	b.n	800319c <I2C_WaitOnFlagUntilTimeout+0x6c>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	401a      	ands	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	429a      	cmp	r2, r3
 8003198:	d0d3      	beq.n	8003142 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031b0:	e02c      	b.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8ce 	bl	8003358 <I2C_IsAcknowledgeFailed>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e02a      	b.n	800321c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031cc:	d01e      	beq.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031d4:	f7ff f966 	bl	80024a4 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	1ad2      	subs	r2, r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d913      	bls.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e007      	b.n	800321c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b02      	cmp	r3, #2
 8003218:	d1cb      	bne.n	80031b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003230:	e028      	b.n	8003284 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f88e 	bl	8003358 <I2C_IsAcknowledgeFailed>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e026      	b.n	8003294 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800324c:	f7ff f92a 	bl	80024a4 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	1ad2      	subs	r2, r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	429a      	cmp	r2, r3
 800325a:	d913      	bls.n	8003284 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e007      	b.n	8003294 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b20      	cmp	r3, #32
 8003290:	d1cf      	bne.n	8003232 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032a8:	e048      	b.n	800333c <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f852 	bl	8003358 <I2C_IsAcknowledgeFailed>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e046      	b.n	800334c <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d11c      	bne.n	8003306 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2220      	movs	r2, #32
 80032d2:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 80032e0:	400b      	ands	r3, r1
 80032e2:	6053      	str	r3, [r2, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e022      	b.n	800334c <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 800330c:	f7ff f8ca 	bl	80024a4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	1ad2      	subs	r2, r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	429a      	cmp	r2, r3
 800331a:	d90f      	bls.n	800333c <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	f043 0220 	orr.w	r2, r3, #32
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e007      	b.n	800334c <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b04      	cmp	r3, #4
 8003348:	d1af      	bne.n	80032aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	fe00e800 	.word	0xfe00e800

08003358 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b10      	cmp	r3, #16
 8003370:	d148      	bne.n	8003404 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003372:	e01c      	b.n	80033ae <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800337a:	d018      	beq.n	80033ae <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d007      	beq.n	8003392 <I2C_IsAcknowledgeFailed+0x3a>
 8003382:	f7ff f88f 	bl	80024a4 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	1ad2      	subs	r2, r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	429a      	cmp	r2, r3
 8003390:	d90d      	bls.n	80033ae <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e02b      	b.n	8003406 <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d1db      	bne.n	8003374 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2210      	movs	r2, #16
 80033c2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2220      	movs	r2, #32
 80033ca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff fe8b 	bl	80030e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <I2C_IsAcknowledgeFailed+0xb8>)
 80033de:	400b      	ands	r3, r1
 80033e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2204      	movs	r2, #4
 80033e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	fe00e800 	.word	0xfe00e800

08003414 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	817b      	strh	r3, [r7, #10]
 8003422:	4613      	mov	r3, r2
 8003424:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4b0d      	ldr	r3, [pc, #52]	; (800346c <I2C_TransferConfig+0x58>)
 8003436:	4013      	ands	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003440:	7a7b      	ldrb	r3, [r7, #9]
 8003442:	041b      	lsls	r3, r3, #16
 8003444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	431a      	orrs	r2, r3
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	4313      	orrs	r3, r2
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	605a      	str	r2, [r3, #4]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	fc009800 	.word	0xfc009800

08003470 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8003474:	4a05      	ldr	r2, [pc, #20]	; (800348c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347e:	6013      	str	r3, [r2, #0]
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40007000 	.word	0x40007000

08003490 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40007000 	.word	0x40007000

080034ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034be:	d12f      	bne.n	8003520 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c0:	4b22      	ldr	r3, [pc, #136]	; (800354c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034cc:	d037      	beq.n	800353e <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034ce:	4a1f      	ldr	r2, [pc, #124]	; (800354c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d0:	4b1e      	ldr	r3, [pc, #120]	; (800354c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034dc:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80034de:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1c      	ldr	r2, [pc, #112]	; (8003554 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034e4:	fba2 2303 	umull	r2, r3, r2, r3
 80034e8:	0c9b      	lsrs	r3, r3, #18
 80034ea:	2232      	movs	r2, #50	; 0x32
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80034f2:	e002      	b.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <HAL_PWREx_ControlVoltageScaling+0x62>
 8003500:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350c:	d0f2      	beq.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351a:	d110      	bne.n	800353e <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e00f      	b.n	8003540 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352c:	d007      	beq.n	800353e <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800352e:	4a07      	ldr	r2, [pc, #28]	; (800354c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003538:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800353c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}  
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40007000 	.word	0x40007000
 8003550:	20000040 	.word	0x20000040
 8003554:	431bde83 	.word	0x431bde83

08003558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08c      	sub	sp, #48	; 0x30
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80db 	beq.w	8003728 <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8003572:	4ba2      	ldr	r3, [pc, #648]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 8084 	bne.w	8003688 <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003580:	4b9e      	ldr	r3, [pc, #632]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_OscConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e39b      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1a      	ldr	r2, [r3, #32]
 800359c:	4b97      	ldr	r3, [pc, #604]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d004      	beq.n	80035b2 <HAL_RCC_OscConfig+0x5a>
 80035a8:	4b94      	ldr	r3, [pc, #592]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b0:	e005      	b.n	80035be <HAL_RCC_OscConfig+0x66>
 80035b2:	4b92      	ldr	r3, [pc, #584]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80035b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035be:	429a      	cmp	r2, r3
 80035c0:	d923      	bls.n	800360a <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fdf4 	bl	80041b4 <RCC_SetFlashLatencyFromMSIRange>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e37c      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035d6:	4a89      	ldr	r2, [pc, #548]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80035d8:	4b88      	ldr	r3, [pc, #544]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f043 0308 	orr.w	r3, r3, #8
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4986      	ldr	r1, [pc, #536]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80035e4:	4b85      	ldr	r3, [pc, #532]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035f4:	4981      	ldr	r1, [pc, #516]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80035f6:	4b81      	ldr	r3, [pc, #516]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
 8003608:	e022      	b.n	8003650 <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800360a:	4a7c      	ldr	r2, [pc, #496]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 800360c:	4b7b      	ldr	r3, [pc, #492]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f043 0308 	orr.w	r3, r3, #8
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4979      	ldr	r1, [pc, #484]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 8003618:	4b78      	ldr	r3, [pc, #480]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003628:	4974      	ldr	r1, [pc, #464]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 800362a:	4b74      	ldr	r3, [pc, #464]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fdb7 	bl	80041b4 <RCC_SetFlashLatencyFromMSIRange>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e33f      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003650:	f000 fc66 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 8003654:	4601      	mov	r1, r0
 8003656:	4b69      	ldr	r3, [pc, #420]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800365e:	23f0      	movs	r3, #240	; 0xf0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
 8003674:	4a62      	ldr	r2, [pc, #392]	; (8003800 <HAL_RCC_OscConfig+0x2a8>)
 8003676:	5cd3      	ldrb	r3, [r2, r3]
 8003678:	fa21 f303 	lsr.w	r3, r1, r3
 800367c:	4a61      	ldr	r2, [pc, #388]	; (8003804 <HAL_RCC_OscConfig+0x2ac>)
 800367e:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8003680:	2000      	movs	r0, #0
 8003682:	f7fe fee5 	bl	8002450 <HAL_InitTick>
 8003686:	e04f      	b.n	8003728 <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d032      	beq.n	80036f6 <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003690:	4a5a      	ldr	r2, [pc, #360]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 8003692:	4b5a      	ldr	r3, [pc, #360]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800369c:	f7fe ff02 	bl	80024a4 <HAL_GetTick>
 80036a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036a4:	f7fe fefe 	bl	80024a4 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e30c      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80036b6:	4b51      	ldr	r3, [pc, #324]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c2:	4a4e      	ldr	r2, [pc, #312]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80036c4:	4b4d      	ldr	r3, [pc, #308]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f043 0308 	orr.w	r3, r3, #8
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	494b      	ldr	r1, [pc, #300]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80036d0:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	4313      	orrs	r3, r2
 80036de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036e0:	4946      	ldr	r1, [pc, #280]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80036e2:	4b46      	ldr	r3, [pc, #280]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]
 80036f4:	e018      	b.n	8003728 <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036f6:	4a41      	ldr	r2, [pc, #260]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80036f8:	4b40      	ldr	r3, [pc, #256]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003702:	f7fe fecf 	bl	80024a4 <HAL_GetTick>
 8003706:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800370a:	f7fe fecb 	bl	80024a4 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e2d9      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 800371c:	4b37      	ldr	r3, [pc, #220]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f0      	bne.n	800370a <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d07a      	beq.n	800382a <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8003734:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d00b      	beq.n	8003758 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003740:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8003748:	2b0c      	cmp	r3, #12
 800374a:	d111      	bne.n	8003770 <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800374c:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	2b03      	cmp	r3, #3
 8003756:	d10b      	bne.n	8003770 <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	4b28      	ldr	r3, [pc, #160]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d061      	beq.n	8003828 <HAL_RCC_OscConfig+0x2d0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d15d      	bne.n	8003828 <HAL_RCC_OscConfig+0x2d0>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e2af      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003778:	d106      	bne.n	8003788 <HAL_RCC_OscConfig+0x230>
 800377a:	4a20      	ldr	r2, [pc, #128]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 800377c:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e01d      	b.n	80037c4 <HAL_RCC_OscConfig+0x26c>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0x254>
 8003792:	4a1a      	ldr	r2, [pc, #104]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4a17      	ldr	r2, [pc, #92]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80037a0:	4b16      	ldr	r3, [pc, #88]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e00b      	b.n	80037c4 <HAL_RCC_OscConfig+0x26c>
 80037ac:	4a13      	ldr	r2, [pc, #76]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80037ae:	4b13      	ldr	r3, [pc, #76]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4a10      	ldr	r2, [pc, #64]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <HAL_RCC_OscConfig+0x29c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fe6a 	bl	80024a4 <HAL_GetTick>
 80037d0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fe fe66 	bl	80024a4 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e274      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCC_OscConfig+0x2a4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x27c>
 80037f2:	e01a      	b.n	800382a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fe fe56 	bl	80024a4 <HAL_GetTick>
 80037f8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80037fa:	e00e      	b.n	800381a <HAL_RCC_OscConfig+0x2c2>
 80037fc:	40021000 	.word	0x40021000
 8003800:	08008cb0 	.word	0x08008cb0
 8003804:	20000040 	.word	0x20000040
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7fe fe4c 	bl	80024a4 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e25a      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800381a:	4bb0      	ldr	r3, [pc, #704]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x2b0>
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d07f      	beq.n	8003936 <HAL_RCC_OscConfig+0x3de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8003836:	4ba9      	ldr	r3, [pc, #676]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b04      	cmp	r3, #4
 8003840:	d00b      	beq.n	800385a <HAL_RCC_OscConfig+0x302>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003842:	4ba6      	ldr	r3, [pc, #664]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800384a:	2b0c      	cmp	r3, #12
 800384c:	d127      	bne.n	800389e <HAL_RCC_OscConfig+0x346>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800384e:	4ba3      	ldr	r3, [pc, #652]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d121      	bne.n	800389e <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800385a:	4ba0      	ldr	r3, [pc, #640]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_RCC_OscConfig+0x31a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e22e      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003872:	489a      	ldr	r0, [pc, #616]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003874:	4b99      	ldr	r3, [pc, #612]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6919      	ldr	r1, [r3, #16]
 8003880:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8003884:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa93 f3a3 	rbit	r3, r3
 800388c:	61bb      	str	r3, [r7, #24]
  return(result);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	fa01 f303 	lsl.w	r3, r1, r3
 8003898:	4313      	orrs	r3, r2
 800389a:	6043      	str	r3, [r0, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800389c:	e04b      	b.n	8003936 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d02e      	beq.n	8003904 <HAL_RCC_OscConfig+0x3ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a6:	4a8d      	ldr	r2, [pc, #564]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 80038a8:	4b8c      	ldr	r3, [pc, #560]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fe fdf7 	bl	80024a4 <HAL_GetTick>
 80038b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ba:	f7fe fdf3 	bl	80024a4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e201      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80038cc:	4b83      	ldr	r3, [pc, #524]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d8:	4880      	ldr	r0, [pc, #512]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 80038da:	4b80      	ldr	r3, [pc, #512]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6919      	ldr	r1, [r3, #16]
 80038e6:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 80038ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	613b      	str	r3, [r7, #16]
  return(result);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	4313      	orrs	r3, r2
 8003900:	6043      	str	r3, [r0, #4]
 8003902:	e018      	b.n	8003936 <HAL_RCC_OscConfig+0x3de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003904:	4a75      	ldr	r2, [pc, #468]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003906:	4b75      	ldr	r3, [pc, #468]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800390e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe fdc8 	bl	80024a4 <HAL_GetTick>
 8003914:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003918:	f7fe fdc4 	bl	80024a4 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e1d2      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800392a:	4b6c      	ldr	r3, [pc, #432]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d03c      	beq.n	80039bc <HAL_RCC_OscConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01c      	beq.n	8003984 <HAL_RCC_OscConfig+0x42c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800394a:	4a64      	ldr	r2, [pc, #400]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 800394c:	4b63      	ldr	r3, [pc, #396]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 800394e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fe fda3 	bl	80024a4 <HAL_GetTick>
 800395e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003962:	f7fe fd9f 	bl	80024a4 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e1ad      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8003974:	4b59      	ldr	r3, [pc, #356]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0ef      	beq.n	8003962 <HAL_RCC_OscConfig+0x40a>
 8003982:	e01b      	b.n	80039bc <HAL_RCC_OscConfig+0x464>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003984:	4a55      	ldr	r2, [pc, #340]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003986:	4b55      	ldr	r3, [pc, #340]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7fe fd86 	bl	80024a4 <HAL_GetTick>
 8003998:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399c:	f7fe fd82 	bl	80024a4 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e190      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80039ae:	4b4b      	ldr	r3, [pc, #300]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 80039b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ef      	bne.n	800399c <HAL_RCC_OscConfig+0x444>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80a9 	beq.w	8003b1c <HAL_RCC_OscConfig+0x5c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ca:	2300      	movs	r3, #0
 80039cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039d0:	4b42      	ldr	r3, [pc, #264]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10e      	bne.n	80039fa <HAL_RCC_OscConfig+0x4a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039dc:	4a3f      	ldr	r2, [pc, #252]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 80039de:	4b3f      	ldr	r3, [pc, #252]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e6:	6593      	str	r3, [r2, #88]	; 0x58
 80039e8:	4b3c      	ldr	r3, [pc, #240]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fa:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <HAL_RCC_OscConfig+0x588>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d118      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4e0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a06:	4a36      	ldr	r2, [pc, #216]	; (8003ae0 <HAL_RCC_OscConfig+0x588>)
 8003a08:	4b35      	ldr	r3, [pc, #212]	; (8003ae0 <HAL_RCC_OscConfig+0x588>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a12:	f7fe fd47 	bl	80024a4 <HAL_GetTick>
 8003a16:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7fe fd43 	bl	80024a4 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e151      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <HAL_RCC_OscConfig+0x588>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x4c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d108      	bne.n	8003a52 <HAL_RCC_OscConfig+0x4fa>
 8003a40:	4a26      	ldr	r2, [pc, #152]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003a42:	4b26      	ldr	r3, [pc, #152]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a50:	e024      	b.n	8003a9c <HAL_RCC_OscConfig+0x544>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	d110      	bne.n	8003a7c <HAL_RCC_OscConfig+0x524>
 8003a5a:	4a20      	ldr	r2, [pc, #128]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003a5c:	4b1f      	ldr	r3, [pc, #124]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a62:	f043 0304 	orr.w	r3, r3, #4
 8003a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a7a:	e00f      	b.n	8003a9c <HAL_RCC_OscConfig+0x544>
 8003a7c:	4a17      	ldr	r2, [pc, #92]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003a7e:	4b17      	ldr	r3, [pc, #92]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a8c:	4a13      	ldr	r2, [pc, #76]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003a8e:	4b13      	ldr	r3, [pc, #76]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d016      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x57a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fe fcfe 	bl	80024a4 <HAL_GetTick>
 8003aa8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x56a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7fe fcfa 	bl	80024a4 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x56a>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e106      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_RCC_OscConfig+0x584>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ed      	beq.n	8003aac <HAL_RCC_OscConfig+0x554>
 8003ad0:	e01a      	b.n	8003b08 <HAL_RCC_OscConfig+0x5b0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad2:	f7fe fce7 	bl	80024a4 <HAL_GetTick>
 8003ad6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8003ad8:	e00f      	b.n	8003afa <HAL_RCC_OscConfig+0x5a2>
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f7fe fcde 	bl	80024a4 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x5a2>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e0ea      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8003afa:	4b77      	ldr	r3, [pc, #476]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ed      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x58c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCC_OscConfig+0x5c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b10:	4a71      	ldr	r2, [pc, #452]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003b12:	4b71      	ldr	r3, [pc, #452]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d03c      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x64a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01c      	beq.n	8003b6a <HAL_RCC_OscConfig+0x612>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b30:	4a69      	ldr	r2, [pc, #420]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003b32:	4b69      	ldr	r3, [pc, #420]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fe fcb0 	bl	80024a4 <HAL_GetTick>
 8003b44:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x602>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b48:	f7fe fcac 	bl	80024a4 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x602>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e0ba      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ef      	beq.n	8003b48 <HAL_RCC_OscConfig+0x5f0>
 8003b68:	e01b      	b.n	8003ba2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b6a:	4a5b      	ldr	r2, [pc, #364]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003b6c:	4b5a      	ldr	r3, [pc, #360]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7fe fc93 	bl	80024a4 <HAL_GetTick>
 8003b7e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x63c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b82:	f7fe fc8f 	bl	80024a4 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e09d      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8003b94:	4b50      	ldr	r3, [pc, #320]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1ef      	bne.n	8003b82 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8091 	beq.w	8003cce <HAL_RCC_OscConfig+0x776>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bac:	4b4a      	ldr	r3, [pc, #296]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	f000 8088 	beq.w	8003cca <HAL_RCC_OscConfig+0x772>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d155      	bne.n	8003c6e <HAL_RCC_OscConfig+0x716>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	4a45      	ldr	r2, [pc, #276]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003bc4:	4b44      	ldr	r3, [pc, #272]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fe fc69 	bl	80024a4 <HAL_GetTick>
 8003bd2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fe fc65 	bl	80024a4 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e073      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003be8:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf4:	4938      	ldr	r1, [pc, #224]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	011a      	lsls	r2, r3, #4
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	3b01      	subs	r3, #1
 8003c14:	055b      	lsls	r3, r3, #21
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	065b      	lsls	r3, r3, #25
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	06db      	lsls	r3, r3, #27
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c2e:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003c30:	4b29      	ldr	r3, [pc, #164]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c38:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c3a:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003c3c:	4b26      	ldr	r3, [pc, #152]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c44:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fe fc2d 	bl	80024a4 <HAL_GetTick>
 8003c4a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x708>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fe fc29 	bl	80024a4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x708>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e037      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003c60:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x6f6>
 8003c6c:	e02f      	b.n	8003cce <HAL_RCC_OscConfig+0x776>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6e:	4a1a      	ldr	r2, [pc, #104]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003c70:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c78:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d105      	bne.n	8003c92 <HAL_RCC_OscConfig+0x73a>
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c86:	4a14      	ldr	r2, [pc, #80]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f023 0303 	bic.w	r3, r3, #3
 8003c90:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003c92:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003c94:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fbff 	bl	80024a4 <HAL_GetTick>
 8003ca6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x764>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fe fbfb 	bl	80024a4 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x764>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e009      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_OscConfig+0x780>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f0      	bne.n	8003caa <HAL_RCC_OscConfig+0x752>
 8003cc8:	e001      	b.n	8003cce <HAL_RCC_OscConfig+0x776>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCC_OscConfig+0x778>
    }
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3730      	adds	r7, #48	; 0x30
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000

08003cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003cea:	4b89      	ldr	r3, [pc, #548]	; (8003f10 <HAL_RCC_ClockConfig+0x234>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0207 	and.w	r2, r3, #7
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d210      	bcs.n	8003d1a <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf8:	4985      	ldr	r1, [pc, #532]	; (8003f10 <HAL_RCC_ClockConfig+0x234>)
 8003cfa:	4b85      	ldr	r3, [pc, #532]	; (8003f10 <HAL_RCC_ClockConfig+0x234>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 0207 	bic.w	r2, r3, #7
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d08:	4b81      	ldr	r3, [pc, #516]	; (8003f10 <HAL_RCC_ClockConfig+0x234>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0207 	and.w	r2, r3, #7
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e0f6      	b.n	8003f08 <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d26:	497b      	ldr	r1, [pc, #492]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003d28:	4b7a      	ldr	r3, [pc, #488]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 808e 	beq.w	8003e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003d4e:	4b71      	ldr	r3, [pc, #452]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d121      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0d4      	b.n	8003f08 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003d66:	4b6b      	ldr	r3, [pc, #428]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d115      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0c8      	b.n	8003f08 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8003d7e:	4b65      	ldr	r3, [pc, #404]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e0bc      	b.n	8003f08 <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003d8e:	4b61      	ldr	r3, [pc, #388]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0b4      	b.n	8003f08 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d9e:	495d      	ldr	r1, [pc, #372]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003da0:	4b5c      	ldr	r3, [pc, #368]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f023 0203 	bic.w	r2, r3, #3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db0:	f7fe fb78 	bl	80024a4 <HAL_GetTick>
 8003db4:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d112      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fe fb70 	bl	80024a4 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e098      	b.n	8003f08 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8003dd6:	4b4f      	ldr	r3, [pc, #316]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d1ee      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xe4>
 8003de2:	e03e      	b.n	8003e62 <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d112      	bne.n	8003e12 <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dee:	f7fe fb59 	bl	80024a4 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e081      	b.n	8003f08 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e04:	4b43      	ldr	r3, [pc, #268]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	d1ee      	bne.n	8003dee <HAL_RCC_ClockConfig+0x112>
 8003e10:	e027      	b.n	8003e62 <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d11d      	bne.n	8003e56 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7fe fb42 	bl	80024a4 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e06a      	b.n	8003f08 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8003e32:	4b38      	ldr	r3, [pc, #224]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1ee      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x140>
 8003e3e:	e010      	b.n	8003e62 <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e40:	f7fe fb30 	bl	80024a4 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e058      	b.n	8003f08 <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8003e56:	4b2f      	ldr	r3, [pc, #188]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d1ee      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003e62:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_RCC_ClockConfig+0x234>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0207 	and.w	r2, r3, #7
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d910      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e70:	4927      	ldr	r1, [pc, #156]	; (8003f10 <HAL_RCC_ClockConfig+0x234>)
 8003e72:	4b27      	ldr	r3, [pc, #156]	; (8003f10 <HAL_RCC_ClockConfig+0x234>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 0207 	bic.w	r2, r3, #7
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e80:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <HAL_RCC_ClockConfig+0x234>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0207 	and.w	r2, r3, #7
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e03a      	b.n	8003f08 <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e9e:	491d      	ldr	r1, [pc, #116]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003ea0:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d009      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ebc:	4915      	ldr	r1, [pc, #84]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003ed0:	f000 f826 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 8003ed4:	4601      	mov	r1, r0
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <HAL_RCC_ClockConfig+0x238>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ede:	23f0      	movs	r3, #240	; 0xf0
 8003ee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	fa93 f3a3 	rbit	r3, r3
 8003ee8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	fab3 f383 	clz	r3, r3
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef4:	4a08      	ldr	r2, [pc, #32]	; (8003f18 <HAL_RCC_ClockConfig+0x23c>)
 8003ef6:	5cd3      	ldrb	r3, [r2, r3]
 8003ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8003efc:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <HAL_RCC_ClockConfig+0x240>)
 8003efe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f00:	2000      	movs	r0, #0
 8003f02:	f7fe faa5 	bl	8002450 <HAL_InitTick>

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40022000 	.word	0x40022000
 8003f14:	40021000 	.word	0x40021000
 8003f18:	08008cb0 	.word	0x08008cb0
 8003f1c:	20000040 	.word	0x20000040

08003f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b095      	sub	sp, #84	; 0x54
 8003f24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f2e:	2300      	movs	r3, #0
 8003f30:	643b      	str	r3, [r7, #64]	; 0x40
 8003f32:	2302      	movs	r3, #2
 8003f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f36:	2302      	movs	r3, #2
 8003f38:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8003f3e:	4b71      	ldr	r3, [pc, #452]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00b      	beq.n	8003f62 <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8003f4a:	4b6e      	ldr	r3, [pc, #440]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8003f52:	2b0c      	cmp	r3, #12
 8003f54:	d13c      	bne.n	8003fd0 <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8003f56:	4b6b      	ldr	r3, [pc, #428]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d136      	bne.n	8003fd0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8003f62:	4b68      	ldr	r3, [pc, #416]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d112      	bne.n	8003f94 <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8003f6e:	4b65      	ldr	r3, [pc, #404]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f74:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003f78:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003f7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f80:	fa93 f3a3 	rbit	r3, r3
 8003f84:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	fab3 f383 	clz	r3, r3
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f92:	e00f      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8003f94:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f9c:	23f0      	movs	r3, #240	; 0xf0
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fb4:	4a54      	ldr	r2, [pc, #336]	; (8004108 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8003fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbc:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8003fbe:	4b51      	ldr	r3, [pc, #324]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d113      	bne.n	8003ff2 <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fcc:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8003fce:	e010      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fd0:	4b4c      	ldr	r3, [pc, #304]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 030c 	and.w	r3, r3, #12
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d102      	bne.n	8003fe2 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fdc:	4b4b      	ldr	r3, [pc, #300]	; (800410c <HAL_RCC_GetSysClockFreq+0x1ec>)
 8003fde:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe0:	e007      	b.n	8003ff2 <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fe2:	4b48      	ldr	r3, [pc, #288]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fee:	4b48      	ldr	r3, [pc, #288]	; (8004110 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ff0:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ff2:	4b44      	ldr	r3, [pc, #272]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b0c      	cmp	r3, #12
 8003ffc:	d17b      	bne.n	80040f6 <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003ffe:	4b41      	ldr	r3, [pc, #260]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8004008:	4b3e      	ldr	r3, [pc, #248]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004010:	2370      	movs	r3, #112	; 0x70
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	623b      	str	r3, [r7, #32]
  return(result);
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	fa22 f303 	lsr.w	r3, r2, r3
 8004026:	3301      	adds	r3, #1
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 800402a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402c:	2b02      	cmp	r3, #2
 800402e:	d002      	beq.n	8004036 <HAL_RCC_GetSysClockFreq+0x116>
 8004030:	2b03      	cmp	r3, #3
 8004032:	d018      	beq.n	8004066 <HAL_RCC_GetSysClockFreq+0x146>
 8004034:	e02f      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8004036:	4a35      	ldr	r2, [pc, #212]	; (800410c <HAL_RCC_GetSysClockFreq+0x1ec>)
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	4a31      	ldr	r2, [pc, #196]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004040:	68d2      	ldr	r2, [r2, #12]
 8004042:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8004046:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800404a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	fa92 f2a2 	rbit	r2, r2
 8004052:	61ba      	str	r2, [r7, #24]
  return(result);
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	fab2 f282 	clz	r2, r2
 800405a:	fa21 f202 	lsr.w	r2, r1, r2
 800405e:	fb02 f303 	mul.w	r3, r2, r3
 8004062:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004064:	e02f      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8004066:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	4a25      	ldr	r2, [pc, #148]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004070:	68d2      	ldr	r2, [r2, #12]
 8004072:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8004076:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800407a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	fa92 f2a2 	rbit	r2, r2
 8004082:	613a      	str	r2, [r7, #16]
  return(result);
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	fab2 f282 	clz	r2, r2
 800408a:	fa21 f202 	lsr.w	r2, r1, r2
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004094:	e017      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8004096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	4a19      	ldr	r2, [pc, #100]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80040a0:	68d2      	ldr	r2, [r2, #12]
 80040a2:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 80040a6:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80040aa:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	fa92 f2a2 	rbit	r2, r2
 80040b2:	60ba      	str	r2, [r7, #8]
  return(result);
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	fab2 f282 	clz	r2, r2
 80040ba:	fa21 f202 	lsr.w	r2, r1, r2
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040c4:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 80040c6:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040ce:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80040d2:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	603b      	str	r3, [r7, #0]
  return(result);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	fa22 f303 	lsr.w	r3, r2, r3
 80040e6:	3301      	adds	r3, #1
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 80040ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f4:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 80040f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3754      	adds	r7, #84	; 0x54
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	40021000 	.word	0x40021000
 8004108:	08008cc8 	.word	0x08008cc8
 800410c:	00f42400 	.word	0x00f42400
 8004110:	007a1200 	.word	0x007a1200

08004114 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <HAL_RCC_GetHCLKFreq+0x14>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000040 	.word	0x20000040

0800412c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004132:	f7ff ffef 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004136:	4601      	mov	r1, r0
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004140:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004144:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	fa93 f3a3 	rbit	r3, r3
 800414c:	603b      	str	r3, [r7, #0]
  return(result);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	fab3 f383 	clz	r3, r3
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
 8004158:	4a04      	ldr	r2, [pc, #16]	; (800416c <HAL_RCC_GetPCLK1Freq+0x40>)
 800415a:	5cd3      	ldrb	r3, [r2, r3]
 800415c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	08008cc0 	.word	0x08008cc0

08004170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004176:	f7ff ffcd 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 800417a:	4601      	mov	r1, r0
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8004184:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004188:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	603b      	str	r3, [r7, #0]
  return(result);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	fab3 f383 	clz	r3, r3
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
 800419c:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800419e:	5cd3      	ldrb	r3, [r2, r3]
 80041a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000
 80041b0:	08008cc0 	.word	0x08008cc0

080041b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041c4:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041d0:	f7ff f95e 	bl	8003490 <HAL_PWREx_GetVoltageRange>
 80041d4:	6178      	str	r0, [r7, #20]
 80041d6:	e014      	b.n	8004202 <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041d8:	4a25      	ldr	r2, [pc, #148]	; (8004270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041da:	4b25      	ldr	r3, [pc, #148]	; (8004270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e2:	6593      	str	r3, [r2, #88]	; 0x58
 80041e4:	4b22      	ldr	r3, [pc, #136]	; (8004270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041f0:	f7ff f94e 	bl	8003490 <HAL_PWREx_GetVoltageRange>
 80041f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041f6:	4a1e      	ldr	r2, [pc, #120]	; (8004270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041f8:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004200:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004208:	d10b      	bne.n	8004222 <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b80      	cmp	r3, #128	; 0x80
 800420e:	d919      	bls.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2ba0      	cmp	r3, #160	; 0xa0
 8004214:	d902      	bls.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004216:	2302      	movs	r3, #2
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	e013      	b.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800421c:	2301      	movs	r3, #1
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	e010      	b.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b80      	cmp	r3, #128	; 0x80
 8004226:	d902      	bls.n	800422e <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004228:	2303      	movs	r3, #3
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	e00a      	b.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b80      	cmp	r3, #128	; 0x80
 8004232:	d102      	bne.n	800423a <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004234:	2302      	movs	r3, #2
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	e004      	b.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b70      	cmp	r3, #112	; 0x70
 800423e:	d101      	bne.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004240:	2301      	movs	r3, #1
 8004242:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8004244:	490b      	ldr	r1, [pc, #44]	; (8004274 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 0207 	bic.w	r2, r3, #7
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0207 	and.w	r2, r3, #7
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	429a      	cmp	r2, r3
 8004260:	d001      	beq.n	8004266 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000
 8004274:	40022000 	.word	0x40022000

08004278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004288:	2300      	movs	r3, #0
 800428a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800428c:	2300      	movs	r3, #0
 800428e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02f      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042a4:	d005      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80042a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042aa:	d015      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80042b0:	e00f      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80042b2:	4a5a      	ldr	r2, [pc, #360]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042b4:	4b59      	ldr	r3, [pc, #356]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042be:	e00c      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x62>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fa2c 	bl	8004724 <RCCEx_PLLSAI1_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x62>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	74fb      	strb	r3, [r7, #19]
      break;
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x62>
      break;
 80042d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042e0:	494e      	ldr	r1, [pc, #312]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042e2:	4b4e      	ldr	r3, [pc, #312]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042f6:	e001      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8098 	beq.w	800443a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430e:	4b43      	ldr	r3, [pc, #268]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10d      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	4a40      	ldr	r2, [pc, #256]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800431c:	4b3f      	ldr	r3, [pc, #252]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004324:	6593      	str	r3, [r2, #88]	; 0x58
 8004326:	4b3d      	ldr	r3, [pc, #244]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004332:	2301      	movs	r3, #1
 8004334:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004336:	4a3a      	ldr	r2, [pc, #232]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004338:	4b39      	ldr	r3, [pc, #228]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004340:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004342:	f7fe f8af 	bl	80024a4 <HAL_GetTick>
 8004346:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004348:	e009      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434a:	f7fe f8ab 	bl	80024a4 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d902      	bls.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      {
        ret = HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	74fb      	strb	r3, [r7, #19]
        break;
 800435c:	e005      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xf2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800435e:	4b30      	ldr	r3, [pc, #192]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ef      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }

    if(ret == HAL_OK)
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d159      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004370:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d01e      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	429a      	cmp	r2, r3
 800438a:	d019      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800438c:	4b23      	ldr	r3, [pc, #140]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004396:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004398:	4a20      	ldr	r2, [pc, #128]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800439a:	4b20      	ldr	r3, [pc, #128]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043a8:	4a1c      	ldr	r2, [pc, #112]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043aa:	4b1c      	ldr	r3, [pc, #112]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043b8:	4a18      	ldr	r2, [pc, #96]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ca:	f7fe f86b 	bl	80024a4 <HAL_GetTick>
 80043ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80043d0:	e00b      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x172>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fe f867 	bl	80024a4 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d902      	bls.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x172>
          {
            ret = HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	74fb      	strb	r3, [r7, #19]
            break;
 80043e8:	e006      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ec      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          }
        }
      }
      
      if(ret == HAL_OK)
 80043f8:	7cfb      	ldrb	r3, [r7, #19]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10b      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fe:	4907      	ldr	r1, [pc, #28]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004414:	e008      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004416:	7cfb      	ldrb	r3, [r7, #19]
 8004418:	74bb      	strb	r3, [r7, #18]
 800441a:	e005      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 800441c:	40021000 	.word	0x40021000
 8004420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	7cfb      	ldrb	r3, [r7, #19]
 8004426:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004428:	7c7b      	ldrb	r3, [r7, #17]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d105      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442e:	4a8d      	ldr	r2, [pc, #564]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004430:	4b8c      	ldr	r3, [pc, #560]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004438:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004446:	4987      	ldr	r1, [pc, #540]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004448:	4b86      	ldr	r3, [pc, #536]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444e:	f023 0203 	bic.w	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004468:	497e      	ldr	r1, [pc, #504]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800446a:	4b7e      	ldr	r3, [pc, #504]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f023 020c 	bic.w	r2, r3, #12
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800448a:	4976      	ldr	r1, [pc, #472]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800448c:	4b75      	ldr	r3, [pc, #468]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004492:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ac:	496d      	ldr	r1, [pc, #436]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80044ae:	4b6d      	ldr	r3, [pc, #436]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ce:	4965      	ldr	r1, [pc, #404]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80044d0:	4b64      	ldr	r3, [pc, #400]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044f0:	495c      	ldr	r1, [pc, #368]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80044f2:	4b5c      	ldr	r3, [pc, #368]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004512:	4954      	ldr	r1, [pc, #336]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004514:	4b53      	ldr	r3, [pc, #332]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)  

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004534:	494b      	ldr	r1, [pc, #300]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004536:	4b4b      	ldr	r3, [pc, #300]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004556:	4943      	ldr	r1, [pc, #268]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004558:	4b42      	ldr	r3, [pc, #264]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d028      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004578:	493a      	ldr	r1, [pc, #232]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800457a:	4b3a      	ldr	r3, [pc, #232]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004596:	d106      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004598:	4a32      	ldr	r2, [pc, #200]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800459a:	4b32      	ldr	r3, [pc, #200]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045a2:	60d3      	str	r3, [r2, #12]
 80045a4:	e011      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x352>
    }
    else if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045ae:	d10c      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x352>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	2101      	movs	r1, #1
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f8b4 	bl	8004724 <RCCEx_PLLSAI1_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x352>
      {
        /* set overall return value */
        status = ret;
 80045c6:	7cfb      	ldrb	r3, [r7, #19]
 80045c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d028      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045d6:	4923      	ldr	r1, [pc, #140]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80045d8:	4b22      	ldr	r3, [pc, #136]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f4:	d106      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f6:	4a1b      	ldr	r2, [pc, #108]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80045f8:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004600:	60d3      	str	r3, [r2, #12]
 8004602:	e011      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800460c:	d10c      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	2101      	movs	r1, #1
 8004614:	4618      	mov	r0, r3
 8004616:	f000 f885 	bl	8004724 <RCCEx_PLLSAI1_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 800461e:	7cfb      	ldrb	r3, [r7, #19]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      {
        /* set overall return value */
        status = ret;
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d02b      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x414>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004634:	490b      	ldr	r1, [pc, #44]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004652:	d109      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004654:	4a03      	ldr	r2, [pc, #12]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004656:	4b03      	ldr	r3, [pc, #12]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465e:	60d3      	str	r3, [r2, #12]
 8004660:	e014      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004670:	d10c      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	2101      	movs	r1, #1
 8004678:	4618      	mov	r0, r3
 800467a:	f000 f853 	bl	8004724 <RCCEx_PLLSAI1_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x414>
      {
        /* set overall return value */
        status = ret;
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01c      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004698:	4919      	ldr	r1, [pc, #100]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800469a:	4b19      	ldr	r3, [pc, #100]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046b6:	d10c      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	2102      	movs	r1, #2
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f830 	bl	8004724 <RCCEx_PLLSAI1_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
      {
        /* set overall return value */
        status = ret;
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046de:	4908      	ldr	r1, [pc, #32]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 80046f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000

08004704 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004708:	4a05      	ldr	r2, [pc, #20]	; (8004720 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f043 0304 	orr.w	r3, r3, #4
 8004712:	6013      	str	r3, [r2, #0]
}
 8004714:	bf00      	nop
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000

08004724 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004724:	b590      	push	{r4, r7, lr}
 8004726:	b095      	sub	sp, #84	; 0x54
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004738:	4ba3      	ldr	r3, [pc, #652]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d023      	beq.n	800478c <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004744:	4ba0      	ldr	r3, [pc, #640]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0203 	and.w	r2, r3, #3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d117      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
       || 
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 800475c:	4b9a      	ldr	r3, [pc, #616]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004764:	2370      	movs	r3, #112	; 0x70
 8004766:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8004770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	fa22 f303 	lsr.w	r3, r2, r3
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
       || 
 8004780:	429a      	cmp	r2, r3
 8004782:	d054      	beq.n	800482e <RCCEx_PLLSAI1_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800478a:	e050      	b.n	800482e <RCCEx_PLLSAI1_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d00d      	beq.n	80047b0 <RCCEx_PLLSAI1_Config+0x8c>
 8004794:	2b03      	cmp	r3, #3
 8004796:	d015      	beq.n	80047c4 <RCCEx_PLLSAI1_Config+0xa0>
 8004798:	2b01      	cmp	r3, #1
 800479a:	d123      	bne.n	80047e4 <RCCEx_PLLSAI1_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800479c:	4b8a      	ldr	r3, [pc, #552]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d121      	bne.n	80047ec <RCCEx_PLLSAI1_Config+0xc8>
      {
        status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 80047ae:	e01d      	b.n	80047ec <RCCEx_PLLSAI1_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047b0:	4b85      	ldr	r3, [pc, #532]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d119      	bne.n	80047f0 <RCCEx_PLLSAI1_Config+0xcc>
      {
        status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 80047c2:	e015      	b.n	80047f0 <RCCEx_PLLSAI1_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047c4:	4b80      	ldr	r3, [pc, #512]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d111      	bne.n	80047f4 <RCCEx_PLLSAI1_Config+0xd0>
 80047d0:	4b7d      	ldr	r3, [pc, #500]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <RCCEx_PLLSAI1_Config+0xd0>
      {
        status = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 80047e2:	e007      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0xd0>
    default:
      status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      break;
 80047ea:	e004      	b.n	80047f6 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80047ec:	bf00      	nop
 80047ee:	e002      	b.n	80047f6 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80047f0:	bf00      	nop
 80047f2:	e000      	b.n	80047f6 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80047f4:	bf00      	nop
    }
    
    if(status == HAL_OK)
 80047f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d117      	bne.n	800482e <RCCEx_PLLSAI1_Config+0x10a>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 80047fe:	4c72      	ldr	r4, [pc, #456]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004800:	4b71      	ldr	r3, [pc, #452]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	1e58      	subs	r0, r3, #1
 8004812:	2370      	movs	r3, #112	; 0x70
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004818:	fa93 f3a3 	rbit	r3, r3
 800481c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	fa00 f303 	lsl.w	r3, r0, r3
 8004828:	430b      	orrs	r3, r1
 800482a:	4313      	orrs	r3, r2
 800482c:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 800482e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004832:	2b00      	cmp	r3, #0
 8004834:	f040 80c1 	bne.w	80049ba <RCCEx_PLLSAI1_Config+0x296>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004838:	4a63      	ldr	r2, [pc, #396]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 800483a:	4b63      	ldr	r3, [pc, #396]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004844:	f7fd fe2e 	bl	80024a4 <HAL_GetTick>
 8004848:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800484a:	e00a      	b.n	8004862 <RCCEx_PLLSAI1_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800484c:	f7fd fe2a 	bl	80024a4 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d903      	bls.n	8004862 <RCCEx_PLLSAI1_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        break;
 8004860:	e005      	b.n	800486e <RCCEx_PLLSAI1_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8004862:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1ee      	bne.n	800484c <RCCEx_PLLSAI1_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 800486e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004872:	2b00      	cmp	r3, #0
 8004874:	f040 80a1 	bne.w	80049ba <RCCEx_PLLSAI1_Config+0x296>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d125      	bne.n	80048ca <RCCEx_PLLSAI1_Config+0x1a6>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800487e:	4c52      	ldr	r4, [pc, #328]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004880:	4b51      	ldr	r3, [pc, #324]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004888:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6891      	ldr	r1, [r2, #8]
 8004890:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004894:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004898:	fa92 f2a2 	rbit	r2, r2
 800489c:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 800489e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a0:	fab2 f282 	clz	r2, r2
 80048a4:	4091      	lsls	r1, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68d0      	ldr	r0, [r2, #12]
 80048aa:	f04f 4278 	mov.w	r2, #4160749568	; 0xf8000000
 80048ae:	637a      	str	r2, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048b2:	fa92 f2a2 	rbit	r2, r2
 80048b6:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 80048b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ba:	fab2 f282 	clz	r2, r2
 80048be:	fa00 f202 	lsl.w	r2, r0, r2
 80048c2:	430a      	orrs	r2, r1
 80048c4:	4313      	orrs	r3, r2
 80048c6:	6123      	str	r3, [r4, #16]
 80048c8:	e051      	b.n	800496e <RCCEx_PLLSAI1_Config+0x24a>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d127      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0x1fc>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80048d0:	4c3d      	ldr	r4, [pc, #244]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 80048d2:	4b3d      	ldr	r3, [pc, #244]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6891      	ldr	r1, [r2, #8]
 80048e2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80048e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	fa92 f2a2 	rbit	r2, r2
 80048ee:	61ba      	str	r2, [r7, #24]
  return(result);
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	fab2 f282 	clz	r2, r2
 80048f6:	4091      	lsls	r1, r2
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6912      	ldr	r2, [r2, #16]
 80048fc:	0852      	lsrs	r2, r2, #1
 80048fe:	1e50      	subs	r0, r2, #1
 8004900:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8004904:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004908:	fa92 f2a2 	rbit	r2, r2
 800490c:	623a      	str	r2, [r7, #32]
  return(result);
 800490e:	6a3a      	ldr	r2, [r7, #32]
 8004910:	fab2 f282 	clz	r2, r2
 8004914:	fa00 f202 	lsl.w	r2, r0, r2
 8004918:	430a      	orrs	r2, r1
 800491a:	4313      	orrs	r3, r2
 800491c:	6123      	str	r3, [r4, #16]
 800491e:	e026      	b.n	800496e <RCCEx_PLLSAI1_Config+0x24a>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8004920:	4c29      	ldr	r4, [pc, #164]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004922:	4b29      	ldr	r3, [pc, #164]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800492a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6891      	ldr	r1, [r2, #8]
 8004932:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004936:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	fa92 f2a2 	rbit	r2, r2
 800493e:	60ba      	str	r2, [r7, #8]
  return(result);
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	fab2 f282 	clz	r2, r2
 8004946:	4091      	lsls	r1, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6952      	ldr	r2, [r2, #20]
 800494c:	0852      	lsrs	r2, r2, #1
 800494e:	1e50      	subs	r0, r2, #1
 8004950:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	fa92 f2a2 	rbit	r2, r2
 800495c:	613a      	str	r2, [r7, #16]
  return(result);
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	fab2 f282 	clz	r2, r2
 8004964:	fa00 f202 	lsl.w	r2, r0, r2
 8004968:	430a      	orrs	r2, r1
 800496a:	4313      	orrs	r3, r2
 800496c:	6123      	str	r3, [r4, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800496e:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004970:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004978:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497a:	f7fd fd93 	bl	80024a4 <HAL_GetTick>
 800497e:	64b8      	str	r0, [r7, #72]	; 0x48

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004980:	e00a      	b.n	8004998 <RCCEx_PLLSAI1_Config+0x274>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004982:	f7fd fd8f 	bl	80024a4 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d903      	bls.n	8004998 <RCCEx_PLLSAI1_Config+0x274>
        {
          status = HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8004996:	e005      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0x280>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0ee      	beq.n	8004982 <RCCEx_PLLSAI1_Config+0x25e>
        }
      }

      if(status == HAL_OK)    
 80049a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0x296>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049ac:	4906      	ldr	r1, [pc, #24]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <RCCEx_PLLSAI1_Config+0x2a4>)
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 80049ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3754      	adds	r7, #84	; 0x54
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd90      	pop	{r4, r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000

080049cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e07a      	b.n	8004ad4 <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d106      	bne.n	80049fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f003 fba9 	bl	8008150 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a14:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a1e:	d902      	bls.n	8004a26 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e002      	b.n	8004a2c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a2a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a34:	d007      	beq.n	8004a46 <HAL_SPI_Init+0x7a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a3e:	d002      	beq.n	8004a46 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10b      	bne.n	8004a66 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a56:	d903      	bls.n	8004a60 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a5e:	e002      	b.n	8004a66 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6851      	ldr	r1, [r2, #4]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6892      	ldr	r2, [r2, #8]
 8004a72:	4311      	orrs	r1, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6912      	ldr	r2, [r2, #16]
 8004a78:	4311      	orrs	r1, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6952      	ldr	r2, [r2, #20]
 8004a7e:	4311      	orrs	r1, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6992      	ldr	r2, [r2, #24]
 8004a84:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004a88:	4311      	orrs	r1, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	69d2      	ldr	r2, [r2, #28]
 8004a8e:	4311      	orrs	r1, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6a12      	ldr	r2, [r2, #32]
 8004a94:	4311      	orrs	r1, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6992      	ldr	r2, [r2, #24]
 8004aa6:	0c12      	lsrs	r2, r2, #16
 8004aa8:	f002 0104 	and.w	r1, r2, #4
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ab0:	4311      	orrs	r1, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ab6:	4311      	orrs	r1, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68d2      	ldr	r2, [r2, #12]
 8004abc:	4311      	orrs	r1, r2
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_SPI_Transmit+0x26>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e13e      	b.n	8004d80 <HAL_SPI_Transmit+0x2a4>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b0a:	f7fd fccb 	bl	80024a4 <HAL_GetTick>
 8004b0e:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d002      	beq.n	8004b22 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b20:	e125      	b.n	8004d6e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <HAL_SPI_Transmit+0x52>
 8004b28:	88fb      	ldrh	r3, [r7, #6]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d102      	bne.n	8004b34 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b32:	e11c      	b.n	8004d6e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2203      	movs	r2, #3
 8004b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	88fa      	ldrh	r2, [r7, #6]
 8004b52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7e:	d107      	bne.n	8004b90 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d007      	beq.n	8004bae <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bb6:	d947      	bls.n	8004c48 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <HAL_SPI_Transmit+0xee>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d138      	bne.n	8004c3c <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	8812      	ldrh	r2, [r2, #0]
 8004bd2:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004be8:	e028      	b.n	8004c3c <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d10f      	bne.n	8004c18 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	8812      	ldrh	r2, [r2, #0]
 8004c00:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	3302      	adds	r3, #2
 8004c06:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c16:	e011      	b.n	8004c3c <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00b      	beq.n	8004c36 <HAL_SPI_Transmit+0x15a>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c24:	d00a      	beq.n	8004c3c <HAL_SPI_Transmit+0x160>
 8004c26:	f7fd fc3d 	bl	80024a4 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	1ad2      	subs	r2, r2, r3
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d302      	bcc.n	8004c3c <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c3a:	e098      	b.n	8004d6e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1d1      	bne.n	8004bea <HAL_SPI_Transmit+0x10e>
 8004c46:	e072      	b.n	8004d2e <HAL_SPI_Transmit+0x252>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d004      	beq.n	8004c5a <HAL_SPI_Transmit+0x17e>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d164      	bne.n	8004d24 <HAL_SPI_Transmit+0x248>
    {
      if (hspi->TxXferCount > 1U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d90f      	bls.n	8004c84 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	8812      	ldrh	r2, [r2, #0]
 8004c6c:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	3302      	adds	r3, #2
 8004c72:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b02      	subs	r3, #2
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c82:	e04f      	b.n	8004d24 <HAL_SPI_Transmit+0x248>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f103 020c 	add.w	r2, r3, #12
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	1c59      	adds	r1, r3, #1
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ca4:	e03e      	b.n	8004d24 <HAL_SPI_Transmit+0x248>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d125      	bne.n	8004d00 <HAL_SPI_Transmit+0x224>
      {
        if (hspi->TxXferCount > 1U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d90f      	bls.n	8004cde <HAL_SPI_Transmit+0x202>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	8812      	ldrh	r2, [r2, #0]
 8004cc6:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	3302      	adds	r3, #2
 8004ccc:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b02      	subs	r3, #2
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cdc:	e022      	b.n	8004d24 <HAL_SPI_Transmit+0x248>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f103 020c 	add.w	r2, r3, #12
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	1c59      	adds	r1, r3, #1
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cfe:	e011      	b.n	8004d24 <HAL_SPI_Transmit+0x248>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <HAL_SPI_Transmit+0x242>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0c:	d00a      	beq.n	8004d24 <HAL_SPI_Transmit+0x248>
 8004d0e:	f7fd fbc9 	bl	80024a4 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	1ad2      	subs	r2, r2, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d302      	bcc.n	8004d24 <HAL_SPI_Transmit+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d22:	e024      	b.n	8004d6e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1bb      	bne.n	8004ca6 <HAL_SPI_Transmit+0x1ca>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	6839      	ldr	r1, [r7, #0]
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 fb01 	bl	800533a <SPI_EndRxTxTransaction>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_SPI_Transmit+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <HAL_SPI_Transmit+0x286>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_SPI_Transmit+0x292>
  {
    errorcode = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8004da2:	2301      	movs	r3, #1
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d101      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x32>
 8004db6:	2302      	movs	r3, #2
 8004db8:	e1e1      	b.n	800517e <HAL_SPI_TransmitReceive+0x3f6>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dc2:	f7fd fb6f 	bl	80024a4 <HAL_GetTick>
 8004dc6:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d00e      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x74>
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de4:	d106      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x6c>
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d003      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8004df4:	2302      	movs	r3, #2
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004dfa:	e1b6      	b.n	800516a <HAL_SPI_TransmitReceive+0x3e2>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_SPI_TransmitReceive+0x86>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_SPI_TransmitReceive+0x86>
 8004e08:	887b      	ldrh	r3, [r7, #2]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d103      	bne.n	8004e16 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004e14:	e1a9      	b.n	800516a <HAL_SPI_TransmitReceive+0x3e2>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d003      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2205      	movs	r2, #5
 8004e26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	887a      	ldrh	r2, [r7, #2]
 8004e3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	887a      	ldrh	r2, [r7, #2]
 8004e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	887a      	ldrh	r2, [r7, #2]
 8004e50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	887a      	ldrh	r2, [r7, #2]
 8004e56:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fido threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e6c:	d805      	bhi.n	8004e7a <HAL_SPI_TransmitReceive+0xf2>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d908      	bls.n	8004e8c <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	6852      	ldr	r2, [r2, #4]
 8004e84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	e007      	b.n	8004e9c <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	6852      	ldr	r2, [r2, #4]
 8004e96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e9a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea6:	2b40      	cmp	r3, #64	; 0x40
 8004ea8:	d007      	beq.n	8004eba <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ec2:	d975      	bls.n	8004fb0 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d004      	beq.n	8004ed6 <HAL_SPI_TransmitReceive+0x14e>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d160      	bne.n	8004f98 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	8812      	ldrh	r2, [r2, #0]
 8004ede:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef4:	e050      	b.n	8004f98 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01c      	beq.n	8004f36 <HAL_SPI_TransmitReceive+0x1ae>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d017      	beq.n	8004f36 <HAL_SPI_TransmitReceive+0x1ae>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d110      	bne.n	8004f36 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	8812      	ldrh	r2, [r2, #0]
 8004f1c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	3302      	adds	r3, #2
 8004f22:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01a      	beq.n	8004f78 <HAL_SPI_TransmitReceive+0x1f0>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d113      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3302      	adds	r3, #2
 8004f60:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f74:	2301      	movs	r3, #1
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f7e:	d00b      	beq.n	8004f98 <HAL_SPI_TransmitReceive+0x210>
 8004f80:	f7fd fa90 	bl	80024a4 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	1ad2      	subs	r2, r2, r3
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d303      	bcc.n	8004f98 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f96:	e0e8      	b.n	800516a <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1a9      	bne.n	8004ef6 <HAL_SPI_TransmitReceive+0x16e>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1a3      	bne.n	8004ef6 <HAL_SPI_TransmitReceive+0x16e>
 8004fae:	e0ca      	b.n	8005146 <HAL_SPI_TransmitReceive+0x3be>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_SPI_TransmitReceive+0x23c>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	f040 80b4 	bne.w	800512c <HAL_SPI_TransmitReceive+0x3a4>
    {
      if (hspi->TxXferCount > 1U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d90f      	bls.n	8004fee <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	8812      	ldrh	r2, [r2, #0]
 8004fd6:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	3302      	adds	r3, #2
 8004fdc:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b02      	subs	r3, #2
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fec:	e09e      	b.n	800512c <HAL_SPI_TransmitReceive+0x3a4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f103 020c 	add.w	r2, r3, #12
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	1c59      	adds	r1, r3, #1
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800500e:	e08d      	b.n	800512c <HAL_SPI_TransmitReceive+0x3a4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	d032      	beq.n	800507c <HAL_SPI_TransmitReceive+0x2f4>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d02d      	beq.n	800507c <HAL_SPI_TransmitReceive+0x2f4>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d126      	bne.n	800507c <HAL_SPI_TransmitReceive+0x2f4>
      {
        if (hspi->TxXferCount > 1U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d90f      	bls.n	8005058 <HAL_SPI_TransmitReceive+0x2d0>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	8812      	ldrh	r2, [r2, #0]
 8005040:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	3302      	adds	r3, #2
 8005046:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b02      	subs	r3, #2
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005056:	e00f      	b.n	8005078 <HAL_SPI_TransmitReceive+0x2f0>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f103 020c 	add.w	r2, r3, #12
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	1c59      	adds	r1, r3, #1
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d041      	beq.n	800510c <HAL_SPI_TransmitReceive+0x384>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b01      	cmp	r3, #1
 8005094:	d13a      	bne.n	800510c <HAL_SPI_TransmitReceive+0x384>
      {
        if (hspi->RxXferCount > 1U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d920      	bls.n	80050e4 <HAL_SPI_TransmitReceive+0x35c>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3302      	adds	r3, #2
 80050b2:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b02      	subs	r3, #2
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d81a      	bhi.n	8005108 <HAL_SPI_TransmitReceive+0x380>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	6852      	ldr	r2, [r2, #4]
 80050dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050e0:	605a      	str	r2, [r3, #4]
 80050e2:	e011      	b.n	8005108 <HAL_SPI_TransmitReceive+0x380>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	607a      	str	r2, [r7, #4]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	320c      	adds	r2, #12
 80050f0:	7812      	ldrb	r2, [r2, #0]
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005108:	2301      	movs	r3, #1
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005112:	d00b      	beq.n	800512c <HAL_SPI_TransmitReceive+0x3a4>
 8005114:	f7fd f9c6 	bl	80024a4 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	1ad2      	subs	r2, r2, r3
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	429a      	cmp	r2, r3
 8005122:	d303      	bcc.n	800512c <HAL_SPI_TransmitReceive+0x3a4>
      {
        errorcode = HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800512a:	e01e      	b.n	800516a <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	f47f af6c 	bne.w	8005010 <HAL_SPI_TransmitReceive+0x288>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	f47f af65 	bne.w	8005010 <HAL_SPI_TransmitReceive+0x288>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 f8f5 	bl	800533a <SPI_EndRxTxTransaction>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_SPI_TransmitReceive+0x3d4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2220      	movs	r2, #32
 800515a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800517a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800517e:	4618      	mov	r0, r3
 8005180:	3728      	adds	r7, #40	; 0x28
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	607a      	str	r2, [r7, #4]
 8005192:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005194:	e04d      	b.n	8005232 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800519c:	d049      	beq.n	8005232 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80051a4:	f7fd f97e 	bl	80024a4 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	1ad2      	subs	r2, r2, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d33e      	bcc.n	8005232 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	6852      	ldr	r2, [r2, #4]
 80051be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051cc:	d111      	bne.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d6:	d004      	beq.n	80051e2 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e0:	d107      	bne.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051fa:	d110      	bne.n	800521e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6819      	ldr	r1, [r3, #0]
 8005206:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800520a:	400b      	ands	r3, r1
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800521c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e00e      	b.n	8005250 <SPI_WaitFlagStateUntilTimeout+0xca>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	401a      	ands	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	429a      	cmp	r2, r3
 8005240:	d101      	bne.n	8005246 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8005242:	2201      	movs	r2, #1
 8005244:	e000      	b.n	8005248 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8005246:	2200      	movs	r2, #0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	429a      	cmp	r2, r3
 800524c:	d1a3      	bne.n	8005196 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8005266:	e05b      	b.n	8005320 <SPI_WaitFifoStateUntilTimeout+0xc8>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800526e:	d109      	bne.n	8005284 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005282:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800528a:	d049      	beq.n	8005320 <SPI_WaitFifoStateUntilTimeout+0xc8>
    {
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8005292:	f7fd f907 	bl	80024a4 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	1ad2      	subs	r2, r2, r3
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d33e      	bcc.n	8005320 <SPI_WaitFifoStateUntilTimeout+0xc8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	6812      	ldr	r2, [r2, #0]
 80052aa:	6852      	ldr	r2, [r2, #4]
 80052ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ba:	d111      	bne.n	80052e0 <SPI_WaitFifoStateUntilTimeout+0x88>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c4:	d004      	beq.n	80052d0 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ce:	d107      	bne.n	80052e0 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e8:	d110      	bne.n	800530c <SPI_WaitFifoStateUntilTimeout+0xb4>
        {
          SPI_RESET_CRC(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6819      	ldr	r1, [r3, #0]
 80052f4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80052f8:	400b      	ands	r3, r1
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800530a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e008      	b.n	8005332 <SPI_WaitFifoStateUntilTimeout+0xda>
  while ((hspi->Instance->SR & Fifo) != State)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	401a      	ands	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	d19b      	bne.n	8005268 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <SPI_EndRxTxTransaction>:
  * @param hspi: SPI handle
  * @param Timeout: Timeout duration
  * @param  Tickstart: tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b086      	sub	sp, #24
 800533e:	af02      	add	r7, sp, #8
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2200      	movs	r2, #0
 800534e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f7ff ff80 	bl	8005258 <SPI_WaitFifoStateUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005362:	f043 0220 	orr.w	r2, r3, #32
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e013      	b.n	8005396 <SPI_EndRxTxTransaction+0x5c>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2200      	movs	r2, #0
 8005376:	2180      	movs	r1, #128	; 0x80
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff ff04 	bl	8005186 <SPI_WaitFlagStateUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d007      	beq.n	8005394 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005388:	f043 0220 	orr.w	r2, r3, #32
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e000      	b.n	8005396 <SPI_EndRxTxTransaction+0x5c>
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b082      	sub	sp, #8
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e043      	b.n	8005438 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f002 fecd 	bl	8008164 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2224      	movs	r2, #36	; 0x24
 80053ce:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	6812      	ldr	r2, [r2, #0]
 80053dc:	f022 0201 	bic.w	r2, r2, #1
 80053e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f8ba 	bl	800555c <UART_SetConfig>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e022      	b.n	8005438 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fb7c 	bl	8005af8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	6852      	ldr	r2, [r2, #4]
 800540a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800540e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	6892      	ldr	r2, [r2, #8]
 800541a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800541e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	f042 0201 	orr.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fc03 	bl	8005c3c <UART_CheckIdleState>
 8005436:	4603      	mov	r3, r0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b20      	cmp	r3, #32
 800545e:	d177      	bne.n	8005550 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_UART_Transmit+0x2c>
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e070      	b.n	8005552 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <HAL_UART_Transmit+0x3e>
 800547a:	2302      	movs	r3, #2
 800547c:	e069      	b.n	8005552 <HAL_UART_Transmit+0x112>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2221      	movs	r2, #33	; 0x21
 8005490:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005494:	f7fd f806 	bl	80024a4 <HAL_GetTick>
 8005498:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	88fa      	ldrh	r2, [r7, #6]
 800549e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	88fa      	ldrh	r2, [r7, #6]
 80054a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0)
 80054aa:	e034      	b.n	8005516 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2200      	movs	r2, #0
 80054c6:	2180      	movs	r1, #128	; 0x80
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fc00 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e03c      	b.n	8005552 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e0:	d111      	bne.n	8005506 <HAL_UART_Transmit+0xc6>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10d      	bne.n	8005506 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	8812      	ldrh	r2, [r2, #0]
 80054f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054fa:	b292      	uxth	r2, r2
 80054fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	3302      	adds	r3, #2
 8005502:	60bb      	str	r3, [r7, #8]
 8005504:	e007      	b.n	8005516 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	1c59      	adds	r1, r3, #1
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1c4      	bne.n	80054ac <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2200      	movs	r2, #0
 800552a:	2140      	movs	r1, #64	; 0x40
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fbce 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e00a      	b.n	8005552 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	e000      	b.n	8005552 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8005550:	2302      	movs	r3, #2
  }
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800555c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005560:	b086      	sub	sp, #24
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800556a:	2310      	movs	r3, #16
 800556c:	74fb      	strb	r3, [r7, #19]
  uint16_t brrtemp                    = 0x0000;
 800556e:	2300      	movs	r3, #0
 8005570:	81bb      	strh	r3, [r7, #12]
  uint16_t usartdiv                   = 0x0000;
 8005572:	2300      	movs	r3, #0
 8005574:	823b      	strh	r3, [r7, #16]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6819      	ldr	r1, [r3, #0]
 800559c:	4bb8      	ldr	r3, [pc, #736]	; (8005880 <UART_SetConfig+0x324>)
 800559e:	400b      	ands	r3, r1
 80055a0:	6979      	ldr	r1, [r7, #20]
 80055a2:	430b      	orrs	r3, r1
 80055a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	6852      	ldr	r2, [r2, #4]
 80055b0:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	68d2      	ldr	r2, [r2, #12]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4aaf      	ldr	r2, [pc, #700]	; (8005884 <UART_SetConfig+0x328>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d004      	beq.n	80055d6 <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	6892      	ldr	r2, [r2, #8]
 80055e0:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4aa6      	ldr	r2, [pc, #664]	; (8005888 <UART_SetConfig+0x32c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d121      	bne.n	8005638 <UART_SetConfig+0xdc>
 80055f4:	4ba5      	ldr	r3, [pc, #660]	; (800588c <UART_SetConfig+0x330>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d816      	bhi.n	8005630 <UART_SetConfig+0xd4>
 8005602:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <UART_SetConfig+0xac>)
 8005604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005608:	08005619 	.word	0x08005619
 800560c:	08005625 	.word	0x08005625
 8005610:	0800561f 	.word	0x0800561f
 8005614:	0800562b 	.word	0x0800562b
 8005618:	2301      	movs	r3, #1
 800561a:	74fb      	strb	r3, [r7, #19]
 800561c:	e094      	b.n	8005748 <UART_SetConfig+0x1ec>
 800561e:	2302      	movs	r3, #2
 8005620:	74fb      	strb	r3, [r7, #19]
 8005622:	e091      	b.n	8005748 <UART_SetConfig+0x1ec>
 8005624:	2304      	movs	r3, #4
 8005626:	74fb      	strb	r3, [r7, #19]
 8005628:	e08e      	b.n	8005748 <UART_SetConfig+0x1ec>
 800562a:	2308      	movs	r3, #8
 800562c:	74fb      	strb	r3, [r7, #19]
 800562e:	e08b      	b.n	8005748 <UART_SetConfig+0x1ec>
 8005630:	2310      	movs	r3, #16
 8005632:	74fb      	strb	r3, [r7, #19]
 8005634:	bf00      	nop
 8005636:	e087      	b.n	8005748 <UART_SetConfig+0x1ec>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a94      	ldr	r2, [pc, #592]	; (8005890 <UART_SetConfig+0x334>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d134      	bne.n	80056ac <UART_SetConfig+0x150>
 8005642:	4b92      	ldr	r3, [pc, #584]	; (800588c <UART_SetConfig+0x330>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	f003 030c 	and.w	r3, r3, #12
 800564c:	2b0c      	cmp	r3, #12
 800564e:	d829      	bhi.n	80056a4 <UART_SetConfig+0x148>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <UART_SetConfig+0xfc>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	0800568d 	.word	0x0800568d
 800565c:	080056a5 	.word	0x080056a5
 8005660:	080056a5 	.word	0x080056a5
 8005664:	080056a5 	.word	0x080056a5
 8005668:	08005699 	.word	0x08005699
 800566c:	080056a5 	.word	0x080056a5
 8005670:	080056a5 	.word	0x080056a5
 8005674:	080056a5 	.word	0x080056a5
 8005678:	08005693 	.word	0x08005693
 800567c:	080056a5 	.word	0x080056a5
 8005680:	080056a5 	.word	0x080056a5
 8005684:	080056a5 	.word	0x080056a5
 8005688:	0800569f 	.word	0x0800569f
 800568c:	2300      	movs	r3, #0
 800568e:	74fb      	strb	r3, [r7, #19]
 8005690:	e05a      	b.n	8005748 <UART_SetConfig+0x1ec>
 8005692:	2302      	movs	r3, #2
 8005694:	74fb      	strb	r3, [r7, #19]
 8005696:	e057      	b.n	8005748 <UART_SetConfig+0x1ec>
 8005698:	2304      	movs	r3, #4
 800569a:	74fb      	strb	r3, [r7, #19]
 800569c:	e054      	b.n	8005748 <UART_SetConfig+0x1ec>
 800569e:	2308      	movs	r3, #8
 80056a0:	74fb      	strb	r3, [r7, #19]
 80056a2:	e051      	b.n	8005748 <UART_SetConfig+0x1ec>
 80056a4:	2310      	movs	r3, #16
 80056a6:	74fb      	strb	r3, [r7, #19]
 80056a8:	bf00      	nop
 80056aa:	e04d      	b.n	8005748 <UART_SetConfig+0x1ec>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a78      	ldr	r2, [pc, #480]	; (8005894 <UART_SetConfig+0x338>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d120      	bne.n	80056f8 <UART_SetConfig+0x19c>
 80056b6:	4b75      	ldr	r3, [pc, #468]	; (800588c <UART_SetConfig+0x330>)
 80056b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d00f      	beq.n	80056e4 <UART_SetConfig+0x188>
 80056c4:	2b10      	cmp	r3, #16
 80056c6:	d802      	bhi.n	80056ce <UART_SetConfig+0x172>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <UART_SetConfig+0x17c>
 80056cc:	e010      	b.n	80056f0 <UART_SetConfig+0x194>
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d005      	beq.n	80056de <UART_SetConfig+0x182>
 80056d2:	2b30      	cmp	r3, #48	; 0x30
 80056d4:	d009      	beq.n	80056ea <UART_SetConfig+0x18e>
 80056d6:	e00b      	b.n	80056f0 <UART_SetConfig+0x194>
 80056d8:	2300      	movs	r3, #0
 80056da:	74fb      	strb	r3, [r7, #19]
 80056dc:	e034      	b.n	8005748 <UART_SetConfig+0x1ec>
 80056de:	2302      	movs	r3, #2
 80056e0:	74fb      	strb	r3, [r7, #19]
 80056e2:	e031      	b.n	8005748 <UART_SetConfig+0x1ec>
 80056e4:	2304      	movs	r3, #4
 80056e6:	74fb      	strb	r3, [r7, #19]
 80056e8:	e02e      	b.n	8005748 <UART_SetConfig+0x1ec>
 80056ea:	2308      	movs	r3, #8
 80056ec:	74fb      	strb	r3, [r7, #19]
 80056ee:	e02b      	b.n	8005748 <UART_SetConfig+0x1ec>
 80056f0:	2310      	movs	r3, #16
 80056f2:	74fb      	strb	r3, [r7, #19]
 80056f4:	bf00      	nop
 80056f6:	e027      	b.n	8005748 <UART_SetConfig+0x1ec>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a61      	ldr	r2, [pc, #388]	; (8005884 <UART_SetConfig+0x328>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d123      	bne.n	800574a <UART_SetConfig+0x1ee>
 8005702:	4b62      	ldr	r3, [pc, #392]	; (800588c <UART_SetConfig+0x330>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005708:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800570c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005710:	d012      	beq.n	8005738 <UART_SetConfig+0x1dc>
 8005712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005716:	d802      	bhi.n	800571e <UART_SetConfig+0x1c2>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <UART_SetConfig+0x1d0>
 800571c:	e012      	b.n	8005744 <UART_SetConfig+0x1e8>
 800571e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005722:	d006      	beq.n	8005732 <UART_SetConfig+0x1d6>
 8005724:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005728:	d009      	beq.n	800573e <UART_SetConfig+0x1e2>
 800572a:	e00b      	b.n	8005744 <UART_SetConfig+0x1e8>
 800572c:	2300      	movs	r3, #0
 800572e:	74fb      	strb	r3, [r7, #19]
 8005730:	e00a      	b.n	8005748 <UART_SetConfig+0x1ec>
 8005732:	2302      	movs	r3, #2
 8005734:	74fb      	strb	r3, [r7, #19]
 8005736:	e007      	b.n	8005748 <UART_SetConfig+0x1ec>
 8005738:	2304      	movs	r3, #4
 800573a:	74fb      	strb	r3, [r7, #19]
 800573c:	e004      	b.n	8005748 <UART_SetConfig+0x1ec>
 800573e:	2308      	movs	r3, #8
 8005740:	74fb      	strb	r3, [r7, #19]
 8005742:	e001      	b.n	8005748 <UART_SetConfig+0x1ec>
 8005744:	2310      	movs	r3, #16
 8005746:	74fb      	strb	r3, [r7, #19]
 8005748:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a4d      	ldr	r2, [pc, #308]	; (8005884 <UART_SetConfig+0x328>)
 8005750:	4293      	cmp	r3, r2
 8005752:	f040 80ec 	bne.w	800592e <UART_SetConfig+0x3d2>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]

    switch (clocksource)
 800575a:	7cfb      	ldrb	r3, [r7, #19]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d824      	bhi.n	80057aa <UART_SetConfig+0x24e>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0x20c>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	0800578d 	.word	0x0800578d
 800576c:	080057ab 	.word	0x080057ab
 8005770:	08005795 	.word	0x08005795
 8005774:	080057ab 	.word	0x080057ab
 8005778:	0800579b 	.word	0x0800579b
 800577c:	080057ab 	.word	0x080057ab
 8005780:	080057ab 	.word	0x080057ab
 8005784:	080057ab 	.word	0x080057ab
 8005788:	080057a3 	.word	0x080057a3
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800578c:	f7fe fcce 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8005790:	6178      	str	r0, [r7, #20]
      break;
 8005792:	e00d      	b.n	80057b0 <UART_SetConfig+0x254>
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8005794:	4b40      	ldr	r3, [pc, #256]	; (8005898 <UART_SetConfig+0x33c>)
 8005796:	617b      	str	r3, [r7, #20]
      break;
 8005798:	e00a      	b.n	80057b0 <UART_SetConfig+0x254>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 800579a:	f7fe fbc1 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 800579e:	6178      	str	r0, [r7, #20]
      break;
 80057a0:	e006      	b.n	80057b0 <UART_SetConfig+0x254>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 80057a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057a6:	617b      	str	r3, [r7, #20]
      break;
 80057a8:	e002      	b.n	80057b0 <UART_SetConfig+0x254>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
      break;
 80057ae:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 8199 	beq.w	8005aea <UART_SetConfig+0x58e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	441a      	add	r2, r3
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d805      	bhi.n	80057d4 <UART_SetConfig+0x278>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d202      	bcs.n	80057da <UART_SetConfig+0x27e>
      {
        ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	73fb      	strb	r3, [r7, #15]
 80057d8:	e187      	b.n	8005aea <UART_SetConfig+0x58e>
      }
      else
      {
        switch (clocksource)
 80057da:	7cfb      	ldrb	r3, [r7, #19]
 80057dc:	2b08      	cmp	r3, #8
 80057de:	f200 8093 	bhi.w	8005908 <UART_SetConfig+0x3ac>
 80057e2:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <UART_SetConfig+0x28c>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	0800580d 	.word	0x0800580d
 80057ec:	08005909 	.word	0x08005909
 80057f0:	0800584d 	.word	0x0800584d
 80057f4:	08005909 	.word	0x08005909
 80057f8:	080058a1 	.word	0x080058a1
 80057fc:	08005909 	.word	0x08005909
 8005800:	08005909 	.word	0x08005909
 8005804:	08005909 	.word	0x08005909
 8005808:	080058df 	.word	0x080058df
        {
        case UART_CLOCKSOURCE_PCLK1:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800580c:	f7fe fc8e 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8005810:	4603      	mov	r3, r0
 8005812:	f04f 0400 	mov.w	r4, #0
 8005816:	ea4f 2904 	mov.w	r9, r4, lsl #8
 800581a:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 800581e:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	f04f 0400 	mov.w	r4, #0
 800582c:	eb18 0003 	adds.w	r0, r8, r3
 8005830:	eb49 0104 	adc.w	r1, r9, r4
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f04f 0400 	mov.w	r4, #0
 800583c:	461a      	mov	r2, r3
 800583e:	4623      	mov	r3, r4
 8005840:	f7fb f8e8 	bl	8000a14 <__aeabi_uldivmod>
 8005844:	4603      	mov	r3, r0
 8005846:	460c      	mov	r4, r1
 8005848:	617b      	str	r3, [r7, #20]
          break;
 800584a:	e060      	b.n	800590e <UART_SetConfig+0x3b2>
        case UART_CLOCKSOURCE_HSI:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	f04f 0400 	mov.w	r4, #0
 8005856:	4911      	ldr	r1, [pc, #68]	; (800589c <UART_SetConfig+0x340>)
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	eb13 0801 	adds.w	r8, r3, r1
 8005860:	eb44 0902 	adc.w	r9, r4, r2
 8005864:	4640      	mov	r0, r8
 8005866:	4649      	mov	r1, r9
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f04f 0400 	mov.w	r4, #0
 8005870:	461a      	mov	r2, r3
 8005872:	4623      	mov	r3, r4
 8005874:	f7fb f8ce 	bl	8000a14 <__aeabi_uldivmod>
 8005878:	4603      	mov	r3, r0
 800587a:	460c      	mov	r4, r1
 800587c:	617b      	str	r3, [r7, #20]
          break;
 800587e:	e046      	b.n	800590e <UART_SetConfig+0x3b2>
 8005880:	efff69f3 	.word	0xefff69f3
 8005884:	40008000 	.word	0x40008000
 8005888:	40013800 	.word	0x40013800
 800588c:	40021000 	.word	0x40021000
 8005890:	40004400 	.word	0x40004400
 8005894:	40004800 	.word	0x40004800
 8005898:	00f42400 	.word	0x00f42400
 800589c:	f4240000 	.word	0xf4240000
        case UART_CLOCKSOURCE_SYSCLK:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80058a0:	f7fe fb3e 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	021d      	lsls	r5, r3, #8
 80058ae:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80058b2:	0214      	lsls	r4, r2, #8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	461a      	mov	r2, r3
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	18a0      	adds	r0, r4, r2
 80058c2:	eb45 0103 	adc.w	r1, r5, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f04f 0400 	mov.w	r4, #0
 80058ce:	461a      	mov	r2, r3
 80058d0:	4623      	mov	r3, r4
 80058d2:	f7fb f89f 	bl	8000a14 <__aeabi_uldivmod>
 80058d6:	4603      	mov	r3, r0
 80058d8:	460c      	mov	r4, r1
 80058da:	617b      	str	r3, [r7, #20]
          break;
 80058dc:	e017      	b.n	800590e <UART_SetConfig+0x3b2>
        case UART_CLOCKSOURCE_LSE:
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	f04f 0400 	mov.w	r4, #0
 80058e8:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80058ec:	f144 0100 	adc.w	r1, r4, #0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f04f 0400 	mov.w	r4, #0
 80058f8:	461a      	mov	r2, r3
 80058fa:	4623      	mov	r3, r4
 80058fc:	f7fb f88a 	bl	8000a14 <__aeabi_uldivmod>
 8005900:	4603      	mov	r3, r0
 8005902:	460c      	mov	r4, r1
 8005904:	617b      	str	r3, [r7, #20]
          break;
 8005906:	e002      	b.n	800590e <UART_SetConfig+0x3b2>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
          ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
          break;
 800590c:	bf00      	nop
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005914:	d308      	bcc.n	8005928 <UART_SetConfig+0x3cc>
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800591c:	d204      	bcs.n	8005928 <UART_SetConfig+0x3cc>
        {
           huart->Instance->BRR = tmpreg;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	60da      	str	r2, [r3, #12]
 8005926:	e0e0      	b.n	8005aea <UART_SetConfig+0x58e>
        }
        else
        {
          ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
 800592c:	e0dd      	b.n	8005aea <UART_SetConfig+0x58e>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005936:	d16e      	bne.n	8005a16 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8005938:	7cfb      	ldrb	r3, [r7, #19]
 800593a:	2b08      	cmp	r3, #8
 800593c:	d856      	bhi.n	80059ec <UART_SetConfig+0x490>
 800593e:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <UART_SetConfig+0x3e8>)
 8005940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005944:	08005969 	.word	0x08005969
 8005948:	08005985 	.word	0x08005985
 800594c:	080059a1 	.word	0x080059a1
 8005950:	080059ed 	.word	0x080059ed
 8005954:	080059bb 	.word	0x080059bb
 8005958:	080059ed 	.word	0x080059ed
 800595c:	080059ed 	.word	0x080059ed
 8005960:	080059ed 	.word	0x080059ed
 8005964:	080059d7 	.word	0x080059d7
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005968:	f7fe fbe0 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 800596c:	4603      	mov	r3, r0
 800596e:	005a      	lsls	r2, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	441a      	add	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005980:	823b      	strh	r3, [r7, #16]
      break;
 8005982:	e036      	b.n	80059f2 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005984:	f7fe fbf4 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 8005988:	4603      	mov	r3, r0
 800598a:	005a      	lsls	r2, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	441a      	add	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	fbb2 f3f3 	udiv	r3, r2, r3
 800599c:	823b      	strh	r3, [r7, #16]
      break;
 800599e:	e028      	b.n	80059f2 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_HSI:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	085b      	lsrs	r3, r3, #1
 80059a6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80059aa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6852      	ldr	r2, [r2, #4]
 80059b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80059b6:	823b      	strh	r3, [r7, #16]
      break;
 80059b8:	e01b      	b.n	80059f2 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80059ba:	f7fe fab1 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 80059be:	4603      	mov	r3, r0
 80059c0:	005a      	lsls	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	441a      	add	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	823b      	strh	r3, [r7, #16]
      break;
 80059d4:	e00d      	b.n	80059f2 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e8:	823b      	strh	r3, [r7, #16]
      break;
 80059ea:	e002      	b.n	80059f2 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
      break;
 80059f0:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 80059f2:	8a3b      	ldrh	r3, [r7, #16]
 80059f4:	f023 030f 	bic.w	r3, r3, #15
 80059f8:	81bb      	strh	r3, [r7, #12]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80059fa:	8a3b      	ldrh	r3, [r7, #16]
 80059fc:	105b      	asrs	r3, r3, #1
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	89bb      	ldrh	r3, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	81bb      	strh	r3, [r7, #12]
    huart->Instance->BRR = brrtemp;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	89ba      	ldrh	r2, [r7, #12]
 8005a12:	60da      	str	r2, [r3, #12]
 8005a14:	e069      	b.n	8005aea <UART_SetConfig+0x58e>
  }
  else
  {
    switch (clocksource)
 8005a16:	7cfb      	ldrb	r3, [r7, #19]
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d863      	bhi.n	8005ae4 <UART_SetConfig+0x588>
 8005a1c:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <UART_SetConfig+0x4c8>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a49 	.word	0x08005a49
 8005a28:	08005a69 	.word	0x08005a69
 8005a2c:	08005a89 	.word	0x08005a89
 8005a30:	08005ae5 	.word	0x08005ae5
 8005a34:	08005aa9 	.word	0x08005aa9
 8005a38:	08005ae5 	.word	0x08005ae5
 8005a3c:	08005ae5 	.word	0x08005ae5
 8005a40:	08005ae5 	.word	0x08005ae5
 8005a44:	08005ac9 	.word	0x08005ac9
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681c      	ldr	r4, [r3, #0]
 8005a4c:	f7fe fb6e 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8005a50:	4602      	mov	r2, r0
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	085b      	lsrs	r3, r3, #1
 8005a58:	441a      	add	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	60e3      	str	r3, [r4, #12]
      break;
 8005a66:	e040      	b.n	8005aea <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681c      	ldr	r4, [r3, #0]
 8005a6c:	f7fe fb80 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 8005a70:	4602      	mov	r2, r0
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	441a      	add	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	60e3      	str	r3, [r4, #12]
      break;
 8005a86:	e030      	b.n	8005aea <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_HSI:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005a96:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	6849      	ldr	r1, [r1, #4]
 8005a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	60d3      	str	r3, [r2, #12]
      break;
 8005aa6:	e020      	b.n	8005aea <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681c      	ldr	r4, [r3, #0]
 8005aac:	f7fe fa38 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	441a      	add	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	60e3      	str	r3, [r4, #12]
      break;
 8005ac6:	e010      	b.n	8005aea <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6852      	ldr	r2, [r2, #4]
 8005ad0:	0852      	lsrs	r2, r2, #1
 8005ad2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6852      	ldr	r2, [r2, #4]
 8005ada:	fbb1 f2f2 	udiv	r2, r1, r2
 8005ade:	b292      	uxth	r2, r2
 8005ae0:	60da      	str	r2, [r3, #12]
      break;
 8005ae2:	e002      	b.n	8005aea <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae8:	bf00      	nop
    }
  }

  return ret;
 8005aea:	7bfb      	ldrb	r3, [r7, #15]

}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005af6:	bf00      	nop

08005af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	6852      	ldr	r2, [r2, #4]
 8005b16:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	6852      	ldr	r2, [r2, #4]
 8005b38:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b40:	430a      	orrs	r2, r1
 8005b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	6852      	ldr	r2, [r2, #4]
 8005b5a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	6852      	ldr	r2, [r2, #4]
 8005b7c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b84:	430a      	orrs	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6812      	ldr	r2, [r2, #0]
 8005b9c:	6892      	ldr	r2, [r2, #8]
 8005b9e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	6892      	ldr	r2, [r2, #8]
 8005bc0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01a      	beq.n	8005c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6812      	ldr	r2, [r2, #0]
 8005be0:	6852      	ldr	r2, [r2, #4]
 8005be2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf6:	d10a      	bne.n	8005c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	6852      	ldr	r2, [r2, #4]
 8005c02:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6812      	ldr	r2, [r2, #0]
 8005c22:	6852      	ldr	r2, [r2, #4]
 8005c24:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005c4e:	f7fc fc29 	bl	80024a4 <HAL_GetTick>
 8005c52:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d10e      	bne.n	8005c80 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f82c 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e022      	b.n	8005cc6 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d10e      	bne.n	8005cac <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f816 	bl	8005cce <UART_WaitOnFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e00c      	b.n	8005cc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cde:	e02c      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ce6:	d028      	beq.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8005cee:	f7fc fbd9 	bl	80024a4 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	1ad2      	subs	r2, r2, r3
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d91d      	bls.n	8005d3a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	6892      	ldr	r2, [r2, #8]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e00f      	b.n	8005d5a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	401a      	ands	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	bf0c      	ite	eq
 8005d4a:	2301      	moveq	r3, #1
 8005d4c:	2300      	movne	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d0c3      	beq.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005d66:	f001 f90f 	bl	8006f88 <xTaskGetSchedulerState>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d001      	beq.n	8005d74 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8005d70:	f000 fa3c 	bl	80061ec <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8005d74:	bf00      	nop
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f103 0208 	add.w	r2, r3, #8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f103 0208 	add.w	r2, r3, #8
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f103 0208 	add.w	r2, r3, #8
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b085      	sub	sp, #20
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	601a      	str	r2, [r3, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e30:	d103      	bne.n	8005e3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e00c      	b.n	8005e54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	e002      	b.n	8005e48 <vListInsert+0x2e>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d9f6      	bls.n	8005e42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	601a      	str	r2, [r3, #0]
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6892      	ldr	r2, [r2, #8]
 8005ea2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6852      	ldr	r2, [r2, #4]
 8005eac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d103      	bne.n	8005ec0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	1e5a      	subs	r2, r3, #1
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3b04      	subs	r3, #4
 8005ef0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3b04      	subs	r3, #4
 8005efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f0c:	4a0c      	ldr	r2, [pc, #48]	; (8005f40 <pxPortInitialiseStack+0x60>)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	3b14      	subs	r3, #20
 8005f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3b04      	subs	r3, #4
 8005f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f06f 0202 	mvn.w	r2, #2
 8005f2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3b20      	subs	r3, #32
 8005f30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f32:	68fb      	ldr	r3, [r7, #12]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	08005f45 	.word	0x08005f45

08005f44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f4a:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <prvTaskExitError+0x38>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f52:	d009      	beq.n	8005f68 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	607b      	str	r3, [r7, #4]
 8005f66:	e7fe      	b.n	8005f66 <prvTaskExitError+0x22>
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8005f7a:	e7fe      	b.n	8005f7a <prvTaskExitError+0x36>
 8005f7c:	2000003c 	.word	0x2000003c

08005f80 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f80:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <pxCurrentTCBConst2>)
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	6808      	ldr	r0, [r1, #0]
 8005f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8a:	f380 8809 	msr	PSP, r0
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f380 8811 	msr	BASEPRI, r0
 8005f9a:	4770      	bx	lr

08005f9c <pxCurrentTCBConst2>:
 8005f9c:	20007de8 	.word	0x20007de8
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fa0:	bf00      	nop
 8005fa2:	bf00      	nop

08005fa4 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005fa4:	4806      	ldr	r0, [pc, #24]	; (8005fc0 <prvPortStartFirstTask+0x1c>)
 8005fa6:	6800      	ldr	r0, [r0, #0]
 8005fa8:	6800      	ldr	r0, [r0, #0]
 8005faa:	f380 8808 	msr	MSP, r0
 8005fae:	b662      	cpsie	i
 8005fb0:	b661      	cpsie	f
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	df00      	svc	0
 8005fbc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fbe:	bf00      	nop
 8005fc0:	e000ed08 	.word	0xe000ed08

08005fc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fca:	4b3b      	ldr	r3, [pc, #236]	; (80060b8 <xPortStartScheduler+0xf4>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a3b      	ldr	r2, [pc, #236]	; (80060bc <xPortStartScheduler+0xf8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d109      	bne.n	8005fe8 <xPortStartScheduler+0x24>
 8005fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	e7fe      	b.n	8005fe6 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fe8:	4b33      	ldr	r3, [pc, #204]	; (80060b8 <xPortStartScheduler+0xf4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a34      	ldr	r2, [pc, #208]	; (80060c0 <xPortStartScheduler+0xfc>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d109      	bne.n	8006006 <xPortStartScheduler+0x42>
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	e7fe      	b.n	8006004 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006006:	4b2f      	ldr	r3, [pc, #188]	; (80060c4 <xPortStartScheduler+0x100>)
 8006008:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	22ff      	movs	r2, #255	; 0xff
 8006016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006028:	b2da      	uxtb	r2, r3
 800602a:	4b27      	ldr	r3, [pc, #156]	; (80060c8 <xPortStartScheduler+0x104>)
 800602c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800602e:	4b27      	ldr	r3, [pc, #156]	; (80060cc <xPortStartScheduler+0x108>)
 8006030:	2207      	movs	r2, #7
 8006032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006034:	e009      	b.n	800604a <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006036:	4b25      	ldr	r3, [pc, #148]	; (80060cc <xPortStartScheduler+0x108>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3b01      	subs	r3, #1
 800603c:	4a23      	ldr	r2, [pc, #140]	; (80060cc <xPortStartScheduler+0x108>)
 800603e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	b2db      	uxtb	r3, r3
 8006048:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006052:	2b80      	cmp	r3, #128	; 0x80
 8006054:	d0ef      	beq.n	8006036 <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006056:	4b1d      	ldr	r3, [pc, #116]	; (80060cc <xPortStartScheduler+0x108>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	4a1b      	ldr	r2, [pc, #108]	; (80060cc <xPortStartScheduler+0x108>)
 800605e:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006060:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <xPortStartScheduler+0x108>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006068:	4a18      	ldr	r2, [pc, #96]	; (80060cc <xPortStartScheduler+0x108>)
 800606a:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	b2da      	uxtb	r2, r3
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006074:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <xPortStartScheduler+0x10c>)
 8006076:	4b16      	ldr	r3, [pc, #88]	; (80060d0 <xPortStartScheduler+0x10c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800607e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006080:	4a13      	ldr	r2, [pc, #76]	; (80060d0 <xPortStartScheduler+0x10c>)
 8006082:	4b13      	ldr	r3, [pc, #76]	; (80060d0 <xPortStartScheduler+0x10c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800608a:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800608c:	f000 f8d2 	bl	8006234 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006090:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <xPortStartScheduler+0x110>)
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006096:	f000 f8e9 	bl	800626c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800609a:	4a0f      	ldr	r2, [pc, #60]	; (80060d8 <xPortStartScheduler+0x114>)
 800609c:	4b0e      	ldr	r3, [pc, #56]	; (80060d8 <xPortStartScheduler+0x114>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060a4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060a6:	f7ff ff7d 	bl	8005fa4 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80060aa:	f7ff ff4b 	bl	8005f44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	e000ed00 	.word	0xe000ed00
 80060bc:	410fc271 	.word	0x410fc271
 80060c0:	410fc270 	.word	0x410fc270
 80060c4:	e000e400 	.word	0xe000e400
 80060c8:	200000c8 	.word	0x200000c8
 80060cc:	200000cc 	.word	0x200000cc
 80060d0:	e000ed20 	.word	0xe000ed20
 80060d4:	2000003c 	.word	0x2000003c
 80060d8:	e000ef34 	.word	0xe000ef34

080060dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e6:	f383 8811 	msr	BASEPRI, r3
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060f4:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <vPortEnterCritical+0x54>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3301      	adds	r3, #1
 80060fa:	4a0d      	ldr	r2, [pc, #52]	; (8006130 <vPortEnterCritical+0x54>)
 80060fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060fe:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <vPortEnterCritical+0x54>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d10e      	bne.n	8006124 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006106:	4b0b      	ldr	r3, [pc, #44]	; (8006134 <vPortEnterCritical+0x58>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d009      	beq.n	8006124 <vPortEnterCritical+0x48>
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	e7fe      	b.n	8006122 <vPortEnterCritical+0x46>
	}
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	2000003c 	.word	0x2000003c
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800613e:	4b11      	ldr	r3, [pc, #68]	; (8006184 <vPortExitCritical+0x4c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <vPortExitCritical+0x22>
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	607b      	str	r3, [r7, #4]
 8006158:	e7fe      	b.n	8006158 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800615a:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <vPortExitCritical+0x4c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3b01      	subs	r3, #1
 8006160:	4a08      	ldr	r2, [pc, #32]	; (8006184 <vPortExitCritical+0x4c>)
 8006162:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006164:	4b07      	ldr	r3, [pc, #28]	; (8006184 <vPortExitCritical+0x4c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <vPortExitCritical+0x3e>
 800616c:	2300      	movs	r3, #0
 800616e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	2000003c 	.word	0x2000003c

08006188 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006188:	f3ef 8009 	mrs	r0, PSP
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <pxCurrentTCBConst>)
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	f01e 0f10 	tst.w	lr, #16
 8006198:	bf08      	it	eq
 800619a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800619e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a2:	6010      	str	r0, [r2, #0]
 80061a4:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80061a8:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061ac:	f380 8811 	msr	BASEPRI, r0
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f000 fd02 	bl	8006bc0 <vTaskSwitchContext>
 80061bc:	f04f 0000 	mov.w	r0, #0
 80061c0:	f380 8811 	msr	BASEPRI, r0
 80061c4:	bc08      	pop	{r3}
 80061c6:	6819      	ldr	r1, [r3, #0]
 80061c8:	6808      	ldr	r0, [r1, #0]
 80061ca:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ce:	f01e 0f10 	tst.w	lr, #16
 80061d2:	bf08      	it	eq
 80061d4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061d8:	f380 8809 	msr	PSP, r0
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop

080061e4 <pxCurrentTCBConst>:
 80061e4:	20007de8 	.word	0x20007de8
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop

080061ec <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
	__asm volatile
 80061f2:	f3ef 8211 	mrs	r2, BASEPRI
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	60fa      	str	r2, [r7, #12]
 8006208:	60bb      	str	r3, [r7, #8]
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800620a:	f000 fc1b 	bl	8006a44 <xTaskIncrementTick>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006214:	4b06      	ldr	r3, [pc, #24]	; (8006230 <xPortSysTickHandler+0x44>)
 8006216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	2300      	movs	r3, #0
 800621e:	607b      	str	r3, [r7, #4]
	__asm volatile
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	e000ed04 	.word	0xe000ed04

08006234 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006238:	4a08      	ldr	r2, [pc, #32]	; (800625c <vPortSetupTimerInterrupt+0x28>)
 800623a:	4b09      	ldr	r3, [pc, #36]	; (8006260 <vPortSetupTimerInterrupt+0x2c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4909      	ldr	r1, [pc, #36]	; (8006264 <vPortSetupTimerInterrupt+0x30>)
 8006240:	fba1 1303 	umull	r1, r3, r1, r3
 8006244:	099b      	lsrs	r3, r3, #6
 8006246:	3b01      	subs	r3, #1
 8006248:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800624a:	4b07      	ldr	r3, [pc, #28]	; (8006268 <vPortSetupTimerInterrupt+0x34>)
 800624c:	2207      	movs	r2, #7
 800624e:	601a      	str	r2, [r3, #0]
}
 8006250:	bf00      	nop
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	e000e014 	.word	0xe000e014
 8006260:	20000040 	.word	0x20000040
 8006264:	10624dd3 	.word	0x10624dd3
 8006268:	e000e010 	.word	0xe000e010

0800626c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800626c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800627c <vPortEnableVFP+0x10>
 8006270:	6801      	ldr	r1, [r0, #0]
 8006272:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006276:	6001      	str	r1, [r0, #0]
 8006278:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800627a:	bf00      	nop
 800627c:	e000ed88 	.word	0xe000ed88

08006280 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006288:	2300      	movs	r3, #0
 800628a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800628c:	f000 fb38 	bl	8006900 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006290:	4b57      	ldr	r3, [pc, #348]	; (80063f0 <pvPortMalloc+0x170>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006298:	f000 f90c 	bl	80064b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800629c:	4b55      	ldr	r3, [pc, #340]	; (80063f4 <pvPortMalloc+0x174>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4013      	ands	r3, r2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f040 808c 	bne.w	80063c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01c      	beq.n	80062ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80062b0:	2208      	movs	r2, #8
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4413      	add	r3, r2
 80062b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d013      	beq.n	80062ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f023 0307 	bic.w	r3, r3, #7
 80062c8:	3308      	adds	r3, #8
 80062ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d009      	beq.n	80062ea <pvPortMalloc+0x6a>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e7fe      	b.n	80062e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d068      	beq.n	80063c2 <pvPortMalloc+0x142>
 80062f0:	4b41      	ldr	r3, [pc, #260]	; (80063f8 <pvPortMalloc+0x178>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d863      	bhi.n	80063c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062fa:	4b40      	ldr	r3, [pc, #256]	; (80063fc <pvPortMalloc+0x17c>)
 80062fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062fe:	4b3f      	ldr	r3, [pc, #252]	; (80063fc <pvPortMalloc+0x17c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006304:	e004      	b.n	8006310 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	429a      	cmp	r2, r3
 8006318:	d203      	bcs.n	8006322 <pvPortMalloc+0xa2>
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f1      	bne.n	8006306 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006322:	4b33      	ldr	r3, [pc, #204]	; (80063f0 <pvPortMalloc+0x170>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006328:	429a      	cmp	r2, r3
 800632a:	d04a      	beq.n	80063c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2208      	movs	r2, #8
 8006332:	4413      	add	r3, r2
 8006334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	1ad2      	subs	r2, r2, r3
 8006346:	2308      	movs	r3, #8
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	429a      	cmp	r2, r3
 800634c:	d91e      	bls.n	800638c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800634e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4413      	add	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	2b00      	cmp	r3, #0
 800635e:	d009      	beq.n	8006374 <pvPortMalloc+0xf4>
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	e7fe      	b.n	8006372 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	1ad2      	subs	r2, r2, r3
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006386:	69b8      	ldr	r0, [r7, #24]
 8006388:	f000 f8f6 	bl	8006578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800638c:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <pvPortMalloc+0x178>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <pvPortMalloc+0x178>)
 8006398:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800639a:	4b17      	ldr	r3, [pc, #92]	; (80063f8 <pvPortMalloc+0x178>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4b18      	ldr	r3, [pc, #96]	; (8006400 <pvPortMalloc+0x180>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d203      	bcs.n	80063ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063a6:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <pvPortMalloc+0x178>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a15      	ldr	r2, [pc, #84]	; (8006400 <pvPortMalloc+0x180>)
 80063ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <pvPortMalloc+0x174>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063c2:	f000 faab 	bl	800691c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d009      	beq.n	80063e4 <pvPortMalloc+0x164>
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	e7fe      	b.n	80063e2 <pvPortMalloc+0x162>
	return pvReturn;
 80063e4:	69fb      	ldr	r3, [r7, #28]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3728      	adds	r7, #40	; 0x28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20007dd8 	.word	0x20007dd8
 80063f4:	20007de4 	.word	0x20007de4
 80063f8:	20007ddc 	.word	0x20007ddc
 80063fc:	20007dd0 	.word	0x20007dd0
 8006400:	20007de0 	.word	0x20007de0

08006404 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d046      	beq.n	80064a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006416:	2308      	movs	r3, #8
 8006418:	425b      	negs	r3, r3
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4413      	add	r3, r2
 800641e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	4b20      	ldr	r3, [pc, #128]	; (80064ac <vPortFree+0xa8>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4013      	ands	r3, r2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <vPortFree+0x42>
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	e7fe      	b.n	8006444 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <vPortFree+0x5e>
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	60bb      	str	r3, [r7, #8]
 8006460:	e7fe      	b.n	8006460 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	4b11      	ldr	r3, [pc, #68]	; (80064ac <vPortFree+0xa8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d019      	beq.n	80064a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d115      	bne.n	80064a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <vPortFree+0xa8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	43db      	mvns	r3, r3
 8006482:	401a      	ands	r2, r3
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006488:	f000 fa3a 	bl	8006900 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <vPortFree+0xac>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4413      	add	r3, r2
 8006496:	4a06      	ldr	r2, [pc, #24]	; (80064b0 <vPortFree+0xac>)
 8006498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800649a:	6938      	ldr	r0, [r7, #16]
 800649c:	f000 f86c 	bl	8006578 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80064a0:	f000 fa3c 	bl	800691c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064a4:	bf00      	nop
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	20007de4 	.word	0x20007de4
 80064b0:	20007ddc 	.word	0x20007ddc

080064b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064ba:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80064be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064c0:	4b27      	ldr	r3, [pc, #156]	; (8006560 <prvHeapInit+0xac>)
 80064c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3307      	adds	r3, #7
 80064d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0307 	bic.w	r3, r3, #7
 80064da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <prvHeapInit+0xac>)
 80064e4:	4413      	add	r3, r2
 80064e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064ec:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <prvHeapInit+0xb0>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064f2:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <prvHeapInit+0xb0>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4413      	add	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006500:	2208      	movs	r2, #8
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0307 	bic.w	r3, r3, #7
 800650e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4a15      	ldr	r2, [pc, #84]	; (8006568 <prvHeapInit+0xb4>)
 8006514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <prvHeapInit+0xb4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800651e:	4b12      	ldr	r3, [pc, #72]	; (8006568 <prvHeapInit+0xb4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <prvHeapInit+0xb4>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	4a0a      	ldr	r2, [pc, #40]	; (800656c <prvHeapInit+0xb8>)
 8006542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	4a09      	ldr	r2, [pc, #36]	; (8006570 <prvHeapInit+0xbc>)
 800654a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800654c:	4b09      	ldr	r3, [pc, #36]	; (8006574 <prvHeapInit+0xc0>)
 800654e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006552:	601a      	str	r2, [r3, #0]
}
 8006554:	bf00      	nop
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	200000d0 	.word	0x200000d0
 8006564:	20007dd0 	.word	0x20007dd0
 8006568:	20007dd8 	.word	0x20007dd8
 800656c:	20007de0 	.word	0x20007de0
 8006570:	20007ddc 	.word	0x20007ddc
 8006574:	20007de4 	.word	0x20007de4

08006578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006580:	4b28      	ldr	r3, [pc, #160]	; (8006624 <prvInsertBlockIntoFreeList+0xac>)
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e002      	b.n	800658c <prvInsertBlockIntoFreeList+0x14>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	429a      	cmp	r2, r3
 8006594:	d3f7      	bcc.n	8006586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	441a      	add	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d108      	bne.n	80065ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	441a      	add	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	441a      	add	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d118      	bne.n	8006600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	4b15      	ldr	r3, [pc, #84]	; (8006628 <prvInsertBlockIntoFreeList+0xb0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d00d      	beq.n	80065f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	441a      	add	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	e008      	b.n	8006608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <prvInsertBlockIntoFreeList+0xb0>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e003      	b.n	8006608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	429a      	cmp	r2, r3
 800660e:	d002      	beq.n	8006616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20007dd0 	.word	0x20007dd0
 8006628:	20007dd8 	.word	0x20007dd8

0800662c <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08c      	sub	sp, #48	; 0x30
 8006630:	af02      	add	r7, sp, #8
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	4613      	mov	r3, r2
 800663a:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d109      	bne.n	8006656 <xTaskGenericCreate+0x2a>
 8006642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	61bb      	str	r3, [r7, #24]
 8006654:	e7fe      	b.n	8006654 <xTaskGenericCreate+0x28>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	2b06      	cmp	r3, #6
 800665a:	d909      	bls.n	8006670 <xTaskGenericCreate+0x44>
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	e7fe      	b.n	800666e <xTaskGenericCreate+0x42>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8006670:	88fb      	ldrh	r3, [r7, #6]
 8006672:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fc1b 	bl	8006eb0 <prvAllocateTCBAndStack>
 800667a:	6238      	str	r0, [r7, #32]

	if( pxNewTCB != NULL )
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d078      	beq.n	8006774 <xTaskGenericCreate+0x148>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800668c:	3b01      	subs	r3, #1
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	61fb      	str	r3, [r7, #28]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	f023 0307 	bic.w	r3, r3, #7
 800669a:	61fb      	str	r3, [r7, #28]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d009      	beq.n	80066ba <xTaskGenericCreate+0x8e>
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	e7fe      	b.n	80066b8 <xTaskGenericCreate+0x8c>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 80066ba:	88fb      	ldrh	r3, [r7, #6]
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	6a38      	ldr	r0, [r7, #32]
 80066c6:	f000 faed 	bl	8006ca4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	68f9      	ldr	r1, [r7, #12]
 80066ce:	69f8      	ldr	r0, [r7, #28]
 80066d0:	f7ff fc06 	bl	8005ee0 <pxPortInitialiseStack>
 80066d4:	4602      	mov	r2, r0
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80066da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <xTaskGenericCreate+0xba>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e2:	6a3a      	ldr	r2, [r7, #32]
 80066e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80066e6:	f7ff fcf9 	bl	80060dc <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80066ea:	4b31      	ldr	r3, [pc, #196]	; (80067b0 <xTaskGenericCreate+0x184>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3301      	adds	r3, #1
 80066f0:	4a2f      	ldr	r2, [pc, #188]	; (80067b0 <xTaskGenericCreate+0x184>)
 80066f2:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 80066f4:	4b2f      	ldr	r3, [pc, #188]	; (80067b4 <xTaskGenericCreate+0x188>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d109      	bne.n	8006710 <xTaskGenericCreate+0xe4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80066fc:	4a2d      	ldr	r2, [pc, #180]	; (80067b4 <xTaskGenericCreate+0x188>)
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006702:	4b2b      	ldr	r3, [pc, #172]	; (80067b0 <xTaskGenericCreate+0x184>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d10f      	bne.n	800672a <xTaskGenericCreate+0xfe>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 800670a:	f000 fb1f 	bl	8006d4c <prvInitialiseTaskLists>
 800670e:	e00c      	b.n	800672a <xTaskGenericCreate+0xfe>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8006710:	4b29      	ldr	r3, [pc, #164]	; (80067b8 <xTaskGenericCreate+0x18c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d108      	bne.n	800672a <xTaskGenericCreate+0xfe>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8006718:	4b26      	ldr	r3, [pc, #152]	; (80067b4 <xTaskGenericCreate+0x188>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	429a      	cmp	r2, r3
 8006722:	d802      	bhi.n	800672a <xTaskGenericCreate+0xfe>
					{
						pxCurrentTCB = pxNewTCB;
 8006724:	4a23      	ldr	r2, [pc, #140]	; (80067b4 <xTaskGenericCreate+0x188>)
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	6013      	str	r3, [r2, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 800672a:	4b24      	ldr	r3, [pc, #144]	; (80067bc <xTaskGenericCreate+0x190>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3301      	adds	r3, #1
 8006730:	4a22      	ldr	r2, [pc, #136]	; (80067bc <xTaskGenericCreate+0x190>)
 8006732:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006734:	4b21      	ldr	r3, [pc, #132]	; (80067bc <xTaskGenericCreate+0x190>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	645a      	str	r2, [r3, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	2201      	movs	r2, #1
 8006742:	409a      	lsls	r2, r3
 8006744:	4b1e      	ldr	r3, [pc, #120]	; (80067c0 <xTaskGenericCreate+0x194>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4313      	orrs	r3, r2
 800674a:	4a1d      	ldr	r2, [pc, #116]	; (80067c0 <xTaskGenericCreate+0x194>)
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4a1a      	ldr	r2, [pc, #104]	; (80067c4 <xTaskGenericCreate+0x198>)
 800675c:	441a      	add	r2, r3
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	3304      	adds	r3, #4
 8006762:	4619      	mov	r1, r3
 8006764:	4610      	mov	r0, r2
 8006766:	f7ff fb34 	bl	8005dd2 <vListInsertEnd>

			xReturn = pdPASS;
 800676a:	2301      	movs	r3, #1
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800676e:	f7ff fce3 	bl	8006138 <vPortExitCritical>
 8006772:	e002      	b.n	800677a <xTaskGenericCreate+0x14e>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	2b01      	cmp	r3, #1
 800677e:	d111      	bne.n	80067a4 <xTaskGenericCreate+0x178>
	{
		if( xSchedulerRunning != pdFALSE )
 8006780:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <xTaskGenericCreate+0x18c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00d      	beq.n	80067a4 <xTaskGenericCreate+0x178>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8006788:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <xTaskGenericCreate+0x188>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	429a      	cmp	r2, r3
 8006792:	d207      	bcs.n	80067a4 <xTaskGenericCreate+0x178>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8006794:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <xTaskGenericCreate+0x19c>)
 8006796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	f3bf 8f6f 	isb	sy
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3728      	adds	r7, #40	; 0x28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20007ee8 	.word	0x20007ee8
 80067b4:	20007de8 	.word	0x20007de8
 80067b8:	20007ef4 	.word	0x20007ef4
 80067bc:	20007f04 	.word	0x20007f04
 80067c0:	20007ef0 	.word	0x20007ef0
 80067c4:	20007dec 	.word	0x20007dec
 80067c8:	e000ed04 	.word	0xe000ed04

080067cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d02f      	beq.n	800683e <vTaskDelay+0x72>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067de:	4b1f      	ldr	r3, [pc, #124]	; (800685c <vTaskDelay+0x90>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <vTaskDelay+0x2e>
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	e7fe      	b.n	80067f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80067fa:	f000 f881 	bl	8006900 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80067fe:	4b18      	ldr	r3, [pc, #96]	; (8006860 <vTaskDelay+0x94>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	613b      	str	r3, [r7, #16]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006808:	4b16      	ldr	r3, [pc, #88]	; (8006864 <vTaskDelay+0x98>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3304      	adds	r3, #4
 800680e:	4618      	mov	r0, r3
 8006810:	f7ff fb3c 	bl	8005e8c <uxListRemove>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <vTaskDelay+0x66>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800681a:	4b12      	ldr	r3, [pc, #72]	; (8006864 <vTaskDelay+0x98>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	2201      	movs	r2, #1
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	43da      	mvns	r2, r3
 8006828:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <vTaskDelay+0x9c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4013      	ands	r3, r2
 800682e:	4a0e      	ldr	r2, [pc, #56]	; (8006868 <vTaskDelay+0x9c>)
 8006830:	6013      	str	r3, [r2, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8006832:	6938      	ldr	r0, [r7, #16]
 8006834:	f000 fb06 	bl	8006e44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006838:	f000 f870 	bl	800691c <xTaskResumeAll>
 800683c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d107      	bne.n	8006854 <vTaskDelay+0x88>
		{
			portYIELD_WITHIN_API();
 8006844:	4b09      	ldr	r3, [pc, #36]	; (800686c <vTaskDelay+0xa0>)
 8006846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006854:	bf00      	nop
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20007f0c 	.word	0x20007f0c
 8006860:	20007eec 	.word	0x20007eec
 8006864:	20007de8 	.word	0x20007de8
 8006868:	20007ef0 	.word	0x20007ef0
 800686c:	e000ed04 	.word	0xe000ed04

08006870 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8006876:	2300      	movs	r3, #0
 8006878:	9303      	str	r3, [sp, #12]
 800687a:	2300      	movs	r3, #0
 800687c:	9302      	str	r3, [sp, #8]
 800687e:	2300      	movs	r3, #0
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	2300      	movs	r3, #0
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	2300      	movs	r3, #0
 8006888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800688c:	4917      	ldr	r1, [pc, #92]	; (80068ec <vTaskStartScheduler+0x7c>)
 800688e:	4818      	ldr	r0, [pc, #96]	; (80068f0 <vTaskStartScheduler+0x80>)
 8006890:	f7ff fecc 	bl	800662c <xTaskGenericCreate>
 8006894:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d115      	bne.n	80068c8 <vTaskStartScheduler+0x58>
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068ae:	4b11      	ldr	r3, [pc, #68]	; (80068f4 <vTaskStartScheduler+0x84>)
 80068b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068b6:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <vTaskStartScheduler+0x88>)
 80068b8:	2201      	movs	r2, #1
 80068ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80068bc:	4b0f      	ldr	r3, [pc, #60]	; (80068fc <vTaskStartScheduler+0x8c>)
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068c2:	f7ff fb7f 	bl	8005fc4 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 80068c6:	e00c      	b.n	80068e2 <vTaskStartScheduler+0x72>
		configASSERT( xReturn );
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <vTaskStartScheduler+0x72>
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	e7fe      	b.n	80068e0 <vTaskStartScheduler+0x70>
}
 80068e2:	bf00      	nop
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	08008810 	.word	0x08008810
 80068f0:	08006c75 	.word	0x08006c75
 80068f4:	20007f08 	.word	0x20007f08
 80068f8:	20007ef4 	.word	0x20007ef4
 80068fc:	20007eec 	.word	0x20007eec

08006900 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006904:	4b04      	ldr	r3, [pc, #16]	; (8006918 <vTaskSuspendAll+0x18>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3301      	adds	r3, #1
 800690a:	4a03      	ldr	r2, [pc, #12]	; (8006918 <vTaskSuspendAll+0x18>)
 800690c:	6013      	str	r3, [r2, #0]
}
 800690e:	bf00      	nop
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	20007f0c 	.word	0x20007f0c

0800691c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006926:	4b3e      	ldr	r3, [pc, #248]	; (8006a20 <xTaskResumeAll+0x104>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <xTaskResumeAll+0x26>
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	607b      	str	r3, [r7, #4]
 8006940:	e7fe      	b.n	8006940 <xTaskResumeAll+0x24>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006942:	f7ff fbcb 	bl	80060dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006946:	4b36      	ldr	r3, [pc, #216]	; (8006a20 <xTaskResumeAll+0x104>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3b01      	subs	r3, #1
 800694c:	4a34      	ldr	r2, [pc, #208]	; (8006a20 <xTaskResumeAll+0x104>)
 800694e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006950:	4b33      	ldr	r3, [pc, #204]	; (8006a20 <xTaskResumeAll+0x104>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d15b      	bne.n	8006a10 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006958:	4b32      	ldr	r3, [pc, #200]	; (8006a24 <xTaskResumeAll+0x108>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d057      	beq.n	8006a10 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006960:	e02e      	b.n	80069c0 <xTaskResumeAll+0xa4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006962:	4b31      	ldr	r3, [pc, #196]	; (8006a28 <xTaskResumeAll+0x10c>)
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	60bb      	str	r3, [r7, #8]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	3318      	adds	r3, #24
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff fa8c 	bl	8005e8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	3304      	adds	r3, #4
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fa87 	bl	8005e8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006982:	2201      	movs	r2, #1
 8006984:	409a      	lsls	r2, r3
 8006986:	4b29      	ldr	r3, [pc, #164]	; (8006a2c <xTaskResumeAll+0x110>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4313      	orrs	r3, r2
 800698c:	4a27      	ldr	r2, [pc, #156]	; (8006a2c <xTaskResumeAll+0x110>)
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4a24      	ldr	r2, [pc, #144]	; (8006a30 <xTaskResumeAll+0x114>)
 800699e:	441a      	add	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4619      	mov	r1, r3
 80069a6:	4610      	mov	r0, r2
 80069a8:	f7ff fa13 	bl	8005dd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b0:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <xTaskResumeAll+0x118>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d302      	bcc.n	80069c0 <xTaskResumeAll+0xa4>
					{
						xYieldPending = pdTRUE;
 80069ba:	4b1f      	ldr	r3, [pc, #124]	; (8006a38 <xTaskResumeAll+0x11c>)
 80069bc:	2201      	movs	r2, #1
 80069be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069c0:	4b19      	ldr	r3, [pc, #100]	; (8006a28 <xTaskResumeAll+0x10c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1cc      	bne.n	8006962 <xTaskResumeAll+0x46>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 80069c8:	4b1c      	ldr	r3, [pc, #112]	; (8006a3c <xTaskResumeAll+0x120>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d011      	beq.n	80069f4 <xTaskResumeAll+0xd8>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80069d0:	e00c      	b.n	80069ec <xTaskResumeAll+0xd0>
					{
						if( xTaskIncrementTick() != pdFALSE )
 80069d2:	f000 f837 	bl	8006a44 <xTaskIncrementTick>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <xTaskResumeAll+0xc6>
						{
							xYieldPending = pdTRUE;
 80069dc:	4b16      	ldr	r3, [pc, #88]	; (8006a38 <xTaskResumeAll+0x11c>)
 80069de:	2201      	movs	r2, #1
 80069e0:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 80069e2:	4b16      	ldr	r3, [pc, #88]	; (8006a3c <xTaskResumeAll+0x120>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	4a14      	ldr	r2, [pc, #80]	; (8006a3c <xTaskResumeAll+0x120>)
 80069ea:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 80069ec:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <xTaskResumeAll+0x120>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1ee      	bne.n	80069d2 <xTaskResumeAll+0xb6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 80069f4:	4b10      	ldr	r3, [pc, #64]	; (8006a38 <xTaskResumeAll+0x11c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d109      	bne.n	8006a10 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069fc:	2301      	movs	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a00:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <xTaskResumeAll+0x124>)
 8006a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a10:	f7ff fb92 	bl	8006138 <vPortExitCritical>

	return xAlreadyYielded;
 8006a14:	68fb      	ldr	r3, [r7, #12]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20007f0c 	.word	0x20007f0c
 8006a24:	20007ee8 	.word	0x20007ee8
 8006a28:	20007ea8 	.word	0x20007ea8
 8006a2c:	20007ef0 	.word	0x20007ef0
 8006a30:	20007dec 	.word	0x20007dec
 8006a34:	20007de8 	.word	0x20007de8
 8006a38:	20007efc 	.word	0x20007efc
 8006a3c:	20007ef8 	.word	0x20007ef8
 8006a40:	e000ed04 	.word	0xe000ed04

08006a44 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a4e:	4b51      	ldr	r3, [pc, #324]	; (8006b94 <xTaskIncrementTick+0x150>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f040 808d 	bne.w	8006b72 <xTaskIncrementTick+0x12e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8006a58:	4b4f      	ldr	r3, [pc, #316]	; (8006b98 <xTaskIncrementTick+0x154>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	4a4e      	ldr	r2, [pc, #312]	; (8006b98 <xTaskIncrementTick+0x154>)
 8006a60:	6013      	str	r3, [r2, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006a62:	4b4d      	ldr	r3, [pc, #308]	; (8006b98 <xTaskIncrementTick+0x154>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d11f      	bne.n	8006aae <xTaskIncrementTick+0x6a>
			{
				taskSWITCH_DELAYED_LISTS();
 8006a6e:	4b4b      	ldr	r3, [pc, #300]	; (8006b9c <xTaskIncrementTick+0x158>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d009      	beq.n	8006a8c <xTaskIncrementTick+0x48>
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	603b      	str	r3, [r7, #0]
 8006a8a:	e7fe      	b.n	8006a8a <xTaskIncrementTick+0x46>
 8006a8c:	4b43      	ldr	r3, [pc, #268]	; (8006b9c <xTaskIncrementTick+0x158>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	4b43      	ldr	r3, [pc, #268]	; (8006ba0 <xTaskIncrementTick+0x15c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a41      	ldr	r2, [pc, #260]	; (8006b9c <xTaskIncrementTick+0x158>)
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	4a41      	ldr	r2, [pc, #260]	; (8006ba0 <xTaskIncrementTick+0x15c>)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	4b40      	ldr	r3, [pc, #256]	; (8006ba4 <xTaskIncrementTick+0x160>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	4a3f      	ldr	r2, [pc, #252]	; (8006ba4 <xTaskIncrementTick+0x160>)
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	f000 fa47 	bl	8006f3c <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8006aae:	4b3e      	ldr	r3, [pc, #248]	; (8006ba8 <xTaskIncrementTick+0x164>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d34d      	bcc.n	8006b54 <xTaskIncrementTick+0x110>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ab8:	4b38      	ldr	r3, [pc, #224]	; (8006b9c <xTaskIncrementTick+0x158>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <xTaskIncrementTick+0x82>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <xTaskIncrementTick+0x84>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d004      	beq.n	8006ad6 <xTaskIncrementTick+0x92>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8006acc:	4b36      	ldr	r3, [pc, #216]	; (8006ba8 <xTaskIncrementTick+0x164>)
 8006ace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ad2:	601a      	str	r2, [r3, #0]
						break;
 8006ad4:	e03e      	b.n	8006b54 <xTaskIncrementTick+0x110>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ad6:	4b31      	ldr	r3, [pc, #196]	; (8006b9c <xTaskIncrementTick+0x158>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d203      	bcs.n	8006af6 <xTaskIncrementTick+0xb2>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8006aee:	4a2e      	ldr	r2, [pc, #184]	; (8006ba8 <xTaskIncrementTick+0x164>)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6013      	str	r3, [r2, #0]
							break;
 8006af4:	e02e      	b.n	8006b54 <xTaskIncrementTick+0x110>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	3304      	adds	r3, #4
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff f9c6 	bl	8005e8c <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d004      	beq.n	8006b12 <xTaskIncrementTick+0xce>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	3318      	adds	r3, #24
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff f9bd 	bl	8005e8c <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b16:	2201      	movs	r2, #1
 8006b18:	409a      	lsls	r2, r3
 8006b1a:	4b24      	ldr	r3, [pc, #144]	; (8006bac <xTaskIncrementTick+0x168>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	4a22      	ldr	r2, [pc, #136]	; (8006bac <xTaskIncrementTick+0x168>)
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4a1f      	ldr	r2, [pc, #124]	; (8006bb0 <xTaskIncrementTick+0x16c>)
 8006b32:	441a      	add	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f7ff f949 	bl	8005dd2 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b44:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <xTaskIncrementTick+0x170>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d3b4      	bcc.n	8006ab8 <xTaskIncrementTick+0x74>
							{
								xSwitchRequired = pdTRUE;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	617b      	str	r3, [r7, #20]
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b52:	e7b1      	b.n	8006ab8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b54:	4b17      	ldr	r3, [pc, #92]	; (8006bb4 <xTaskIncrementTick+0x170>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5a:	4915      	ldr	r1, [pc, #84]	; (8006bb0 <xTaskIncrementTick+0x16c>)
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	440b      	add	r3, r1
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d907      	bls.n	8006b7c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e004      	b.n	8006b7c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b72:	4b11      	ldr	r3, [pc, #68]	; (8006bb8 <xTaskIncrementTick+0x174>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3301      	adds	r3, #1
 8006b78:	4a0f      	ldr	r2, [pc, #60]	; (8006bb8 <xTaskIncrementTick+0x174>)
 8006b7a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b7c:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <xTaskIncrementTick+0x178>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006b84:	2301      	movs	r3, #1
 8006b86:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b88:	697b      	ldr	r3, [r7, #20]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20007f0c 	.word	0x20007f0c
 8006b98:	20007eec 	.word	0x20007eec
 8006b9c:	20007ea0 	.word	0x20007ea0
 8006ba0:	20007ea4 	.word	0x20007ea4
 8006ba4:	20007f00 	.word	0x20007f00
 8006ba8:	20007f08 	.word	0x20007f08
 8006bac:	20007ef0 	.word	0x20007ef0
 8006bb0:	20007dec 	.word	0x20007dec
 8006bb4:	20007de8 	.word	0x20007de8
 8006bb8:	20007ef8 	.word	0x20007ef8
 8006bbc:	20007efc 	.word	0x20007efc

08006bc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bc6:	4b26      	ldr	r3, [pc, #152]	; (8006c60 <vTaskSwitchContext+0xa0>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bce:	4b25      	ldr	r3, [pc, #148]	; (8006c64 <vTaskSwitchContext+0xa4>)
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bd4:	e03e      	b.n	8006c54 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006bd6:	4b23      	ldr	r3, [pc, #140]	; (8006c64 <vTaskSwitchContext+0xa4>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006bdc:	4b22      	ldr	r3, [pc, #136]	; (8006c68 <vTaskSwitchContext+0xa8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	fab3 f383 	clz	r3, r3
 8006be8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006bea:	7afb      	ldrb	r3, [r7, #11]
 8006bec:	f1c3 031f 	rsb	r3, r3, #31
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	491e      	ldr	r1, [pc, #120]	; (8006c6c <vTaskSwitchContext+0xac>)
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <vTaskSwitchContext+0x5a>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	607b      	str	r3, [r7, #4]
 8006c18:	e7fe      	b.n	8006c18 <vTaskSwitchContext+0x58>
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4a11      	ldr	r2, [pc, #68]	; (8006c6c <vTaskSwitchContext+0xac>)
 8006c26:	4413      	add	r3, r2
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	605a      	str	r2, [r3, #4]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d104      	bne.n	8006c4a <vTaskSwitchContext+0x8a>
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	605a      	str	r2, [r3, #4]
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	4a07      	ldr	r2, [pc, #28]	; (8006c70 <vTaskSwitchContext+0xb0>)
 8006c52:	6013      	str	r3, [r2, #0]
}
 8006c54:	bf00      	nop
 8006c56:	371c      	adds	r7, #28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	20007f0c 	.word	0x20007f0c
 8006c64:	20007efc 	.word	0x20007efc
 8006c68:	20007ef0 	.word	0x20007ef0
 8006c6c:	20007dec 	.word	0x20007dec
 8006c70:	20007de8 	.word	0x20007de8

08006c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8006c7c:	f000 f8a6 	bl	8006dcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c80:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <prvIdleTask+0x28>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d9f9      	bls.n	8006c7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c88:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <prvIdleTask+0x2c>)
 8006c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c98:	e7f0      	b.n	8006c7c <prvIdleTask+0x8>
 8006c9a:	bf00      	nop
 8006c9c:	20007dec 	.word	0x20007dec
 8006ca0:	e000ed04 	.word	0xe000ed04

08006ca4 <prvInitialiseTCBVariables>:

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	617b      	str	r3, [r7, #20]
 8006cb6:	e012      	b.n	8006cde <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	7819      	ldrb	r1, [r3, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3334      	adds	r3, #52	; 0x34
 8006cc8:	460a      	mov	r2, r1
 8006cca:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d006      	beq.n	8006ce6 <prvInitialiseTCBVariables+0x42>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d9e9      	bls.n	8006cb8 <prvInitialiseTCBVariables+0x14>
 8006ce4:	e000      	b.n	8006ce8 <prvInitialiseTCBVariables+0x44>
		{
			break;
 8006ce6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b06      	cmp	r3, #6
 8006cf4:	d901      	bls.n	8006cfa <prvInitialiseTCBVariables+0x56>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cf6:	2306      	movs	r3, #6
 8006cf8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	64da      	str	r2, [r3, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff f851 	bl	8005db8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3318      	adds	r3, #24
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff f84c 	bl	8005db8 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f1c3 0207 	rsb	r2, r3, #7
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	655a      	str	r2, [r3, #84]	; 0x54
		pxTCB->eNotifyState = eNotWaitingNotification;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8006d44:	bf00      	nop
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d52:	2300      	movs	r3, #0
 8006d54:	607b      	str	r3, [r7, #4]
 8006d56:	e00c      	b.n	8006d72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4a12      	ldr	r2, [pc, #72]	; (8006dac <prvInitialiseTaskLists+0x60>)
 8006d64:	4413      	add	r3, r2
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff f806 	bl	8005d78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	607b      	str	r3, [r7, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b06      	cmp	r3, #6
 8006d76:	d9ef      	bls.n	8006d58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d78:	480d      	ldr	r0, [pc, #52]	; (8006db0 <prvInitialiseTaskLists+0x64>)
 8006d7a:	f7fe fffd 	bl	8005d78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d7e:	480d      	ldr	r0, [pc, #52]	; (8006db4 <prvInitialiseTaskLists+0x68>)
 8006d80:	f7fe fffa 	bl	8005d78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d84:	480c      	ldr	r0, [pc, #48]	; (8006db8 <prvInitialiseTaskLists+0x6c>)
 8006d86:	f7fe fff7 	bl	8005d78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d8a:	480c      	ldr	r0, [pc, #48]	; (8006dbc <prvInitialiseTaskLists+0x70>)
 8006d8c:	f7fe fff4 	bl	8005d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d90:	480b      	ldr	r0, [pc, #44]	; (8006dc0 <prvInitialiseTaskLists+0x74>)
 8006d92:	f7fe fff1 	bl	8005d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d96:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <prvInitialiseTaskLists+0x78>)
 8006d98:	4a05      	ldr	r2, [pc, #20]	; (8006db0 <prvInitialiseTaskLists+0x64>)
 8006d9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <prvInitialiseTaskLists+0x7c>)
 8006d9e:	4a05      	ldr	r2, [pc, #20]	; (8006db4 <prvInitialiseTaskLists+0x68>)
 8006da0:	601a      	str	r2, [r3, #0]
}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20007dec 	.word	0x20007dec
 8006db0:	20007e78 	.word	0x20007e78
 8006db4:	20007e8c 	.word	0x20007e8c
 8006db8:	20007ea8 	.word	0x20007ea8
 8006dbc:	20007ebc 	.word	0x20007ebc
 8006dc0:	20007ed4 	.word	0x20007ed4
 8006dc4:	20007ea0 	.word	0x20007ea0
 8006dc8:	20007ea4 	.word	0x20007ea4

08006dcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8006dd2:	e028      	b.n	8006e26 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8006dd4:	f7ff fd94 	bl	8006900 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006dd8:	4b17      	ldr	r3, [pc, #92]	; (8006e38 <prvCheckTasksWaitingTermination+0x6c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bf0c      	ite	eq
 8006de0:	2301      	moveq	r3, #1
 8006de2:	2300      	movne	r3, #0
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8006de8:	f7ff fd98 	bl	800691c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d119      	bne.n	8006e26 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8006df2:	f7ff f973 	bl	80060dc <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006df6:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <prvCheckTasksWaitingTermination+0x6c>)
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff f842 	bl	8005e8c <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006e08:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <prvCheckTasksWaitingTermination+0x70>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	4a0b      	ldr	r2, [pc, #44]	; (8006e3c <prvCheckTasksWaitingTermination+0x70>)
 8006e10:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8006e12:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <prvCheckTasksWaitingTermination+0x74>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	4a09      	ldr	r2, [pc, #36]	; (8006e40 <prvCheckTasksWaitingTermination+0x74>)
 8006e1a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8006e1c:	f7ff f98c 	bl	8006138 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8006e20:	6838      	ldr	r0, [r7, #0]
 8006e22:	f000 f87b 	bl	8006f1c <prvDeleteTCB>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8006e26:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <prvCheckTasksWaitingTermination+0x74>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1d2      	bne.n	8006dd4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20007ebc 	.word	0x20007ebc
 8006e3c:	20007ee8 	.word	0x20007ee8
 8006e40:	20007ed0 	.word	0x20007ed0

08006e44 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8006e4c:	4b13      	ldr	r3, [pc, #76]	; (8006e9c <prvAddCurrentTaskToDelayedList+0x58>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8006e54:	4b12      	ldr	r3, [pc, #72]	; (8006ea0 <prvAddCurrentTaskToDelayedList+0x5c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d209      	bcs.n	8006e72 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8006e5e:	4b11      	ldr	r3, [pc, #68]	; (8006ea4 <prvAddCurrentTaskToDelayedList+0x60>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <prvAddCurrentTaskToDelayedList+0x58>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	f7fe ffd5 	bl	8005e1a <vListInsert>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e70:	e010      	b.n	8006e94 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8006e72:	4b0d      	ldr	r3, [pc, #52]	; (8006ea8 <prvAddCurrentTaskToDelayedList+0x64>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	4b09      	ldr	r3, [pc, #36]	; (8006e9c <prvAddCurrentTaskToDelayedList+0x58>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4610      	mov	r0, r2
 8006e80:	f7fe ffcb 	bl	8005e1a <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 8006e84:	4b09      	ldr	r3, [pc, #36]	; (8006eac <prvAddCurrentTaskToDelayedList+0x68>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d202      	bcs.n	8006e94 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
 8006e8e:	4a07      	ldr	r2, [pc, #28]	; (8006eac <prvAddCurrentTaskToDelayedList+0x68>)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6013      	str	r3, [r2, #0]
}
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20007de8 	.word	0x20007de8
 8006ea0:	20007eec 	.word	0x20007eec
 8006ea4:	20007ea4 	.word	0x20007ea4
 8006ea8:	20007ea0 	.word	0x20007ea0
 8006eac:	20007f08 	.word	0x20007f08

08006eb0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	6039      	str	r1, [r7, #0]
 8006eba:	80fb      	strh	r3, [r7, #6]
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <prvAllocateTCBAndStack+0x20>
 8006ec2:	88fb      	ldrh	r3, [r7, #6]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff f9da 	bl	8006280 <pvPortMalloc>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	e000      	b.n	8006ed2 <prvAllocateTCBAndStack+0x22>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	60bb      	str	r3, [r7, #8]

		if( pxStack != NULL )
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00e      	beq.n	8006ef8 <prvAllocateTCBAndStack+0x48>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8006eda:	205c      	movs	r0, #92	; 0x5c
 8006edc:	f7ff f9d0 	bl	8006280 <pvPortMalloc>
 8006ee0:	60f8      	str	r0, [r7, #12]

			if( pxNewTCB != NULL )
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <prvAllocateTCBAndStack+0x40>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	631a      	str	r2, [r3, #48]	; 0x30
 8006eee:	e005      	b.n	8006efc <prvAllocateTCBAndStack+0x4c>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8006ef0:	68b8      	ldr	r0, [r7, #8]
 8006ef2:	f7ff fa87 	bl	8006404 <vPortFree>
 8006ef6:	e001      	b.n	8006efc <prvAllocateTCBAndStack+0x4c>
			}
		}
		else
		{
			pxNewTCB = NULL;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d007      	beq.n	8006f12 <prvAllocateTCBAndStack+0x62>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f06:	88fb      	ldrh	r3, [r7, #6]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	21a5      	movs	r1, #165	; 0xa5
 8006f0e:	f001 fc4d 	bl	80087ac <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
 8006f12:	68fb      	ldr	r3, [r7, #12]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff fa6b 	bl	8006404 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff fa68 	bl	8006404 <vPortFree>
	}
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f42:	4b0f      	ldr	r3, [pc, #60]	; (8006f80 <prvResetNextTaskUnblockTime+0x44>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <prvResetNextTaskUnblockTime+0x14>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e000      	b.n	8006f52 <prvResetNextTaskUnblockTime+0x16>
 8006f50:	2300      	movs	r3, #0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f56:	4b0b      	ldr	r3, [pc, #44]	; (8006f84 <prvResetNextTaskUnblockTime+0x48>)
 8006f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 8006f5e:	e008      	b.n	8006f72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <prvResetNextTaskUnblockTime+0x44>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	4a05      	ldr	r2, [pc, #20]	; (8006f84 <prvResetNextTaskUnblockTime+0x48>)
 8006f70:	6013      	str	r3, [r2, #0]
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20007ea0 	.word	0x20007ea0
 8006f84:	20007f08 	.word	0x20007f08

08006f88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f8e:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <xTaskGetSchedulerState+0x34>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d102      	bne.n	8006f9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f96:	2301      	movs	r3, #1
 8006f98:	607b      	str	r3, [r7, #4]
 8006f9a:	e008      	b.n	8006fae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f9c:	4b08      	ldr	r3, [pc, #32]	; (8006fc0 <xTaskGetSchedulerState+0x38>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d102      	bne.n	8006faa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	607b      	str	r3, [r7, #4]
 8006fa8:	e001      	b.n	8006fae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006faa:	2300      	movs	r3, #0
 8006fac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fae:	687b      	ldr	r3, [r7, #4]
	}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	20007ef4 	.word	0x20007ef4
 8006fc0:	20007f0c 	.word	0x20007f0c

08006fc4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006fd2:	f7ff f883 	bl	80060dc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
 8006fd6:	4b39      	ldr	r3, [pc, #228]	; (80070bc <xTaskNotifyWait+0xf8>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d03f      	beq.n	8007064 <xTaskNotifyWait+0xa0>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006fe4:	4b35      	ldr	r3, [pc, #212]	; (80070bc <xTaskNotifyWait+0xf8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	43d2      	mvns	r2, r2
 8006fee:	400a      	ands	r2, r1
 8006ff0:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8006ff2:	4b32      	ldr	r3, [pc, #200]	; (80070bc <xTaskNotifyWait+0xf8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d030      	beq.n	8007064 <xTaskNotifyWait+0xa0>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007002:	4b2e      	ldr	r3, [pc, #184]	; (80070bc <xTaskNotifyWait+0xf8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3304      	adds	r3, #4
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe ff3f 	bl	8005e8c <uxListRemove>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10b      	bne.n	800702c <xTaskNotifyWait+0x68>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007014:	4b29      	ldr	r3, [pc, #164]	; (80070bc <xTaskNotifyWait+0xf8>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	2201      	movs	r2, #1
 800701c:	fa02 f303 	lsl.w	r3, r2, r3
 8007020:	43da      	mvns	r2, r3
 8007022:	4b27      	ldr	r3, [pc, #156]	; (80070c0 <xTaskNotifyWait+0xfc>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4013      	ands	r3, r2
 8007028:	4a25      	ldr	r2, [pc, #148]	; (80070c0 <xTaskNotifyWait+0xfc>)
 800702a:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007032:	d107      	bne.n	8007044 <xTaskNotifyWait+0x80>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007034:	4b21      	ldr	r3, [pc, #132]	; (80070bc <xTaskNotifyWait+0xf8>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3304      	adds	r3, #4
 800703a:	4619      	mov	r1, r3
 800703c:	4821      	ldr	r0, [pc, #132]	; (80070c4 <xTaskNotifyWait+0x100>)
 800703e:	f7fe fec8 	bl	8005dd2 <vListInsertEnd>
 8007042:	e007      	b.n	8007054 <xTaskNotifyWait+0x90>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 8007044:	4b20      	ldr	r3, [pc, #128]	; (80070c8 <xTaskNotifyWait+0x104>)
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	4413      	add	r3, r2
 800704c:	613b      	str	r3, [r7, #16]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800704e:	6938      	ldr	r0, [r7, #16]
 8007050:	f7ff fef8 	bl	8006e44 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007054:	4b1d      	ldr	r3, [pc, #116]	; (80070cc <xTaskNotifyWait+0x108>)
 8007056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007064:	f7ff f868 	bl	8006138 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007068:	f7ff f838 	bl	80060dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d004      	beq.n	800707c <xTaskNotifyWait+0xb8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007072:	4b12      	ldr	r3, [pc, #72]	; (80070bc <xTaskNotifyWait+0xf8>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	601a      	str	r2, [r3, #0]

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 800707c:	4b0f      	ldr	r3, [pc, #60]	; (80070bc <xTaskNotifyWait+0xf8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b01      	cmp	r3, #1
 8007088:	d102      	bne.n	8007090 <xTaskNotifyWait+0xcc>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]
 800708e:	e008      	b.n	80070a2 <xTaskNotifyWait+0xde>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007090:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <xTaskNotifyWait+0xf8>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	43d2      	mvns	r2, r2
 800709a:	400a      	ands	r2, r1
 800709c:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800709e:	2301      	movs	r3, #1
 80070a0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80070a2:	4b06      	ldr	r3, [pc, #24]	; (80070bc <xTaskNotifyWait+0xf8>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80070ac:	f7ff f844 	bl	8006138 <vPortExitCritical>

		return xReturn;
 80070b0:	697b      	ldr	r3, [r7, #20]
	}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	20007de8 	.word	0x20007de8
 80070c0:	20007ef0 	.word	0x20007ef0
 80070c4:	20007ed4 	.word	0x20007ed4
 80070c8:	20007eec 	.word	0x20007eec
 80070cc:	e000ed04 	.word	0xe000ed04

080070d0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	; 0x28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80070e0:	2301      	movs	r3, #1
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( xTaskToNotify );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d109      	bne.n	80070fe <xTaskGenericNotify+0x2e>
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e7fe      	b.n	80070fc <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007102:	f7fe ffeb 	bl	80060dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	601a      	str	r2, [r3, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800711a:	77fb      	strb	r3, [r7, #31]

			pxTCB->eNotifyState = eNotified;
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	2b04      	cmp	r3, #4
 8007128:	d827      	bhi.n	800717a <xTaskGenericNotify+0xaa>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <xTaskGenericNotify+0x60>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	0800717b 	.word	0x0800717b
 8007134:	08007145 	.word	0x08007145
 8007138:	08007153 	.word	0x08007153
 800713c:	0800715f 	.word	0x0800715f
 8007140:	08007167 	.word	0x08007167
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	431a      	orrs	r2, r3
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007150:	e013      	b.n	800717a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800715c:	e00d      	b.n	800717a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007164:	e009      	b.n	800717a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 8007166:	7ffb      	ldrb	r3, [r7, #31]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d003      	beq.n	8007174 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007172:	e001      	b.n	8007178 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8007174:	2300      	movs	r3, #0
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007178:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800717a:	7ffb      	ldrb	r3, [r7, #31]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d138      	bne.n	80071f2 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	3304      	adds	r3, #4
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe fe81 	bl	8005e8c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	2201      	movs	r2, #1
 8007190:	409a      	lsls	r2, r3
 8007192:	4b1b      	ldr	r3, [pc, #108]	; (8007200 <xTaskGenericNotify+0x130>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4313      	orrs	r3, r2
 8007198:	4a19      	ldr	r2, [pc, #100]	; (8007200 <xTaskGenericNotify+0x130>)
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4a16      	ldr	r2, [pc, #88]	; (8007204 <xTaskGenericNotify+0x134>)
 80071aa:	441a      	add	r2, r3
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4619      	mov	r1, r3
 80071b2:	4610      	mov	r0, r2
 80071b4:	f7fe fe0d 	bl	8005dd2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d009      	beq.n	80071d4 <xTaskGenericNotify+0x104>
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	e7fe      	b.n	80071d2 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d8:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <xTaskGenericNotify+0x138>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071de:	429a      	cmp	r2, r3
 80071e0:	d907      	bls.n	80071f2 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80071e2:	4b0a      	ldr	r3, [pc, #40]	; (800720c <xTaskGenericNotify+0x13c>)
 80071e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80071f2:	f7fe ffa1 	bl	8006138 <vPortExitCritical>

		return xReturn;
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3728      	adds	r7, #40	; 0x28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20007ef0 	.word	0x20007ef0
 8007204:	20007dec 	.word	0x20007dec
 8007208:	20007de8 	.word	0x20007de8
 800720c:	e000ed04 	.word	0xe000ed04

08007210 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */


	hi2c1.Instance = I2C1;
 8007214:	4b15      	ldr	r3, [pc, #84]	; (800726c <MX_I2C1_SMBUS_Init+0x5c>)
 8007216:	4a16      	ldr	r2, [pc, #88]	; (8007270 <MX_I2C1_SMBUS_Init+0x60>)
 8007218:	601a      	str	r2, [r3, #0]
	hi2c1.Mode = HAL_I2C_MODE_MASTER;
 800721a:	4b14      	ldr	r3, [pc, #80]	; (800726c <MX_I2C1_SMBUS_Init+0x5c>)
 800721c:	2210      	movs	r2, #16
 800721e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	hi2c1.Init.Timing = 0xA0120227;
 8007222:	4b12      	ldr	r3, [pc, #72]	; (800726c <MX_I2C1_SMBUS_Init+0x5c>)
 8007224:	4a13      	ldr	r2, [pc, #76]	; (8007274 <MX_I2C1_SMBUS_Init+0x64>)
 8007226:	605a      	str	r2, [r3, #4]

	//hi2c1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
	hi2c1.Init.OwnAddress1 = 0;
 8007228:	4b10      	ldr	r3, [pc, #64]	; (800726c <MX_I2C1_SMBUS_Init+0x5c>)
 800722a:	2200      	movs	r2, #0
 800722c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 800722e:	4b0f      	ldr	r3, [pc, #60]	; (800726c <MX_I2C1_SMBUS_Init+0x5c>)
 8007230:	2201      	movs	r2, #1
 8007232:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <MX_I2C1_SMBUS_Init+0x5c>)
 8007236:	2200      	movs	r2, #0
 8007238:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <MX_I2C1_SMBUS_Init+0x5c>)
 800723c:	2200      	movs	r2, #0
 800723e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8007240:	4b0a      	ldr	r3, [pc, #40]	; (800726c <MX_I2C1_SMBUS_Init+0x5c>)
 8007242:	2200      	movs	r2, #0
 8007244:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <MX_I2C1_SMBUS_Init+0x5c>)
 8007248:	2200      	movs	r2, #0
 800724a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800724c:	4b07      	ldr	r3, [pc, #28]	; (800726c <MX_I2C1_SMBUS_Init+0x5c>)
 800724e:	2200      	movs	r2, #0
 8007250:	621a      	str	r2, [r3, #32]
	//hi2c1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
	//hi2c1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
	//hi2c1.Init.SMBusTimeout = 0x0000836E;
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007252:	4806      	ldr	r0, [pc, #24]	; (800726c <MX_I2C1_SMBUS_Init+0x5c>)
 8007254:	f7fb fbda 	bl	8002a0c <HAL_I2C_Init>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <MX_I2C1_SMBUS_Init+0x52>
	{
	Error_Handler();
 800725e:	f000 fed9 	bl	8008014 <Error_Handler>
	}

	HAL_I2C_MspInit(&hi2c1);
 8007262:	4802      	ldr	r0, [pc, #8]	; (800726c <MX_I2C1_SMBUS_Init+0x5c>)
 8007264:	f000 ff30 	bl	80080c8 <HAL_I2C_MspInit>

  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007268:	bf00      	nop
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20008038 	.word	0x20008038
 8007270:	40005400 	.word	0x40005400
 8007274:	a0120227 	.word	0xa0120227

08007278 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800727c:	4b15      	ldr	r3, [pc, #84]	; (80072d4 <MX_USART1_UART_Init+0x5c>)
 800727e:	4a16      	ldr	r2, [pc, #88]	; (80072d8 <MX_USART1_UART_Init+0x60>)
 8007280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8007282:	4b14      	ldr	r3, [pc, #80]	; (80072d4 <MX_USART1_UART_Init+0x5c>)
 8007284:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007288:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800728a:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <MX_USART1_UART_Init+0x5c>)
 800728c:	2200      	movs	r2, #0
 800728e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007290:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <MX_USART1_UART_Init+0x5c>)
 8007292:	2200      	movs	r2, #0
 8007294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007296:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <MX_USART1_UART_Init+0x5c>)
 8007298:	2200      	movs	r2, #0
 800729a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800729c:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <MX_USART1_UART_Init+0x5c>)
 800729e:	220c      	movs	r2, #12
 80072a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80072a2:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <MX_USART1_UART_Init+0x5c>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80072a8:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <MX_USART1_UART_Init+0x5c>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80072ae:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <MX_USART1_UART_Init+0x5c>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80072b4:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <MX_USART1_UART_Init+0x5c>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80072ba:	4806      	ldr	r0, [pc, #24]	; (80072d4 <MX_USART1_UART_Init+0x5c>)
 80072bc:	f7fe f86f 	bl	800539e <HAL_UART_Init>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80072c6:	f000 fea5 	bl	8008014 <Error_Handler>
  }

  HAL_UART_MspInit(&huart1);
 80072ca:	4802      	ldr	r0, [pc, #8]	; (80072d4 <MX_USART1_UART_Init+0x5c>)
 80072cc:	f000 ff4a 	bl	8008164 <HAL_UART_MspInit>

  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80072d0:	bf00      	nop
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20008108 	.word	0x20008108
 80072d8:	40013800 	.word	0x40013800

080072dc <initLEDs>:


void initLEDs(){
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e2:	1d3b      	adds	r3, r7, #4
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	605a      	str	r2, [r3, #4]
 80072ea:	609a      	str	r2, [r3, #8]
 80072ec:	60da      	str	r2, [r3, #12]
 80072ee:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 80072f0:	23f0      	movs	r3, #240	; 0xf0
 80072f2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072f4:	2301      	movs	r3, #1
 80072f6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f8:	2300      	movs	r3, #0
 80072fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072fc:	2300      	movs	r3, #0
 80072fe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007300:	1d3b      	adds	r3, r7, #4
 8007302:	4619      	mov	r1, r3
 8007304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007308:	f7fb f9d2 	bl	80026b0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800730c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007310:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007312:	2301      	movs	r3, #1
 8007314:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800731a:	2300      	movs	r3, #0
 800731c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800731e:	1d3b      	adds	r3, r7, #4
 8007320:	4619      	mov	r1, r3
 8007322:	4803      	ldr	r0, [pc, #12]	; (8007330 <initLEDs+0x54>)
 8007324:	f7fb f9c4 	bl	80026b0 <HAL_GPIO_Init>

}
 8007328:	bf00      	nop
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	48000400 	.word	0x48000400

08007334 <initButtons>:


void initButtons(){
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800733a:	1d3b      	adds	r3, r7, #4
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	605a      	str	r2, [r3, #4]
 8007342:	609a      	str	r2, [r3, #8]
 8007344:	60da      	str	r2, [r3, #12]
 8007346:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2 | GPIO_PIN_1 | GPIO_PIN_0 ;
 8007348:	230f      	movs	r3, #15
 800734a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800734c:	2300      	movs	r3, #0
 800734e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007354:	2300      	movs	r3, #0
 8007356:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007358:	1d3b      	adds	r3, r7, #4
 800735a:	4619      	mov	r1, r3
 800735c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007360:	f7fb f9a6 	bl	80026b0 <HAL_GPIO_Init>


}
 8007364:	bf00      	nop
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <Si7006_port_init>:





Si7006_error_t Si7006_port_init(void){
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0

}
 8007370:	bf00      	nop
 8007372:	4618      	mov	r0, r3
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <Si7006_port_i2c_init>:
Si7006_error_t Si7006_port_i2c_init(void){
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0

}
 8007380:	bf00      	nop
 8007382:	4618      	mov	r0, r3
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <Si7006_port_i2c_transmit>:
Si7006_error_t Si7006_port_i2c_transmit(uint8_t *data, unsigned int size){
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af02      	add	r7, sp, #8
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1,(0x40<<1) ,data,size, 1000);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	b29a      	uxth	r2, r3
 800739a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4613      	mov	r3, r2
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	2180      	movs	r1, #128	; 0x80
 80073a6:	4807      	ldr	r0, [pc, #28]	; (80073c4 <Si7006_port_i2c_transmit+0x38>)
 80073a8:	f7fb fbbe 	bl	8002b28 <HAL_I2C_Master_Transmit>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <Si7006_port_i2c_transmit+0x2e>
 80073b6:	2300      	movs	r3, #0
 80073b8:	e000      	b.n	80073bc <Si7006_port_i2c_transmit+0x30>
	else return SI7006_ERROR;
 80073ba:	2301      	movs	r3, #1
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	20008038 	.word	0x20008038

080073c8 <Si7006_port_i2c_receive>:
Si7006_error_t Si7006_port_i2c_receive(uint8_t *data, unsigned int size){
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c1,(0x40<<1) ,data,size, 1000);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	4613      	mov	r3, r2
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	2180      	movs	r1, #128	; 0x80
 80073e2:	4807      	ldr	r0, [pc, #28]	; (8007400 <Si7006_port_i2c_receive+0x38>)
 80073e4:	f7fb fca0 	bl	8002d28 <HAL_I2C_Master_Receive>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <Si7006_port_i2c_receive+0x2e>
 80073f2:	2300      	movs	r3, #0
 80073f4:	e000      	b.n	80073f8 <Si7006_port_i2c_receive+0x30>
	else return SI7006_ERROR;
 80073f6:	2301      	movs	r3, #1
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20008038 	.word	0x20008038

08007404 <Si7006_port_check_hardware>:
Si7006_error_t Si7006_port_check_hardware(){
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1,(0x40<<1), 1000, 1000);
 800740a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800740e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007412:	2180      	movs	r1, #128	; 0x80
 8007414:	4807      	ldr	r0, [pc, #28]	; (8007434 <Si7006_port_check_hardware+0x30>)
 8007416:	f7fb fd89 	bl	8002f2c <HAL_I2C_IsDeviceReady>
 800741a:	4603      	mov	r3, r0
 800741c:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 800741e:	79fb      	ldrb	r3, [r7, #7]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <Si7006_port_check_hardware+0x24>
 8007424:	2300      	movs	r3, #0
 8007426:	e000      	b.n	800742a <Si7006_port_check_hardware+0x26>
	else return SI7006_ERROR;
 8007428:	2301      	movs	r3, #1
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20008038 	.word	0x20008038

08007438 <Si7006_port_delay>:
Si7006_error_t Si7006_port_delay(unsigned int ms){
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]

	HAL_Delay(ms);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7fb f83b 	bl	80024bc <HAL_Delay>
}
 8007446:	bf00      	nop
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <RadioReset>:


NRF24L01p_RadioConfig_t NRF24L01p_RadioConfig;
NRF24L01p_RxPipeConfig_t RxPipeConfig[6];

void RadioReset(){
 8007450:	b590      	push	{r4, r7, lr}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0

	NRF24L01p_RadioConfig.DataReadyInterruptEnabled = 0;
 8007456:	4b48      	ldr	r3, [pc, #288]	; (8007578 <RadioReset+0x128>)
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]
	NRF24L01p_RadioConfig.DataSentInterruptFlagEnabled = 0;
 800745c:	4b46      	ldr	r3, [pc, #280]	; (8007578 <RadioReset+0x128>)
 800745e:	2200      	movs	r2, #0
 8007460:	705a      	strb	r2, [r3, #1]
	NRF24L01p_RadioConfig.MaxRetryInterruptFlagEnabled = 0;
 8007462:	4b45      	ldr	r3, [pc, #276]	; (8007578 <RadioReset+0x128>)
 8007464:	2200      	movs	r2, #0
 8007466:	709a      	strb	r2, [r3, #2]
	NRF24L01p_RadioConfig.Crc = CONFIG_CRC_16BIT;
 8007468:	4b43      	ldr	r3, [pc, #268]	; (8007578 <RadioReset+0x128>)
 800746a:	220c      	movs	r2, #12
 800746c:	70da      	strb	r2, [r3, #3]
	NRF24L01p_RadioConfig.AutoReTransmissionCount = 15;
 800746e:	4b42      	ldr	r3, [pc, #264]	; (8007578 <RadioReset+0x128>)
 8007470:	220f      	movs	r2, #15
 8007472:	711a      	strb	r2, [r3, #4]
	NRF24L01p_RadioConfig.AutoReTransmitDelayX250us = 15;
 8007474:	4b40      	ldr	r3, [pc, #256]	; (8007578 <RadioReset+0x128>)
 8007476:	220f      	movs	r2, #15
 8007478:	715a      	strb	r2, [r3, #5]
	NRF24L01p_RadioConfig.frequencyOffset = 2;
 800747a:	4b3f      	ldr	r3, [pc, #252]	; (8007578 <RadioReset+0x128>)
 800747c:	2202      	movs	r2, #2
 800747e:	719a      	strb	r2, [r3, #6]
	NRF24L01p_RadioConfig.datarate = RF_SETUP_RF_DR_2MBPS;
 8007480:	4b3d      	ldr	r3, [pc, #244]	; (8007578 <RadioReset+0x128>)
 8007482:	2208      	movs	r2, #8
 8007484:	71da      	strb	r2, [r3, #7]
	NRF24L01p_RadioConfig.RfPower = RF_SETUP_RF_PWR_0DBM;
 8007486:	4b3c      	ldr	r3, [pc, #240]	; (8007578 <RadioReset+0x128>)
 8007488:	2206      	movs	r2, #6
 800748a:	721a      	strb	r2, [r3, #8]
	NRF24L01p_RadioConfig.PllLock = 0;
 800748c:	4b3a      	ldr	r3, [pc, #232]	; (8007578 <RadioReset+0x128>)
 800748e:	2200      	movs	r2, #0
 8007490:	725a      	strb	r2, [r3, #9]
	NRF24L01p_RadioConfig.ContWaveEnabled = 0;
 8007492:	4b39      	ldr	r3, [pc, #228]	; (8007578 <RadioReset+0x128>)
 8007494:	2200      	movs	r2, #0
 8007496:	729a      	strb	r2, [r3, #10]
	NRF24L01p_RadioConfig.FeatureDynamicPayloadEnabled = 1;
 8007498:	4b37      	ldr	r3, [pc, #220]	; (8007578 <RadioReset+0x128>)
 800749a:	2201      	movs	r2, #1
 800749c:	72da      	strb	r2, [r3, #11]
	NRF24L01p_RadioConfig.FeaturePayloadWithAckEnabled = 1;
 800749e:	4b36      	ldr	r3, [pc, #216]	; (8007578 <RadioReset+0x128>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	731a      	strb	r2, [r3, #12]
	NRF24L01p_RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
 80074a4:	4b34      	ldr	r3, [pc, #208]	; (8007578 <RadioReset+0x128>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	735a      	strb	r2, [r3, #13]

    RxPipeConfig[0].address = 0x11223344EE;
 80074aa:	4a34      	ldr	r2, [pc, #208]	; (800757c <RadioReset+0x12c>)
 80074ac:	a426      	add	r4, pc, #152	; (adr r4, 8007548 <RadioReset+0xf8>)
 80074ae:	cc18      	ldmia	r4, {r3, r4}
 80074b0:	e9c2 3402 	strd	r3, r4, [r2, #8]
    RxPipeConfig[1].address = 0x9A4524CE01;
 80074b4:	4a31      	ldr	r2, [pc, #196]	; (800757c <RadioReset+0x12c>)
 80074b6:	a426      	add	r4, pc, #152	; (adr r4, 8007550 <RadioReset+0x100>)
 80074b8:	cc18      	ldmia	r4, {r3, r4}
 80074ba:	e9c2 3408 	strd	r3, r4, [r2, #32]
    RxPipeConfig[2].address = 0x9A4524CE02;
 80074be:	4a2f      	ldr	r2, [pc, #188]	; (800757c <RadioReset+0x12c>)
 80074c0:	a425      	add	r4, pc, #148	; (adr r4, 8007558 <RadioReset+0x108>)
 80074c2:	cc18      	ldmia	r4, {r3, r4}
 80074c4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    RxPipeConfig[3].address = 0x9A4524CE03;
 80074c8:	4a2c      	ldr	r2, [pc, #176]	; (800757c <RadioReset+0x12c>)
 80074ca:	a425      	add	r4, pc, #148	; (adr r4, 8007560 <RadioReset+0x110>)
 80074cc:	cc18      	ldmia	r4, {r3, r4}
 80074ce:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    RxPipeConfig[4].address = 0x9A4524CE04;
 80074d2:	4a2a      	ldr	r2, [pc, #168]	; (800757c <RadioReset+0x12c>)
 80074d4:	a424      	add	r4, pc, #144	; (adr r4, 8007568 <RadioReset+0x118>)
 80074d6:	cc18      	ldmia	r4, {r3, r4}
 80074d8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    RxPipeConfig[5].address = 0x9A4524CE05;
 80074dc:	4a27      	ldr	r2, [pc, #156]	; (800757c <RadioReset+0x12c>)
 80074de:	a424      	add	r4, pc, #144	; (adr r4, 8007570 <RadioReset+0x120>)
 80074e0:	cc18      	ldmia	r4, {r3, r4}
 80074e2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80


	int i;
	for(i=0;i<6;i++){
 80074e6:	2300      	movs	r3, #0
 80074e8:	607b      	str	r3, [r7, #4]
 80074ea:	e01f      	b.n	800752c <RadioReset+0xdc>
		RxPipeConfig[i].PipeEnabled = 1;
 80074ec:	4923      	ldr	r1, [pc, #140]	; (800757c <RadioReset+0x12c>)
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	4613      	mov	r3, r2
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	4413      	add	r3, r2
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	440b      	add	r3, r1
 80074fa:	2201      	movs	r2, #1
 80074fc:	701a      	strb	r2, [r3, #0]
		RxPipeConfig[i].autoAckEnabled = 1;
 80074fe:	491f      	ldr	r1, [pc, #124]	; (800757c <RadioReset+0x12c>)
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	4613      	mov	r3, r2
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	4413      	add	r3, r2
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	440b      	add	r3, r1
 800750c:	3301      	adds	r3, #1
 800750e:	2201      	movs	r2, #1
 8007510:	701a      	strb	r2, [r3, #0]
		RxPipeConfig[i].dynamicPayloadEnabled = 1;
 8007512:	491a      	ldr	r1, [pc, #104]	; (800757c <RadioReset+0x12c>)
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	4613      	mov	r3, r2
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	4413      	add	r3, r2
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	440b      	add	r3, r1
 8007520:	3311      	adds	r3, #17
 8007522:	2201      	movs	r2, #1
 8007524:	701a      	strb	r2, [r3, #0]
	for(i=0;i<6;i++){
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3301      	adds	r3, #1
 800752a:	607b      	str	r3, [r7, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b05      	cmp	r3, #5
 8007530:	dddc      	ble.n	80074ec <RadioReset+0x9c>
	}


	NRF24L01p_ResetConfigValues(&NRF24L01p_RadioConfig, RxPipeConfig);
 8007532:	4912      	ldr	r1, [pc, #72]	; (800757c <RadioReset+0x12c>)
 8007534:	4810      	ldr	r0, [pc, #64]	; (8007578 <RadioReset+0x128>)
 8007536:	f7f9 fe8f 	bl	8001258 <NRF24L01p_ResetConfigValues>
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	bd90      	pop	{r4, r7, pc}
 8007542:	bf00      	nop
 8007544:	f3af 8000 	nop.w
 8007548:	223344ee 	.word	0x223344ee
 800754c:	00000011 	.word	0x00000011
 8007550:	4524ce01 	.word	0x4524ce01
 8007554:	0000009a 	.word	0x0000009a
 8007558:	4524ce02 	.word	0x4524ce02
 800755c:	0000009a 	.word	0x0000009a
 8007560:	4524ce03 	.word	0x4524ce03
 8007564:	0000009a 	.word	0x0000009a
 8007568:	4524ce04 	.word	0x4524ce04
 800756c:	0000009a 	.word	0x0000009a
 8007570:	4524ce05 	.word	0x4524ce05
 8007574:	0000009a 	.word	0x0000009a
 8007578:	20008178 	.word	0x20008178
 800757c:	20007fa0 	.word	0x20007fa0

08007580 <custom_print>:

static void custom_print(char *str){
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str),0xFFFF);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7f8 fe21 	bl	80001d0 <strlen>
 800758e:	4603      	mov	r3, r0
 8007590:	b29a      	uxth	r2, r3
 8007592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	4803      	ldr	r0, [pc, #12]	; (80075a8 <custom_print+0x28>)
 800759a:	f7fd ff51 	bl	8005440 <HAL_UART_Transmit>

}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20008108 	.word	0x20008108

080075ac <xNotification>:
		}
	}
}


void xNotification( void *pvParameters ){
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifiedValue;
	while(1){

		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 80075b4:	f107 020c 	add.w	r2, r7, #12
 80075b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80075c0:	2000      	movs	r0, #0
 80075c2:	f7ff fcff 	bl	8006fc4 <xTaskNotifyWait>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d10e      	bne.n	80075ea <xNotification+0x3e>
						//DigitalPin_ClearValue(&led1);
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80075cc:	2201      	movs	r2, #1
 80075ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075d2:	4808      	ldr	r0, [pc, #32]	; (80075f4 <xNotification+0x48>)
 80075d4:	f7fb fa02 	bl	80029dc <HAL_GPIO_WritePin>
						vTaskDelay(200);
 80075d8:	20c8      	movs	r0, #200	; 0xc8
 80075da:	f7ff f8f7 	bl	80067cc <vTaskDelay>
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80075de:	2200      	movs	r2, #0
 80075e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075e4:	4803      	ldr	r0, [pc, #12]	; (80075f4 <xNotification+0x48>)
 80075e6:	f7fb f9f9 	bl	80029dc <HAL_GPIO_WritePin>

						//DigitalPin_SetValue(&led1);
		}

		vTaskDelay(100);
 80075ea:	2064      	movs	r0, #100	; 0x64
 80075ec:	f7ff f8ee 	bl	80067cc <vTaskDelay>
		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 80075f0:	e7e0      	b.n	80075b4 <xNotification+0x8>
 80075f2:	bf00      	nop
 80075f4:	48000400 	.word	0x48000400

080075f8 <xButtons>:
		vTaskDelay(100);

	}
}

void xButtons (void *pvParameters) {
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]

	initButtons();
 8007600:	f7ff fe98 	bl	8007334 <initButtons>
	printf("this is button loop\r\n");
 8007604:	4819      	ldr	r0, [pc, #100]	; (800766c <xButtons+0x74>)
 8007606:	f001 f881 	bl	800870c <puts>
	while(1){
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0){
 800760a:	2101      	movs	r1, #1
 800760c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007610:	f7fb f9cc 	bl	80029ac <HAL_GPIO_ReadPin>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d102      	bne.n	8007620 <xButtons+0x28>
			custom_print("you pressed button D\r\n");
 800761a:	4815      	ldr	r0, [pc, #84]	; (8007670 <xButtons+0x78>)
 800761c:	f7ff ffb0 	bl	8007580 <custom_print>

		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 8007620:	2102      	movs	r1, #2
 8007622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007626:	f7fb f9c1 	bl	80029ac <HAL_GPIO_ReadPin>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <xButtons+0x3e>
			custom_print("you pressed button C\r\n");
 8007630:	4810      	ldr	r0, [pc, #64]	; (8007674 <xButtons+0x7c>)
 8007632:	f7ff ffa5 	bl	8007580 <custom_print>

		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0){
 8007636:	2104      	movs	r1, #4
 8007638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800763c:	f7fb f9b6 	bl	80029ac <HAL_GPIO_ReadPin>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d102      	bne.n	800764c <xButtons+0x54>
			custom_print("you pressed button B\r\n");
 8007646:	480c      	ldr	r0, [pc, #48]	; (8007678 <xButtons+0x80>)
 8007648:	f7ff ff9a 	bl	8007580 <custom_print>

		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0){
 800764c:	2108      	movs	r1, #8
 800764e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007652:	f7fb f9ab 	bl	80029ac <HAL_GPIO_ReadPin>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d102      	bne.n	8007662 <xButtons+0x6a>
			custom_print("you pressed button A\r\n");
 800765c:	4807      	ldr	r0, [pc, #28]	; (800767c <xButtons+0x84>)
 800765e:	f7ff ff8f 	bl	8007580 <custom_print>

		}

		vTaskDelay(200);
 8007662:	20c8      	movs	r0, #200	; 0xc8
 8007664:	f7ff f8b2 	bl	80067cc <vTaskDelay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0){
 8007668:	e7cf      	b.n	800760a <xButtons+0x12>
 800766a:	bf00      	nop
 800766c:	08008918 	.word	0x08008918
 8007670:	08008930 	.word	0x08008930
 8007674:	08008948 	.word	0x08008948
 8007678:	08008960 	.word	0x08008960
 800767c:	08008978 	.word	0x08008978

08007680 <LED_Control>:

	}
}


void LED_Control(uint8_t id, uint8_t val){
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	460a      	mov	r2, r1
 800768a:	71fb      	strb	r3, [r7, #7]
 800768c:	4613      	mov	r3, r2
 800768e:	71bb      	strb	r3, [r7, #6]
	switch(id){
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	3b30      	subs	r3, #48	; 0x30
 8007694:	2b03      	cmp	r3, #3
 8007696:	d84f      	bhi.n	8007738 <LED_Control+0xb8>
 8007698:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <LED_Control+0x20>)
 800769a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769e:	bf00      	nop
 80076a0:	080076b1 	.word	0x080076b1
 80076a4:	080076d3 	.word	0x080076d3
 80076a8:	080076f5 	.word	0x080076f5
 80076ac:	08007717 	.word	0x08007717
	//HAL_GPIO_WritePin (GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
	//HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, GPIO_PIN_SET);


	case '0': {
		if(val == '0') HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80076b0:	79bb      	ldrb	r3, [r7, #6]
 80076b2:	2b30      	cmp	r3, #48	; 0x30
 80076b4:	d106      	bne.n	80076c4 <LED_Control+0x44>
 80076b6:	2200      	movs	r2, #0
 80076b8:	2110      	movs	r1, #16
 80076ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076be:	f7fb f98d 	bl	80029dc <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
		break;}
 80076c2:	e03a      	b.n	800773a <LED_Control+0xba>
		else HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80076c4:	2201      	movs	r2, #1
 80076c6:	2110      	movs	r1, #16
 80076c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076cc:	f7fb f986 	bl	80029dc <HAL_GPIO_WritePin>
		break;}
 80076d0:	e033      	b.n	800773a <LED_Control+0xba>
	case '1': {
		if(val == '0') HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80076d2:	79bb      	ldrb	r3, [r7, #6]
 80076d4:	2b30      	cmp	r3, #48	; 0x30
 80076d6:	d106      	bne.n	80076e6 <LED_Control+0x66>
 80076d8:	2200      	movs	r2, #0
 80076da:	2120      	movs	r1, #32
 80076dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076e0:	f7fb f97c 	bl	80029dc <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		break;}
 80076e4:	e029      	b.n	800773a <LED_Control+0xba>
		else HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80076e6:	2201      	movs	r2, #1
 80076e8:	2120      	movs	r1, #32
 80076ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076ee:	f7fb f975 	bl	80029dc <HAL_GPIO_WritePin>
		break;}
 80076f2:	e022      	b.n	800773a <LED_Control+0xba>
	case '2': {
		if(val == '0') HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80076f4:	79bb      	ldrb	r3, [r7, #6]
 80076f6:	2b30      	cmp	r3, #48	; 0x30
 80076f8:	d106      	bne.n	8007708 <LED_Control+0x88>
 80076fa:	2200      	movs	r2, #0
 80076fc:	2140      	movs	r1, #64	; 0x40
 80076fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007702:	f7fb f96b 	bl	80029dc <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
		break;}
 8007706:	e018      	b.n	800773a <LED_Control+0xba>
		else HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8007708:	2201      	movs	r2, #1
 800770a:	2140      	movs	r1, #64	; 0x40
 800770c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007710:	f7fb f964 	bl	80029dc <HAL_GPIO_WritePin>
		break;}
 8007714:	e011      	b.n	800773a <LED_Control+0xba>
	case '3': {
		if(val == '0') HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8007716:	79bb      	ldrb	r3, [r7, #6]
 8007718:	2b30      	cmp	r3, #48	; 0x30
 800771a:	d106      	bne.n	800772a <LED_Control+0xaa>
 800771c:	2200      	movs	r2, #0
 800771e:	2180      	movs	r1, #128	; 0x80
 8007720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007724:	f7fb f95a 	bl	80029dc <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
		break;}
 8007728:	e007      	b.n	800773a <LED_Control+0xba>
		else HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800772a:	2201      	movs	r2, #1
 800772c:	2180      	movs	r1, #128	; 0x80
 800772e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007732:	f7fb f953 	bl	80029dc <HAL_GPIO_WritePin>
		break;}
 8007736:	e000      	b.n	800773a <LED_Control+0xba>

	default: break;
 8007738:	bf00      	nop
	}
}
 800773a:	bf00      	nop
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	0000      	movs	r0, r0
	...

08007748 <xRxNode>:


void xRxNode( void *pvParameters ){
 8007748:	b5b0      	push	{r4, r5, r7, lr}
 800774a:	b0c4      	sub	sp, #272	; 0x110
 800774c:	af00      	add	r7, sp, #0
 800774e:	1d3b      	adds	r3, r7, #4
 8007750:	6018      	str	r0, [r3, #0]




	graphic_lcd_write(0, 0, "RX NODE");
 8007752:	4acd      	ldr	r2, [pc, #820]	; (8007a88 <xRxNode+0x340>)
 8007754:	2100      	movs	r1, #0
 8007756:	2000      	movs	r0, #0
 8007758:	f7f9 fc26 	bl	8000fa8 <graphic_lcd_write>
	vTaskDelay(1000);
 800775c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007760:	f7ff f834 	bl	80067cc <vTaskDelay>
	graphic_lcd_clear_screen();
 8007764:	f7f9 fbf8 	bl	8000f58 <graphic_lcd_clear_screen>

	RadioReset();
 8007768:	f7ff fe72 	bl	8007450 <RadioReset>

	char myMesg[32];

	Rxpayload.UseAck = 1;
 800776c:	4bc7      	ldr	r3, [pc, #796]	; (8007a8c <xRxNode+0x344>)
 800776e:	2201      	movs	r2, #1
 8007770:	725a      	strb	r2, [r3, #9]


	Rxpayload.address = 0x11223344EE;
 8007772:	4ac6      	ldr	r2, [pc, #792]	; (8007a8c <xRxNode+0x344>)
 8007774:	a4c2      	add	r4, pc, #776	; (adr r4, 8007a80 <xRxNode+0x338>)
 8007776:	cc18      	ldmia	r4, {r3, r4}
 8007778:	e882 0018 	stmia.w	r2, {r3, r4}
	Rxpayload.data = (uint8_t*)myMesg;
 800777c:	4ac3      	ldr	r2, [pc, #780]	; (8007a8c <xRxNode+0x344>)
 800777e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007782:	60d3      	str	r3, [r2, #12]
	Rxpayload.length = strlen(myMesg);
 8007784:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007788:	4618      	mov	r0, r3
 800778a:	f7f8 fd21 	bl	80001d0 <strlen>
 800778e:	4602      	mov	r2, r0
 8007790:	4bbe      	ldr	r3, [pc, #760]	; (8007a8c <xRxNode+0x344>)
 8007792:	611a      	str	r2, [r3, #16]
	Rxpayload.retransmitCount = 15;
 8007794:	4bbd      	ldr	r3, [pc, #756]	; (8007a8c <xRxNode+0x344>)
 8007796:	220f      	movs	r2, #15
 8007798:	751a      	strb	r2, [r3, #20]


	Si7006_t sensor;
	sensor.init = Si7006_port_init;
 800779a:	4bbd      	ldr	r3, [pc, #756]	; (8007a90 <xRxNode+0x348>)
 800779c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sensor.i2c_init = Si7006_port_i2c_init;
 80077a0:	4bbc      	ldr	r3, [pc, #752]	; (8007a94 <xRxNode+0x34c>)
 80077a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sensor.i2c_transmit = Si7006_port_i2c_transmit;
 80077a6:	4bbc      	ldr	r3, [pc, #752]	; (8007a98 <xRxNode+0x350>)
 80077a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	sensor.i2c_receive = Si7006_port_i2c_receive;
 80077ac:	4bbb      	ldr	r3, [pc, #748]	; (8007a9c <xRxNode+0x354>)
 80077ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	sensor.check_hardware = Si7006_port_check_hardware;
 80077b2:	4bbb      	ldr	r3, [pc, #748]	; (8007aa0 <xRxNode+0x358>)
 80077b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	sensor.delay = Si7006_port_delay;
 80077b8:	4bba      	ldr	r3, [pc, #744]	; (8007aa4 <xRxNode+0x35c>)
 80077ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc


	graphic_lcd_write(0, 0, "PRESS ANY BUTTON");
 80077be:	4aba      	ldr	r2, [pc, #744]	; (8007aa8 <xRxNode+0x360>)
 80077c0:	2100      	movs	r1, #0
 80077c2:	2000      	movs	r0, #0
 80077c4:	f7f9 fbf0 	bl	8000fa8 <graphic_lcd_write>
	graphic_lcd_write(3, 0, "A     B     C     D");
 80077c8:	4ab8      	ldr	r2, [pc, #736]	; (8007aac <xRxNode+0x364>)
 80077ca:	2100      	movs	r1, #0
 80077cc:	2003      	movs	r0, #3
 80077ce:	f7f9 fbeb 	bl	8000fa8 <graphic_lcd_write>


	while(1){

		int xCount = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0){
 80077d8:	2108      	movs	r1, #8
 80077da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077de:	f7fb f8e5 	bl	80029ac <HAL_GPIO_ReadPin>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d16d      	bne.n	80078c4 <xRxNode+0x17c>

			float temperature = Si7006_temperature(&sensor);
 80077e8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fa fd63 	bl	80022b8 <Si7006_temperature>
 80077f2:	ed87 0a41 	vstr	s0, [r7, #260]	; 0x104

			int tempInteger = (int)temperature;
 80077f6:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 80077fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077fe:	ee17 3a90 	vmov	r3, s15
 8007802:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			int tempDecimel = ((float)temperature - (int)temperature)*100;
 8007806:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 800780a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800780e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007812:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8007816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800781a:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8007ab0 <xRxNode+0x368>
 800781e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007826:	ee17 3a90 	vmov	r3, s15
 800782a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

			char tempString[30];
			char tempString2[30];
			sprintf(tempString, "Temp: %d.%d deg C", tempInteger,tempDecimel );
 800782e:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8007832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007836:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800783a:	499e      	ldr	r1, [pc, #632]	; (8007ab4 <xRxNode+0x36c>)
 800783c:	f000 ff06 	bl	800864c <siprintf>
			sprintf(tempString2, "%d.%d deg C", tempInteger,tempDecimel );
 8007840:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8007844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007848:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800784c:	499a      	ldr	r1, [pc, #616]	; (8007ab8 <xRxNode+0x370>)
 800784e:	f000 fefd 	bl	800864c <siprintf>
			graphic_lcd_clear_screen();
 8007852:	f7f9 fb81 	bl	8000f58 <graphic_lcd_clear_screen>
			graphic_lcd_write(0, 0, "temperature:");
 8007856:	4a99      	ldr	r2, [pc, #612]	; (8007abc <xRxNode+0x374>)
 8007858:	2100      	movs	r1, #0
 800785a:	2000      	movs	r0, #0
 800785c:	f7f9 fba4 	bl	8000fa8 <graphic_lcd_write>
			graphic_lcd_write(1, 0,tempString2);
 8007860:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007864:	461a      	mov	r2, r3
 8007866:	2100      	movs	r1, #0
 8007868:	2001      	movs	r0, #1
 800786a:	f7f9 fb9d 	bl	8000fa8 <graphic_lcd_write>


			sprintf(TxData, tempString);
 800786e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007872:	4619      	mov	r1, r3
 8007874:	4892      	ldr	r0, [pc, #584]	; (8007ac0 <xRxNode+0x378>)
 8007876:	f000 fee9 	bl	800864c <siprintf>
			//TxPayload.data = tempString;
			TxPayload.data = TxData;
 800787a:	4b92      	ldr	r3, [pc, #584]	; (8007ac4 <xRxNode+0x37c>)
 800787c:	4a90      	ldr	r2, [pc, #576]	; (8007ac0 <xRxNode+0x378>)
 800787e:	60da      	str	r2, [r3, #12]
			TxPayload.UseAck = 1;
 8007880:	4b90      	ldr	r3, [pc, #576]	; (8007ac4 <xRxNode+0x37c>)
 8007882:	2201      	movs	r2, #1
 8007884:	725a      	strb	r2, [r3, #9]
			TxPayload.length = strlen(tempString);
 8007886:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800788a:	4618      	mov	r0, r3
 800788c:	f7f8 fca0 	bl	80001d0 <strlen>
 8007890:	4602      	mov	r2, r0
 8007892:	4b8c      	ldr	r3, [pc, #560]	; (8007ac4 <xRxNode+0x37c>)
 8007894:	611a      	str	r2, [r3, #16]
			//TxPayload.length = strlen(tempString);
			TxPayload.address = 0x11223344EE;
 8007896:	4a8b      	ldr	r2, [pc, #556]	; (8007ac4 <xRxNode+0x37c>)
 8007898:	a479      	add	r4, pc, #484	; (adr r4, 8007a80 <xRxNode+0x338>)
 800789a:	cc18      	ldmia	r4, {r3, r4}
 800789c:	e882 0018 	stmia.w	r2, {r3, r4}

			NRF24L01p_writePayload(&TxPayload);
 80078a0:	4888      	ldr	r0, [pc, #544]	; (8007ac4 <xRxNode+0x37c>)
 80078a2:	f7f9 fe53 	bl	800154c <NRF24L01p_writePayload>
			NRF24L01p_ErrorStatus_t ret = NRF24L01p_TransmitPayload(&TxPayload);
 80078a6:	4887      	ldr	r0, [pc, #540]	; (8007ac4 <xRxNode+0x37c>)
 80078a8:	f7f9 feb4 	bl	8001614 <NRF24L01p_TransmitPayload>
 80078ac:	4603      	mov	r3, r0
 80078ae:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb

			if(ret == NRF24L01P_ERROR){
 80078b2:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d104      	bne.n	80078c4 <xRxNode+0x17c>
				graphic_lcd_write(3, 0, "Transmission Error");
 80078ba:	4a83      	ldr	r2, [pc, #524]	; (8007ac8 <xRxNode+0x380>)
 80078bc:	2100      	movs	r1, #0
 80078be:	2003      	movs	r0, #3
 80078c0:	f7f9 fb72 	bl	8000fa8 <graphic_lcd_write>




		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0){
 80078c4:	2104      	movs	r1, #4
 80078c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078ca:	f7fb f86f 	bl	80029ac <HAL_GPIO_ReadPin>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d16d      	bne.n	80079b0 <xRxNode+0x268>

			float relativeHumidity = Si7006_relativeHumidity(&sensor);
 80078d4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fa fd4b 	bl	8002374 <Si7006_relativeHumidity>
 80078de:	ed87 0a3d 	vstr	s0, [r7, #244]	; 0xf4
			int tempInteger = (int)relativeHumidity;
 80078e2:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 80078e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078ea:	ee17 3a90 	vmov	r3, s15
 80078ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			int tempDecimel = ((float)relativeHumidity - (int)relativeHumidity)*100;
 80078f2:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 80078f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078fe:	ed97 7a3d 	vldr	s14, [r7, #244]	; 0xf4
 8007902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007906:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8007ab0 <xRxNode+0x368>
 800790a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800790e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007912:	ee17 3a90 	vmov	r3, s15
 8007916:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

			char tempString[30];
			char tempString2[30];
			sprintf(tempString, "Humidity: %d.%d percent", tempInteger,tempDecimel );
 800791a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800791e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007922:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007926:	4969      	ldr	r1, [pc, #420]	; (8007acc <xRxNode+0x384>)
 8007928:	f000 fe90 	bl	800864c <siprintf>
			sprintf(tempString2, "%d.%d percent", tempInteger,tempDecimel );
 800792c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007930:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007934:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007938:	4965      	ldr	r1, [pc, #404]	; (8007ad0 <xRxNode+0x388>)
 800793a:	f000 fe87 	bl	800864c <siprintf>
			graphic_lcd_clear_screen();
 800793e:	f7f9 fb0b 	bl	8000f58 <graphic_lcd_clear_screen>
			graphic_lcd_write(0, 0, "relative humidity:");
 8007942:	4a64      	ldr	r2, [pc, #400]	; (8007ad4 <xRxNode+0x38c>)
 8007944:	2100      	movs	r1, #0
 8007946:	2000      	movs	r0, #0
 8007948:	f7f9 fb2e 	bl	8000fa8 <graphic_lcd_write>
			graphic_lcd_write(1, 0,tempString2);
 800794c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007950:	461a      	mov	r2, r3
 8007952:	2100      	movs	r1, #0
 8007954:	2001      	movs	r0, #1
 8007956:	f7f9 fb27 	bl	8000fa8 <graphic_lcd_write>


			sprintf(TxData, tempString);
 800795a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800795e:	4619      	mov	r1, r3
 8007960:	4857      	ldr	r0, [pc, #348]	; (8007ac0 <xRxNode+0x378>)
 8007962:	f000 fe73 	bl	800864c <siprintf>
			//TxPayload.data = tempString;
			TxPayload.data = TxData;
 8007966:	4b57      	ldr	r3, [pc, #348]	; (8007ac4 <xRxNode+0x37c>)
 8007968:	4a55      	ldr	r2, [pc, #340]	; (8007ac0 <xRxNode+0x378>)
 800796a:	60da      	str	r2, [r3, #12]
			TxPayload.UseAck = 1;
 800796c:	4b55      	ldr	r3, [pc, #340]	; (8007ac4 <xRxNode+0x37c>)
 800796e:	2201      	movs	r2, #1
 8007970:	725a      	strb	r2, [r3, #9]
			TxPayload.length = strlen(tempString);
 8007972:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007976:	4618      	mov	r0, r3
 8007978:	f7f8 fc2a 	bl	80001d0 <strlen>
 800797c:	4602      	mov	r2, r0
 800797e:	4b51      	ldr	r3, [pc, #324]	; (8007ac4 <xRxNode+0x37c>)
 8007980:	611a      	str	r2, [r3, #16]
			//TxPayload.length = strlen(tempString);
			TxPayload.address = 0x11223344EE;
 8007982:	4a50      	ldr	r2, [pc, #320]	; (8007ac4 <xRxNode+0x37c>)
 8007984:	a43e      	add	r4, pc, #248	; (adr r4, 8007a80 <xRxNode+0x338>)
 8007986:	cc18      	ldmia	r4, {r3, r4}
 8007988:	e882 0018 	stmia.w	r2, {r3, r4}

			NRF24L01p_writePayload(&TxPayload);
 800798c:	484d      	ldr	r0, [pc, #308]	; (8007ac4 <xRxNode+0x37c>)
 800798e:	f7f9 fddd 	bl	800154c <NRF24L01p_writePayload>
			NRF24L01p_ErrorStatus_t ret = NRF24L01p_TransmitPayload(&TxPayload);
 8007992:	484c      	ldr	r0, [pc, #304]	; (8007ac4 <xRxNode+0x37c>)
 8007994:	f7f9 fe3e 	bl	8001614 <NRF24L01p_TransmitPayload>
 8007998:	4603      	mov	r3, r0
 800799a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb

			if(ret == NRF24L01P_ERROR){
 800799e:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d104      	bne.n	80079b0 <xRxNode+0x268>
				graphic_lcd_write(3, 0, "Transmission Error");
 80079a6:	4a48      	ldr	r2, [pc, #288]	; (8007ac8 <xRxNode+0x380>)
 80079a8:	2100      	movs	r1, #0
 80079aa:	2003      	movs	r0, #3
 80079ac:	f7f9 fafc 	bl	8000fa8 <graphic_lcd_write>
			}


		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 80079b0:	2102      	movs	r1, #2
 80079b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079b6:	f7fa fff9 	bl	80029ac <HAL_GPIO_ReadPin>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d134      	bne.n	8007a2a <xRxNode+0x2e2>
			sprintf(TxData, "button pressed: C");
 80079c0:	4a3f      	ldr	r2, [pc, #252]	; (8007ac0 <xRxNode+0x378>)
 80079c2:	4b45      	ldr	r3, [pc, #276]	; (8007ad8 <xRxNode+0x390>)
 80079c4:	4615      	mov	r5, r2
 80079c6:	461c      	mov	r4, r3
 80079c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079ca:	6028      	str	r0, [r5, #0]
 80079cc:	6069      	str	r1, [r5, #4]
 80079ce:	60aa      	str	r2, [r5, #8]
 80079d0:	60eb      	str	r3, [r5, #12]
 80079d2:	8823      	ldrh	r3, [r4, #0]
 80079d4:	822b      	strh	r3, [r5, #16]
			//TxPayload.data = tempString;
			TxPayload.data = TxData;
 80079d6:	4b3b      	ldr	r3, [pc, #236]	; (8007ac4 <xRxNode+0x37c>)
 80079d8:	4a39      	ldr	r2, [pc, #228]	; (8007ac0 <xRxNode+0x378>)
 80079da:	60da      	str	r2, [r3, #12]
			TxPayload.UseAck = 1;
 80079dc:	4b39      	ldr	r3, [pc, #228]	; (8007ac4 <xRxNode+0x37c>)
 80079de:	2201      	movs	r2, #1
 80079e0:	725a      	strb	r2, [r3, #9]
			TxPayload.length = strlen(TxData);
 80079e2:	4837      	ldr	r0, [pc, #220]	; (8007ac0 <xRxNode+0x378>)
 80079e4:	f7f8 fbf4 	bl	80001d0 <strlen>
 80079e8:	4602      	mov	r2, r0
 80079ea:	4b36      	ldr	r3, [pc, #216]	; (8007ac4 <xRxNode+0x37c>)
 80079ec:	611a      	str	r2, [r3, #16]
			//TxPayload.length = strlen(tempString);
			TxPayload.address = 0x11223344EE;
 80079ee:	4a35      	ldr	r2, [pc, #212]	; (8007ac4 <xRxNode+0x37c>)
 80079f0:	a423      	add	r4, pc, #140	; (adr r4, 8007a80 <xRxNode+0x338>)
 80079f2:	cc18      	ldmia	r4, {r3, r4}
 80079f4:	e882 0018 	stmia.w	r2, {r3, r4}

			NRF24L01p_writePayload(&TxPayload);
 80079f8:	4832      	ldr	r0, [pc, #200]	; (8007ac4 <xRxNode+0x37c>)
 80079fa:	f7f9 fda7 	bl	800154c <NRF24L01p_writePayload>
			NRF24L01p_ErrorStatus_t ret = NRF24L01p_TransmitPayload(&TxPayload);
 80079fe:	4831      	ldr	r0, [pc, #196]	; (8007ac4 <xRxNode+0x37c>)
 8007a00:	f7f9 fe08 	bl	8001614 <NRF24L01p_TransmitPayload>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea

			graphic_lcd_clear_screen();
 8007a0a:	f7f9 faa5 	bl	8000f58 <graphic_lcd_clear_screen>
			graphic_lcd_write(0, 0, "pressed button: C");
 8007a0e:	4a33      	ldr	r2, [pc, #204]	; (8007adc <xRxNode+0x394>)
 8007a10:	2100      	movs	r1, #0
 8007a12:	2000      	movs	r0, #0
 8007a14:	f7f9 fac8 	bl	8000fa8 <graphic_lcd_write>

			if(ret == NRF24L01P_ERROR){
 8007a18:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d104      	bne.n	8007a2a <xRxNode+0x2e2>
				graphic_lcd_write(3, 0, "Transmission Error");
 8007a20:	4a29      	ldr	r2, [pc, #164]	; (8007ac8 <xRxNode+0x380>)
 8007a22:	2100      	movs	r1, #0
 8007a24:	2003      	movs	r0, #3
 8007a26:	f7f9 fabf 	bl	8000fa8 <graphic_lcd_write>




		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0){
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a30:	f7fa ffbc 	bl	80029ac <HAL_GPIO_ReadPin>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d16a      	bne.n	8007b10 <xRxNode+0x3c8>
			//custom_print("you pressed button A\r\n");
			sprintf(TxData, "button pressed: D");
 8007a3a:	4a21      	ldr	r2, [pc, #132]	; (8007ac0 <xRxNode+0x378>)
 8007a3c:	4b28      	ldr	r3, [pc, #160]	; (8007ae0 <xRxNode+0x398>)
 8007a3e:	4615      	mov	r5, r2
 8007a40:	461c      	mov	r4, r3
 8007a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a44:	6028      	str	r0, [r5, #0]
 8007a46:	6069      	str	r1, [r5, #4]
 8007a48:	60aa      	str	r2, [r5, #8]
 8007a4a:	60eb      	str	r3, [r5, #12]
 8007a4c:	8823      	ldrh	r3, [r4, #0]
 8007a4e:	822b      	strh	r3, [r5, #16]
			//TxPayload.data = tempString;
			TxPayload.data = TxData;
 8007a50:	4b1c      	ldr	r3, [pc, #112]	; (8007ac4 <xRxNode+0x37c>)
 8007a52:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <xRxNode+0x378>)
 8007a54:	60da      	str	r2, [r3, #12]
			TxPayload.UseAck = 1;
 8007a56:	4b1b      	ldr	r3, [pc, #108]	; (8007ac4 <xRxNode+0x37c>)
 8007a58:	2201      	movs	r2, #1
 8007a5a:	725a      	strb	r2, [r3, #9]
			TxPayload.length = strlen(TxData);
 8007a5c:	4818      	ldr	r0, [pc, #96]	; (8007ac0 <xRxNode+0x378>)
 8007a5e:	f7f8 fbb7 	bl	80001d0 <strlen>
 8007a62:	4602      	mov	r2, r0
 8007a64:	4b17      	ldr	r3, [pc, #92]	; (8007ac4 <xRxNode+0x37c>)
 8007a66:	611a      	str	r2, [r3, #16]
			//TxPayload.length = strlen(tempString);
			TxPayload.address = 0x11223344EE;
 8007a68:	4a16      	ldr	r2, [pc, #88]	; (8007ac4 <xRxNode+0x37c>)
 8007a6a:	a405      	add	r4, pc, #20	; (adr r4, 8007a80 <xRxNode+0x338>)
 8007a6c:	cc18      	ldmia	r4, {r3, r4}
 8007a6e:	e882 0018 	stmia.w	r2, {r3, r4}

			NRF24L01p_writePayload(&TxPayload);
 8007a72:	4814      	ldr	r0, [pc, #80]	; (8007ac4 <xRxNode+0x37c>)
 8007a74:	f7f9 fd6a 	bl	800154c <NRF24L01p_writePayload>
 8007a78:	e034      	b.n	8007ae4 <xRxNode+0x39c>
 8007a7a:	bf00      	nop
 8007a7c:	f3af 8000 	nop.w
 8007a80:	223344ee 	.word	0x223344ee
 8007a84:	00000011 	.word	0x00000011
 8007a88:	08008990 	.word	0x08008990
 8007a8c:	200080b8 	.word	0x200080b8
 8007a90:	0800736d 	.word	0x0800736d
 8007a94:	0800737d 	.word	0x0800737d
 8007a98:	0800738d 	.word	0x0800738d
 8007a9c:	080073c9 	.word	0x080073c9
 8007aa0:	08007405 	.word	0x08007405
 8007aa4:	08007439 	.word	0x08007439
 8007aa8:	08008998 	.word	0x08008998
 8007aac:	080089ac 	.word	0x080089ac
 8007ab0:	42c80000 	.word	0x42c80000
 8007ab4:	080089c0 	.word	0x080089c0
 8007ab8:	080089d4 	.word	0x080089d4
 8007abc:	080089e0 	.word	0x080089e0
 8007ac0:	20008188 	.word	0x20008188
 8007ac4:	200080f0 	.word	0x200080f0
 8007ac8:	080089f0 	.word	0x080089f0
 8007acc:	08008a04 	.word	0x08008a04
 8007ad0:	08008a1c 	.word	0x08008a1c
 8007ad4:	08008a2c 	.word	0x08008a2c
 8007ad8:	08008a40 	.word	0x08008a40
 8007adc:	08008a54 	.word	0x08008a54
 8007ae0:	08008a68 	.word	0x08008a68
			NRF24L01p_ErrorStatus_t ret = NRF24L01p_TransmitPayload(&TxPayload);
 8007ae4:	485a      	ldr	r0, [pc, #360]	; (8007c50 <xRxNode+0x508>)
 8007ae6:	f7f9 fd95 	bl	8001614 <NRF24L01p_TransmitPayload>
 8007aea:	4603      	mov	r3, r0
 8007aec:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9



			graphic_lcd_clear_screen();
 8007af0:	f7f9 fa32 	bl	8000f58 <graphic_lcd_clear_screen>
			graphic_lcd_write(0, 0, "pressed button: D");
 8007af4:	4a57      	ldr	r2, [pc, #348]	; (8007c54 <xRxNode+0x50c>)
 8007af6:	2100      	movs	r1, #0
 8007af8:	2000      	movs	r0, #0
 8007afa:	f7f9 fa55 	bl	8000fa8 <graphic_lcd_write>

			if(ret == NRF24L01P_ERROR){
 8007afe:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d104      	bne.n	8007b10 <xRxNode+0x3c8>
				graphic_lcd_write(3, 0, "Transmission Error");
 8007b06:	4a54      	ldr	r2, [pc, #336]	; (8007c58 <xRxNode+0x510>)
 8007b08:	2100      	movs	r1, #0
 8007b0a:	2003      	movs	r0, #3
 8007b0c:	f7f9 fa4c 	bl	8000fa8 <graphic_lcd_write>


		}


		if(NRF24L01p_readable()){
 8007b10:	f7f9 fcee 	bl	80014f0 <NRF24L01p_readable>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 8095 	beq.w	8007c46 <xRxNode+0x4fe>
				xTaskNotify ( xNotificationHandle, (1<<0), eSetBits);
 8007b1c:	4b4f      	ldr	r3, [pc, #316]	; (8007c5c <xRxNode+0x514>)
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	2300      	movs	r3, #0
 8007b22:	2201      	movs	r2, #1
 8007b24:	2101      	movs	r1, #1
 8007b26:	f7ff fad3 	bl	80070d0 <xTaskGenericNotify>
				//xTaskNotify ( xNotificationHandle, (1<<0), eSetBits);


				//Payload_t payload;
				Rxpayload.data = RxData;
 8007b2a:	4b4d      	ldr	r3, [pc, #308]	; (8007c60 <xRxNode+0x518>)
 8007b2c:	4a4d      	ldr	r2, [pc, #308]	; (8007c64 <xRxNode+0x51c>)
 8007b2e:	60da      	str	r2, [r3, #12]

				NRF24L01p_clear_data_ready_flag();
 8007b30:	f7fa f901 	bl	8001d36 <NRF24L01p_clear_data_ready_flag>
				NRF24L01p_readPayload(&Rxpayload);
 8007b34:	484a      	ldr	r0, [pc, #296]	; (8007c60 <xRxNode+0x518>)
 8007b36:	f7f9 fd33 	bl	80015a0 <NRF24L01p_readPayload>
				Rxpayload.data[Rxpayload.length] = '\0';
 8007b3a:	4b49      	ldr	r3, [pc, #292]	; (8007c60 <xRxNode+0x518>)
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	4b48      	ldr	r3, [pc, #288]	; (8007c60 <xRxNode+0x518>)
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	4413      	add	r3, r2
 8007b44:	2200      	movs	r2, #0
 8007b46:	701a      	strb	r2, [r3, #0]
				//printf("received data\r\n");
				//graphic_lcd_write(1, 0, "RECEIVED DATA");
				//graphic_lcd_write(2, 0, Rxpayload.data);
				graphic_lcd_clear_screen();
 8007b48:	f7f9 fa06 	bl	8000f58 <graphic_lcd_clear_screen>
				//graphic_lcd_write(3, 0, Rxpayload.data);
				//if(Rxpayload.data[0] == 'Q'){

					if(Rxpayload.data[0] == 'L'){//LED control
 8007b4c:	4b44      	ldr	r3, [pc, #272]	; (8007c60 <xRxNode+0x518>)
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b4c      	cmp	r3, #76	; 0x4c
 8007b54:	d112      	bne.n	8007b7c <xRxNode+0x434>
						uint8_t LedId = Rxpayload.data[1];
 8007b56:	4b42      	ldr	r3, [pc, #264]	; (8007c60 <xRxNode+0x518>)
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	785b      	ldrb	r3, [r3, #1]
 8007b5c:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8
						uint8_t LedVal = Rxpayload.data[2];
 8007b60:	4b3f      	ldr	r3, [pc, #252]	; (8007c60 <xRxNode+0x518>)
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	789b      	ldrb	r3, [r3, #2]
 8007b66:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

						LED_Control(LedId,LedVal);
 8007b6a:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8007b6e:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8007b72:	4611      	mov	r1, r2
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff fd83 	bl	8007680 <LED_Control>
 8007b7a:	e062      	b.n	8007c42 <xRxNode+0x4fa>
					}
					else if(Rxpayload.data[0] == 'G'){//GLCD control
 8007b7c:	4b38      	ldr	r3, [pc, #224]	; (8007c60 <xRxNode+0x518>)
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	2b47      	cmp	r3, #71	; 0x47
 8007b84:	d15d      	bne.n	8007c42 <xRxNode+0x4fa>
							//	else if(Rxpayload.data[4] == '1')graphics_lcd_clear_line(1);
							//	else if(Rxpayload.data[4] == '2')graphics_lcd_clear_line(2);
							//	else if(Rxpayload.data[4] == '3')graphics_lcd_clear_line(3);
							//}
						}
						if(Rxpayload.data[1] == 'P'){//print
 8007b86:	4b36      	ldr	r3, [pc, #216]	; (8007c60 <xRxNode+0x518>)
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b50      	cmp	r3, #80	; 0x50
 8007b90:	d12d      	bne.n	8007bee <xRxNode+0x4a6>
							int line = Rxpayload.data[2];
 8007b92:	4b33      	ldr	r3, [pc, #204]	; (8007c60 <xRxNode+0x518>)
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	3302      	adds	r3, #2
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

							//if(printSize >28) printSize = 28;

							char printMsg[32]; //28 + 1 extra for end char

							for(int k = 0;k<28;k++){
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ba4:	e012      	b.n	8007bcc <xRxNode+0x484>
								printMsg[k] = Rxpayload.data[3+k];
 8007ba6:	4b2e      	ldr	r3, [pc, #184]	; (8007c60 <xRxNode+0x518>)
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8007bae:	3203      	adds	r2, #3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	7819      	ldrb	r1, [r3, #0]
 8007bb4:	f107 0208 	add.w	r2, r7, #8
 8007bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bbc:	4413      	add	r3, r2
 8007bbe:	460a      	mov	r2, r1
 8007bc0:	701a      	strb	r2, [r3, #0]
							for(int k = 0;k<28;k++){
 8007bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bd0:	2b1b      	cmp	r3, #27
 8007bd2:	dde8      	ble.n	8007ba6 <xRxNode+0x45e>
							}

							graphics_lcd_clear_line(line);
 8007bd4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8007bd8:	f7f9 fa2f 	bl	800103a <graphics_lcd_clear_line>
							graphic_lcd_write(line, 0, printMsg);
 8007bdc:	f107 0308 	add.w	r3, r7, #8
 8007be0:	461a      	mov	r2, r3
 8007be2:	2100      	movs	r1, #0
 8007be4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8007be8:	f7f9 f9de 	bl	8000fa8 <graphic_lcd_write>
 8007bec:	e029      	b.n	8007c42 <xRxNode+0x4fa>
						}
						else if(Rxpayload.data[1] == 'C'){//clear lcd
 8007bee:	4b1c      	ldr	r3, [pc, #112]	; (8007c60 <xRxNode+0x518>)
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b43      	cmp	r3, #67	; 0x43
 8007bf8:	d102      	bne.n	8007c00 <xRxNode+0x4b8>
							graphic_lcd_clear_screen();
 8007bfa:	f7f9 f9ad 	bl	8000f58 <graphic_lcd_clear_screen>
 8007bfe:	e020      	b.n	8007c42 <xRxNode+0x4fa>
						}
						else if(Rxpayload.data[1] == 'B'){//lcd backlight
 8007c00:	4b17      	ldr	r3, [pc, #92]	; (8007c60 <xRxNode+0x518>)
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	3301      	adds	r3, #1
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b42      	cmp	r3, #66	; 0x42
 8007c0a:	d11a      	bne.n	8007c42 <xRxNode+0x4fa>
							if(Rxpayload.data[2] == '0'){//clear lcd
 8007c0c:	4b14      	ldr	r3, [pc, #80]	; (8007c60 <xRxNode+0x518>)
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	3302      	adds	r3, #2
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2b30      	cmp	r3, #48	; 0x30
 8007c16:	d107      	bne.n	8007c28 <xRxNode+0x4e0>
								DISPLAY_BACKLIGHT_OFF;
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c22:	f7fa fedb 	bl	80029dc <HAL_GPIO_WritePin>
 8007c26:	e00c      	b.n	8007c42 <xRxNode+0x4fa>
							}
							else if(Rxpayload.data[2] == '1'){//clear lcd
 8007c28:	4b0d      	ldr	r3, [pc, #52]	; (8007c60 <xRxNode+0x518>)
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b31      	cmp	r3, #49	; 0x31
 8007c32:	d106      	bne.n	8007c42 <xRxNode+0x4fa>
								DISPLAY_BACKLIGHT_ON;
 8007c34:	2201      	movs	r2, #1
 8007c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c3e:	f7fa fecd 	bl	80029dc <HAL_GPIO_WritePin>
				else{

				}


				NRF24L01p_flush_rx();
 8007c42:	f7f9 fe9c 	bl	800197e <NRF24L01p_flush_rx>

			}

		vTaskDelay(100);
 8007c46:	2064      	movs	r0, #100	; 0x64
 8007c48:	f7fe fdc0 	bl	80067cc <vTaskDelay>
	while(1){
 8007c4c:	e5c1      	b.n	80077d2 <xRxNode+0x8a>
 8007c4e:	bf00      	nop
 8007c50:	200080f0 	.word	0x200080f0
 8007c54:	08008a7c 	.word	0x08008a7c
 8007c58:	080089f0 	.word	0x080089f0
 8007c5c:	20007f10 	.word	0x20007f10
 8007c60:	200080b8 	.word	0x200080b8
 8007c64:	200081a8 	.word	0x200081a8

08007c68 <main>:
	}

}

int main(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b096      	sub	sp, #88	; 0x58
 8007c6c:	af04      	add	r7, sp, #16

	HAL_Init();
 8007c6e:	f7fa fbe1 	bl	8002434 <HAL_Init>
	SystemClock_Config();
 8007c72:	f000 f933 	bl	8007edc <SystemClock_Config>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8007c76:	4a83      	ldr	r2, [pc, #524]	; (8007e84 <main+0x21c>)
 8007c78:	4b82      	ldr	r3, [pc, #520]	; (8007e84 <main+0x21c>)
 8007c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7c:	f043 0304 	orr.w	r3, r3, #4
 8007c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c82:	4b80      	ldr	r3, [pc, #512]	; (8007e84 <main+0x21c>)
 8007c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c86:	f003 0304 	and.w	r3, r3, #4
 8007c8a:	613b      	str	r3, [r7, #16]
 8007c8c:	693b      	ldr	r3, [r7, #16]
	//__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8007c8e:	4a7d      	ldr	r2, [pc, #500]	; (8007e84 <main+0x21c>)
 8007c90:	4b7c      	ldr	r3, [pc, #496]	; (8007e84 <main+0x21c>)
 8007c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c94:	f043 0301 	orr.w	r3, r3, #1
 8007c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c9a:	4b7a      	ldr	r3, [pc, #488]	; (8007e84 <main+0x21c>)
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8007ca6:	4a77      	ldr	r2, [pc, #476]	; (8007e84 <main+0x21c>)
 8007ca8:	4b76      	ldr	r3, [pc, #472]	; (8007e84 <main+0x21c>)
 8007caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cac:	f043 0302 	orr.w	r3, r3, #2
 8007cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cb2:	4b74      	ldr	r3, [pc, #464]	; (8007e84 <main+0x21c>)
 8007cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	60bb      	str	r3, [r7, #8]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8007cbe:	4a71      	ldr	r2, [pc, #452]	; (8007e84 <main+0x21c>)
 8007cc0:	4b70      	ldr	r3, [pc, #448]	; (8007e84 <main+0x21c>)
 8007cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc4:	f043 0308 	orr.w	r3, r3, #8
 8007cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cca:	4b6e      	ldr	r3, [pc, #440]	; (8007e84 <main+0x21c>)
 8007ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cce:	f003 0308 	and.w	r3, r3, #8
 8007cd2:	607b      	str	r3, [r7, #4]
 8007cd4:	687b      	ldr	r3, [r7, #4]

	c12832_hal_spi_init();
 8007cd6:	f7f9 f825 	bl	8000d24 <c12832_hal_spi_init>
	c12832_hal_gpio_init();
 8007cda:	f7f9 f899 	bl	8000e10 <c12832_hal_gpio_init>


	MX_I2C1_SMBUS_Init();
 8007cde:	f7ff fa97 	bl	8007210 <MX_I2C1_SMBUS_Init>
	MX_USART1_UART_Init();
 8007ce2:	f7ff fac9 	bl	8007278 <MX_USART1_UART_Init>


	initLEDs();
 8007ce6:	f7ff faf9 	bl	80072dc <initLEDs>
	initButtons();
 8007cea:	f7ff fb23 	bl	8007334 <initButtons>


	//testLedAndButtones();


	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2110      	movs	r1, #16
 8007cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cf6:	f7fa fe71 	bl	80029dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	2120      	movs	r1, #32
 8007cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d02:	f7fa fe6b 	bl	80029dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8007d06:	2200      	movs	r2, #0
 8007d08:	2140      	movs	r1, #64	; 0x40
 8007d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d0e:	f7fa fe65 	bl	80029dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8007d12:	2200      	movs	r2, #0
 8007d14:	2180      	movs	r1, #128	; 0x80
 8007d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d1a:	f7fa fe5f 	bl	80029dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d24:	4858      	ldr	r0, [pc, #352]	; (8007e88 <main+0x220>)
 8007d26:	f7fa fe59 	bl	80029dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d30:	4855      	ldr	r0, [pc, #340]	; (8007e88 <main+0x220>)
 8007d32:	f7fa fe53 	bl	80029dc <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(DISPLAY_BACKLIGHT_GPIO_Port, DISPLAY_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8007d36:	2200      	movs	r2, #0
 8007d38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d40:	f7fa fe4c 	bl	80029dc <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	605a      	str	r2, [r3, #4]
 8007d4e:	609a      	str	r2, [r3, #8]
 8007d50:	60da      	str	r2, [r3, #12]
 8007d52:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DISPLAY_BACKLIGHT_Pin;
 8007d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d58:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d62:	2300      	movs	r3, #0
 8007d64:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DISPLAY_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8007d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d70:	f7fa fc9e 	bl	80026b0 <HAL_GPIO_Init>

	DISPLAY_BACKLIGHT_OFF;
 8007d74:	2200      	movs	r2, #0
 8007d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d7e:	f7fa fe2d 	bl	80029dc <HAL_GPIO_WritePin>

	//HAL_Delay(2000);

	graphic_lcd_initialize ();
 8007d82:	f7f9 f953 	bl	800102c <graphic_lcd_initialize>
	graphic_lcd_clear_screen ();
 8007d86:	f7f9 f8e7 	bl	8000f58 <graphic_lcd_clear_screen>
	DISPLAY_BACKLIGHT_ON;
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d94:	f7fa fe22 	bl	80029dc <HAL_GPIO_WritePin>

	//HAL_Delay(1000);



	uint8_t Si7006DevAddr = 0x40<<1;
 8007d98:	2380      	movs	r3, #128	; 0x80
 8007d9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t Si1133DevAddr = 0x55<<1;
 8007d9e:	23aa      	movs	r3, #170	; 0xaa
 8007da0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46


	Si7006_t sensor;
	sensor.init = Si7006_port_init;
 8007da4:	4b39      	ldr	r3, [pc, #228]	; (8007e8c <main+0x224>)
 8007da6:	617b      	str	r3, [r7, #20]
	sensor.i2c_init = Si7006_port_i2c_init;
 8007da8:	4b39      	ldr	r3, [pc, #228]	; (8007e90 <main+0x228>)
 8007daa:	61bb      	str	r3, [r7, #24]
	sensor.i2c_transmit = Si7006_port_i2c_transmit;
 8007dac:	4b39      	ldr	r3, [pc, #228]	; (8007e94 <main+0x22c>)
 8007dae:	61fb      	str	r3, [r7, #28]
	sensor.i2c_receive = Si7006_port_i2c_receive;
 8007db0:	4b39      	ldr	r3, [pc, #228]	; (8007e98 <main+0x230>)
 8007db2:	623b      	str	r3, [r7, #32]
	sensor.check_hardware = Si7006_port_check_hardware;
 8007db4:	4b39      	ldr	r3, [pc, #228]	; (8007e9c <main+0x234>)
 8007db6:	627b      	str	r3, [r7, #36]	; 0x24
	sensor.delay = Si7006_port_delay;
 8007db8:	4b39      	ldr	r3, [pc, #228]	; (8007ea0 <main+0x238>)
 8007dba:	62bb      	str	r3, [r7, #40]	; 0x28



	if(sensor.check_hardware() == SI7006_ERROR){
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	4798      	blx	r3
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d105      	bne.n	8007dd2 <main+0x16a>
		graphic_lcd_write(0, 0, "Si7006 NOT READY");
 8007dc6:	4a37      	ldr	r2, [pc, #220]	; (8007ea4 <main+0x23c>)
 8007dc8:	2100      	movs	r1, #0
 8007dca:	2000      	movs	r0, #0
 8007dcc:	f7f9 f8ec 	bl	8000fa8 <graphic_lcd_write>
 8007dd0:	e004      	b.n	8007ddc <main+0x174>
	}else{
		graphic_lcd_write(0, 0, "Si7006 READY");
 8007dd2:	4a35      	ldr	r2, [pc, #212]	; (8007ea8 <main+0x240>)
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	f7f9 f8e6 	bl	8000fa8 <graphic_lcd_write>
	}


	int x = HAL_I2C_IsDeviceReady(&hi2c1,Si1133DevAddr, 1000, 1000);
 8007ddc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007de0:	b299      	uxth	r1, r3
 8007de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007de6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007dea:	4830      	ldr	r0, [pc, #192]	; (8007eac <main+0x244>)
 8007dec:	f7fb f89e 	bl	8002f2c <HAL_I2C_IsDeviceReady>
 8007df0:	4603      	mov	r3, r0
 8007df2:	643b      	str	r3, [r7, #64]	; 0x40
	if(x == HAL_OK) graphic_lcd_write(1, 0, "Si1133 READY");
 8007df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d105      	bne.n	8007e06 <main+0x19e>
 8007dfa:	4a2d      	ldr	r2, [pc, #180]	; (8007eb0 <main+0x248>)
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	2001      	movs	r0, #1
 8007e00:	f7f9 f8d2 	bl	8000fa8 <graphic_lcd_write>
 8007e04:	e004      	b.n	8007e10 <main+0x1a8>
	else graphic_lcd_write(1, 0, "Si1133 NOT READY");
 8007e06:	4a2b      	ldr	r2, [pc, #172]	; (8007eb4 <main+0x24c>)
 8007e08:	2100      	movs	r1, #0
 8007e0a:	2001      	movs	r0, #1
 8007e0c:	f7f9 f8cc 	bl	8000fa8 <graphic_lcd_write>



	HAL_Delay(3000);
 8007e10:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007e14:	f7fa fb52 	bl	80024bc <HAL_Delay>
	graphic_lcd_clear_screen ();
 8007e18:	f7f9 f89e 	bl	8000f58 <graphic_lcd_clear_screen>
#if(RX_NODE == 1)

	//testLedAndButtones();
	//xTaskCreate(xRadio,(signed portCHAR *) "t1", 500, NULL, tskIDLE_PRIORITY, &xRadioHandle );
	//xTaskCreate(xGLCD,(signed portCHAR *) "t3", 500, NULL, tskIDLE_PRIORITY, &xGLCDHandle );
	xTaskCreate(xNotification,(signed portCHAR *) "t4", 200, NULL, tskIDLE_PRIORITY, &xNotificationHandle );
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9303      	str	r3, [sp, #12]
 8007e20:	2300      	movs	r3, #0
 8007e22:	9302      	str	r3, [sp, #8]
 8007e24:	4b24      	ldr	r3, [pc, #144]	; (8007eb8 <main+0x250>)
 8007e26:	9301      	str	r3, [sp, #4]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	22c8      	movs	r2, #200	; 0xc8
 8007e30:	4922      	ldr	r1, [pc, #136]	; (8007ebc <main+0x254>)
 8007e32:	4823      	ldr	r0, [pc, #140]	; (8007ec0 <main+0x258>)
 8007e34:	f7fe fbfa 	bl	800662c <xTaskGenericCreate>
	//xTaskCreate(xPC,(signed portCHAR *) "t5", 1000, NULL, tskIDLE_PRIORITY, &xPCHandle );
	xTaskCreate(xButtons,(signed portCHAR *) "t6", 500, NULL, tskIDLE_PRIORITY, &xButtonsHandle );
 8007e38:	2300      	movs	r3, #0
 8007e3a:	9303      	str	r3, [sp, #12]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9302      	str	r3, [sp, #8]
 8007e40:	4b20      	ldr	r3, [pc, #128]	; (8007ec4 <main+0x25c>)
 8007e42:	9301      	str	r3, [sp, #4]
 8007e44:	2300      	movs	r3, #0
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007e4e:	491e      	ldr	r1, [pc, #120]	; (8007ec8 <main+0x260>)
 8007e50:	481e      	ldr	r0, [pc, #120]	; (8007ecc <main+0x264>)
 8007e52:	f7fe fbeb 	bl	800662c <xTaskGenericCreate>
	xTaskCreate(xRxNode,(signed portCHAR *) "t7", 1000, NULL, tskIDLE_PRIORITY, &xRxNodeHandle );
 8007e56:	2300      	movs	r3, #0
 8007e58:	9303      	str	r3, [sp, #12]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9302      	str	r3, [sp, #8]
 8007e5e:	4b1c      	ldr	r3, [pc, #112]	; (8007ed0 <main+0x268>)
 8007e60:	9301      	str	r3, [sp, #4]
 8007e62:	2300      	movs	r3, #0
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	2300      	movs	r3, #0
 8007e68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e6c:	4919      	ldr	r1, [pc, #100]	; (8007ed4 <main+0x26c>)
 8007e6e:	481a      	ldr	r0, [pc, #104]	; (8007ed8 <main+0x270>)
 8007e70:	f7fe fbdc 	bl	800662c <xTaskGenericCreate>
	vTaskStartScheduler();
 8007e74:	f7fe fcfc 	bl	8006870 <vTaskStartScheduler>

	return 0;
 8007e78:	2300      	movs	r3, #0





}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3748      	adds	r7, #72	; 0x48
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	40021000 	.word	0x40021000
 8007e88:	48000400 	.word	0x48000400
 8007e8c:	0800736d 	.word	0x0800736d
 8007e90:	0800737d 	.word	0x0800737d
 8007e94:	0800738d 	.word	0x0800738d
 8007e98:	080073c9 	.word	0x080073c9
 8007e9c:	08007405 	.word	0x08007405
 8007ea0:	08007439 	.word	0x08007439
 8007ea4:	08008a90 	.word	0x08008a90
 8007ea8:	08008aa4 	.word	0x08008aa4
 8007eac:	20008038 	.word	0x20008038
 8007eb0:	08008ab4 	.word	0x08008ab4
 8007eb4:	08008ac4 	.word	0x08008ac4
 8007eb8:	20007f10 	.word	0x20007f10
 8007ebc:	08008ad8 	.word	0x08008ad8
 8007ec0:	080075ad 	.word	0x080075ad
 8007ec4:	20007f14 	.word	0x20007f14
 8007ec8:	08008adc 	.word	0x08008adc
 8007ecc:	080075f9 	.word	0x080075f9
 8007ed0:	20007f18 	.word	0x20007f18
 8007ed4:	08008ae0 	.word	0x08008ae0
 8007ed8:	08007749 	.word	0x08007749

08007edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b0ae      	sub	sp, #184	; 0xb8
 8007ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ee2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007ee6:	2244      	movs	r2, #68	; 0x44
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fc5e 	bl	80087ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ef0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	605a      	str	r2, [r3, #4]
 8007efa:	609a      	str	r2, [r3, #8]
 8007efc:	60da      	str	r2, [r3, #12]
 8007efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f00:	463b      	mov	r3, r7
 8007f02:	2260      	movs	r2, #96	; 0x60
 8007f04:	2100      	movs	r1, #0
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fc50 	bl	80087ac <memset>

  /**Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007f0c:	f7fb fab0 	bl	8003470 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007f10:	4a3e      	ldr	r2, [pc, #248]	; (800800c <SystemClock_Config+0x130>)
 8007f12:	4b3e      	ldr	r3, [pc, #248]	; (800800c <SystemClock_Config+0x130>)
 8007f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f18:	f023 0318 	bic.w	r3, r3, #24
 8007f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8007f20:	2314      	movs	r3, #20
 8007f22:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007f24:	2301      	movs	r3, #1
 8007f26:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8007f34:	2370      	movs	r3, #112	; 0x70
 8007f36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007f40:	2301      	movs	r3, #1
 8007f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007f46:	2301      	movs	r3, #1
 8007f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 36;
 8007f4c:	2324      	movs	r3, #36	; 0x24
 8007f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8007f52:	2307      	movs	r3, #7
 8007f54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8007f58:	2306      	movs	r3, #6
 8007f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8007f5e:	2304      	movs	r3, #4
 8007f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fb faf5 	bl	8003558 <HAL_RCC_OscConfig>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8007f74:	f000 f84e 	bl	8008014 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f78:	230f      	movs	r3, #15
 8007f7a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f80:	2300      	movs	r3, #0
 8007f82:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007f84:	2300      	movs	r3, #0
 8007f86:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007f8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007f90:	2104      	movs	r1, #4
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fb fea2 	bl	8003cdc <HAL_RCC_ClockConfig>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007f9e:	f000 f839 	bl	8008014 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8007fa2:	4b1b      	ldr	r3, [pc, #108]	; (8008010 <SystemClock_Config+0x134>)
 8007fa4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007faa:	2300      	movs	r3, #0
 8007fac:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8007fb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fbc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 26;
 8007fc6:	231a      	movs	r3, #26
 8007fc8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8007fca:	2311      	movs	r3, #17
 8007fcc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007fce:	2302      	movs	r3, #2
 8007fd0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8007fd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fda:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007fdc:	463b      	mov	r3, r7
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fc f94a 	bl	8004278 <HAL_RCCEx_PeriphCLKConfig>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <SystemClock_Config+0x112>
  {
    Error_Handler();
 8007fea:	f000 f813 	bl	8008014 <Error_Handler>
  }
  /**Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007fee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007ff2:	f7fb fa5b 	bl	80034ac <HAL_PWREx_ControlVoltageScaling>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8007ffc:	f000 f80a 	bl	8008014 <Error_Handler>
  }
  /**Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8008000:	f7fc fb80 	bl	8004704 <HAL_RCCEx_EnableMSIPLLMode>


}
 8008004:	bf00      	nop
 8008006:	37b8      	adds	r7, #184	; 0xb8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	40021000 	.word	0x40021000
 8008010:	00022841 	.word	0x00022841

08008014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008014:	b480      	push	{r7}
 8008016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008018:	bf00      	nop
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
	...

08008024 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800805c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008028:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800802a:	e003      	b.n	8008034 <LoopCopyDataInit>

0800802c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800802c:	4b0c      	ldr	r3, [pc, #48]	; (8008060 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800802e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008030:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008032:	3104      	adds	r1, #4

08008034 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008034:	480b      	ldr	r0, [pc, #44]	; (8008064 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008036:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008038:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800803a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800803c:	d3f6      	bcc.n	800802c <CopyDataInit>
	ldr	r2, =_sbss
 800803e:	4a0b      	ldr	r2, [pc, #44]	; (800806c <LoopForever+0x12>)
	b	LoopFillZerobss
 8008040:	e002      	b.n	8008048 <LoopFillZerobss>

08008042 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008042:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008044:	f842 3b04 	str.w	r3, [r2], #4

08008048 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008048:	4b09      	ldr	r3, [pc, #36]	; (8008070 <LoopForever+0x16>)
	cmp	r2, r3
 800804a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800804c:	d3f9      	bcc.n	8008042 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800804e:	f000 f951 	bl	80082f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008052:	f000 fb87 	bl	8008764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008056:	f7ff fe07 	bl	8007c68 <main>

0800805a <LoopForever>:

LoopForever:
    b LoopForever
 800805a:	e7fe      	b.n	800805a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800805c:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8008060:	08008d10 	.word	0x08008d10
	ldr	r0, =_sdata
 8008064:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008068:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 800806c:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 8008070:	200081c8 	.word	0x200081c8

08008074 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008074:	e7fe      	b.n	8008074 <ADC1_IRQHandler>
	...

08008078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800807e:	4a11      	ldr	r2, [pc, #68]	; (80080c4 <HAL_MspInit+0x4c>)
 8008080:	4b10      	ldr	r3, [pc, #64]	; (80080c4 <HAL_MspInit+0x4c>)
 8008082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008084:	f043 0301 	orr.w	r3, r3, #1
 8008088:	6613      	str	r3, [r2, #96]	; 0x60
 800808a:	4b0e      	ldr	r3, [pc, #56]	; (80080c4 <HAL_MspInit+0x4c>)
 800808c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	607b      	str	r3, [r7, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008096:	4a0b      	ldr	r2, [pc, #44]	; (80080c4 <HAL_MspInit+0x4c>)
 8008098:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <HAL_MspInit+0x4c>)
 800809a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800809c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080a0:	6593      	str	r3, [r2, #88]	; 0x58
 80080a2:	4b08      	ldr	r3, [pc, #32]	; (80080c4 <HAL_MspInit+0x4c>)
 80080a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080aa:	603b      	str	r3, [r7, #0]
 80080ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80080ae:	2200      	movs	r2, #0
 80080b0:	210f      	movs	r1, #15
 80080b2:	f06f 0001 	mvn.w	r0, #1
 80080b6:	f7fa fad2 	bl	800265e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080ba:	bf00      	nop
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	40021000 	.word	0x40021000

080080c8 <HAL_I2C_MspInit>:
  }

}


void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08a      	sub	sp, #40	; 0x28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080d0:	f107 0314 	add.w	r3, r7, #20
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	605a      	str	r2, [r3, #4]
 80080da:	609a      	str	r2, [r3, #8]
 80080dc:	60da      	str	r2, [r3, #12]
 80080de:	611a      	str	r2, [r3, #16]
	  if(hi2c->Instance==I2C1)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a18      	ldr	r2, [pc, #96]	; (8008148 <HAL_I2C_MspInit+0x80>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d129      	bne.n	800813e <HAL_I2C_MspInit+0x76>
	  {
	  /* USER CODE BEGIN I2C1_MspInit 0 */

	  /* USER CODE END I2C1_MspInit 0 */

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080ea:	4a18      	ldr	r2, [pc, #96]	; (800814c <HAL_I2C_MspInit+0x84>)
 80080ec:	4b17      	ldr	r3, [pc, #92]	; (800814c <HAL_I2C_MspInit+0x84>)
 80080ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f0:	f043 0301 	orr.w	r3, r3, #1
 80080f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080f6:	4b15      	ldr	r3, [pc, #84]	; (800814c <HAL_I2C_MspInit+0x84>)
 80080f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	693b      	ldr	r3, [r7, #16]
	    /**I2C1 GPIO Configuration
	    PA9     ------> I2C1_SCL
	    PA10     ------> I2C1_SDA
	    */
	    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8008102:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008106:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008108:	2312      	movs	r3, #18
 800810a:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800810c:	2301      	movs	r3, #1
 800810e:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008110:	2303      	movs	r3, #3
 8008112:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008114:	2304      	movs	r3, #4
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008118:	f107 0314 	add.w	r3, r7, #20
 800811c:	4619      	mov	r1, r3
 800811e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008122:	f7fa fac5 	bl	80026b0 <HAL_GPIO_Init>

	    /* Peripheral clock enable */
	    __HAL_RCC_I2C1_CLK_ENABLE();
 8008126:	4a09      	ldr	r2, [pc, #36]	; (800814c <HAL_I2C_MspInit+0x84>)
 8008128:	4b08      	ldr	r3, [pc, #32]	; (800814c <HAL_I2C_MspInit+0x84>)
 800812a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008130:	6593      	str	r3, [r2, #88]	; 0x58
 8008132:	4b06      	ldr	r3, [pc, #24]	; (800814c <HAL_I2C_MspInit+0x84>)
 8008134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
	  /* USER CODE BEGIN I2C1_MspInit 1 */

	  /* USER CODE END I2C1_MspInit 1 */
	  }
}
 800813e:	bf00      	nop
 8008140:	3728      	adds	r7, #40	; 0x28
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	40005400 	.word	0x40005400
 800814c:	40021000 	.word	0x40021000

08008150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]



}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08a      	sub	sp, #40	; 0x28
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800816c:	f107 0314 	add.w	r3, r7, #20
 8008170:	2200      	movs	r2, #0
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	605a      	str	r2, [r3, #4]
 8008176:	609a      	str	r2, [r3, #8]
 8008178:	60da      	str	r2, [r3, #12]
 800817a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a17      	ldr	r2, [pc, #92]	; (80081e0 <HAL_UART_MspInit+0x7c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d127      	bne.n	80081d6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008186:	4a17      	ldr	r2, [pc, #92]	; (80081e4 <HAL_UART_MspInit+0x80>)
 8008188:	4b16      	ldr	r3, [pc, #88]	; (80081e4 <HAL_UART_MspInit+0x80>)
 800818a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800818c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008190:	6613      	str	r3, [r2, #96]	; 0x60
 8008192:	4b14      	ldr	r3, [pc, #80]	; (80081e4 <HAL_UART_MspInit+0x80>)
 8008194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800819a:	613b      	str	r3, [r7, #16]
 800819c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800819e:	4a11      	ldr	r2, [pc, #68]	; (80081e4 <HAL_UART_MspInit+0x80>)
 80081a0:	4b10      	ldr	r3, [pc, #64]	; (80081e4 <HAL_UART_MspInit+0x80>)
 80081a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a4:	f043 0302 	orr.w	r3, r3, #2
 80081a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081aa:	4b0e      	ldr	r3, [pc, #56]	; (80081e4 <HAL_UART_MspInit+0x80>)
 80081ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80081b6:	23c0      	movs	r3, #192	; 0xc0
 80081b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081ba:	2302      	movs	r3, #2
 80081bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081c2:	2303      	movs	r3, #3
 80081c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80081c6:	2307      	movs	r3, #7
 80081c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081ca:	f107 0314 	add.w	r3, r7, #20
 80081ce:	4619      	mov	r1, r3
 80081d0:	4805      	ldr	r0, [pc, #20]	; (80081e8 <HAL_UART_MspInit+0x84>)
 80081d2:	f7fa fa6d 	bl	80026b0 <HAL_GPIO_Init>
	/* USER CODE BEGIN USART1_MspInit 1 */

	/* USER CODE END USART1_MspInit 1 */
  }

}
 80081d6:	bf00      	nop
 80081d8:	3728      	adds	r7, #40	; 0x28
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	40013800 	.word	0x40013800
 80081e4:	40021000 	.word	0x40021000
 80081e8:	48000400 	.word	0x48000400

080081ec <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80081ec:	b480      	push	{r7}
 80081ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80081f0:	bf00      	nop
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80081fa:	b480      	push	{r7}
 80081fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081fe:	e7fe      	b.n	80081fe <HardFault_Handler+0x4>

08008200 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008204:	e7fe      	b.n	8008204 <MemManage_Handler+0x4>

08008206 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8008206:	b480      	push	{r7}
 8008208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800820a:	e7fe      	b.n	800820a <BusFault_Handler+0x4>

0800820c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008210:	e7fe      	b.n	8008210 <UsageFault_Handler+0x4>

08008212 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8008212:	b480      	push	{r7}
 8008214:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008216:	bf00      	nop
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8008224:	f7fd fd9d 	bl	8005d62 <osSystickHandler>
  HAL_IncTick();
 8008228:	f7fa f92e 	bl	8002488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800822c:	bf00      	nop
 800822e:	bd80      	pop	{r7, pc}

08008230 <TIM1_UP_TIM16_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
*/
void TIM1_UP_TIM16_IRQHandler(void)
{
 8008230:	b480      	push	{r7}
 8008232:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8008234:	bf00      	nop
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <DMA2_Channel1_IRQHandler>:

/**
* @brief This function handles DMA2 channel1 global interrupt.
*/
void DMA2_Channel1_IRQHandler(void)
{
 800823e:	b480      	push	{r7}
 8008240:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8008242:	bf00      	nop
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <DMA2_Channel2_IRQHandler>:

/**
* @brief This function handles DMA2 channel2 global interrupt.
*/
void DMA2_Channel2_IRQHandler(void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8008250:	bf00      	nop
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <USB_IRQHandler>:

/**
* @brief This function handles USB event interrupt through EXTI line 17.
*/
void USB_IRQHandler(void)
{
 800825a:	b480      	push	{r7}
 800825c:	af00      	add	r7, sp, #0
  /* USER CODE END USB_IRQn 0 */

  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800825e:	bf00      	nop
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8008270:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008274:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	d013      	beq.n	80082a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8008280:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008284:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8008288:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00b      	beq.n	80082a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8008290:	e000      	b.n	8008294 <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 8008292:	bf00      	nop
 8008294:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0f9      	beq.n	8008292 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800829e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	b2d2      	uxtb	r2, r2
 80082a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80082a8:	687b      	ldr	r3, [r7, #4]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <_write>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b086      	sub	sp, #24
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 80082c6:	2300      	movs	r3, #0
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	e009      	b.n	80082e0 <_write+0x2a>
	ITM_SendChar((*ptr++));
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	60ba      	str	r2, [r7, #8]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff ffc7 	bl	8008268 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	3301      	adds	r3, #1
 80082de:	617b      	str	r3, [r7, #20]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	dbf1      	blt.n	80082cc <_write+0x16>

	return len;
 80082e8:	687b      	ldr	r3, [r7, #4]

}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80082f8:	4a17      	ldr	r2, [pc, #92]	; (8008358 <SystemInit+0x64>)
 80082fa:	4b17      	ldr	r3, [pc, #92]	; (8008358 <SystemInit+0x64>)
 80082fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008308:	4a14      	ldr	r2, [pc, #80]	; (800835c <SystemInit+0x68>)
 800830a:	4b14      	ldr	r3, [pc, #80]	; (800835c <SystemInit+0x68>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f043 0301 	orr.w	r3, r3, #1
 8008312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8008314:	4b11      	ldr	r3, [pc, #68]	; (800835c <SystemInit+0x68>)
 8008316:	2200      	movs	r2, #0
 8008318:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800831a:	4a10      	ldr	r2, [pc, #64]	; (800835c <SystemInit+0x68>)
 800831c:	4b0f      	ldr	r3, [pc, #60]	; (800835c <SystemInit+0x68>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008324:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008328:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800832a:	4b0c      	ldr	r3, [pc, #48]	; (800835c <SystemInit+0x68>)
 800832c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008330:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008332:	4a0a      	ldr	r2, [pc, #40]	; (800835c <SystemInit+0x68>)
 8008334:	4b09      	ldr	r3, [pc, #36]	; (800835c <SystemInit+0x68>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800833c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800833e:	4b07      	ldr	r3, [pc, #28]	; (800835c <SystemInit+0x68>)
 8008340:	2200      	movs	r2, #0
 8008342:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008344:	4b04      	ldr	r3, [pc, #16]	; (8008358 <SystemInit+0x64>)
 8008346:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800834a:	609a      	str	r2, [r3, #8]
#endif
}
 800834c:	bf00      	nop
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	e000ed00 	.word	0xe000ed00
 800835c:	40021000 	.word	0x40021000

08008360 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
	int div = 1;
 800836c:	2301      	movs	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8008370:	e004      	b.n	800837c <ts_itoa+0x1c>
		div *= base;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	fb02 f303 	mul.w	r3, r2, r3
 800837a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	fbb2 f2f3 	udiv	r2, r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	429a      	cmp	r2, r3
 8008388:	d2f3      	bcs.n	8008372 <ts_itoa+0x12>

	while (div != 0)
 800838a:	e029      	b.n	80083e0 <ts_itoa+0x80>
	{
		int num = d/div;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	fbb2 f3f3 	udiv	r3, r2, r3
 8008394:	613b      	str	r3, [r7, #16]
		d = d%div;
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	fbb3 f1f2 	udiv	r1, r3, r2
 800839e:	fb02 f201 	mul.w	r2, r2, r1
 80083a2:	1a9b      	subs	r3, r3, r2
 80083a4:	60bb      	str	r3, [r7, #8]
		div /= base;
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80083ae:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2b09      	cmp	r3, #9
 80083b4:	dd0a      	ble.n	80083cc <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	1c59      	adds	r1, r3, #1
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	6011      	str	r1, [r2, #0]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	b2d2      	uxtb	r2, r2
 80083c4:	3237      	adds	r2, #55	; 0x37
 80083c6:	b2d2      	uxtb	r2, r2
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	e009      	b.n	80083e0 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	1c59      	adds	r1, r3, #1
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	6011      	str	r1, [r2, #0]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	b2d2      	uxtb	r2, r2
 80083da:	3230      	adds	r2, #48	; 0x30
 80083dc:	b2d2      	uxtb	r2, r2
 80083de:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1d2      	bne.n	800838c <ts_itoa+0x2c>
	}
}
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b088      	sub	sp, #32
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8008402:	e07d      	b.n	8008500 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	2b25      	cmp	r3, #37	; 0x25
 800840a:	d171      	bne.n	80084f0 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	3301      	adds	r3, #1
 8008410:	60bb      	str	r3, [r7, #8]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b64      	cmp	r3, #100	; 0x64
 8008418:	d01e      	beq.n	8008458 <ts_formatstring+0x66>
 800841a:	2b64      	cmp	r3, #100	; 0x64
 800841c:	dc06      	bgt.n	800842c <ts_formatstring+0x3a>
 800841e:	2b58      	cmp	r3, #88	; 0x58
 8008420:	d050      	beq.n	80084c4 <ts_formatstring+0xd2>
 8008422:	2b63      	cmp	r3, #99	; 0x63
 8008424:	d00e      	beq.n	8008444 <ts_formatstring+0x52>
 8008426:	2b25      	cmp	r3, #37	; 0x25
 8008428:	d058      	beq.n	80084dc <ts_formatstring+0xea>
 800842a:	e05d      	b.n	80084e8 <ts_formatstring+0xf6>
 800842c:	2b73      	cmp	r3, #115	; 0x73
 800842e:	d02b      	beq.n	8008488 <ts_formatstring+0x96>
 8008430:	2b73      	cmp	r3, #115	; 0x73
 8008432:	dc02      	bgt.n	800843a <ts_formatstring+0x48>
 8008434:	2b69      	cmp	r3, #105	; 0x69
 8008436:	d00f      	beq.n	8008458 <ts_formatstring+0x66>
 8008438:	e056      	b.n	80084e8 <ts_formatstring+0xf6>
 800843a:	2b75      	cmp	r3, #117	; 0x75
 800843c:	d037      	beq.n	80084ae <ts_formatstring+0xbc>
 800843e:	2b78      	cmp	r3, #120	; 0x78
 8008440:	d040      	beq.n	80084c4 <ts_formatstring+0xd2>
 8008442:	e051      	b.n	80084e8 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	60fa      	str	r2, [r7, #12]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	1d11      	adds	r1, r2, #4
 800844e:	6079      	str	r1, [r7, #4]
 8008450:	6812      	ldr	r2, [r2, #0]
 8008452:	b2d2      	uxtb	r2, r2
 8008454:	701a      	strb	r2, [r3, #0]
				break;
 8008456:	e047      	b.n	80084e8 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	1d1a      	adds	r2, r3, #4
 800845c:	607a      	str	r2, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	2b00      	cmp	r3, #0
 8008466:	da07      	bge.n	8008478 <ts_formatstring+0x86>
					{
						val *= -1;
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	425b      	negs	r3, r3
 800846c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	1c5a      	adds	r2, r3, #1
 8008472:	60fa      	str	r2, [r7, #12]
 8008474:	222d      	movs	r2, #45	; 0x2d
 8008476:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8008478:	69f9      	ldr	r1, [r7, #28]
 800847a:	f107 030c 	add.w	r3, r7, #12
 800847e:	220a      	movs	r2, #10
 8008480:	4618      	mov	r0, r3
 8008482:	f7ff ff6d 	bl	8008360 <ts_itoa>
				}
				break;
 8008486:	e02f      	b.n	80084e8 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	1d1a      	adds	r2, r3, #4
 800848c:	607a      	str	r2, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8008492:	e007      	b.n	80084a4 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	60fa      	str	r2, [r7, #12]
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	1c51      	adds	r1, r2, #1
 800849e:	61b9      	str	r1, [r7, #24]
 80084a0:	7812      	ldrb	r2, [r2, #0]
 80084a2:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1f3      	bne.n	8008494 <ts_formatstring+0xa2>
					}
				}
				break;
 80084ac:	e01c      	b.n	80084e8 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	1d1a      	adds	r2, r3, #4
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	6819      	ldr	r1, [r3, #0]
 80084b6:	f107 030c 	add.w	r3, r7, #12
 80084ba:	220a      	movs	r2, #10
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff ff4f 	bl	8008360 <ts_itoa>
				break;
 80084c2:	e011      	b.n	80084e8 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	1d1a      	adds	r2, r3, #4
 80084c8:	607a      	str	r2, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4619      	mov	r1, r3
 80084ce:	f107 030c 	add.w	r3, r7, #12
 80084d2:	2210      	movs	r2, #16
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7ff ff43 	bl	8008360 <ts_itoa>
				break;
 80084da:	e005      	b.n	80084e8 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	60fa      	str	r2, [r7, #12]
 80084e2:	2225      	movs	r2, #37	; 0x25
 80084e4:	701a      	strb	r2, [r3, #0]
				  break;
 80084e6:	bf00      	nop
			}
			fmt++;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	3301      	adds	r3, #1
 80084ec:	60bb      	str	r3, [r7, #8]
 80084ee:	e007      	b.n	8008500 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	60fa      	str	r2, [r7, #12]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	1c51      	adds	r1, r2, #1
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	7812      	ldrb	r2, [r2, #0]
 80084fe:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	f47f af7d 	bne.w	8008404 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	461a      	mov	r2, r3
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	1ad3      	subs	r3, r2, r3
}
 8008518:	4618      	mov	r0, r3
 800851a:	3720      	adds	r7, #32
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
	int length = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800852e:	e081      	b.n	8008634 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b25      	cmp	r3, #37	; 0x25
 8008536:	d177      	bne.n	8008628 <ts_formatlength+0x108>
		{
			++fmt;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3301      	adds	r3, #1
 800853c:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	3b58      	subs	r3, #88	; 0x58
 8008544:	2b20      	cmp	r3, #32
 8008546:	d86a      	bhi.n	800861e <ts_formatlength+0xfe>
 8008548:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <ts_formatlength+0x30>)
 800854a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854e:	bf00      	nop
 8008550:	08008611 	.word	0x08008611
 8008554:	0800861f 	.word	0x0800861f
 8008558:	0800861f 	.word	0x0800861f
 800855c:	0800861f 	.word	0x0800861f
 8008560:	0800861f 	.word	0x0800861f
 8008564:	0800861f 	.word	0x0800861f
 8008568:	0800861f 	.word	0x0800861f
 800856c:	0800861f 	.word	0x0800861f
 8008570:	0800861f 	.word	0x0800861f
 8008574:	0800861f 	.word	0x0800861f
 8008578:	0800861f 	.word	0x0800861f
 800857c:	080085d5 	.word	0x080085d5
 8008580:	080085e3 	.word	0x080085e3
 8008584:	0800861f 	.word	0x0800861f
 8008588:	0800861f 	.word	0x0800861f
 800858c:	0800861f 	.word	0x0800861f
 8008590:	0800861f 	.word	0x0800861f
 8008594:	080085e3 	.word	0x080085e3
 8008598:	0800861f 	.word	0x0800861f
 800859c:	0800861f 	.word	0x0800861f
 80085a0:	0800861f 	.word	0x0800861f
 80085a4:	0800861f 	.word	0x0800861f
 80085a8:	0800861f 	.word	0x0800861f
 80085ac:	0800861f 	.word	0x0800861f
 80085b0:	0800861f 	.word	0x0800861f
 80085b4:	0800861f 	.word	0x0800861f
 80085b8:	0800861f 	.word	0x0800861f
 80085bc:	080085f1 	.word	0x080085f1
 80085c0:	0800861f 	.word	0x0800861f
 80085c4:	080085e3 	.word	0x080085e3
 80085c8:	0800861f 	.word	0x0800861f
 80085cc:	0800861f 	.word	0x0800861f
 80085d0:	08008611 	.word	0x08008611
			{
			  case 'c':
		  		  va_arg(va, int);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	3304      	adds	r3, #4
 80085d8:	603b      	str	r3, [r7, #0]
				  ++length;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3301      	adds	r3, #1
 80085de:	60fb      	str	r3, [r7, #12]
				  break;
 80085e0:	e025      	b.n	800862e <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	330b      	adds	r3, #11
 80085e6:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	3304      	adds	r3, #4
 80085ec:	603b      	str	r3, [r7, #0]
				  break;
 80085ee:	e01e      	b.n	800862e <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	1d1a      	adds	r2, r3, #4
 80085f4:	603a      	str	r2, [r7, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80085fa:	e002      	b.n	8008602 <ts_formatlength+0xe2>
			  			  ++length;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3301      	adds	r3, #1
 8008600:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	60ba      	str	r2, [r7, #8]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1f6      	bne.n	80085fc <ts_formatlength+0xdc>
			  	  }
				  break;
 800860e:	e00e      	b.n	800862e <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3308      	adds	r3, #8
 8008614:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	3304      	adds	r3, #4
 800861a:	603b      	str	r3, [r7, #0]
				  break;
 800861c:	e007      	b.n	800862e <ts_formatlength+0x10e>
			  default:
				  ++length;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3301      	adds	r3, #1
 8008622:	60fb      	str	r3, [r7, #12]
				  break;
 8008624:	bf00      	nop
 8008626:	e002      	b.n	800862e <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3301      	adds	r3, #1
 800862c:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3301      	adds	r3, #1
 8008632:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f47f af79 	bne.w	8008530 <ts_formatlength+0x10>
	}
	return length;
 800863e:	68fb      	ldr	r3, [r7, #12]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800864c:	b40e      	push	{r1, r2, r3}
 800864e:	b580      	push	{r7, lr}
 8008650:	b085      	sub	sp, #20
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8008656:	f107 0320 	add.w	r3, r7, #32
 800865a:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	69f9      	ldr	r1, [r7, #28]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff fec6 	bl	80083f2 <ts_formatstring>
 8008666:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8008668:	68fb      	ldr	r3, [r7, #12]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008674:	b003      	add	sp, #12
 8008676:	4770      	bx	lr

08008678 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8008678:	b40f      	push	{r0, r1, r2, r3}
 800867a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
	int length = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8008686:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800868a:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008690:	f7ff ff46 	bl	8008520 <ts_formatlength>
 8008694:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8008696:	466b      	mov	r3, sp
 8008698:	461e      	mov	r6, r3
		char buf[length];
 800869a:	68f9      	ldr	r1, [r7, #12]
 800869c:	1e4b      	subs	r3, r1, #1
 800869e:	60bb      	str	r3, [r7, #8]
 80086a0:	460b      	mov	r3, r1
 80086a2:	461a      	mov	r2, r3
 80086a4:	f04f 0300 	mov.w	r3, #0
 80086a8:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80086ac:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80086b0:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80086b4:	460b      	mov	r3, r1
 80086b6:	461a      	mov	r2, r3
 80086b8:	f04f 0300 	mov.w	r3, #0
 80086bc:	00dd      	lsls	r5, r3, #3
 80086be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80086c2:	00d4      	lsls	r4, r2, #3
 80086c4:	460b      	mov	r3, r1
 80086c6:	3307      	adds	r3, #7
 80086c8:	08db      	lsrs	r3, r3, #3
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	ebad 0d03 	sub.w	sp, sp, r3
 80086d0:	466b      	mov	r3, sp
 80086d2:	3300      	adds	r3, #0
 80086d4:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 80086d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80086da:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff fe85 	bl	80083f2 <ts_formatstring>
 80086e8:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4619      	mov	r1, r3
 80086f0:	2001      	movs	r0, #1
 80086f2:	f7ff fde0 	bl	80082b6 <_write>
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 80086fa:	68fb      	ldr	r3, [r7, #12]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008706:	b004      	add	sp, #16
 8008708:	4770      	bx	lr
	...

0800870c <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7f7 fd5b 	bl	80001d0 <strlen>
 800871a:	4603      	mov	r3, r0
 800871c:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	2001      	movs	r0, #1
 8008728:	f7ff fdc5 	bl	80082b6 <_write>
 800872c:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 800872e:	2201      	movs	r2, #1
 8008730:	490b      	ldr	r1, [pc, #44]	; (8008760 <puts+0x54>)
 8008732:	2001      	movs	r0, #1
 8008734:	f7ff fdbf 	bl	80082b6 <_write>
 8008738:	4602      	mov	r2, r0
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	4413      	add	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	429a      	cmp	r2, r3
 8008748:	d102      	bne.n	8008750 <puts+0x44>
	{
		res = 0;
 800874a:	2300      	movs	r3, #0
 800874c:	617b      	str	r3, [r7, #20]
 800874e:	e002      	b.n	8008756 <puts+0x4a>
	}
	else
	{
		res = EOF;
 8008750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008754:	617b      	str	r3, [r7, #20]
	}

	return res;
 8008756:	697b      	ldr	r3, [r7, #20]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3718      	adds	r7, #24
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	08008ae4 	.word	0x08008ae4

08008764 <__libc_init_array>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	4e0d      	ldr	r6, [pc, #52]	; (800879c <__libc_init_array+0x38>)
 8008768:	4c0d      	ldr	r4, [pc, #52]	; (80087a0 <__libc_init_array+0x3c>)
 800876a:	1ba4      	subs	r4, r4, r6
 800876c:	10a4      	asrs	r4, r4, #2
 800876e:	2500      	movs	r5, #0
 8008770:	42a5      	cmp	r5, r4
 8008772:	d109      	bne.n	8008788 <__libc_init_array+0x24>
 8008774:	4e0b      	ldr	r6, [pc, #44]	; (80087a4 <__libc_init_array+0x40>)
 8008776:	4c0c      	ldr	r4, [pc, #48]	; (80087a8 <__libc_init_array+0x44>)
 8008778:	f000 f820 	bl	80087bc <_init>
 800877c:	1ba4      	subs	r4, r4, r6
 800877e:	10a4      	asrs	r4, r4, #2
 8008780:	2500      	movs	r5, #0
 8008782:	42a5      	cmp	r5, r4
 8008784:	d105      	bne.n	8008792 <__libc_init_array+0x2e>
 8008786:	bd70      	pop	{r4, r5, r6, pc}
 8008788:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800878c:	4798      	blx	r3
 800878e:	3501      	adds	r5, #1
 8008790:	e7ee      	b.n	8008770 <__libc_init_array+0xc>
 8008792:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008796:	4798      	blx	r3
 8008798:	3501      	adds	r5, #1
 800879a:	e7f2      	b.n	8008782 <__libc_init_array+0x1e>
 800879c:	08008d00 	.word	0x08008d00
 80087a0:	08008d00 	.word	0x08008d00
 80087a4:	08008d00 	.word	0x08008d00
 80087a8:	08008d04 	.word	0x08008d04

080087ac <memset>:
 80087ac:	4402      	add	r2, r0
 80087ae:	4603      	mov	r3, r0
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d100      	bne.n	80087b6 <memset+0xa>
 80087b4:	4770      	bx	lr
 80087b6:	f803 1b01 	strb.w	r1, [r3], #1
 80087ba:	e7f9      	b.n	80087b0 <memset+0x4>

080087bc <_init>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	bf00      	nop
 80087c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c2:	bc08      	pop	{r3}
 80087c4:	469e      	mov	lr, r3
 80087c6:	4770      	bx	lr

080087c8 <_fini>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	bf00      	nop
 80087cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ce:	bc08      	pop	{r3}
 80087d0:	469e      	mov	lr, r3
 80087d2:	4770      	bx	lr
 80087d4:	0000      	movs	r0, r0
	...
