
Cygnini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e88  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08005018  08005018  00015018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005410  08005410  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08005410  08005410  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005410  08005410  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08005420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000008  08005428  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08005428  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec36  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bf3  00000000  00000000  0003ec6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001240  00000000  00000000  00042868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b0  00000000  00000000  00043aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009735  00000000  00000000  00044b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006d28  00000000  00000000  0004e28d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00054fb5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004aa8  00000000  00000000  00055034  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005000 	.word	0x08005000

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	08005000 	.word	0x08005000

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f092 0f00 	teq	r2, #0
 80004ca:	bf14      	ite	ne
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e720      	b.n	8000324 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aedc 	beq.w	80002d2 <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6c1      	b.n	80002d2 <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <c12832_hal_spi_init>:
#include "C12832Port.h"

SPI_HandleTypeDef hspi2;


void c12832_hal_spi_init(){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]


    /* USER CODE END SPI2_MspInit 0 */
	/* Peripheral clock enable */
	__HAL_RCC_SPI2_CLK_ENABLE();
 8000a2a:	4a31      	ldr	r2, [pc, #196]	; (8000af0 <c12832_hal_spi_init+0xdc>)
 8000a2c:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <c12832_hal_spi_init+0xdc>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6593      	str	r3, [r2, #88]	; 0x58
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <c12832_hal_spi_init+0xdc>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	4a2b      	ldr	r2, [pc, #172]	; (8000af0 <c12832_hal_spi_init+0xdc>)
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <c12832_hal_spi_init+0xdc>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <c12832_hal_spi_init+0xdc>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
	/**SPI2 GPIO Configuration
	PB13     ------> SPI2_SCK
	PB14     ------> SPI2_MISO
	PB15     ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a5a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a5e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a6c:	2305      	movs	r3, #5
 8000a6e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	481f      	ldr	r0, [pc, #124]	; (8000af4 <c12832_hal_spi_init+0xe0>)
 8000a78:	f000 fc68 	bl	800134c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */


	  hspi2.Instance = SPI2;
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000a7e:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <c12832_hal_spi_init+0xe8>)
 8000a80:	601a      	str	r2, [r3, #0]
	  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a88:	605a      	str	r2, [r3, #4]
	  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
	  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000a92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a96:	60da      	str	r2, [r3, #12]
	  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
	  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
	  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aaa:	619a      	str	r2, [r3, #24]
	  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000aae:	2228      	movs	r2, #40	; 0x28
 8000ab0:	61da      	str	r2, [r3, #28]
	  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
	  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi2.Init.CRCPolynomial = 7;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000ac6:	2207      	movs	r2, #7
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
	  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	631a      	str	r2, [r3, #48]	; 0x30
	  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ad6:	4808      	ldr	r0, [pc, #32]	; (8000af8 <c12832_hal_spi_init+0xe4>)
 8000ad8:	f002 fd5e 	bl	8003598 <HAL_SPI_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <c12832_hal_spi_init+0xd2>
	  {
	    Error_Handler();
 8000ae2:	f003 fefd 	bl	80048e0 <Error_Handler>
	  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3720      	adds	r7, #32
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48000400 	.word	0x48000400
 8000af8:	200000f4 	.word	0x200000f4
 8000afc:	40003800 	.word	0x40003800

08000b00 <c12832_hal_gpio_init>:


void c12832_hal_gpio_init(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	4a43      	ldr	r2, [pc, #268]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b08:	4b42      	ldr	r3, [pc, #264]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b40      	ldr	r3, [pc, #256]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	4a3d      	ldr	r2, [pc, #244]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b20:	4b3c      	ldr	r3, [pc, #240]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b3a      	ldr	r3, [pc, #232]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4a37      	ldr	r2, [pc, #220]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b38:	4b36      	ldr	r3, [pc, #216]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4a31      	ldr	r2, [pc, #196]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b50:	4b30      	ldr	r3, [pc, #192]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	4a2b      	ldr	r2, [pc, #172]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b68:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <c12832_hal_gpio_init+0x114>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]


	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, DISPLAY_NRESET_Pin|DISPLAY_A0_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2160      	movs	r1, #96	; 0x60
 8000b92:	4821      	ldr	r0, [pc, #132]	; (8000c18 <c12832_hal_gpio_init+0x118>)
 8000b94:	f000 fd58 	bl	8001648 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DISPLAY_NSEL_GPIO_Port, DISPLAY_NSEL_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9e:	481f      	ldr	r0, [pc, #124]	; (8000c1c <c12832_hal_gpio_init+0x11c>)
 8000ba0:	f000 fd52 	bl	8001648 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DISPLAY_BACKLIGHT_GPIO_Port, DISPLAY_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f000 fd4b 	bl	8001648 <HAL_GPIO_WritePin>


	  /*Configure GPIO pins : DISPLAY_NRESET_Pin DISPLAY_A0_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_NRESET_Pin|DISPLAY_A0_Pin;
 8000bb2:	2360      	movs	r3, #96	; 0x60
 8000bb4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4813      	ldr	r0, [pc, #76]	; (8000c18 <c12832_hal_gpio_init+0x118>)
 8000bca:	f000 fbbf 	bl	800134c <HAL_GPIO_Init>

	  /*Configure GPIO pin : DISPLAY_NSEL_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_NSEL_Pin;
 8000bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(DISPLAY_NSEL_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <c12832_hal_gpio_init+0x11c>)
 8000be8:	f000 fbb0 	bl	800134c <HAL_GPIO_Init>

	  /*Configure GPIO pin : DISPLAY_BACKLIGHT_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_BACKLIGHT_Pin;
 8000bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(DISPLAY_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f000 fba0 	bl	800134c <HAL_GPIO_Init>



}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48000800 	.word	0x48000800
 8000c1c:	48000400 	.word	0x48000400

08000c20 <c12832_hal_spi_write_read>:


int c12832_hal_spi_write_read (uint8_t *tx_data, uint8_t *rx_data, uint16_t lenght) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	80fb      	strh	r3, [r7, #6]

	HAL_SPI_Transmit (&hspi2, tx_data, 1, 200);
 8000c2e:	23c8      	movs	r3, #200	; 0xc8
 8000c30:	2201      	movs	r2, #1
 8000c32:	68f9      	ldr	r1, [r7, #12]
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <c12832_hal_spi_write_read+0x24>)
 8000c36:	f002 fd37 	bl	80036a8 <HAL_SPI_Transmit>
		//DEBUG_MESSAGE_AND_EXIT_FAILURE

	return EXIT_SUCCESS;
 8000c3a:	2300      	movs	r3, #0

}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000f4 	.word	0x200000f4

08000c48 <graphic_lcd_clear_screen>:

#include "graphic_lcd.h"
#include "st7565r.h"
#include "font.h"

int graphic_lcd_clear_screen(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
	
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	e019      	b.n	8000c88 <graphic_lcd_clear_screen+0x40>
		st7565r_set_page_address(i);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 f8cd 	bl	8000df8 <st7565r_set_page_address>
		st7565r_set_column_address(0);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f8de 	bl	8000e20 <st7565r_set_column_address>
		st7565r_set_display_start_line_address(0);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f8f8 	bl	8000e5a <st7565r_set_display_start_line_address>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	e005      	b.n	8000c7c <graphic_lcd_clear_screen+0x34>
			st7565r_write_data(0);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f881 	bl	8000d78 <st7565r_write_data>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2b84      	cmp	r3, #132	; 0x84
 8000c80:	ddf6      	ble.n	8000c70 <graphic_lcd_clear_screen+0x28>
	for (i=0; i<LINE_COUNT; i++) {
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3301      	adds	r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	dde2      	ble.n	8000c54 <graphic_lcd_clear_screen+0xc>
	}
	
	return EXIT_SUCCESS;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <graphic_lcd_write>:

int graphic_lcd_write(int line, int offset, char *text) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]

	int i, j;
	
	st7565r_set_page_address(line);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f8a5 	bl	8000df8 <st7565r_set_page_address>
	st7565r_set_column_address(offset + FONT_SIZE);
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	3305      	adds	r3, #5
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f8b2 	bl	8000e20 <st7565r_set_column_address>
	
	for (i=0; i<strlen(text); i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e01e      	b.n	8000d00 <graphic_lcd_write+0x68>
	
		for (j=0; j<FONT_SIZE; j++) {
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	e012      	b.n	8000cee <graphic_lcd_write+0x56>
			st7565r_write_data(font_5x8_table[(((text[i] - ASCII_FONT_FIRST) * FONT_SIZE) + j)]);
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	f1a3 0220 	sub.w	r2, r3, #32
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	441a      	add	r2, r3
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <graphic_lcd_write+0x80>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f848 	bl	8000d78 <st7565r_write_data>
		for (j=0; j<FONT_SIZE; j++) {
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	3301      	adds	r3, #1
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	dde9      	ble.n	8000cc8 <graphic_lcd_write+0x30>
		}
		st7565r_write_data(0);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f000 f83f 	bl	8000d78 <st7565r_write_data>
	for (i=0; i<strlen(text); i++) {
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fa65 	bl	80001d0 <strlen>
 8000d06:	4602      	mov	r2, r0
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d8d9      	bhi.n	8000cc2 <graphic_lcd_write+0x2a>
	}
		
	return EXIT_SUCCESS;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	08005208 	.word	0x08005208

08000d1c <graphic_lcd_initialize>:

int graphic_lcd_initialize (void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	
	return st7565r_init ();
 8000d20:	f000 f8de 	bl	8000ee0 <st7565r_init>
 8000d24:	4603      	mov	r3, r0
	
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <st7565r_write_command>:
#include "C12832Port.h"


#define HUNDRED_MILLISECONDS  	(10 / portTICK_PERIOD_MS)

void st7565r_write_command(uint8_t command) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <st7565r_write_command+0x44>)
 8000d3e:	f000 fc83 	bl	8001648 <HAL_GPIO_WritePin>
        DISPLAY_A0_LOW;
 8000d42:	2200      	movs	r2, #0
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	480b      	ldr	r0, [pc, #44]	; (8000d74 <st7565r_write_command+0x48>)
 8000d48:	f000 fc7e 	bl	8001648 <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&command, &tmp, 1);
 8000d4c:	f107 010f 	add.w	r1, r7, #15
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	2201      	movs	r2, #1
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff63 	bl	8000c20 <c12832_hal_spi_write_read>
        DISPLAY_CHIP_SELECT_HIGH;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <st7565r_write_command+0x44>)
 8000d62:	f000 fc71 	bl	8001648 <HAL_GPIO_WritePin>
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	48000400 	.word	0x48000400
 8000d74:	48000800 	.word	0x48000800

08000d78 <st7565r_write_data>:

void st7565r_write_data(uint8_t data) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d88:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <st7565r_write_data+0x4c>)
 8000d8a:	f000 fc5d 	bl	8001648 <HAL_GPIO_WritePin>
        DISPLAY_A0_HIGH;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2140      	movs	r1, #64	; 0x40
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <st7565r_write_data+0x50>)
 8000d94:	f000 fc58 	bl	8001648 <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&data, &tmp, 1);
 8000d98:	f107 010f 	add.w	r1, r7, #15
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff3d 	bl	8000c20 <c12832_hal_spi_write_read>
        DISPLAY_A0_LOW;
 8000da6:	2200      	movs	r2, #0
 8000da8:	2140      	movs	r1, #64	; 0x40
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <st7565r_write_data+0x50>)
 8000dac:	f000 fc4c 	bl	8001648 <HAL_GPIO_WritePin>
        DISPLAY_CHIP_SELECT_HIGH;
 8000db0:	2201      	movs	r2, #1
 8000db2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db6:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <st7565r_write_data+0x4c>)
 8000db8:	f000 fc46 	bl	8001648 <HAL_GPIO_WritePin>
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	48000400 	.word	0x48000400
 8000dc8:	48000800 	.word	0x48000800

08000dcc <st7565r_hard_reset>:
 *
 * This functions will reset the LCD controller by setting the reset pin low.
 * \note this funtions should not be confused with the \ref st7565r_soft_reset()
 * function, this command will control the RST pin.
 */
void st7565r_hard_reset(void) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	
        DISPLAY_RESET_LOW;
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	4807      	ldr	r0, [pc, #28]	; (8000df4 <st7565r_hard_reset+0x28>)
 8000dd6:	f000 fc37 	bl	8001648 <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 8000dda:	200a      	movs	r0, #10
 8000ddc:	f003 f816 	bl	8003e0c <vTaskDelay>
        DISPLAY_RESET_HIGH;
 8000de0:	2201      	movs	r2, #1
 8000de2:	2120      	movs	r1, #32
 8000de4:	4803      	ldr	r0, [pc, #12]	; (8000df4 <st7565r_hard_reset+0x28>)
 8000de6:	f000 fc2f 	bl	8001648 <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 8000dea:	200a      	movs	r0, #10
 8000dec:	f003 f80e 	bl	8003e0c <vTaskDelay>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	48000800 	.word	0x48000800

08000df8 <st7565r_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
void st7565r_set_page_address(uint8_t address)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
        // Make sure that the address is 4 bits (only 8 pages)
        address &= 0x0F;
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 030f 	and.w	r3, r3, #15
 8000e08:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff8a 	bl	8000d2c <st7565r_write_command>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <st7565r_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void st7565r_set_column_address(uint8_t address)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
        // Make sure the address is 7 bits
        address &= 0x7F;
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e30:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	091b      	lsrs	r3, r3, #4
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	f043 0310 	orr.w	r3, r3, #16
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff74 	bl	8000d2c <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff6d 	bl	8000d2c <st7565r_write_command>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <st7565r_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the LCD.
 */
void st7565r_set_display_start_line_address(uint8_t address)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
        // Make sure address is 6 bits
        address &= 0x3F;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e6a:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff59 	bl	8000d2c <st7565r_write_command>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <st7565r_display_on>:
 * \brief Turn the LCD display on
 *
 * This function will turn on the LCD.
 */
void st7565r_display_on(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_ON);
 8000e86:	20af      	movs	r0, #175	; 0xaf
 8000e88:	f7ff ff50 	bl	8000d2c <st7565r_write_command>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <st7565r_set_contrast>:
 *                 the LCD.
 *
 * \retval contrast the contrast value written to the LCD controller
 */
uint8_t st7565r_set_contrast(uint8_t contrast)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
        if (contrast < ST7565R_DISPLAY_CONTRAST_MIN) {
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b1d      	cmp	r3, #29
 8000e9e:	d801      	bhi.n	8000ea4 <st7565r_set_contrast+0x14>
                contrast = ST7565R_DISPLAY_CONTRAST_MIN;
 8000ea0:	231e      	movs	r3, #30
 8000ea2:	71fb      	strb	r3, [r7, #7]
        }
        if (contrast > ST7565R_DISPLAY_CONTRAST_MAX) {
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b28      	cmp	r3, #40	; 0x28
 8000ea8:	d901      	bls.n	8000eae <st7565r_set_contrast+0x1e>
                contrast = ST7565R_DISPLAY_CONTRAST_MAX;
 8000eaa:	2328      	movs	r3, #40	; 0x28
 8000eac:	71fb      	strb	r3, [r7, #7]
        }
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME_MODE_SET);
 8000eae:	2081      	movs	r0, #129	; 0x81
 8000eb0:	f7ff ff3c 	bl	8000d2c <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME(contrast));
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff33 	bl	8000d2c <st7565r_write_command>
        return contrast;
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <st7565r_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the LCD
 *
 */
void st7565r_display_invert_disable(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_NORMAL);
 8000ed4:	20a6      	movs	r0, #166	; 0xa6
 8000ed6:	f7ff ff29 	bl	8000d2c <st7565r_write_command>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <st7565r_init>:

int st7565r_init(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	
        // Do a hard reset of the LCD display controller
        st7565r_hard_reset();
 8000ee4:	f7ff ff72 	bl	8000dcc <st7565r_hard_reset>

        // Set the A0 pin to the default state (command)
        DISPLAY_A0_LOW;
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	4810      	ldr	r0, [pc, #64]	; (8000f30 <st7565r_init+0x50>)
 8000eee:	f000 fbab 	bl	8001648 <HAL_GPIO_WritePin>

        // The column address
        st7565r_write_command(ST7565R_CMD_ADC_NORMAL);
 8000ef2:	20a0      	movs	r0, #160	; 0xa0
 8000ef4:	f7ff ff1a 	bl	8000d2c <st7565r_write_command>

        // Non-inverted display
        st7565r_display_invert_disable();
 8000ef8:	f7ff ffea 	bl	8000ed0 <st7565r_display_invert_disable>

        // The common mode scan direction
        st7565r_write_command(ST7565R_CMD_REVERSE_SCAN_DIRECTION);
 8000efc:	20c8      	movs	r0, #200	; 0xc8
 8000efe:	f7ff ff15 	bl	8000d2c <st7565r_write_command>

        // Set the voltage bias ratio to 1/6
        st7565r_write_command(ST7565R_CMD_LCD_BIAS_1_DIV_6_DUTY33);
 8000f02:	20a2      	movs	r0, #162	; 0xa2
 8000f04:	f7ff ff12 	bl	8000d2c <st7565r_write_command>

        // Set booster circuit, voltage regulator and voltage follower all to on
        st7565r_write_command(ST7565R_CMD_POWER_CTRL_ALL_ON);
 8000f08:	202f      	movs	r0, #47	; 0x2f
 8000f0a:	f7ff ff0f 	bl	8000d2c <st7565r_write_command>

        // Set the booster ratio to 2X,3X,4X
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_SET);
 8000f0e:	20f8      	movs	r0, #248	; 0xf8
 8000f10:	f7ff ff0c 	bl	8000d2c <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_2X_3X_4X);
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff ff09 	bl	8000d2c <st7565r_write_command>

        // Set voltage resistor ratio to 1
        st7565r_write_command(ST7565R_CMD_VOLTAGE_RESISTOR_RATIO_1);
 8000f1a:	2021      	movs	r0, #33	; 0x21
 8000f1c:	f7ff ff06 	bl	8000d2c <st7565r_write_command>

        /* Set contrast to min value, no need to check return value as the contrast
        is set to the defined min*/
        st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);
 8000f20:	201e      	movs	r0, #30
 8000f22:	f7ff ffb5 	bl	8000e90 <st7565r_set_contrast>

        // Turn on the display
        st7565r_display_on();
 8000f26:	f7ff ffac 	bl	8000e82 <st7565r_display_on>
		
		return EXIT_SUCCESS;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	48000800 	.word	0x48000800
 8000f34:	00000000 	.word	0x00000000

08000f38 <Si7006_temperature>:
	unit->delay(ms);
}

/////////////////////////////////////////////////////////////////////////////////////

float Si7006_temperature(Si7006_t *unit){
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	uint8_t data[3] = {0xF3, 0, 0};
 8000f40:	23f3      	movs	r3, #243	; 0xf3
 8000f42:	723b      	strb	r3, [r7, #8]
 8000f44:	2300      	movs	r3, #0
 8000f46:	727b      	strb	r3, [r7, #9]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	72bb      	strb	r3, [r7, #10]
	unit->i2c_transmit(data, 1);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f107 0208 	add.w	r2, r7, #8
 8000f54:	2101      	movs	r1, #1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4798      	blx	r3
	unit->delay(500);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f62:	4798      	blx	r3
	unit->i2c_receive(data,2);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	f107 0208 	add.w	r2, r7, #8
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4798      	blx	r3

	uint16_t Temp_Code = data[0]<<8 | data[1];
 8000f72:	7a3b      	ldrb	r3, [r7, #8]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	7a7b      	ldrb	r3, [r7, #9]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	81fb      	strh	r3, [r7, #14]
	//printf("the data received is %d, %d\r\n", data[1], data[0]);
	//printf("temp code is is %d\r\n", tempCode );

	return ((175.72* (float)Temp_Code)/65536) - 46.85;
 8000f82:	89fb      	ldrh	r3, [r7, #14]
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f8c:	ee17 0a90 	vmov	r0, s15
 8000f90:	f7ff fa8a 	bl	80004a8 <__aeabi_f2d>
 8000f94:	a315      	add	r3, pc, #84	; (adr r3, 8000fec <Si7006_temperature+0xb4>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	f7ff fad9 	bl	8000550 <__aeabi_dmul>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460c      	mov	r4, r1
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	4621      	mov	r1, r4
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <Si7006_temperature+0xb0>)
 8000fac:	f7ff fbfa 	bl	80007a4 <__aeabi_ddiv>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	460c      	mov	r4, r1
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	4621      	mov	r1, r4
 8000fb8:	a309      	add	r3, pc, #36	; (adr r3, 8000fe0 <Si7006_temperature+0xa8>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff f913 	bl	80001e8 <__aeabi_dsub>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460c      	mov	r4, r1
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	4621      	mov	r1, r4
 8000fca:	f7ff fcd3 	bl	8000974 <__aeabi_d2f>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	ee07 3a90 	vmov	s15, r3
}
 8000fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd90      	pop	{r4, r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	cccccccd 	.word	0xcccccccd
 8000fe4:	40476ccc 	.word	0x40476ccc
 8000fe8:	40f00000 	.word	0x40f00000
 8000fec:	3d70a3d7 	.word	0x3d70a3d7
 8000ff0:	4065f70a 	.word	0x4065f70a

08000ff4 <Si7006_relativeHumidity>:

float Si7006_relativeHumidity(Si7006_t *unit){
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0xF5, 0};
 8000ffc:	23f5      	movs	r3, #245	; 0xf5
 8000ffe:	733b      	strb	r3, [r7, #12]
 8001000:	2300      	movs	r3, #0
 8001002:	737b      	strb	r3, [r7, #13]
	unit->i2c_transmit(data, 1);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f107 020c 	add.w	r2, r7, #12
 800100c:	2101      	movs	r1, #1
 800100e:	4610      	mov	r0, r2
 8001010:	4798      	blx	r3
	unit->delay(500);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101a:	4798      	blx	r3
	unit->i2c_receive(data,2);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f107 020c 	add.w	r2, r7, #12
 8001024:	2102      	movs	r1, #2
 8001026:	4610      	mov	r0, r2
 8001028:	4798      	blx	r3

	uint16_t RH_Code = data[0]<<8 | data[1];
 800102a:	7b3b      	ldrb	r3, [r7, #12]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21a      	sxth	r2, r3
 8001030:	7b7b      	ldrb	r3, [r7, #13]
 8001032:	b21b      	sxth	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b21b      	sxth	r3, r3
 8001038:	82fb      	strh	r3, [r7, #22]
	//printf("the data received is %d, %d\r\n", data[1], data[0]);
	printf("RH code is is %d\r\n", RH_Code );
 800103a:	8afb      	ldrh	r3, [r7, #22]
 800103c:	4619      	mov	r1, r3
 800103e:	4819      	ldr	r0, [pc, #100]	; (80010a4 <Si7006_relativeHumidity+0xb0>)
 8001040:	f003 ff3c 	bl	8004ebc <iprintf>

	//float step1 = ((float) RH_Code * 125.0 );
	//float step2 = (((float) RH_Code * 125.0 ) / 65536 ) - 6.0;

	float relativeHumidity = (((float) RH_Code * 125.0 ) / 65536 ) - 6.0;
 8001044:	8afb      	ldrh	r3, [r7, #22]
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800104e:	ee17 0a90 	vmov	r0, s15
 8001052:	f7ff fa29 	bl	80004a8 <__aeabi_f2d>
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <Si7006_relativeHumidity+0xb4>)
 800105c:	f7ff fa78 	bl	8000550 <__aeabi_dmul>
 8001060:	4603      	mov	r3, r0
 8001062:	460c      	mov	r4, r1
 8001064:	4618      	mov	r0, r3
 8001066:	4621      	mov	r1, r4
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <Si7006_relativeHumidity+0xb8>)
 800106e:	f7ff fb99 	bl	80007a4 <__aeabi_ddiv>
 8001072:	4603      	mov	r3, r0
 8001074:	460c      	mov	r4, r1
 8001076:	4618      	mov	r0, r3
 8001078:	4621      	mov	r1, r4
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <Si7006_relativeHumidity+0xbc>)
 8001080:	f7ff f8b2 	bl	80001e8 <__aeabi_dsub>
 8001084:	4603      	mov	r3, r0
 8001086:	460c      	mov	r4, r1
 8001088:	4618      	mov	r0, r3
 800108a:	4621      	mov	r1, r4
 800108c:	f7ff fc72 	bl	8000974 <__aeabi_d2f>
 8001090:	4603      	mov	r3, r0
 8001092:	613b      	str	r3, [r7, #16]
	return relativeHumidity;
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	ee07 3a90 	vmov	s15, r3
}
 800109a:	eeb0 0a67 	vmov.f32	s0, s15
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	08005018 	.word	0x08005018
 80010a8:	405f4000 	.word	0x405f4000
 80010ac:	40f00000 	.word	0x40f00000
 80010b0:	40180000 	.word	0x40180000

080010b4 <Si7006_read_firmware_revision>:


Si7006_error_t Si7006_read_firmware_revision(Si7006_t *unit){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

	printf("gonna read firmware revision now\r\n");
 80010bc:	4803      	ldr	r0, [pc, #12]	; (80010cc <Si7006_read_firmware_revision+0x18>)
 80010be:	f003 ff47 	bl	8004f50 <puts>





}
 80010c2:	bf00      	nop
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	0800502c 	.word	0x0800502c

080010d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f905 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f806 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f003 fc30 	bl	8004944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_InitTick+0x30>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a09      	ldr	r2, [pc, #36]	; (8001120 <HAL_InitTick+0x34>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	099b      	lsrs	r3, r3, #6
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f916 	bl	8001332 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001106:	2200      	movs	r2, #0
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	f04f 30ff 	mov.w	r0, #4294967295
 800110e:	f000 f8f4 	bl	80012fa <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000004 	.word	0x20000004
 8001120:	10624dd3 	.word	0x10624dd3

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick++;
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_IncTick+0x18>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	4a03      	ldr	r2, [pc, #12]	; (800113c <HAL_IncTick+0x18>)
 8001130:	6013      	str	r3, [r2, #0]
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	20000158 	.word	0x20000158

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000158 	.word	0x20000158

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8001164:	f7ff ffec 	bl	8001140 <HAL_GetTick>
 8001168:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800116a:	bf00      	nop
 800116c:	f7ff ffe8 	bl	8001140 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	1ad2      	subs	r2, r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	d3f7      	bcc.n	800116c <HAL_Delay+0x14>
  {
  }
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da0b      	bge.n	8001214 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	490d      	ldr	r1, [pc, #52]	; (8001234 <NVIC_SetPriority+0x4c>)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f003 030f 	and.w	r3, r3, #15
 8001204:	3b04      	subs	r3, #4
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001212:	e009      	b.n	8001228 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	4908      	ldr	r1, [pc, #32]	; (8001238 <NVIC_SetPriority+0x50>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	e000e100 	.word	0xe000e100

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	2201      	movs	r2, #1
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	1e5a      	subs	r2, r3, #1
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	401a      	ands	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001282:	2101      	movs	r1, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	1e59      	subs	r1, r3, #1
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff90 	bl	80011e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff49 	bl	8001184 <NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff5e 	bl	80011cc <NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff90 	bl	800123c <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5f 	bl	80011e8 <NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffb0 	bl	80012a0 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001362:	e154      	b.n	800160e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	2101      	movs	r1, #1
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	fa01 f303 	lsl.w	r3, r1, r3
 8001370:	4013      	ands	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8146 	beq.w	8001608 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x40>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b12      	cmp	r3, #18
 800138a:	d123      	bne.n	80013d4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	6939      	ldr	r1, [r7, #16]
 80013d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0203 	and.w	r2, r3, #3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d00b      	beq.n	8001428 <HAL_GPIO_Init+0xdc>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d007      	beq.n	8001428 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800141c:	2b11      	cmp	r3, #17
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b12      	cmp	r3, #18
 8001426:	d130      	bne.n	800148a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800145e:	2201      	movs	r2, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	f003 0201 	and.w	r2, r3, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80a0 	beq.w	8001608 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c8:	4a58      	ldr	r2, [pc, #352]	; (800162c <HAL_GPIO_Init+0x2e0>)
 80014ca:	4b58      	ldr	r3, [pc, #352]	; (800162c <HAL_GPIO_Init+0x2e0>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6613      	str	r3, [r2, #96]	; 0x60
 80014d4:	4b55      	ldr	r3, [pc, #340]	; (800162c <HAL_GPIO_Init+0x2e0>)
 80014d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80014e0:	4a53      	ldr	r2, [pc, #332]	; (8001630 <HAL_GPIO_Init+0x2e4>)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800150a:	d019      	beq.n	8001540 <HAL_GPIO_Init+0x1f4>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a49      	ldr	r2, [pc, #292]	; (8001634 <HAL_GPIO_Init+0x2e8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d013      	beq.n	800153c <HAL_GPIO_Init+0x1f0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a48      	ldr	r2, [pc, #288]	; (8001638 <HAL_GPIO_Init+0x2ec>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00d      	beq.n	8001538 <HAL_GPIO_Init+0x1ec>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a47      	ldr	r2, [pc, #284]	; (800163c <HAL_GPIO_Init+0x2f0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d007      	beq.n	8001534 <HAL_GPIO_Init+0x1e8>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a46      	ldr	r2, [pc, #280]	; (8001640 <HAL_GPIO_Init+0x2f4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d101      	bne.n	8001530 <HAL_GPIO_Init+0x1e4>
 800152c:	2304      	movs	r3, #4
 800152e:	e008      	b.n	8001542 <HAL_GPIO_Init+0x1f6>
 8001530:	2307      	movs	r3, #7
 8001532:	e006      	b.n	8001542 <HAL_GPIO_Init+0x1f6>
 8001534:	2303      	movs	r3, #3
 8001536:	e004      	b.n	8001542 <HAL_GPIO_Init+0x1f6>
 8001538:	2302      	movs	r3, #2
 800153a:	e002      	b.n	8001542 <HAL_GPIO_Init+0x1f6>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <HAL_GPIO_Init+0x1f6>
 8001540:	2300      	movs	r3, #0
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	f002 0203 	and.w	r2, r2, #3
 8001548:	0092      	lsls	r2, r2, #2
 800154a:	4093      	lsls	r3, r2
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001552:	4937      	ldr	r1, [pc, #220]	; (8001630 <HAL_GPIO_Init+0x2e4>)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	3302      	adds	r3, #2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001560:	4b38      	ldr	r3, [pc, #224]	; (8001644 <HAL_GPIO_Init+0x2f8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001584:	4a2f      	ldr	r2, [pc, #188]	; (8001644 <HAL_GPIO_Init+0x2f8>)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <HAL_GPIO_Init+0x2f8>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ae:	4a25      	ldr	r2, [pc, #148]	; (8001644 <HAL_GPIO_Init+0x2f8>)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015b4:	4b23      	ldr	r3, [pc, #140]	; (8001644 <HAL_GPIO_Init+0x2f8>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43db      	mvns	r3, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015d8:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <HAL_GPIO_Init+0x2f8>)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <HAL_GPIO_Init+0x2f8>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <HAL_GPIO_Init+0x2f8>)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	f47f aea3 	bne.w	8001364 <HAL_GPIO_Init+0x18>
  }
}
 800161e:	bf00      	nop
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	40010000 	.word	0x40010000
 8001634:	48000400 	.word	0x48000400
 8001638:	48000800 	.word	0x48000800
 800163c:	48000c00 	.word	0x48000c00
 8001640:	48001000 	.word	0x48001000
 8001644:	40010400 	.word	0x40010400

08001648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
 8001654:	4613      	mov	r3, r2
 8001656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001658:	787b      	ldrb	r3, [r7, #1]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001664:	e002      	b.n	800166c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e080      	b.n	800178c <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d106      	bne.n	80016a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f003 f978 	bl	8004994 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2224      	movs	r2, #36	; 0x24
 80016a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6852      	ldr	r2, [r2, #4]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	6892      	ldr	r2, [r2, #8]
 80016d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d107      	bne.n	80016f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6892      	ldr	r2, [r2, #8]
 80016ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	e006      	b.n	8001700 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6892      	ldr	r2, [r2, #8]
 80016fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d104      	bne.n	8001712 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001710:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001724:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	68d2      	ldr	r2, [r2, #12]
 8001730:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001734:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6911      	ldr	r1, [r2, #16]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6952      	ldr	r2, [r2, #20]
 8001742:	4311      	orrs	r1, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6992      	ldr	r2, [r2, #24]
 8001748:	0212      	lsls	r2, r2, #8
 800174a:	430a      	orrs	r2, r1
 800174c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	69d1      	ldr	r1, [r2, #28]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6a12      	ldr	r2, [r2, #32]
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	f042 0201 	orr.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2220      	movs	r2, #32
 8001778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af02      	add	r7, sp, #8
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	461a      	mov	r2, r3
 80017a0:	460b      	mov	r3, r1
 80017a2:	817b      	strh	r3, [r7, #10]
 80017a4:	4613      	mov	r3, r2
 80017a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b20      	cmp	r3, #32
 80017b6:	f040 80e6 	bne.w	8001986 <HAL_I2C_Master_Transmit+0x1f2>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_I2C_Master_Transmit+0x34>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e0df      	b.n	8001988 <HAL_I2C_Master_Transmit+0x1f4>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017d0:	f7ff fcb6 	bl	8001140 <HAL_GetTick>
 80017d4:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2319      	movs	r3, #25
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fada 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e0ca      	b.n	8001988 <HAL_I2C_Master_Transmit+0x1f4>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2221      	movs	r2, #33	; 0x21
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2210      	movs	r2, #16
 80017fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	893a      	ldrh	r2, [r7, #8]
 8001812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181e:	b29b      	uxth	r3, r3
 8001820:	2bff      	cmp	r3, #255	; 0xff
 8001822:	d90f      	bls.n	8001844 <HAL_I2C_Master_Transmit+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	22ff      	movs	r2, #255	; 0xff
 8001828:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182e:	b2da      	uxtb	r2, r3
 8001830:	8979      	ldrh	r1, [r7, #10]
 8001832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 fc1f 	bl	8002080 <I2C_TransferConfig>
 8001842:	e071      	b.n	8001928 <HAL_I2C_Master_Transmit+0x194>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001848:	b29a      	uxth	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001852:	b2da      	uxtb	r2, r3
 8001854:	8979      	ldrh	r1, [r7, #10]
 8001856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 fc0d 	bl	8002080 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8001866:	e05f      	b.n	8001928 <HAL_I2C_Master_Transmit+0x194>
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	6a39      	ldr	r1, [r7, #32]
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 facf 	bl	8001e10 <I2C_WaitOnTXISFlagUntilTimeout>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <HAL_I2C_Master_Transmit+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	2b04      	cmp	r3, #4
 800187e:	d101      	bne.n	8001884 <HAL_I2C_Master_Transmit+0xf0>
        {
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e081      	b.n	8001988 <HAL_I2C_Master_Transmit+0x1f4>
        }
        else
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e07f      	b.n	8001988 <HAL_I2C_Master_Transmit+0x1f4>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	1c58      	adds	r0, r3, #1
 8001892:	68f9      	ldr	r1, [r7, #12]
 8001894:	6248      	str	r0, [r1, #36]	; 0x24
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d135      	bne.n	8001928 <HAL_I2C_Master_Transmit+0x194>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d030      	beq.n	8001928 <HAL_I2C_Master_Transmit+0x194>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	2200      	movs	r2, #0
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 fa63 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <HAL_I2C_Master_Transmit+0x14c>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e053      	b.n	8001988 <HAL_I2C_Master_Transmit+0x1f4>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2bff      	cmp	r3, #255	; 0xff
 80018e8:	d90e      	bls.n	8001908 <HAL_I2C_Master_Transmit+0x174>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	22ff      	movs	r2, #255	; 0xff
 80018ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	8979      	ldrh	r1, [r7, #10]
 80018f8:	2300      	movs	r3, #0
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 fbbd 	bl	8002080 <I2C_TransferConfig>
 8001906:	e00f      	b.n	8001928 <HAL_I2C_Master_Transmit+0x194>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190c:	b29a      	uxth	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	b2da      	uxtb	r2, r3
 8001918:	8979      	ldrh	r1, [r7, #10]
 800191a:	2300      	movs	r3, #0
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 fbac 	bl	8002080 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29b      	uxth	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d19a      	bne.n	8001868 <HAL_I2C_Master_Transmit+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	6a39      	ldr	r1, [r7, #32]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 faaa 	bl	8001e90 <I2C_WaitOnSTOPFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d007      	beq.n	8001952 <HAL_I2C_Master_Transmit+0x1be>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	2b04      	cmp	r3, #4
 8001948:	d101      	bne.n	800194e <HAL_I2C_Master_Transmit+0x1ba>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e01c      	b.n	8001988 <HAL_I2C_Master_Transmit+0x1f4>
      }
      else
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e01a      	b.n	8001988 <HAL_I2C_Master_Transmit+0x1f4>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2220      	movs	r2, #32
 8001958:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_I2C_Master_Transmit+0x1fc>)
 8001966:	400b      	ands	r3, r1
 8001968:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2220      	movs	r2, #32
 800196e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <HAL_I2C_Master_Transmit+0x1f4>
  }
  else
  {
    return HAL_BUSY;
 8001986:	2302      	movs	r3, #2
  }
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	fe00e800 	.word	0xfe00e800

08001994 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	460b      	mov	r3, r1
 80019a2:	817b      	strh	r3, [r7, #10]
 80019a4:	4613      	mov	r3, r2
 80019a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b20      	cmp	r3, #32
 80019b6:	f040 80e7 	bne.w	8001b88 <HAL_I2C_Master_Receive+0x1f4>
  {    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_I2C_Master_Receive+0x34>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e0e0      	b.n	8001b8a <HAL_I2C_Master_Receive+0x1f6>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019d0:	f7ff fbb6 	bl	8001140 <HAL_GetTick>
 80019d4:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2319      	movs	r3, #25
 80019dc:	2201      	movs	r2, #1
 80019de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f9da 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e0cb      	b.n	8001b8a <HAL_I2C_Master_Receive+0x1f6>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2222      	movs	r2, #34	; 0x22
 80019f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2210      	movs	r2, #16
 80019fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	893a      	ldrh	r2, [r7, #8]
 8001a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	2bff      	cmp	r3, #255	; 0xff
 8001a22:	d90f      	bls.n	8001a44 <HAL_I2C_Master_Receive+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	22ff      	movs	r2, #255	; 0xff
 8001a28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	8979      	ldrh	r1, [r7, #10]
 8001a32:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 fb1f 	bl	8002080 <I2C_TransferConfig>
 8001a42:	e072      	b.n	8001b2a <HAL_I2C_Master_Receive+0x196>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	8979      	ldrh	r1, [r7, #10]
 8001a56:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 fb0d 	bl	8002080 <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8001a66:	e060      	b.n	8001b2a <HAL_I2C_Master_Receive+0x196>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	6a39      	ldr	r1, [r7, #32]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fa4b 	bl	8001f08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d007      	beq.n	8001a88 <HAL_I2C_Master_Receive+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d101      	bne.n	8001a84 <HAL_I2C_Master_Receive+0xf0>
        {
          return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e082      	b.n	8001b8a <HAL_I2C_Master_Receive+0x1f6>
        }
        else
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e080      	b.n	8001b8a <HAL_I2C_Master_Receive+0x1f6>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	1c59      	adds	r1, r3, #1
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	6251      	str	r1, [r2, #36]	; 0x24
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d135      	bne.n	8001b2a <HAL_I2C_Master_Receive+0x196>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d030      	beq.n	8001b2a <HAL_I2C_Master_Receive+0x196>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 f962 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_I2C_Master_Receive+0x14e>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e053      	b.n	8001b8a <HAL_I2C_Master_Receive+0x1f6>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2bff      	cmp	r3, #255	; 0xff
 8001aea:	d90e      	bls.n	8001b0a <HAL_I2C_Master_Receive+0x176>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	22ff      	movs	r2, #255	; 0xff
 8001af0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	8979      	ldrh	r1, [r7, #10]
 8001afa:	2300      	movs	r3, #0
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 fabc 	bl	8002080 <I2C_TransferConfig>
 8001b08:	e00f      	b.n	8001b2a <HAL_I2C_Master_Receive+0x196>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	8979      	ldrh	r1, [r7, #10]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 faab 	bl	8002080 <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d199      	bne.n	8001a68 <HAL_I2C_Master_Receive+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	6a39      	ldr	r1, [r7, #32]
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 f9a9 	bl	8001e90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <HAL_I2C_Master_Receive+0x1c0>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d101      	bne.n	8001b50 <HAL_I2C_Master_Receive+0x1bc>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e01c      	b.n	8001b8a <HAL_I2C_Master_Receive+0x1f6>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e01a      	b.n	8001b8a <HAL_I2C_Master_Receive+0x1f6>
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6859      	ldr	r1, [r3, #4]
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_I2C_Master_Receive+0x200>)
 8001b68:	400b      	ands	r3, r1
 8001b6a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e000      	b.n	8001b8a <HAL_I2C_Master_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 8001b88:	2302      	movs	r3, #2
  }
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	fe00e800 	.word	0xfe00e800

08001b98 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  __IO uint32_t I2C_Trials = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b20      	cmp	r3, #32
 8001bba:	f040 80c6 	bne.w	8001d4a <HAL_I2C_IsDeviceReady+0x1b2>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bcc:	d101      	bne.n	8001bd2 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e0bc      	b.n	8001d4c <HAL_I2C_IsDeviceReady+0x1b4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_I2C_IsDeviceReady+0x48>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e0b5      	b.n	8001d4c <HAL_I2C_IsDeviceReady+0x1b4>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2224      	movs	r2, #36	; 0x24
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode,DevAddress);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <HAL_I2C_IsDeviceReady+0x7a>
 8001c02:	897b      	ldrh	r3, [r7, #10]
 8001c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c10:	e004      	b.n	8001c1c <HAL_I2C_IsDeviceReady+0x84>
 8001c12:	897b      	ldrh	r3, [r7, #10]
 8001c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c18:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001c1c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fa8f 	bl	8001140 <HAL_GetTick>
 8001c22:	6178      	str	r0, [r7, #20]
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8001c24:	e018      	b.n	8001c58 <HAL_I2C_IsDeviceReady+0xc0>
      {
      	if(Timeout != HAL_MAX_DELAY)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d014      	beq.n	8001c58 <HAL_I2C_IsDeviceReady+0xc0>
      	{
          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_I2C_IsDeviceReady+0xac>
 8001c34:	f7ff fa84 	bl	8001140 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	1ad2      	subs	r2, r2, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d909      	bls.n	8001c58 <HAL_I2C_IsDeviceReady+0xc0>
          {
            /* Device is ready */
            hi2c->State = HAL_I2C_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e079      	b.n	8001d4c <HAL_I2C_IsDeviceReady+0x1b4>
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d00c      	beq.n	8001c80 <HAL_I2C_IsDeviceReady+0xe8>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b10      	cmp	r3, #16
 8001c72:	d005      	beq.n	8001c80 <HAL_I2C_IsDeviceReady+0xe8>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2ba0      	cmp	r3, #160	; 0xa0
 8001c7e:	d1d2      	bne.n	8001c26 <HAL_I2C_IsDeviceReady+0x8e>
          }
        } 
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d01a      	beq.n	8001cc4 <HAL_I2C_IsDeviceReady+0x12c>
      {
        /* Wait until STOPF flag is reset */ 
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	2120      	movs	r1, #32
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 f87f 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_I2C_IsDeviceReady+0x110>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e051      	b.n	8001d4c <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2220      	movs	r2, #32
 8001cae:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e043      	b.n	8001d4c <HAL_I2C_IsDeviceReady+0x1b4>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2120      	movs	r1, #32
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 f864 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_I2C_IsDeviceReady+0x146>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e036      	b.n	8001d4c <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2220      	movs	r2, #32
 8001cec:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials++ == Trials)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	613a      	str	r2, [r7, #16]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d118      	bne.n	8001d2c <HAL_I2C_IsDeviceReady+0x194>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	6852      	ldr	r2, [r2, #4]
 8001d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d08:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */ 
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2200      	movs	r2, #0
 8001d12:	2120      	movs	r1, #32
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f841 	bl	8001d9c <I2C_WaitOnFlagUntilTimeout>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_I2C_IsDeviceReady+0x18c>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e013      	b.n	8001d4c <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	61da      	str	r2, [r3, #28]
      }
    }while(I2C_Trials < Trials);
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f4ff af60 	bcc.w	8001bf6 <HAL_I2C_IsDeviceReady+0x5e>

    hi2c->State = HAL_I2C_STATE_READY;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e000      	b.n	8001d4c <HAL_I2C_IsDeviceReady+0x1b4>
  }
  else
  {
    return HAL_BUSY;
 8001d4a:	2302      	movs	r3, #2
  }
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d103      	bne.n	8001d72 <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d007      	beq.n	8001d90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	6992      	ldr	r2, [r2, #24]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	619a      	str	r2, [r3, #24]
  }
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dac:	e01c      	b.n	8001de8 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d018      	beq.n	8001de8 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d007      	beq.n	8001dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dbc:	f7ff f9c0 	bl	8001140 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	1ad2      	subs	r2, r2, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d90d      	bls.n	8001de8 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e00f      	b.n	8001e08 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	401a      	ands	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	bf0c      	ite	eq
 8001df8:	2301      	moveq	r3, #1
 8001dfa:	2300      	movne	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d0d3      	beq.n	8001dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e1c:	e02c      	b.n	8001e78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f8ce 	bl	8001fc4 <I2C_IsAcknowledgeFailed>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e02a      	b.n	8001e88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d01e      	beq.n	8001e78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d007      	beq.n	8001e50 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e40:	f7ff f97e 	bl	8001140 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	1ad2      	subs	r2, r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d913      	bls.n	8001e78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e54:	f043 0220 	orr.w	r2, r3, #32
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e007      	b.n	8001e88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d1cb      	bne.n	8001e1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e9c:	e028      	b.n	8001ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f88e 	bl	8001fc4 <I2C_IsAcknowledgeFailed>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e026      	b.n	8001f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001eb8:	f7ff f942 	bl	8001140 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	1ad2      	subs	r2, r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d913      	bls.n	8001ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f043 0220 	orr.w	r2, r3, #32
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e007      	b.n	8001f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	d1cf      	bne.n	8001e9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f14:	e048      	b.n	8001fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f852 	bl	8001fc4 <I2C_IsAcknowledgeFailed>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e046      	b.n	8001fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d11c      	bne.n	8001f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 8001f4c:	400b      	ands	r3, r1
 8001f4e:	6053      	str	r3, [r2, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e022      	b.n	8001fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8001f78:	f7ff f8e2 	bl	8001140 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	1ad2      	subs	r2, r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d90f      	bls.n	8001fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	f043 0220 	orr.w	r2, r3, #32
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e007      	b.n	8001fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d1af      	bne.n	8001f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	fe00e800 	.word	0xfe00e800

08001fc4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d148      	bne.n	8002070 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fde:	e01c      	b.n	800201a <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe6:	d018      	beq.n	800201a <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <I2C_IsAcknowledgeFailed+0x3a>
 8001fee:	f7ff f8a7 	bl	8001140 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1ad2      	subs	r2, r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d90d      	bls.n	800201a <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e02b      	b.n	8002072 <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b20      	cmp	r3, #32
 8002026:	d1db      	bne.n	8001fe0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2210      	movs	r2, #16
 800202e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2220      	movs	r2, #32
 8002036:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f7ff fe8b 	bl	8001d54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <I2C_IsAcknowledgeFailed+0xb8>)
 800204a:	400b      	ands	r3, r1
 800204c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2204      	movs	r2, #4
 8002052:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	fe00e800 	.word	0xfe00e800

08002080 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	817b      	strh	r3, [r7, #10]
 800208e:	4613      	mov	r3, r2
 8002090:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <I2C_TransferConfig+0x58>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 80020a6:	897b      	ldrh	r3, [r7, #10]
 80020a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020ac:	7a7b      	ldrb	r3, [r7, #9]
 80020ae:	041b      	lsls	r3, r3, #16
 80020b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	4313      	orrs	r3, r2
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	605a      	str	r2, [r3, #4]
}
 80020cc:	bf00      	nop
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	fc009800 	.word	0xfc009800

080020dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 80020e0:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40007000 	.word	0x40007000

080020fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <HAL_PWREx_GetVoltageRange+0x18>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40007000 	.word	0x40007000

08002118 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800212a:	d12f      	bne.n	800218c <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002138:	d037      	beq.n	80021aa <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800213a:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213c:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002148:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	0c9b      	lsrs	r3, r3, #18
 8002156:	2232      	movs	r2, #50	; 0x32
 8002158:	fb02 f303 	mul.w	r3, r2, r3
 800215c:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800215e:	e002      	b.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3b01      	subs	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_PWREx_ControlVoltageScaling+0x62>
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002178:	d0f2      	beq.n	8002160 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002186:	d110      	bne.n	80021aa <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e00f      	b.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002198:	d007      	beq.n	80021aa <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800219a:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}  
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40007000 	.word	0x40007000
 80021bc:	20000004 	.word	0x20000004
 80021c0:	431bde83 	.word	0x431bde83

080021c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08c      	sub	sp, #48	; 0x30
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80db 	beq.w	8002394 <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80021de:	4ba2      	ldr	r3, [pc, #648]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 8084 	bne.w	80022f4 <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ec:	4b9e      	ldr	r3, [pc, #632]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_OscConfig+0x40>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e39b      	b.n	800293c <HAL_RCC_OscConfig+0x778>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1a      	ldr	r2, [r3, #32]
 8002208:	4b97      	ldr	r3, [pc, #604]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <HAL_RCC_OscConfig+0x5a>
 8002214:	4b94      	ldr	r3, [pc, #592]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800221c:	e005      	b.n	800222a <HAL_RCC_OscConfig+0x66>
 800221e:	4b92      	ldr	r3, [pc, #584]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222a:	429a      	cmp	r2, r3
 800222c:	d923      	bls.n	8002276 <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fda4 	bl	8002d80 <RCC_SetFlashLatencyFromMSIRange>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e37c      	b.n	800293c <HAL_RCC_OscConfig+0x778>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002242:	4a89      	ldr	r2, [pc, #548]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002244:	4b88      	ldr	r3, [pc, #544]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f043 0308 	orr.w	r3, r3, #8
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4986      	ldr	r1, [pc, #536]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002250:	4b85      	ldr	r3, [pc, #532]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002260:	4981      	ldr	r1, [pc, #516]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002262:	4b81      	ldr	r3, [pc, #516]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
 8002274:	e022      	b.n	80022bc <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002276:	4a7c      	ldr	r2, [pc, #496]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002278:	4b7b      	ldr	r3, [pc, #492]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4979      	ldr	r1, [pc, #484]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002284:	4b78      	ldr	r3, [pc, #480]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002294:	4974      	ldr	r1, [pc, #464]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002296:	4b74      	ldr	r3, [pc, #464]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fd67 	bl	8002d80 <RCC_SetFlashLatencyFromMSIRange>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e33f      	b.n	800293c <HAL_RCC_OscConfig+0x778>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80022bc:	f000 fc66 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 80022c0:	4601      	mov	r1, r0
 80022c2:	4b69      	ldr	r3, [pc, #420]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022ca:	23f0      	movs	r3, #240	; 0xf0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	fa93 f3a3 	rbit	r3, r3
 80022d4:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
 80022e0:	4a62      	ldr	r2, [pc, #392]	; (800246c <HAL_RCC_OscConfig+0x2a8>)
 80022e2:	5cd3      	ldrb	r3, [r2, r3]
 80022e4:	fa21 f303 	lsr.w	r3, r1, r3
 80022e8:	4a61      	ldr	r2, [pc, #388]	; (8002470 <HAL_RCC_OscConfig+0x2ac>)
 80022ea:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7fe fefd 	bl	80010ec <HAL_InitTick>
 80022f2:	e04f      	b.n	8002394 <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d032      	beq.n	8002362 <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022fc:	4a5a      	ldr	r2, [pc, #360]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 80022fe:	4b5a      	ldr	r3, [pc, #360]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002308:	f7fe ff1a 	bl	8001140 <HAL_GetTick>
 800230c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002310:	f7fe ff16 	bl	8001140 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e30c      	b.n	800293c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002322:	4b51      	ldr	r3, [pc, #324]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800232e:	4a4e      	ldr	r2, [pc, #312]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002330:	4b4d      	ldr	r3, [pc, #308]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	494b      	ldr	r1, [pc, #300]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 800233c:	4b4a      	ldr	r3, [pc, #296]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800234c:	4946      	ldr	r1, [pc, #280]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 800234e:	4b46      	ldr	r3, [pc, #280]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
 8002360:	e018      	b.n	8002394 <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002362:	4a41      	ldr	r2, [pc, #260]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002364:	4b40      	ldr	r3, [pc, #256]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800236e:	f7fe fee7 	bl	8001140 <HAL_GetTick>
 8002372:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002376:	f7fe fee3 	bl	8001140 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e2d9      	b.n	800293c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8002388:	4b37      	ldr	r3, [pc, #220]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d07a      	beq.n	8002496 <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d00b      	beq.n	80023c4 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023ac:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80023b4:	2b0c      	cmp	r3, #12
 80023b6:	d111      	bne.n	80023dc <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d10b      	bne.n	80023dc <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	4b28      	ldr	r3, [pc, #160]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d061      	beq.n	8002494 <HAL_RCC_OscConfig+0x2d0>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d15d      	bne.n	8002494 <HAL_RCC_OscConfig+0x2d0>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e2af      	b.n	800293c <HAL_RCC_OscConfig+0x778>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e4:	d106      	bne.n	80023f4 <HAL_RCC_OscConfig+0x230>
 80023e6:	4a20      	ldr	r2, [pc, #128]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 80023e8:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e01d      	b.n	8002430 <HAL_RCC_OscConfig+0x26c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x254>
 80023fe:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4a17      	ldr	r2, [pc, #92]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0x26c>
 8002418:	4a13      	ldr	r2, [pc, #76]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4a10      	ldr	r2, [pc, #64]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_RCC_OscConfig+0x29c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fe82 	bl	8001140 <HAL_GetTick>
 800243c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7fe fe7e 	bl	8001140 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e274      	b.n	800293c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002452:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_RCC_OscConfig+0x2a4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x27c>
 800245e:	e01a      	b.n	8002496 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fe6e 	bl	8001140 <HAL_GetTick>
 8002464:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002466:	e00e      	b.n	8002486 <HAL_RCC_OscConfig+0x2c2>
 8002468:	40021000 	.word	0x40021000
 800246c:	080053d0 	.word	0x080053d0
 8002470:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7fe fe64 	bl	8001140 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e25a      	b.n	800293c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002486:	4bb0      	ldr	r3, [pc, #704]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x2b0>
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d07f      	beq.n	80025a2 <HAL_RCC_OscConfig+0x3de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80024a2:	4ba9      	ldr	r3, [pc, #676]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d00b      	beq.n	80024c6 <HAL_RCC_OscConfig+0x302>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024ae:	4ba6      	ldr	r3, [pc, #664]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d127      	bne.n	800250a <HAL_RCC_OscConfig+0x346>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024ba:	4ba3      	ldr	r3, [pc, #652]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d121      	bne.n	800250a <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c6:	4ba0      	ldr	r3, [pc, #640]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_RCC_OscConfig+0x31a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e22e      	b.n	800293c <HAL_RCC_OscConfig+0x778>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024de:	489a      	ldr	r0, [pc, #616]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80024e0:	4b99      	ldr	r3, [pc, #612]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6919      	ldr	r1, [r3, #16]
 80024ec:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 80024f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	4313      	orrs	r3, r2
 8002506:	6043      	str	r3, [r0, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	e04b      	b.n	80025a2 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d02e      	beq.n	8002570 <HAL_RCC_OscConfig+0x3ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002512:	4a8d      	ldr	r2, [pc, #564]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 8002514:	4b8c      	ldr	r3, [pc, #560]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7fe fe0f 	bl	8001140 <HAL_GetTick>
 8002522:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002526:	f7fe fe0b 	bl	8001140 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e201      	b.n	800293c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002538:	4b83      	ldr	r3, [pc, #524]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4880      	ldr	r0, [pc, #512]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 8002546:	4b80      	ldr	r3, [pc, #512]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6919      	ldr	r1, [r3, #16]
 8002552:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8002556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	613b      	str	r3, [r7, #16]
  return(result);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	4313      	orrs	r3, r2
 800256c:	6043      	str	r3, [r0, #4]
 800256e:	e018      	b.n	80025a2 <HAL_RCC_OscConfig+0x3de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002570:	4a75      	ldr	r2, [pc, #468]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 8002572:	4b75      	ldr	r3, [pc, #468]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800257a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7fe fde0 	bl	8001140 <HAL_GetTick>
 8002580:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002584:	f7fe fddc 	bl	8001140 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e1d2      	b.n	800293c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8002596:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d03c      	beq.n	8002628 <HAL_RCC_OscConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x42c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b6:	4a64      	ldr	r2, [pc, #400]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80025b8:	4b63      	ldr	r3, [pc, #396]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80025ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7fe fdbb 	bl	8001140 <HAL_GetTick>
 80025ca:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ce:	f7fe fdb7 	bl	8001140 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1ad      	b.n	800293c <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80025e0:	4b59      	ldr	r3, [pc, #356]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80025e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0ef      	beq.n	80025ce <HAL_RCC_OscConfig+0x40a>
 80025ee:	e01b      	b.n	8002628 <HAL_RCC_OscConfig+0x464>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f0:	4a55      	ldr	r2, [pc, #340]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80025f2:	4b55      	ldr	r3, [pc, #340]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80025f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe fd9e 	bl	8001140 <HAL_GetTick>
 8002604:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7fe fd9a 	bl	8001140 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e190      	b.n	800293c <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800261a:	4b4b      	ldr	r3, [pc, #300]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ef      	bne.n	8002608 <HAL_RCC_OscConfig+0x444>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80a9 	beq.w	8002788 <HAL_RCC_OscConfig+0x5c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800263c:	4b42      	ldr	r3, [pc, #264]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10e      	bne.n	8002666 <HAL_RCC_OscConfig+0x4a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002648:	4a3f      	ldr	r2, [pc, #252]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 800264a:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002652:	6593      	str	r3, [r2, #88]	; 0x58
 8002654:	4b3c      	ldr	r3, [pc, #240]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002666:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_RCC_OscConfig+0x588>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d118      	bne.n	80026a4 <HAL_RCC_OscConfig+0x4e0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002672:	4a36      	ldr	r2, [pc, #216]	; (800274c <HAL_RCC_OscConfig+0x588>)
 8002674:	4b35      	ldr	r3, [pc, #212]	; (800274c <HAL_RCC_OscConfig+0x588>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7fe fd5f 	bl	8001140 <HAL_GetTick>
 8002682:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7fe fd5b 	bl	8001140 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e151      	b.n	800293c <HAL_RCC_OscConfig+0x778>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002698:	4b2c      	ldr	r3, [pc, #176]	; (800274c <HAL_RCC_OscConfig+0x588>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x4c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d108      	bne.n	80026be <HAL_RCC_OscConfig+0x4fa>
 80026ac:	4a26      	ldr	r2, [pc, #152]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026bc:	e024      	b.n	8002708 <HAL_RCC_OscConfig+0x544>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d110      	bne.n	80026e8 <HAL_RCC_OscConfig+0x524>
 80026c6:	4a20      	ldr	r2, [pc, #128]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80026c8:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026d6:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e6:	e00f      	b.n	8002708 <HAL_RCC_OscConfig+0x544>
 80026e8:	4a17      	ldr	r2, [pc, #92]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f8:	4a13      	ldr	r2, [pc, #76]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d016      	beq.n	800273e <HAL_RCC_OscConfig+0x57a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe fd16 	bl	8001140 <HAL_GetTick>
 8002714:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x56a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe fd12 	bl	8001140 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x56a>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e106      	b.n	800293c <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_RCC_OscConfig+0x584>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0ed      	beq.n	8002718 <HAL_RCC_OscConfig+0x554>
 800273c:	e01a      	b.n	8002774 <HAL_RCC_OscConfig+0x5b0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fe fcff 	bl	8001140 <HAL_GetTick>
 8002742:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8002744:	e00f      	b.n	8002766 <HAL_RCC_OscConfig+0x5a2>
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe fcf6 	bl	8001140 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x5a2>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0ea      	b.n	800293c <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8002766:	4b77      	ldr	r3, [pc, #476]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ed      	bne.n	8002750 <HAL_RCC_OscConfig+0x58c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002774:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002778:	2b01      	cmp	r3, #1
 800277a:	d105      	bne.n	8002788 <HAL_RCC_OscConfig+0x5c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277c:	4a71      	ldr	r2, [pc, #452]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 800277e:	4b71      	ldr	r3, [pc, #452]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002786:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b00      	cmp	r3, #0
 8002792:	d03c      	beq.n	800280e <HAL_RCC_OscConfig+0x64a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x612>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800279c:	4a69      	ldr	r2, [pc, #420]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 800279e:	4b69      	ldr	r3, [pc, #420]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 80027a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7fe fcc8 	bl	8001140 <HAL_GetTick>
 80027b0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x602>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b4:	f7fe fcc4 	bl	8001140 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x602>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0ba      	b.n	800293c <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80027c6:	4b5f      	ldr	r3, [pc, #380]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 80027c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ef      	beq.n	80027b4 <HAL_RCC_OscConfig+0x5f0>
 80027d4:	e01b      	b.n	800280e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027d6:	4a5b      	ldr	r2, [pc, #364]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 80027d8:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 80027da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e6:	f7fe fcab 	bl	8001140 <HAL_GetTick>
 80027ea:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x63c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ee:	f7fe fca7 	bl	8001140 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e09d      	b.n	800293c <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8002800:	4b50      	ldr	r3, [pc, #320]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 8002802:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1ef      	bne.n	80027ee <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8091 	beq.w	800293a <HAL_RCC_OscConfig+0x776>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002818:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b0c      	cmp	r3, #12
 8002822:	f000 8088 	beq.w	8002936 <HAL_RCC_OscConfig+0x772>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	2b02      	cmp	r3, #2
 800282c:	d155      	bne.n	80028da <HAL_RCC_OscConfig+0x716>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4a45      	ldr	r2, [pc, #276]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 8002830:	4b44      	ldr	r3, [pc, #272]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fc81 	bl	8001140 <HAL_GetTick>
 800283e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe fc7d 	bl	8001140 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e073      	b.n	800293c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002854:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002860:	4938      	ldr	r1, [pc, #224]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	3b01      	subs	r3, #1
 8002868:	011a      	lsls	r2, r3, #4
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	3b01      	subs	r3, #1
 8002880:	055b      	lsls	r3, r3, #21
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	3b01      	subs	r3, #1
 800288c:	065b      	lsls	r3, r3, #25
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	06db      	lsls	r3, r3, #27
 8002896:	4313      	orrs	r3, r2
 8002898:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289a:	4a2a      	ldr	r2, [pc, #168]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028a6:	4a27      	ldr	r2, [pc, #156]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 80028a8:	4b26      	ldr	r3, [pc, #152]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028b0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7fe fc45 	bl	8001140 <HAL_GetTick>
 80028b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x708>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ba:	f7fe fc41 	bl	8001140 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x708>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e037      	b.n	800293c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x6f6>
 80028d8:	e02f      	b.n	800293a <HAL_RCC_OscConfig+0x776>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d105      	bne.n	80028fe <HAL_RCC_OscConfig+0x73a>
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028f2:	4a14      	ldr	r2, [pc, #80]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f023 0303 	bic.w	r3, r3, #3
 80028fc:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80028fe:	4a11      	ldr	r2, [pc, #68]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 8002900:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe fc17 	bl	8001140 <HAL_GetTick>
 8002912:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x764>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe fc13 	bl	8001140 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x764>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e009      	b.n	800293c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCC_OscConfig+0x780>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x752>
 8002934:	e001      	b.n	800293a <HAL_RCC_OscConfig+0x776>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_RCC_OscConfig+0x778>
    }
  }
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3730      	adds	r7, #48	; 0x30
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000

08002948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002956:	4b89      	ldr	r3, [pc, #548]	; (8002b7c <HAL_RCC_ClockConfig+0x234>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0207 	and.w	r2, r3, #7
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d210      	bcs.n	8002986 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002964:	4985      	ldr	r1, [pc, #532]	; (8002b7c <HAL_RCC_ClockConfig+0x234>)
 8002966:	4b85      	ldr	r3, [pc, #532]	; (8002b7c <HAL_RCC_ClockConfig+0x234>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 0207 	bic.w	r2, r3, #7
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	4313      	orrs	r3, r2
 8002972:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002974:	4b81      	ldr	r3, [pc, #516]	; (8002b7c <HAL_RCC_ClockConfig+0x234>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0207 	and.w	r2, r3, #7
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d001      	beq.n	8002986 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0f6      	b.n	8002b74 <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002992:	497b      	ldr	r1, [pc, #492]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 8002994:	4b7a      	ldr	r3, [pc, #488]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 808e 	beq.w	8002ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80029ba:	4b71      	ldr	r3, [pc, #452]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d121      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0d4      	b.n	8002b74 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80029d2:	4b6b      	ldr	r3, [pc, #428]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d115      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0c8      	b.n	8002b74 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80029ea:	4b65      	ldr	r3, [pc, #404]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0bc      	b.n	8002b74 <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80029fa:	4b61      	ldr	r3, [pc, #388]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0b4      	b.n	8002b74 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a0a:	495d      	ldr	r1, [pc, #372]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 8002a0c:	4b5c      	ldr	r3, [pc, #368]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 0203 	bic.w	r2, r3, #3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a1c:	f7fe fb90 	bl	8001140 <HAL_GetTick>
 8002a20:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d112      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2c:	f7fe fb88 	bl	8001140 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e098      	b.n	8002b74 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002a42:	4b4f      	ldr	r3, [pc, #316]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d1ee      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xe4>
 8002a4e:	e03e      	b.n	8002ace <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d112      	bne.n	8002a7e <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a58:	e00a      	b.n	8002a70 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5a:	f7fe fb71 	bl	8001140 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e081      	b.n	8002b74 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a70:	4b43      	ldr	r3, [pc, #268]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	d1ee      	bne.n	8002a5a <HAL_RCC_ClockConfig+0x112>
 8002a7c:	e027      	b.n	8002ace <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11d      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a88:	f7fe fb5a 	bl	8001140 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e06a      	b.n	8002b74 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8002a9e:	4b38      	ldr	r3, [pc, #224]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1ee      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x140>
 8002aaa:	e010      	b.n	8002ace <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aac:	f7fe fb48 	bl	8001140 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e058      	b.n	8002b74 <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002ac2:	4b2f      	ldr	r3, [pc, #188]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d1ee      	bne.n	8002aac <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ace:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_RCC_ClockConfig+0x234>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0207 	and.w	r2, r3, #7
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d910      	bls.n	8002afe <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002adc:	4927      	ldr	r1, [pc, #156]	; (8002b7c <HAL_RCC_ClockConfig+0x234>)
 8002ade:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_RCC_ClockConfig+0x234>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 0207 	bic.w	r2, r3, #7
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <HAL_RCC_ClockConfig+0x234>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0207 	and.w	r2, r3, #7
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d001      	beq.n	8002afe <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e03a      	b.n	8002b74 <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0a:	491d      	ldr	r1, [pc, #116]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d009      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b28:	4915      	ldr	r1, [pc, #84]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002b3c:	f000 f826 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b40:	4601      	mov	r1, r0
 8002b42:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <HAL_RCC_ClockConfig+0x238>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b4a:	23f0      	movs	r3, #240	; 0xf0
 8002b4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b60:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <HAL_RCC_ClockConfig+0x23c>)
 8002b62:	5cd3      	ldrb	r3, [r2, r3]
 8002b64:	fa21 f303 	lsr.w	r3, r1, r3
 8002b68:	4a07      	ldr	r2, [pc, #28]	; (8002b88 <HAL_RCC_ClockConfig+0x240>)
 8002b6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fe fabd 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	40021000 	.word	0x40021000
 8002b84:	080053d0 	.word	0x080053d0
 8002b88:	20000004 	.word	0x20000004

08002b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b095      	sub	sp, #84	; 0x54
 8002b90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b96:	2300      	movs	r3, #0
 8002b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	643b      	str	r3, [r7, #64]	; 0x40
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8002baa:	4b71      	ldr	r3, [pc, #452]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8002bb6:	4b6e      	ldr	r3, [pc, #440]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d13c      	bne.n	8002c3c <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8002bc2:	4b6b      	ldr	r3, [pc, #428]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d136      	bne.n	8002c3c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8002bce:	4b68      	ldr	r3, [pc, #416]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d112      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8002bda:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002be4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bfe:	e00f      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8002c00:	4b5b      	ldr	r3, [pc, #364]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c08:	23f0      	movs	r3, #240	; 0xf0
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c20:	4a54      	ldr	r2, [pc, #336]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8002c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c28:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8002c2a:	4b51      	ldr	r3, [pc, #324]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d113      	bne.n	8002c5e <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c38:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8002c3a:	e010      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c3c:	4b4c      	ldr	r3, [pc, #304]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d102      	bne.n	8002c4e <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c48:	4b4b      	ldr	r3, [pc, #300]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8002c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c4c:	e007      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c4e:	4b48      	ldr	r3, [pc, #288]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c5a:	4b48      	ldr	r3, [pc, #288]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c5c:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c5e:	4b44      	ldr	r3, [pc, #272]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b0c      	cmp	r3, #12
 8002c68:	d17b      	bne.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c6a:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8002c74:	4b3e      	ldr	r3, [pc, #248]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c7c:	2370      	movs	r3, #112	; 0x70
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	623b      	str	r3, [r7, #32]
  return(result);
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c92:	3301      	adds	r3, #1
 8002c94:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 8002c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d002      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x116>
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d018      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x146>
 8002ca0:	e02f      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8002ca2:	4a35      	ldr	r2, [pc, #212]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002caa:	4a31      	ldr	r2, [pc, #196]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002cac:	68d2      	ldr	r2, [r2, #12]
 8002cae:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8002cb2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002cb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	fa92 f2a2 	rbit	r2, r2
 8002cbe:	61ba      	str	r2, [r7, #24]
  return(result);
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	fab2 f282 	clz	r2, r2
 8002cc6:	fa21 f202 	lsr.w	r2, r1, r2
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cd0:	e02f      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8002cd2:	4a2a      	ldr	r2, [pc, #168]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	4a25      	ldr	r2, [pc, #148]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002cdc:	68d2      	ldr	r2, [r2, #12]
 8002cde:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8002ce2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002ce6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	fa92 f2a2 	rbit	r2, r2
 8002cee:	613a      	str	r2, [r7, #16]
  return(result);
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	fab2 f282 	clz	r2, r2
 8002cf6:	fa21 f202 	lsr.w	r2, r1, r2
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d00:	e017      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8002d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002d0c:	68d2      	ldr	r2, [r2, #12]
 8002d0e:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8002d12:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002d16:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	fa92 f2a2 	rbit	r2, r2
 8002d1e:	60ba      	str	r2, [r7, #8]
  return(result);
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	fab2 f282 	clz	r2, r2
 8002d26:	fa21 f202 	lsr.w	r2, r1, r2
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d30:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8002d32:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d3a:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002d3e:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	603b      	str	r3, [r7, #0]
  return(result);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 8002d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 8002d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3754      	adds	r7, #84	; 0x54
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40021000 	.word	0x40021000
 8002d74:	080053e0 	.word	0x080053e0
 8002d78:	00f42400 	.word	0x00f42400
 8002d7c:	007a1200 	.word	0x007a1200

08002d80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d90:	4b2a      	ldr	r3, [pc, #168]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d9c:	f7ff f9ae 	bl	80020fc <HAL_PWREx_GetVoltageRange>
 8002da0:	6178      	str	r0, [r7, #20]
 8002da2:	e014      	b.n	8002dce <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002da4:	4a25      	ldr	r2, [pc, #148]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002da6:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dae:	6593      	str	r3, [r2, #88]	; 0x58
 8002db0:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dbc:	f7ff f99e 	bl	80020fc <HAL_PWREx_GetVoltageRange>
 8002dc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dc2:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd4:	d10b      	bne.n	8002dee <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d919      	bls.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2ba0      	cmp	r3, #160	; 0xa0
 8002de0:	d902      	bls.n	8002de8 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002de2:	2302      	movs	r3, #2
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	e013      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002de8:	2301      	movs	r3, #1
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	e010      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b80      	cmp	r3, #128	; 0x80
 8002df2:	d902      	bls.n	8002dfa <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002df4:	2303      	movs	r3, #3
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	e00a      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b80      	cmp	r3, #128	; 0x80
 8002dfe:	d102      	bne.n	8002e06 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e00:	2302      	movs	r3, #2
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	e004      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b70      	cmp	r3, #112	; 0x70
 8002e0a:	d101      	bne.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8002e10:	490b      	ldr	r1, [pc, #44]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 0207 	bic.w	r2, r3, #7
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002e20:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0207 	and.w	r2, r3, #7
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d001      	beq.n	8002e32 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40022000 	.word	0x40022000

08002e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e54:	2300      	movs	r3, #0
 8002e56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e58:	2300      	movs	r3, #0
 8002e5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d02f      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e70:	d005      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002e72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e76:	d015      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x48>
 8002e7c:	e00f      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002e7e:	4a5a      	ldr	r2, [pc, #360]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e80:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e8a:	e00c      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x62>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fa2c 	bl	80032f0 <RCCEx_PLLSAI1_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e9c:	e003      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x62>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x62>
      break;
 8002ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ea6:	7cfb      	ldrb	r3, [r7, #19]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eac:	494e      	ldr	r1, [pc, #312]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eae:	4b4e      	ldr	r3, [pc, #312]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ec2:	e001      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8098 	beq.w	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eda:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10d      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	4a40      	ldr	r2, [pc, #256]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ee8:	4b3f      	ldr	r3, [pc, #252]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef2:	4b3d      	ldr	r3, [pc, #244]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efe:	2301      	movs	r3, #1
 8002f00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f02:	4a3a      	ldr	r2, [pc, #232]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002f04:	4b39      	ldr	r3, [pc, #228]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f0e:	f7fe f917 	bl	8001140 <HAL_GetTick>
 8002f12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f14:	e009      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f16:	f7fe f913 	bl	8001140 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d902      	bls.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      {
        ret = HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	74fb      	strb	r3, [r7, #19]
        break;
 8002f28:	e005      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f2a:	4b30      	ldr	r3, [pc, #192]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ef      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }

    if(ret == HAL_OK)
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d159      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f3c:	4b2a      	ldr	r3, [pc, #168]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01e      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d019      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x148>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f58:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f64:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f74:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f84:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d016      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fe f8d3 	bl	8001140 <HAL_GetTick>
 8002f9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x172>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe f8cf 	bl	8001140 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d902      	bls.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x172>
          {
            ret = HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	74fb      	strb	r3, [r7, #19]
            break;
 8002fb4:	e006      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ec      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fca:	4907      	ldr	r1, [pc, #28]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fe2:	7cfb      	ldrb	r3, [r7, #19]
 8002fe4:	74bb      	strb	r3, [r7, #18]
 8002fe6:	e005      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff4:	7c7b      	ldrb	r3, [r7, #17]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d105      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffa:	4a8d      	ldr	r2, [pc, #564]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002ffc:	4b8c      	ldr	r3, [pc, #560]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003004:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003012:	4987      	ldr	r1, [pc, #540]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003014:	4b86      	ldr	r3, [pc, #536]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f023 0203 	bic.w	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003034:	497e      	ldr	r1, [pc, #504]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003036:	4b7e      	ldr	r3, [pc, #504]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	f023 020c 	bic.w	r2, r3, #12
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003056:	4976      	ldr	r1, [pc, #472]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003058:	4b75      	ldr	r3, [pc, #468]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003078:	496d      	ldr	r1, [pc, #436]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800307a:	4b6d      	ldr	r3, [pc, #436]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003080:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800309a:	4965      	ldr	r1, [pc, #404]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800309c:	4b64      	ldr	r3, [pc, #400]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030bc:	495c      	ldr	r1, [pc, #368]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80030be:	4b5c      	ldr	r3, [pc, #368]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030de:	4954      	ldr	r1, [pc, #336]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80030e0:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)  

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003100:	494b      	ldr	r1, [pc, #300]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003102:	4b4b      	ldr	r3, [pc, #300]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003122:	4943      	ldr	r1, [pc, #268]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003124:	4b42      	ldr	r3, [pc, #264]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d028      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003144:	493a      	ldr	r1, [pc, #232]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003146:	4b3a      	ldr	r3, [pc, #232]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003162:	d106      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003164:	4a32      	ldr	r2, [pc, #200]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003166:	4b32      	ldr	r3, [pc, #200]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800316e:	60d3      	str	r3, [r2, #12]
 8003170:	e011      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x352>
    }
    else if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003176:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800317a:	d10c      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x352>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	2101      	movs	r1, #1
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f8b4 	bl	80032f0 <RCCEx_PLLSAI1_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x352>
      {
        /* set overall return value */
        status = ret;
 8003192:	7cfb      	ldrb	r3, [r7, #19]
 8003194:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d028      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031a2:	4923      	ldr	r1, [pc, #140]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80031a4:	4b22      	ldr	r3, [pc, #136]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031c0:	d106      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031c2:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031cc:	60d3      	str	r3, [r2, #12]
 80031ce:	e011      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3304      	adds	r3, #4
 80031de:	2101      	movs	r1, #1
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 f885 	bl	80032f0 <RCCEx_PLLSAI1_Config>
 80031e6:	4603      	mov	r3, r0
 80031e8:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 80031ea:	7cfb      	ldrb	r3, [r7, #19]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      {
        /* set overall return value */
        status = ret;
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d02b      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x414>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003200:	490b      	ldr	r1, [pc, #44]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321e:	d109      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003220:	4a03      	ldr	r2, [pc, #12]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003222:	4b03      	ldr	r3, [pc, #12]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800322a:	60d3      	str	r3, [r2, #12]
 800322c:	e014      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003238:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800323c:	d10c      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	2101      	movs	r1, #1
 8003244:	4618      	mov	r0, r3
 8003246:	f000 f853 	bl	80032f0 <RCCEx_PLLSAI1_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 800324e:	7cfb      	ldrb	r3, [r7, #19]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x414>
      {
        /* set overall return value */
        status = ret;
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01c      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003264:	4919      	ldr	r1, [pc, #100]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003266:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003282:	d10c      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3304      	adds	r3, #4
 8003288:	2102      	movs	r1, #2
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f830 	bl	80032f0 <RCCEx_PLLSAI1_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x45a>
      {
        /* set overall return value */
        status = ret;
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032aa:	4908      	ldr	r1, [pc, #32]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 80032c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000

080032d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80032d4:	4a05      	ldr	r2, [pc, #20]	; (80032ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	6013      	str	r3, [r2, #0]
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000

080032f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b095      	sub	sp, #84	; 0x54
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003304:	4ba3      	ldr	r3, [pc, #652]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d023      	beq.n	8003358 <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003310:	4ba0      	ldr	r3, [pc, #640]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0203 	and.w	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d117      	bne.n	8003350 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
       || 
 8003324:	2b00      	cmp	r3, #0
 8003326:	d013      	beq.n	8003350 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 8003328:	4b9a      	ldr	r3, [pc, #616]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003330:	2370      	movs	r3, #112	; 0x70
 8003332:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800333c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	fa22 f303 	lsr.w	r3, r2, r3
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
       || 
 800334c:	429a      	cmp	r2, r3
 800334e:	d054      	beq.n	80033fa <RCCEx_PLLSAI1_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003356:	e050      	b.n	80033fa <RCCEx_PLLSAI1_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d00d      	beq.n	800337c <RCCEx_PLLSAI1_Config+0x8c>
 8003360:	2b03      	cmp	r3, #3
 8003362:	d015      	beq.n	8003390 <RCCEx_PLLSAI1_Config+0xa0>
 8003364:	2b01      	cmp	r3, #1
 8003366:	d123      	bne.n	80033b0 <RCCEx_PLLSAI1_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003368:	4b8a      	ldr	r3, [pc, #552]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d121      	bne.n	80033b8 <RCCEx_PLLSAI1_Config+0xc8>
      {
        status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 800337a:	e01d      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800337c:	4b85      	ldr	r3, [pc, #532]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003384:	2b00      	cmp	r3, #0
 8003386:	d119      	bne.n	80033bc <RCCEx_PLLSAI1_Config+0xcc>
      {
        status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 800338e:	e015      	b.n	80033bc <RCCEx_PLLSAI1_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003390:	4b80      	ldr	r3, [pc, #512]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d111      	bne.n	80033c0 <RCCEx_PLLSAI1_Config+0xd0>
 800339c:	4b7d      	ldr	r3, [pc, #500]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <RCCEx_PLLSAI1_Config+0xd0>
      {
        status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 80033ae:	e007      	b.n	80033c0 <RCCEx_PLLSAI1_Config+0xd0>
    default:
      status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      break;
 80033b6:	e004      	b.n	80033c2 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80033b8:	bf00      	nop
 80033ba:	e002      	b.n	80033c2 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80033bc:	bf00      	nop
 80033be:	e000      	b.n	80033c2 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80033c0:	bf00      	nop
    }
    
    if(status == HAL_OK)
 80033c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d117      	bne.n	80033fa <RCCEx_PLLSAI1_Config+0x10a>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 80033ca:	4c72      	ldr	r4, [pc, #456]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 80033cc:	4b71      	ldr	r3, [pc, #452]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6819      	ldr	r1, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	1e58      	subs	r0, r3, #1
 80033de:	2370      	movs	r3, #112	; 0x70
 80033e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80033ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ec:	fab3 f383 	clz	r3, r3
 80033f0:	fa00 f303 	lsl.w	r3, r0, r3
 80033f4:	430b      	orrs	r3, r1
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 80033fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 80c1 	bne.w	8003586 <RCCEx_PLLSAI1_Config+0x296>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003404:	4a63      	ldr	r2, [pc, #396]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003406:	4b63      	ldr	r3, [pc, #396]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800340e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003410:	f7fd fe96 	bl	8001140 <HAL_GetTick>
 8003414:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8003416:	e00a      	b.n	800342e <RCCEx_PLLSAI1_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003418:	f7fd fe92 	bl	8001140 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d903      	bls.n	800342e <RCCEx_PLLSAI1_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        break;
 800342c:	e005      	b.n	800343a <RCCEx_PLLSAI1_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800342e:	4b59      	ldr	r3, [pc, #356]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1ee      	bne.n	8003418 <RCCEx_PLLSAI1_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 800343a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800343e:	2b00      	cmp	r3, #0
 8003440:	f040 80a1 	bne.w	8003586 <RCCEx_PLLSAI1_Config+0x296>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d125      	bne.n	8003496 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800344a:	4c52      	ldr	r4, [pc, #328]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 800344c:	4b51      	ldr	r3, [pc, #324]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003454:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6891      	ldr	r1, [r2, #8]
 800345c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003460:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003464:	fa92 f2a2 	rbit	r2, r2
 8003468:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 800346a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800346c:	fab2 f282 	clz	r2, r2
 8003470:	4091      	lsls	r1, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68d0      	ldr	r0, [r2, #12]
 8003476:	f04f 4278 	mov.w	r2, #4160749568	; 0xf8000000
 800347a:	637a      	str	r2, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800347e:	fa92 f2a2 	rbit	r2, r2
 8003482:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8003484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003486:	fab2 f282 	clz	r2, r2
 800348a:	fa00 f202 	lsl.w	r2, r0, r2
 800348e:	430a      	orrs	r2, r1
 8003490:	4313      	orrs	r3, r2
 8003492:	6123      	str	r3, [r4, #16]
 8003494:	e051      	b.n	800353a <RCCEx_PLLSAI1_Config+0x24a>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d127      	bne.n	80034ec <RCCEx_PLLSAI1_Config+0x1fc>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800349c:	4c3d      	ldr	r4, [pc, #244]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 800349e:	4b3d      	ldr	r3, [pc, #244]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6891      	ldr	r1, [r2, #8]
 80034ae:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80034b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	fa92 f2a2 	rbit	r2, r2
 80034ba:	61ba      	str	r2, [r7, #24]
  return(result);
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	fab2 f282 	clz	r2, r2
 80034c2:	4091      	lsls	r1, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6912      	ldr	r2, [r2, #16]
 80034c8:	0852      	lsrs	r2, r2, #1
 80034ca:	1e50      	subs	r0, r2, #1
 80034cc:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80034d0:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d4:	fa92 f2a2 	rbit	r2, r2
 80034d8:	623a      	str	r2, [r7, #32]
  return(result);
 80034da:	6a3a      	ldr	r2, [r7, #32]
 80034dc:	fab2 f282 	clz	r2, r2
 80034e0:	fa00 f202 	lsl.w	r2, r0, r2
 80034e4:	430a      	orrs	r2, r1
 80034e6:	4313      	orrs	r3, r2
 80034e8:	6123      	str	r3, [r4, #16]
 80034ea:	e026      	b.n	800353a <RCCEx_PLLSAI1_Config+0x24a>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80034ec:	4c29      	ldr	r4, [pc, #164]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 80034ee:	4b29      	ldr	r3, [pc, #164]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6891      	ldr	r1, [r2, #8]
 80034fe:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003502:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	fa92 f2a2 	rbit	r2, r2
 800350a:	60ba      	str	r2, [r7, #8]
  return(result);
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	fab2 f282 	clz	r2, r2
 8003512:	4091      	lsls	r1, r2
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6952      	ldr	r2, [r2, #20]
 8003518:	0852      	lsrs	r2, r2, #1
 800351a:	1e50      	subs	r0, r2, #1
 800351c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003520:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	fa92 f2a2 	rbit	r2, r2
 8003528:	613a      	str	r2, [r7, #16]
  return(result);
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	fab2 f282 	clz	r2, r2
 8003530:	fa00 f202 	lsl.w	r2, r0, r2
 8003534:	430a      	orrs	r2, r1
 8003536:	4313      	orrs	r3, r2
 8003538:	6123      	str	r3, [r4, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800353a:	4a16      	ldr	r2, [pc, #88]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 800353c:	4b15      	ldr	r3, [pc, #84]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003544:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fd fdfb 	bl	8001140 <HAL_GetTick>
 800354a:	64b8      	str	r0, [r7, #72]	; 0x48

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800354c:	e00a      	b.n	8003564 <RCCEx_PLLSAI1_Config+0x274>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800354e:	f7fd fdf7 	bl	8001140 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d903      	bls.n	8003564 <RCCEx_PLLSAI1_Config+0x274>
        {
          status = HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003562:	e005      	b.n	8003570 <RCCEx_PLLSAI1_Config+0x280>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0ee      	beq.n	800354e <RCCEx_PLLSAI1_Config+0x25e>
        }
      }

      if(status == HAL_OK)    
 8003570:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003574:	2b00      	cmp	r3, #0
 8003576:	d106      	bne.n	8003586 <RCCEx_PLLSAI1_Config+0x296>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003578:	4906      	ldr	r1, [pc, #24]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <RCCEx_PLLSAI1_Config+0x2a4>)
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 8003586:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800358a:	4618      	mov	r0, r3
 800358c:	3754      	adds	r7, #84	; 0x54
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000

08003598 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e07a      	b.n	80036a0 <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f001 fa29 	bl	8004a1c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035ea:	d902      	bls.n	80035f2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e002      	b.n	80035f8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003600:	d007      	beq.n	8003612 <HAL_SPI_Init+0x7a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800360a:	d002      	beq.n	8003612 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10b      	bne.n	8003632 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003622:	d903      	bls.n	800362c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	631a      	str	r2, [r3, #48]	; 0x30
 800362a:	e002      	b.n	8003632 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6851      	ldr	r1, [r2, #4]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6892      	ldr	r2, [r2, #8]
 800363e:	4311      	orrs	r1, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6912      	ldr	r2, [r2, #16]
 8003644:	4311      	orrs	r1, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6952      	ldr	r2, [r2, #20]
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6992      	ldr	r2, [r2, #24]
 8003650:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003654:	4311      	orrs	r1, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	69d2      	ldr	r2, [r2, #28]
 800365a:	4311      	orrs	r1, r2
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6a12      	ldr	r2, [r2, #32]
 8003660:	4311      	orrs	r1, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003666:	430a      	orrs	r2, r1
 8003668:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6992      	ldr	r2, [r2, #24]
 8003672:	0c12      	lsrs	r2, r2, #16
 8003674:	f002 0104 	and.w	r1, r2, #4
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800367c:	4311      	orrs	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	68d2      	ldr	r2, [r2, #12]
 8003688:	4311      	orrs	r1, r2
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	430a      	orrs	r2, r1
 800368e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	4613      	mov	r3, r2
 80036b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_SPI_Transmit+0x26>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e13e      	b.n	800394c <HAL_SPI_Transmit+0x2a4>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036d6:	f7fd fd33 	bl	8001140 <HAL_GetTick>
 80036da:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d002      	beq.n	80036ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
 80036ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036ec:	e125      	b.n	800393a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <HAL_SPI_Transmit+0x52>
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036fe:	e11c      	b.n	800393a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2203      	movs	r2, #3
 8003704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	88fa      	ldrh	r2, [r7, #6]
 8003718:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	88fa      	ldrh	r2, [r7, #6]
 800371e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800374a:	d107      	bne.n	800375c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800375a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d007      	beq.n	800377a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003782:	d947      	bls.n	8003814 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <HAL_SPI_Transmit+0xee>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b01      	cmp	r3, #1
 8003794:	d138      	bne.n	8003808 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	8812      	ldrh	r2, [r2, #0]
 800379e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	3302      	adds	r3, #2
 80037a4:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037b4:	e028      	b.n	8003808 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d10f      	bne.n	80037e4 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	8812      	ldrh	r2, [r2, #0]
 80037cc:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	3302      	adds	r3, #2
 80037d2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037e2:	e011      	b.n	8003808 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <HAL_SPI_Transmit+0x15a>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d00a      	beq.n	8003808 <HAL_SPI_Transmit+0x160>
 80037f2:	f7fd fca5 	bl	8001140 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad2      	subs	r2, r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003806:	e098      	b.n	800393a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1d1      	bne.n	80037b6 <HAL_SPI_Transmit+0x10e>
 8003812:	e072      	b.n	80038fa <HAL_SPI_Transmit+0x252>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <HAL_SPI_Transmit+0x17e>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b01      	cmp	r3, #1
 8003824:	d164      	bne.n	80038f0 <HAL_SPI_Transmit+0x248>
    {
      if (hspi->TxXferCount > 1U)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	d90f      	bls.n	8003850 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	8812      	ldrh	r2, [r2, #0]
 8003838:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	3302      	adds	r3, #2
 800383e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b02      	subs	r3, #2
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800384e:	e04f      	b.n	80038f0 <HAL_SPI_Transmit+0x248>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f103 020c 	add.w	r2, r3, #12
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	1c59      	adds	r1, r3, #1
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003870:	e03e      	b.n	80038f0 <HAL_SPI_Transmit+0x248>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b02      	cmp	r3, #2
 800387e:	d125      	bne.n	80038cc <HAL_SPI_Transmit+0x224>
      {
        if (hspi->TxXferCount > 1U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d90f      	bls.n	80038aa <HAL_SPI_Transmit+0x202>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	8812      	ldrh	r2, [r2, #0]
 8003892:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	3302      	adds	r3, #2
 8003898:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b02      	subs	r3, #2
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038a8:	e022      	b.n	80038f0 <HAL_SPI_Transmit+0x248>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f103 020c 	add.w	r2, r3, #12
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1c59      	adds	r1, r3, #1
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038ca:	e011      	b.n	80038f0 <HAL_SPI_Transmit+0x248>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_SPI_Transmit+0x242>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d00a      	beq.n	80038f0 <HAL_SPI_Transmit+0x248>
 80038da:	f7fd fc31 	bl	8001140 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	1ad2      	subs	r2, r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <HAL_SPI_Transmit+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038ee:	e024      	b.n	800393a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1bb      	bne.n	8003872 <HAL_SPI_Transmit+0x1ca>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	6839      	ldr	r1, [r7, #0]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f902 	bl	8003b08 <SPI_EndRxTxTransaction>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_SPI_Transmit+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <HAL_SPI_Transmit+0x286>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_SPI_Transmit+0x292>
  {
    errorcode = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800394a:	7ffb      	ldrb	r3, [r7, #31]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003962:	e04d      	b.n	8003a00 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396a:	d049      	beq.n	8003a00 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003972:	f7fd fbe5 	bl	8001140 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	1ad2      	subs	r2, r2, r3
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d33e      	bcc.n	8003a00 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	6852      	ldr	r2, [r2, #4]
 800398c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003990:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800399a:	d111      	bne.n	80039c0 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a4:	d004      	beq.n	80039b0 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ae:	d107      	bne.n	80039c0 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	6812      	ldr	r2, [r2, #0]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c8:	d110      	bne.n	80039ec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6819      	ldr	r1, [r3, #0]
 80039d4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80039d8:	400b      	ands	r3, r1
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e00e      	b.n	8003a1e <SPI_WaitFlagStateUntilTimeout+0xca>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	401a      	ands	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d101      	bne.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8003a10:	2201      	movs	r2, #1
 8003a12:	e000      	b.n	8003a16 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8003a14:	2200      	movs	r2, #0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d1a3      	bne.n	8003964 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b086      	sub	sp, #24
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8003a34:	e05b      	b.n	8003aee <SPI_WaitFifoStateUntilTimeout+0xc8>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a3c:	d109      	bne.n	8003a52 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d049      	beq.n	8003aee <SPI_WaitFifoStateUntilTimeout+0xc8>
    {
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8003a60:	f7fd fb6e 	bl	8001140 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	1ad2      	subs	r2, r2, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d33e      	bcc.n	8003aee <SPI_WaitFifoStateUntilTimeout+0xc8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	6852      	ldr	r2, [r2, #4]
 8003a7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a88:	d111      	bne.n	8003aae <SPI_WaitFifoStateUntilTimeout+0x88>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a92:	d004      	beq.n	8003a9e <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a9c:	d107      	bne.n	8003aae <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab6:	d110      	bne.n	8003ada <SPI_WaitFifoStateUntilTimeout+0xb4>
        {
          SPI_RESET_CRC(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003ac6:	400b      	ands	r3, r1
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ad8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e008      	b.n	8003b00 <SPI_WaitFifoStateUntilTimeout+0xda>
  while ((hspi->Instance->SR & Fifo) != State)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	401a      	ands	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d19b      	bne.n	8003a36 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <SPI_EndRxTxTransaction>:
  * @param hspi: SPI handle
  * @param Timeout: Timeout duration
  * @param  Tickstart: tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f7ff ff80 	bl	8003a26 <SPI_WaitFifoStateUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e013      	b.n	8003b64 <SPI_EndRxTxTransaction+0x5c>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2200      	movs	r2, #0
 8003b44:	2180      	movs	r1, #128	; 0x80
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff ff04 	bl	8003954 <SPI_WaitFlagStateUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e000      	b.n	8003b64 <SPI_EndRxTxTransaction+0x5c>
  }
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003b70:	f000 fbb4 	bl	80042dc <xTaskGetSchedulerState>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d001      	beq.n	8003b7e <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8003b7a:	f000 f923 	bl	8003dc4 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	601a      	str	r2, [r3, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d103      	bne.n	8003bea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	e00c      	b.n	8003c04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3308      	adds	r3, #8
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	e002      	b.n	8003bf8 <vListInsert+0x2e>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d9f6      	bls.n	8003bf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	601a      	str	r2, [r3, #0]
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6892      	ldr	r2, [r2, #8]
 8003c52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6852      	ldr	r2, [r2, #4]
 8003c5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d103      	bne.n	8003c70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	1e5a      	subs	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <pxCurrentTCBConst2>)
 8003c92:	6819      	ldr	r1, [r3, #0]
 8003c94:	6808      	ldr	r0, [r1, #0]
 8003c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9a:	f380 8809 	msr	PSP, r0
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f04f 0000 	mov.w	r0, #0
 8003ca6:	f380 8811 	msr	BASEPRI, r0
 8003caa:	4770      	bx	lr

08003cac <pxCurrentTCBConst2>:
 8003cac:	20000024 	.word	0x20000024
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop

08003cb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <vPortEnterCritical+0x54>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	4a0d      	ldr	r2, [pc, #52]	; (8003d08 <vPortEnterCritical+0x54>)
 8003cd4:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <vPortEnterCritical+0x54>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d10e      	bne.n	8003cfc <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cde:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <vPortEnterCritical+0x58>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d009      	beq.n	8003cfc <vPortEnterCritical+0x48>
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	e7fe      	b.n	8003cfa <vPortEnterCritical+0x46>
	}
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	20000000 	.word	0x20000000
 8003d0c:	e000ed04 	.word	0xe000ed04

08003d10 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d16:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <vPortExitCritical+0x4c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <vPortExitCritical+0x22>
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	e7fe      	b.n	8003d30 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <vPortExitCritical+0x4c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	4a08      	ldr	r2, [pc, #32]	; (8003d5c <vPortExitCritical+0x4c>)
 8003d3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d3c:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <vPortExitCritical+0x4c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <vPortExitCritical+0x3e>
 8003d44:	2300      	movs	r3, #0
 8003d46:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000000 	.word	0x20000000

08003d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d60:	f3ef 8009 	mrs	r0, PSP
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <pxCurrentTCBConst>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	f01e 0f10 	tst.w	lr, #16
 8003d70:	bf08      	it	eq
 8003d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7a:	6010      	str	r0, [r2, #0]
 8003d7c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d84:	f380 8811 	msr	BASEPRI, r0
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f000 f9ee 	bl	8004170 <vTaskSwitchContext>
 8003d94:	f04f 0000 	mov.w	r0, #0
 8003d98:	f380 8811 	msr	BASEPRI, r0
 8003d9c:	bc08      	pop	{r3}
 8003d9e:	6819      	ldr	r1, [r3, #0]
 8003da0:	6808      	ldr	r0, [r1, #0]
 8003da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da6:	f01e 0f10 	tst.w	lr, #16
 8003daa:	bf08      	it	eq
 8003dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003db0:	f380 8809 	msr	PSP, r0
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop

08003dbc <pxCurrentTCBConst>:
 8003dbc:	20000024 	.word	0x20000024
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop

08003dc4 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
	__asm volatile
 8003dca:	f3ef 8211 	mrs	r2, BASEPRI
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	60fa      	str	r2, [r7, #12]
 8003de0:	60bb      	str	r3, [r7, #8]
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003de2:	f000 f907 	bl	8003ff4 <xTaskIncrementTick>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <xPortSysTickHandler+0x44>)
 8003dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	2300      	movs	r3, #0
 8003df6:	607b      	str	r3, [r7, #4]
	__asm volatile
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d02f      	beq.n	8003e7e <vTaskDelay+0x72>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e1e:	4b1f      	ldr	r3, [pc, #124]	; (8003e9c <vTaskDelay+0x90>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <vTaskDelay+0x2e>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e7fe      	b.n	8003e38 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003e3a:	f000 f839 	bl	8003eb0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8003e3e:	4b18      	ldr	r3, [pc, #96]	; (8003ea0 <vTaskDelay+0x94>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003e48:	4b16      	ldr	r3, [pc, #88]	; (8003ea4 <vTaskDelay+0x98>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff fef4 	bl	8003c3c <uxListRemove>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <vTaskDelay+0x66>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <vTaskDelay+0x98>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	2201      	movs	r2, #1
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43da      	mvns	r2, r3
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <vTaskDelay+0x9c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ea8 <vTaskDelay+0x9c>)
 8003e70:	6013      	str	r3, [r2, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003e72:	6938      	ldr	r0, [r7, #16]
 8003e74:	f000 f9d6 	bl	8004224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e78:	f000 f828 	bl	8003ecc <xTaskResumeAll>
 8003e7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d107      	bne.n	8003e94 <vTaskDelay+0x88>
		{
			portYIELD_WITHIN_API();
 8003e84:	4b09      	ldr	r3, [pc, #36]	; (8003eac <vTaskDelay+0xa0>)
 8003e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e94:	bf00      	nop
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	200000f0 	.word	0x200000f0
 8003ea0:	200000d4 	.word	0x200000d4
 8003ea4:	20000024 	.word	0x20000024
 8003ea8:	200000d8 	.word	0x200000d8
 8003eac:	e000ed04 	.word	0xe000ed04

08003eb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <vTaskSuspendAll+0x18>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	4a03      	ldr	r2, [pc, #12]	; (8003ec8 <vTaskSuspendAll+0x18>)
 8003ebc:	6013      	str	r3, [r2, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	200000f0 	.word	0x200000f0

08003ecc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <xTaskResumeAll+0x104>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <xTaskResumeAll+0x26>
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	607b      	str	r3, [r7, #4]
 8003ef0:	e7fe      	b.n	8003ef0 <xTaskResumeAll+0x24>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ef2:	f7ff fedf 	bl	8003cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ef6:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <xTaskResumeAll+0x104>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	4a34      	ldr	r2, [pc, #208]	; (8003fd0 <xTaskResumeAll+0x104>)
 8003efe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f00:	4b33      	ldr	r3, [pc, #204]	; (8003fd0 <xTaskResumeAll+0x104>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d15b      	bne.n	8003fc0 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f08:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <xTaskResumeAll+0x108>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d057      	beq.n	8003fc0 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f10:	e02e      	b.n	8003f70 <xTaskResumeAll+0xa4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003f12:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <xTaskResumeAll+0x10c>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	60bb      	str	r3, [r7, #8]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	3318      	adds	r3, #24
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fe8c 	bl	8003c3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fe87 	bl	8003c3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	2201      	movs	r2, #1
 8003f34:	409a      	lsls	r2, r3
 8003f36:	4b29      	ldr	r3, [pc, #164]	; (8003fdc <xTaskResumeAll+0x110>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	4a27      	ldr	r2, [pc, #156]	; (8003fdc <xTaskResumeAll+0x110>)
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4a24      	ldr	r2, [pc, #144]	; (8003fe0 <xTaskResumeAll+0x114>)
 8003f4e:	441a      	add	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f7ff fe13 	bl	8003b82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f60:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <xTaskResumeAll+0x118>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d302      	bcc.n	8003f70 <xTaskResumeAll+0xa4>
					{
						xYieldPending = pdTRUE;
 8003f6a:	4b1f      	ldr	r3, [pc, #124]	; (8003fe8 <xTaskResumeAll+0x11c>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <xTaskResumeAll+0x10c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1cc      	bne.n	8003f12 <xTaskResumeAll+0x46>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8003f78:	4b1c      	ldr	r3, [pc, #112]	; (8003fec <xTaskResumeAll+0x120>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d011      	beq.n	8003fa4 <xTaskResumeAll+0xd8>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8003f80:	e00c      	b.n	8003f9c <xTaskResumeAll+0xd0>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8003f82:	f000 f837 	bl	8003ff4 <xTaskIncrementTick>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <xTaskResumeAll+0xc6>
						{
							xYieldPending = pdTRUE;
 8003f8c:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <xTaskResumeAll+0x11c>)
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8003f92:	4b16      	ldr	r3, [pc, #88]	; (8003fec <xTaskResumeAll+0x120>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	4a14      	ldr	r2, [pc, #80]	; (8003fec <xTaskResumeAll+0x120>)
 8003f9a:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8003f9c:	4b13      	ldr	r3, [pc, #76]	; (8003fec <xTaskResumeAll+0x120>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1ee      	bne.n	8003f82 <xTaskResumeAll+0xb6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8003fa4:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <xTaskResumeAll+0x11c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d109      	bne.n	8003fc0 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fac:	2301      	movs	r3, #1
 8003fae:	60fb      	str	r3, [r7, #12]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <xTaskResumeAll+0x124>)
 8003fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fc0:	f7ff fea6 	bl	8003d10 <vPortExitCritical>

	return xAlreadyYielded;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	200000f0 	.word	0x200000f0
 8003fd4:	200000d0 	.word	0x200000d0
 8003fd8:	200000bc 	.word	0x200000bc
 8003fdc:	200000d8 	.word	0x200000d8
 8003fe0:	20000028 	.word	0x20000028
 8003fe4:	20000024 	.word	0x20000024
 8003fe8:	200000e4 	.word	0x200000e4
 8003fec:	200000e0 	.word	0x200000e0
 8003ff0:	e000ed04 	.word	0xe000ed04

08003ff4 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ffe:	4b51      	ldr	r3, [pc, #324]	; (8004144 <xTaskIncrementTick+0x150>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f040 808d 	bne.w	8004122 <xTaskIncrementTick+0x12e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8004008:	4b4f      	ldr	r3, [pc, #316]	; (8004148 <xTaskIncrementTick+0x154>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3301      	adds	r3, #1
 800400e:	4a4e      	ldr	r2, [pc, #312]	; (8004148 <xTaskIncrementTick+0x154>)
 8004010:	6013      	str	r3, [r2, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004012:	4b4d      	ldr	r3, [pc, #308]	; (8004148 <xTaskIncrementTick+0x154>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d11f      	bne.n	800405e <xTaskIncrementTick+0x6a>
			{
				taskSWITCH_DELAYED_LISTS();
 800401e:	4b4b      	ldr	r3, [pc, #300]	; (800414c <xTaskIncrementTick+0x158>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <xTaskIncrementTick+0x48>
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	e7fe      	b.n	800403a <xTaskIncrementTick+0x46>
 800403c:	4b43      	ldr	r3, [pc, #268]	; (800414c <xTaskIncrementTick+0x158>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	4b43      	ldr	r3, [pc, #268]	; (8004150 <xTaskIncrementTick+0x15c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a41      	ldr	r2, [pc, #260]	; (800414c <xTaskIncrementTick+0x158>)
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4a41      	ldr	r2, [pc, #260]	; (8004150 <xTaskIncrementTick+0x15c>)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	4b40      	ldr	r3, [pc, #256]	; (8004154 <xTaskIncrementTick+0x160>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3301      	adds	r3, #1
 8004056:	4a3f      	ldr	r2, [pc, #252]	; (8004154 <xTaskIncrementTick+0x160>)
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	f000 f919 	bl	8004290 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 800405e:	4b3e      	ldr	r3, [pc, #248]	; (8004158 <xTaskIncrementTick+0x164>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	429a      	cmp	r2, r3
 8004066:	d34d      	bcc.n	8004104 <xTaskIncrementTick+0x110>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004068:	4b38      	ldr	r3, [pc, #224]	; (800414c <xTaskIncrementTick+0x158>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <xTaskIncrementTick+0x82>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <xTaskIncrementTick+0x84>
 8004076:	2300      	movs	r3, #0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <xTaskIncrementTick+0x92>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <xTaskIncrementTick+0x164>)
 800407e:	f04f 32ff 	mov.w	r2, #4294967295
 8004082:	601a      	str	r2, [r3, #0]
						break;
 8004084:	e03e      	b.n	8004104 <xTaskIncrementTick+0x110>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004086:	4b31      	ldr	r3, [pc, #196]	; (800414c <xTaskIncrementTick+0x158>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	429a      	cmp	r2, r3
 800409c:	d203      	bcs.n	80040a6 <xTaskIncrementTick+0xb2>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 800409e:	4a2e      	ldr	r2, [pc, #184]	; (8004158 <xTaskIncrementTick+0x164>)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6013      	str	r3, [r2, #0]
							break;
 80040a4:	e02e      	b.n	8004104 <xTaskIncrementTick+0x110>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fdc6 	bl	8003c3c <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d004      	beq.n	80040c2 <xTaskIncrementTick+0xce>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	3318      	adds	r3, #24
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fdbd 	bl	8003c3c <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	2201      	movs	r2, #1
 80040c8:	409a      	lsls	r2, r3
 80040ca:	4b24      	ldr	r3, [pc, #144]	; (800415c <xTaskIncrementTick+0x168>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	4a22      	ldr	r2, [pc, #136]	; (800415c <xTaskIncrementTick+0x168>)
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4a1f      	ldr	r2, [pc, #124]	; (8004160 <xTaskIncrementTick+0x16c>)
 80040e2:	441a      	add	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f7ff fd49 	bl	8003b82 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <xTaskIncrementTick+0x170>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3b4      	bcc.n	8004068 <xTaskIncrementTick+0x74>
							{
								xSwitchRequired = pdTRUE;
 80040fe:	2301      	movs	r3, #1
 8004100:	617b      	str	r3, [r7, #20]
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004102:	e7b1      	b.n	8004068 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004104:	4b17      	ldr	r3, [pc, #92]	; (8004164 <xTaskIncrementTick+0x170>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410a:	4915      	ldr	r1, [pc, #84]	; (8004160 <xTaskIncrementTick+0x16c>)
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d907      	bls.n	800412c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800411c:	2301      	movs	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e004      	b.n	800412c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004122:	4b11      	ldr	r3, [pc, #68]	; (8004168 <xTaskIncrementTick+0x174>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3301      	adds	r3, #1
 8004128:	4a0f      	ldr	r2, [pc, #60]	; (8004168 <xTaskIncrementTick+0x174>)
 800412a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <xTaskIncrementTick+0x178>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004138:	697b      	ldr	r3, [r7, #20]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	200000f0 	.word	0x200000f0
 8004148:	200000d4 	.word	0x200000d4
 800414c:	200000b4 	.word	0x200000b4
 8004150:	200000b8 	.word	0x200000b8
 8004154:	200000e8 	.word	0x200000e8
 8004158:	200000ec 	.word	0x200000ec
 800415c:	200000d8 	.word	0x200000d8
 8004160:	20000028 	.word	0x20000028
 8004164:	20000024 	.word	0x20000024
 8004168:	200000e0 	.word	0x200000e0
 800416c:	200000e4 	.word	0x200000e4

08004170 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004176:	4b26      	ldr	r3, [pc, #152]	; (8004210 <vTaskSwitchContext+0xa0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800417e:	4b25      	ldr	r3, [pc, #148]	; (8004214 <vTaskSwitchContext+0xa4>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004184:	e03e      	b.n	8004204 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004186:	4b23      	ldr	r3, [pc, #140]	; (8004214 <vTaskSwitchContext+0xa4>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800418c:	4b22      	ldr	r3, [pc, #136]	; (8004218 <vTaskSwitchContext+0xa8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	fab3 f383 	clz	r3, r3
 8004198:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800419a:	7afb      	ldrb	r3, [r7, #11]
 800419c:	f1c3 031f 	rsb	r3, r3, #31
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	491e      	ldr	r1, [pc, #120]	; (800421c <vTaskSwitchContext+0xac>)
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <vTaskSwitchContext+0x5a>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	e7fe      	b.n	80041c8 <vTaskSwitchContext+0x58>
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4a11      	ldr	r2, [pc, #68]	; (800421c <vTaskSwitchContext+0xac>)
 80041d6:	4413      	add	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	3308      	adds	r3, #8
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d104      	bne.n	80041fa <vTaskSwitchContext+0x8a>
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4a07      	ldr	r2, [pc, #28]	; (8004220 <vTaskSwitchContext+0xb0>)
 8004202:	6013      	str	r3, [r2, #0]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	200000f0 	.word	0x200000f0
 8004214:	200000e4 	.word	0x200000e4
 8004218:	200000d8 	.word	0x200000d8
 800421c:	20000028 	.word	0x20000028
 8004220:	20000024 	.word	0x20000024

08004224 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800422c:	4b13      	ldr	r3, [pc, #76]	; (800427c <prvAddCurrentTaskToDelayedList+0x58>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8004234:	4b12      	ldr	r3, [pc, #72]	; (8004280 <prvAddCurrentTaskToDelayedList+0x5c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d209      	bcs.n	8004252 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <prvAddCurrentTaskToDelayedList+0x60>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b0e      	ldr	r3, [pc, #56]	; (800427c <prvAddCurrentTaskToDelayedList+0x58>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f7ff fcbd 	bl	8003bca <vListInsert>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004250:	e010      	b.n	8004274 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <prvAddCurrentTaskToDelayedList+0x64>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <prvAddCurrentTaskToDelayedList+0x58>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f7ff fcb3 	bl	8003bca <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <prvAddCurrentTaskToDelayedList+0x68>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	429a      	cmp	r2, r3
 800426c:	d202      	bcs.n	8004274 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
 800426e:	4a07      	ldr	r2, [pc, #28]	; (800428c <prvAddCurrentTaskToDelayedList+0x68>)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6013      	str	r3, [r2, #0]
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000024 	.word	0x20000024
 8004280:	200000d4 	.word	0x200000d4
 8004284:	200000b8 	.word	0x200000b8
 8004288:	200000b4 	.word	0x200000b4
 800428c:	200000ec 	.word	0x200000ec

08004290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004296:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <prvResetNextTaskUnblockTime+0x44>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <prvResetNextTaskUnblockTime+0x14>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <prvResetNextTaskUnblockTime+0x16>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d004      	beq.n	80042b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <prvResetNextTaskUnblockTime+0x48>)
 80042ac:	f04f 32ff 	mov.w	r2, #4294967295
 80042b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 80042b2:	e008      	b.n	80042c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042b4:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <prvResetNextTaskUnblockTime+0x44>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4a05      	ldr	r2, [pc, #20]	; (80042d8 <prvResetNextTaskUnblockTime+0x48>)
 80042c4:	6013      	str	r3, [r2, #0]
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	200000b4 	.word	0x200000b4
 80042d8:	200000ec 	.word	0x200000ec

080042dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <xTaskGetSchedulerState+0x34>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042ea:	2301      	movs	r3, #1
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	e008      	b.n	8004302 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <xTaskGetSchedulerState+0x38>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042f8:	2302      	movs	r3, #2
 80042fa:	607b      	str	r3, [r7, #4]
 80042fc:	e001      	b.n	8004302 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004302:	687b      	ldr	r3, [r7, #4]
	}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	200000dc 	.word	0x200000dc
 8004314:	200000f0 	.word	0x200000f0

08004318 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */


	hi2c1.Instance = I2C1;
 800431c:	4b15      	ldr	r3, [pc, #84]	; (8004374 <MX_I2C1_SMBUS_Init+0x5c>)
 800431e:	4a16      	ldr	r2, [pc, #88]	; (8004378 <MX_I2C1_SMBUS_Init+0x60>)
 8004320:	601a      	str	r2, [r3, #0]
	hi2c1.Mode = HAL_I2C_MODE_MASTER;
 8004322:	4b14      	ldr	r3, [pc, #80]	; (8004374 <MX_I2C1_SMBUS_Init+0x5c>)
 8004324:	2210      	movs	r2, #16
 8004326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	hi2c1.Init.Timing = 0xA0120227;
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <MX_I2C1_SMBUS_Init+0x5c>)
 800432c:	4a13      	ldr	r2, [pc, #76]	; (800437c <MX_I2C1_SMBUS_Init+0x64>)
 800432e:	605a      	str	r2, [r3, #4]

	//hi2c1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
	hi2c1.Init.OwnAddress1 = 0;
 8004330:	4b10      	ldr	r3, [pc, #64]	; (8004374 <MX_I2C1_SMBUS_Init+0x5c>)
 8004332:	2200      	movs	r2, #0
 8004334:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <MX_I2C1_SMBUS_Init+0x5c>)
 8004338:	2201      	movs	r2, #1
 800433a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <MX_I2C1_SMBUS_Init+0x5c>)
 800433e:	2200      	movs	r2, #0
 8004340:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <MX_I2C1_SMBUS_Init+0x5c>)
 8004344:	2200      	movs	r2, #0
 8004346:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <MX_I2C1_SMBUS_Init+0x5c>)
 800434a:	2200      	movs	r2, #0
 800434c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <MX_I2C1_SMBUS_Init+0x5c>)
 8004350:	2200      	movs	r2, #0
 8004352:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8004354:	4b07      	ldr	r3, [pc, #28]	; (8004374 <MX_I2C1_SMBUS_Init+0x5c>)
 8004356:	2200      	movs	r2, #0
 8004358:	621a      	str	r2, [r3, #32]
	//hi2c1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
	//hi2c1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
	//hi2c1.Init.SMBusTimeout = 0x0000836E;
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800435a:	4806      	ldr	r0, [pc, #24]	; (8004374 <MX_I2C1_SMBUS_Init+0x5c>)
 800435c:	f7fd f98c 	bl	8001678 <HAL_I2C_Init>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <MX_I2C1_SMBUS_Init+0x52>
	{
	Error_Handler();
 8004366:	f000 fabb 	bl	80048e0 <Error_Handler>
	}

	HAL_I2C_MspInit(&hi2c1);
 800436a:	4802      	ldr	r0, [pc, #8]	; (8004374 <MX_I2C1_SMBUS_Init+0x5c>)
 800436c:	f000 fb12 	bl	8004994 <HAL_I2C_MspInit>

  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004370:	bf00      	nop
 8004372:	bd80      	pop	{r7, pc}
 8004374:	2000015c 	.word	0x2000015c
 8004378:	40005400 	.word	0x40005400
 800437c:	a0120227 	.word	0xa0120227

08004380 <initLEDs>:
    return 0;
}



void initLEDs(){
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	605a      	str	r2, [r3, #4]
 800438e:	609a      	str	r2, [r3, #8]
 8004390:	60da      	str	r2, [r3, #12]
 8004392:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8004394:	23f0      	movs	r3, #240	; 0xf0
 8004396:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004398:	2301      	movs	r3, #1
 800439a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a0:	2300      	movs	r3, #0
 80043a2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a4:	1d3b      	adds	r3, r7, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043ac:	f7fc ffce 	bl	800134c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80043b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b6:	2301      	movs	r3, #1
 80043b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043c2:	1d3b      	adds	r3, r7, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4803      	ldr	r0, [pc, #12]	; (80043d4 <initLEDs+0x54>)
 80043c8:	f7fc ffc0 	bl	800134c <HAL_GPIO_Init>

}
 80043cc:	bf00      	nop
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	48000400 	.word	0x48000400

080043d8 <initButtons>:


void initButtons(){
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2 | GPIO_PIN_1 | GPIO_PIN_0 ;
 80043ec:	230f      	movs	r3, #15
 80043ee:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f8:	2300      	movs	r3, #0
 80043fa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fc:	1d3b      	adds	r3, r7, #4
 80043fe:	4619      	mov	r1, r3
 8004400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004404:	f7fc ffa2 	bl	800134c <HAL_GPIO_Init>


}
 8004408:	bf00      	nop
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <Si7006_port_init>:





Si7006_error_t Si7006_port_init(void){
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0

}
 8004414:	bf00      	nop
 8004416:	4618      	mov	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <Si7006_port_i2c_init>:
Si7006_error_t Si7006_port_i2c_init(void){
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0

}
 8004424:	bf00      	nop
 8004426:	4618      	mov	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <Si7006_port_i2c_transmit>:
Si7006_error_t Si7006_port_i2c_transmit(uint8_t *data, unsigned int size){
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af02      	add	r7, sp, #8
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1,(0x40<<1) ,data,size, 1000);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	b29a      	uxth	r2, r3
 800443e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	2180      	movs	r1, #128	; 0x80
 800444a:	4807      	ldr	r0, [pc, #28]	; (8004468 <Si7006_port_i2c_transmit+0x38>)
 800444c:	f7fd f9a2 	bl	8001794 <HAL_I2C_Master_Transmit>
 8004450:	4603      	mov	r3, r0
 8004452:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <Si7006_port_i2c_transmit+0x2e>
 800445a:	2300      	movs	r3, #0
 800445c:	e000      	b.n	8004460 <Si7006_port_i2c_transmit+0x30>
	else return SI7006_ERROR;
 800445e:	2301      	movs	r3, #1
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	2000015c 	.word	0x2000015c

0800446c <Si7006_port_i2c_receive>:
Si7006_error_t Si7006_port_i2c_receive(uint8_t *data, unsigned int size){
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af02      	add	r7, sp, #8
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c1,(0x40<<1) ,data,size, 1000);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	b29a      	uxth	r2, r3
 800447a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	2180      	movs	r1, #128	; 0x80
 8004486:	4807      	ldr	r0, [pc, #28]	; (80044a4 <Si7006_port_i2c_receive+0x38>)
 8004488:	f7fd fa84 	bl	8001994 <HAL_I2C_Master_Receive>
 800448c:	4603      	mov	r3, r0
 800448e:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <Si7006_port_i2c_receive+0x2e>
 8004496:	2300      	movs	r3, #0
 8004498:	e000      	b.n	800449c <Si7006_port_i2c_receive+0x30>
	else return SI7006_ERROR;
 800449a:	2301      	movs	r3, #1
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	2000015c 	.word	0x2000015c

080044a8 <Si7006_port_check_hardware>:
Si7006_error_t Si7006_port_check_hardware(){
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1,(0x40<<1), 1000, 1000);
 80044ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044b6:	2180      	movs	r1, #128	; 0x80
 80044b8:	4807      	ldr	r0, [pc, #28]	; (80044d8 <Si7006_port_check_hardware+0x30>)
 80044ba:	f7fd fb6d 	bl	8001b98 <HAL_I2C_IsDeviceReady>
 80044be:	4603      	mov	r3, r0
 80044c0:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <Si7006_port_check_hardware+0x24>
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <Si7006_port_check_hardware+0x26>
	else return SI7006_ERROR;
 80044cc:	2301      	movs	r3, #1
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	2000015c 	.word	0x2000015c

080044dc <Si7006_port_delay>:
Si7006_error_t Si7006_port_delay(unsigned int ms){
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]

	HAL_Delay(ms);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7fc fe37 	bl	8001158 <HAL_Delay>
}
 80044ea:	bf00      	nop
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b09e      	sub	sp, #120	; 0x78
 80044f8:	af00      	add	r7, sp, #0

	HAL_Init();
 80044fa:	f7fc fde9 	bl	80010d0 <HAL_Init>
	SystemClock_Config();
 80044fe:	f000 f953 	bl	80047a8 <SystemClock_Config>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004502:	4a99      	ldr	r2, [pc, #612]	; (8004768 <main+0x274>)
 8004504:	4b98      	ldr	r3, [pc, #608]	; (8004768 <main+0x274>)
 8004506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004508:	f043 0304 	orr.w	r3, r3, #4
 800450c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800450e:	4b96      	ldr	r3, [pc, #600]	; (8004768 <main+0x274>)
 8004510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	633b      	str	r3, [r7, #48]	; 0x30
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	//__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800451a:	4a93      	ldr	r2, [pc, #588]	; (8004768 <main+0x274>)
 800451c:	4b92      	ldr	r3, [pc, #584]	; (8004768 <main+0x274>)
 800451e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004526:	4b90      	ldr	r3, [pc, #576]	; (8004768 <main+0x274>)
 8004528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004532:	4a8d      	ldr	r2, [pc, #564]	; (8004768 <main+0x274>)
 8004534:	4b8c      	ldr	r3, [pc, #560]	; (8004768 <main+0x274>)
 8004536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004538:	f043 0302 	orr.w	r3, r3, #2
 800453c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800453e:	4b8a      	ldr	r3, [pc, #552]	; (8004768 <main+0x274>)
 8004540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800454a:	4a87      	ldr	r2, [pc, #540]	; (8004768 <main+0x274>)
 800454c:	4b86      	ldr	r3, [pc, #536]	; (8004768 <main+0x274>)
 800454e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004550:	f043 0308 	orr.w	r3, r3, #8
 8004554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004556:	4b84      	ldr	r3, [pc, #528]	; (8004768 <main+0x274>)
 8004558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24

	c12832_hal_spi_init();
 8004562:	f7fc fa57 	bl	8000a14 <c12832_hal_spi_init>
	c12832_hal_gpio_init();
 8004566:	f7fc facb 	bl	8000b00 <c12832_hal_gpio_init>


	MX_I2C1_SMBUS_Init();
 800456a:	f7ff fed5 	bl	8004318 <MX_I2C1_SMBUS_Init>



	initLEDs();
 800456e:	f7ff ff07 	bl	8004380 <initLEDs>
	initButtons();
 8004572:	f7ff ff31 	bl	80043d8 <initButtons>


	//testLedAndButtones();


	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004576:	2201      	movs	r2, #1
 8004578:	2110      	movs	r1, #16
 800457a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800457e:	f7fd f863 	bl	8001648 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8004582:	2201      	movs	r2, #1
 8004584:	2120      	movs	r1, #32
 8004586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800458a:	f7fd f85d 	bl	8001648 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800458e:	2201      	movs	r2, #1
 8004590:	2140      	movs	r1, #64	; 0x40
 8004592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004596:	f7fd f857 	bl	8001648 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800459a:	2201      	movs	r2, #1
 800459c:	2180      	movs	r1, #128	; 0x80
 800459e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045a2:	f7fd f851 	bl	8001648 <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(DISPLAY_BACKLIGHT_GPIO_Port, DISPLAY_BACKLIGHT_Pin, GPIO_PIN_RESET);
 80045a6:	2200      	movs	r2, #0
 80045a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045b0:	f7fd f84a 	bl	8001648 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	605a      	str	r2, [r3, #4]
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DISPLAY_BACKLIGHT_Pin;
 80045c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ca:	2301      	movs	r3, #1
 80045cc:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d2:	2300      	movs	r3, #0
 80045d4:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(DISPLAY_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80045d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045da:	4619      	mov	r1, r3
 80045dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045e0:	f7fc feb4 	bl	800134c <HAL_GPIO_Init>

	DISPLAY_BACKLIGHT_OFF;
 80045e4:	2200      	movs	r2, #0
 80045e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045ee:	f7fd f82b 	bl	8001648 <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 80045f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80045f6:	f7fc fdaf 	bl	8001158 <HAL_Delay>

	graphic_lcd_initialize ();
 80045fa:	f7fc fb8f 	bl	8000d1c <graphic_lcd_initialize>
	graphic_lcd_clear_screen ();
 80045fe:	f7fc fb23 	bl	8000c48 <graphic_lcd_clear_screen>
	DISPLAY_BACKLIGHT_ON;
 8004602:	2201      	movs	r2, #1
 8004604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800460c:	f7fd f81c 	bl	8001648 <HAL_GPIO_WritePin>
	graphic_lcd_write(0, 0, "HELLO");
 8004610:	4a56      	ldr	r2, [pc, #344]	; (800476c <main+0x278>)
 8004612:	2100      	movs	r1, #0
 8004614:	2000      	movs	r0, #0
 8004616:	f7fc fb3f 	bl	8000c98 <graphic_lcd_write>
	HAL_Delay(1000);
 800461a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800461e:	f7fc fd9b 	bl	8001158 <HAL_Delay>


	uint8_t Si7006DevAddr = 0x40<<1;
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t Si1133DevAddr = 0x55<<1;
 8004628:	23aa      	movs	r3, #170	; 0xaa
 800462a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76


	Si7006_t sensor;
	sensor.init = Si7006_port_init;
 800462e:	4b50      	ldr	r3, [pc, #320]	; (8004770 <main+0x27c>)
 8004630:	637b      	str	r3, [r7, #52]	; 0x34
	sensor.i2c_init = Si7006_port_i2c_init;
 8004632:	4b50      	ldr	r3, [pc, #320]	; (8004774 <main+0x280>)
 8004634:	63bb      	str	r3, [r7, #56]	; 0x38
	sensor.i2c_transmit = Si7006_port_i2c_transmit;
 8004636:	4b50      	ldr	r3, [pc, #320]	; (8004778 <main+0x284>)
 8004638:	63fb      	str	r3, [r7, #60]	; 0x3c
	sensor.i2c_receive = Si7006_port_i2c_receive;
 800463a:	4b50      	ldr	r3, [pc, #320]	; (800477c <main+0x288>)
 800463c:	643b      	str	r3, [r7, #64]	; 0x40
	sensor.check_hardware = Si7006_port_check_hardware;
 800463e:	4b50      	ldr	r3, [pc, #320]	; (8004780 <main+0x28c>)
 8004640:	647b      	str	r3, [r7, #68]	; 0x44
	sensor.delay = Si7006_port_delay;
 8004642:	4b50      	ldr	r3, [pc, #320]	; (8004784 <main+0x290>)
 8004644:	64bb      	str	r3, [r7, #72]	; 0x48



	if(sensor.check_hardware() == SI7006_ERROR){
 8004646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004648:	4798      	blx	r3
 800464a:	4603      	mov	r3, r0
 800464c:	2b01      	cmp	r3, #1
 800464e:	d105      	bne.n	800465c <main+0x168>
		graphic_lcd_write(0, 0, "Si7006 NOT READY");
 8004650:	4a4d      	ldr	r2, [pc, #308]	; (8004788 <main+0x294>)
 8004652:	2100      	movs	r1, #0
 8004654:	2000      	movs	r0, #0
 8004656:	f7fc fb1f 	bl	8000c98 <graphic_lcd_write>
 800465a:	e004      	b.n	8004666 <main+0x172>
	}else{
		graphic_lcd_write(0, 0, "Si7006 READY");
 800465c:	4a4b      	ldr	r2, [pc, #300]	; (800478c <main+0x298>)
 800465e:	2100      	movs	r1, #0
 8004660:	2000      	movs	r0, #0
 8004662:	f7fc fb19 	bl	8000c98 <graphic_lcd_write>
	}


	int x = HAL_I2C_IsDeviceReady(&hi2c1,Si1133DevAddr, 1000, 1000);
 8004666:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800466a:	b299      	uxth	r1, r3
 800466c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004674:	4846      	ldr	r0, [pc, #280]	; (8004790 <main+0x29c>)
 8004676:	f7fd fa8f 	bl	8001b98 <HAL_I2C_IsDeviceReady>
 800467a:	4603      	mov	r3, r0
 800467c:	673b      	str	r3, [r7, #112]	; 0x70
	if(x == HAL_OK) graphic_lcd_write(1, 0, "Si1133 READY");
 800467e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004680:	2b00      	cmp	r3, #0
 8004682:	d105      	bne.n	8004690 <main+0x19c>
 8004684:	4a43      	ldr	r2, [pc, #268]	; (8004794 <main+0x2a0>)
 8004686:	2100      	movs	r1, #0
 8004688:	2001      	movs	r0, #1
 800468a:	f7fc fb05 	bl	8000c98 <graphic_lcd_write>
 800468e:	e004      	b.n	800469a <main+0x1a6>
	else graphic_lcd_write(1, 0, "Si1133 NOT READY");
 8004690:	4a41      	ldr	r2, [pc, #260]	; (8004798 <main+0x2a4>)
 8004692:	2100      	movs	r1, #0
 8004694:	2001      	movs	r0, #1
 8004696:	f7fc faff 	bl	8000c98 <graphic_lcd_write>



	sensor.init();
 800469a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469c:	4798      	blx	r3
	Si7006_read_firmware_revision(&sensor);
 800469e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fc fd06 	bl	80010b4 <Si7006_read_firmware_revision>


	while(1){
		float temperature = Si7006_temperature(&sensor);
 80046a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fc fc43 	bl	8000f38 <Si7006_temperature>
 80046b2:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c

		int tempInteger = (int)temperature;
 80046b6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80046ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046be:	ee17 3a90 	vmov	r3, s15
 80046c2:	66bb      	str	r3, [r7, #104]	; 0x68
		int tempDecimel = ((float)temperature - (int)temperature)*100;
 80046c4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80046c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046d0:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80046d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046d8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800479c <main+0x2a8>
 80046dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046e4:	ee17 3a90 	vmov	r3, s15
 80046e8:	667b      	str	r3, [r7, #100]	; 0x64

		char tempString[30];

		sprintf(tempString, "Temp: %d.%d deg C", tempInteger,tempDecimel );
 80046ea:	1d38      	adds	r0, r7, #4
 80046ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046f0:	492b      	ldr	r1, [pc, #172]	; (80047a0 <main+0x2ac>)
 80046f2:	f000 fbcd 	bl	8004e90 <siprintf>
		graphic_lcd_write(0, 0,tempString);
 80046f6:	1d3b      	adds	r3, r7, #4
 80046f8:	461a      	mov	r2, r3
 80046fa:	2100      	movs	r1, #0
 80046fc:	2000      	movs	r0, #0
 80046fe:	f7fc facb 	bl	8000c98 <graphic_lcd_write>


		float relativeHumidity = Si7006_relativeHumidity(&sensor);
 8004702:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004706:	4618      	mov	r0, r3
 8004708:	f7fc fc74 	bl	8000ff4 <Si7006_relativeHumidity>
 800470c:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
		tempInteger = (int)relativeHumidity;
 8004710:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004718:	ee17 3a90 	vmov	r3, s15
 800471c:	66bb      	str	r3, [r7, #104]	; 0x68
		tempDecimel = ((float)relativeHumidity - (int)relativeHumidity)*100;
 800471e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004722:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800472a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800472e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004732:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800479c <main+0x2a8>
 8004736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800473a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800473e:	ee17 3a90 	vmov	r3, s15
 8004742:	667b      	str	r3, [r7, #100]	; 0x64

		sprintf(tempString, "Humidity: %d.%d %%", tempInteger,tempDecimel );
 8004744:	1d38      	adds	r0, r7, #4
 8004746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004748:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800474a:	4916      	ldr	r1, [pc, #88]	; (80047a4 <main+0x2b0>)
 800474c:	f000 fba0 	bl	8004e90 <siprintf>
		graphic_lcd_write(1, 0,tempString);
 8004750:	1d3b      	adds	r3, r7, #4
 8004752:	461a      	mov	r2, r3
 8004754:	2100      	movs	r1, #0
 8004756:	2001      	movs	r0, #1
 8004758:	f7fc fa9e 	bl	8000c98 <graphic_lcd_write>




		HAL_Delay(500);
 800475c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004760:	f7fc fcfa 	bl	8001158 <HAL_Delay>
	while(1){
 8004764:	e7a0      	b.n	80046a8 <main+0x1b4>
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000
 800476c:	0800518c 	.word	0x0800518c
 8004770:	08004411 	.word	0x08004411
 8004774:	08004421 	.word	0x08004421
 8004778:	08004431 	.word	0x08004431
 800477c:	0800446d 	.word	0x0800446d
 8004780:	080044a9 	.word	0x080044a9
 8004784:	080044dd 	.word	0x080044dd
 8004788:	08005194 	.word	0x08005194
 800478c:	080051a8 	.word	0x080051a8
 8004790:	2000015c 	.word	0x2000015c
 8004794:	080051b8 	.word	0x080051b8
 8004798:	080051c8 	.word	0x080051c8
 800479c:	42c80000 	.word	0x42c80000
 80047a0:	080051dc 	.word	0x080051dc
 80047a4:	080051f0 	.word	0x080051f0

080047a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b0ae      	sub	sp, #184	; 0xb8
 80047ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80047b2:	2244      	movs	r2, #68	; 0x44
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fc1a 	bl	8004ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	609a      	str	r2, [r3, #8]
 80047c8:	60da      	str	r2, [r3, #12]
 80047ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047cc:	463b      	mov	r3, r7
 80047ce:	2260      	movs	r2, #96	; 0x60
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fc0c 	bl	8004ff0 <memset>

  /**Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80047d8:	f7fd fc80 	bl	80020dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80047dc:	4a3e      	ldr	r2, [pc, #248]	; (80048d8 <SystemClock_Config+0x130>)
 80047de:	4b3e      	ldr	r3, [pc, #248]	; (80048d8 <SystemClock_Config+0x130>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e4:	f023 0318 	bic.w	r3, r3, #24
 80047e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80047ec:	2314      	movs	r3, #20
 80047ee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80047f0:	2301      	movs	r3, #1
 80047f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8004800:	2370      	movs	r3, #112	; 0x70
 8004802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004806:	2302      	movs	r3, #2
 8004808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800480c:	2301      	movs	r3, #1
 800480e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004812:	2301      	movs	r3, #1
 8004814:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 36;
 8004818:	2324      	movs	r3, #36	; 0x24
 800481a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800481e:	2307      	movs	r3, #7
 8004820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8004824:	2306      	movs	r3, #6
 8004826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800482a:	2302      	movs	r3, #2
 800482c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004830:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004834:	4618      	mov	r0, r3
 8004836:	f7fd fcc5 	bl	80021c4 <HAL_RCC_OscConfig>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004840:	f000 f84e 	bl	80048e0 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004844:	230f      	movs	r3, #15
 8004846:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004848:	2303      	movs	r3, #3
 800484a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800484c:	2300      	movs	r3, #0
 800484e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004850:	2300      	movs	r3, #0
 8004852:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004854:	2300      	movs	r3, #0
 8004856:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004858:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800485c:	2104      	movs	r1, #4
 800485e:	4618      	mov	r0, r3
 8004860:	f7fe f872 	bl	8002948 <HAL_RCC_ClockConfig>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800486a:	f000 f839 	bl	80048e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <SystemClock_Config+0x134>)
 8004870:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004872:	2300      	movs	r3, #0
 8004874:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004876:	2300      	movs	r3, #0
 8004878:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800487a:	2300      	movs	r3, #0
 800487c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800487e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004882:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8004884:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004888:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800488a:	2301      	movs	r3, #1
 800488c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800488e:	2301      	movs	r3, #1
 8004890:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 26;
 8004892:	231a      	movs	r3, #26
 8004894:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8004896:	2311      	movs	r3, #17
 8004898:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800489a:	2302      	movs	r3, #2
 800489c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800489e:	2302      	movs	r3, #2
 80048a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80048a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048a6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048a8:	463b      	mov	r3, r7
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fe faca 	bl	8002e44 <HAL_RCCEx_PeriphCLKConfig>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <SystemClock_Config+0x112>
  {
    Error_Handler();
 80048b6:	f000 f813 	bl	80048e0 <Error_Handler>
  }
  /**Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80048ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80048be:	f7fd fc2b 	bl	8002118 <HAL_PWREx_ControlVoltageScaling>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <SystemClock_Config+0x124>
  {
    Error_Handler();
 80048c8:	f000 f80a 	bl	80048e0 <Error_Handler>
  }
  /**Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80048cc:	f7fe fd00 	bl	80032d0 <HAL_RCCEx_EnableMSIPLLMode>


}
 80048d0:	bf00      	nop
 80048d2:	37b8      	adds	r7, #184	; 0xb8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40021000 	.word	0x40021000
 80048dc:	00022841 	.word	0x00022841

080048e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
	...

080048f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80048f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004928 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80048f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80048f6:	e003      	b.n	8004900 <LoopCopyDataInit>

080048f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80048fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80048fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80048fe:	3104      	adds	r1, #4

08004900 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004900:	480b      	ldr	r0, [pc, #44]	; (8004930 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004902:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004904:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004906:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004908:	d3f6      	bcc.n	80048f8 <CopyDataInit>
	ldr	r2, =_sbss
 800490a:	4a0b      	ldr	r2, [pc, #44]	; (8004938 <LoopForever+0x12>)
	b	LoopFillZerobss
 800490c:	e002      	b.n	8004914 <LoopFillZerobss>

0800490e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800490e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004910:	f842 3b04 	str.w	r3, [r2], #4

08004914 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004914:	4b09      	ldr	r3, [pc, #36]	; (800493c <LoopForever+0x16>)
	cmp	r2, r3
 8004916:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004918:	d3f9      	bcc.n	800490e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800491a:	f000 f90d 	bl	8004b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800491e:	f000 fb43 	bl	8004fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004922:	f7ff fde7 	bl	80044f4 <main>

08004926 <LoopForever>:

LoopForever:
    b LoopForever
 8004926:	e7fe      	b.n	8004926 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004928:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 800492c:	08005420 	.word	0x08005420
	ldr	r0, =_sdata
 8004930:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004934:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8004938:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 800493c:	200001a8 	.word	0x200001a8

08004940 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004940:	e7fe      	b.n	8004940 <ADC1_IRQHandler>
	...

08004944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800494a:	4a11      	ldr	r2, [pc, #68]	; (8004990 <HAL_MspInit+0x4c>)
 800494c:	4b10      	ldr	r3, [pc, #64]	; (8004990 <HAL_MspInit+0x4c>)
 800494e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6613      	str	r3, [r2, #96]	; 0x60
 8004956:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <HAL_MspInit+0x4c>)
 8004958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004962:	4a0b      	ldr	r2, [pc, #44]	; (8004990 <HAL_MspInit+0x4c>)
 8004964:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_MspInit+0x4c>)
 8004966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496c:	6593      	str	r3, [r2, #88]	; 0x58
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <HAL_MspInit+0x4c>)
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800497a:	2200      	movs	r2, #0
 800497c:	210f      	movs	r1, #15
 800497e:	f06f 0001 	mvn.w	r0, #1
 8004982:	f7fc fcba 	bl	80012fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40021000 	.word	0x40021000

08004994 <HAL_I2C_MspInit>:
  }

}


void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800499c:	f107 0314 	add.w	r3, r7, #20
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	605a      	str	r2, [r3, #4]
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	60da      	str	r2, [r3, #12]
 80049aa:	611a      	str	r2, [r3, #16]
	  if(hi2c->Instance==I2C1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <HAL_I2C_MspInit+0x80>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d129      	bne.n	8004a0a <HAL_I2C_MspInit+0x76>
	  {
	  /* USER CODE BEGIN I2C1_MspInit 0 */

	  /* USER CODE END I2C1_MspInit 0 */

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049b6:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <HAL_I2C_MspInit+0x84>)
 80049b8:	4b17      	ldr	r3, [pc, #92]	; (8004a18 <HAL_I2C_MspInit+0x84>)
 80049ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <HAL_I2C_MspInit+0x84>)
 80049c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	693b      	ldr	r3, [r7, #16]
	    /**I2C1 GPIO Configuration
	    PA9     ------> I2C1_SCL
	    PA10     ------> I2C1_SDA
	    */
	    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80049ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80049d2:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049d4:	2312      	movs	r3, #18
 80049d6:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049d8:	2301      	movs	r3, #1
 80049da:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049dc:	2303      	movs	r3, #3
 80049de:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049e0:	2304      	movs	r3, #4
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e4:	f107 0314 	add.w	r3, r7, #20
 80049e8:	4619      	mov	r1, r3
 80049ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049ee:	f7fc fcad 	bl	800134c <HAL_GPIO_Init>

	    /* Peripheral clock enable */
	    __HAL_RCC_I2C1_CLK_ENABLE();
 80049f2:	4a09      	ldr	r2, [pc, #36]	; (8004a18 <HAL_I2C_MspInit+0x84>)
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <HAL_I2C_MspInit+0x84>)
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049fc:	6593      	str	r3, [r2, #88]	; 0x58
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <HAL_I2C_MspInit+0x84>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
	  /* USER CODE BEGIN I2C1_MspInit 1 */

	  /* USER CODE END I2C1_MspInit 1 */
	  }
}
 8004a0a:	bf00      	nop
 8004a0c:	3728      	adds	r7, #40	; 0x28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40005400 	.word	0x40005400
 8004a18:	40021000 	.word	0x40021000

08004a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]



}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a42:	e7fe      	b.n	8004a42 <HardFault_Handler+0x4>

08004a44 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a48:	e7fe      	b.n	8004a48 <MemManage_Handler+0x4>

08004a4a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a4e:	e7fe      	b.n	8004a4e <BusFault_Handler+0x4>

08004a50 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a54:	e7fe      	b.n	8004a54 <UsageFault_Handler+0x4>

08004a56 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8004a56:	b480      	push	{r7}
 8004a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8004a68:	f7ff f880 	bl	8003b6c <osSystickHandler>
  HAL_IncTick();
 8004a6c:	f7fc fb5a 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a70:	bf00      	nop
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <TIM1_UP_TIM16_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
*/
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004a78:	bf00      	nop
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <DMA2_Channel1_IRQHandler>:

/**
* @brief This function handles DMA2 channel1 global interrupt.
*/
void DMA2_Channel1_IRQHandler(void)
{
 8004a82:	b480      	push	{r7}
 8004a84:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <DMA2_Channel2_IRQHandler>:

/**
* @brief This function handles DMA2 channel2 global interrupt.
*/
void DMA2_Channel2_IRQHandler(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <USB_IRQHandler>:

/**
* @brief This function handles USB event interrupt through EXTI line 17.
*/
void USB_IRQHandler(void)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	af00      	add	r7, sp, #0
  /* USER CODE END USB_IRQn 0 */

  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004ab4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004ab8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d013      	beq.n	8004aec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004ac4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004ac8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004acc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00b      	beq.n	8004aec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004ad4:	e000      	b.n	8004ad8 <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 8004ad6:	bf00      	nop
 8004ad8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f9      	beq.n	8004ad6 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004ae2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004aec:	687b      	ldr	r3, [r7, #4]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <_write>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	e009      	b.n	8004b24 <_write+0x2a>
	ITM_SendChar((*ptr++));
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	60ba      	str	r2, [r7, #8]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff ffc7 	bl	8004aac <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	3301      	adds	r3, #1
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	dbf1      	blt.n	8004b10 <_write+0x16>
	return len;
 8004b2c:	687b      	ldr	r3, [r7, #4]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b3c:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <SystemInit+0x64>)
 8004b3e:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <SystemInit+0x64>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004b4c:	4a14      	ldr	r2, [pc, #80]	; (8004ba0 <SystemInit+0x68>)
 8004b4e:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <SystemInit+0x68>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f043 0301 	orr.w	r3, r3, #1
 8004b56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004b58:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <SystemInit+0x68>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004b5e:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <SystemInit+0x68>)
 8004b60:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <SystemInit+0x68>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004b68:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004b6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <SystemInit+0x68>)
 8004b70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004b76:	4a0a      	ldr	r2, [pc, #40]	; (8004ba0 <SystemInit+0x68>)
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <SystemInit+0x68>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004b82:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <SystemInit+0x68>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <SystemInit+0x64>)
 8004b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	e000ed00 	.word	0xe000ed00
 8004ba0:	40021000 	.word	0x40021000

08004ba4 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
	int div = 1;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004bb4:	e004      	b.n	8004bc0 <ts_itoa+0x1c>
		div *= base;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	fb02 f303 	mul.w	r3, r2, r3
 8004bbe:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d2f3      	bcs.n	8004bb6 <ts_itoa+0x12>

	while (div != 0)
 8004bce:	e029      	b.n	8004c24 <ts_itoa+0x80>
	{
		int num = d/div;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd8:	613b      	str	r3, [r7, #16]
		d = d%div;
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	fbb3 f1f2 	udiv	r1, r3, r2
 8004be2:	fb02 f201 	mul.w	r2, r2, r1
 8004be6:	1a9b      	subs	r3, r3, r2
 8004be8:	60bb      	str	r3, [r7, #8]
		div /= base;
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bf2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b09      	cmp	r3, #9
 8004bf8:	dd0a      	ble.n	8004c10 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	1c59      	adds	r1, r3, #1
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	6011      	str	r1, [r2, #0]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	3237      	adds	r2, #55	; 0x37
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e009      	b.n	8004c24 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	1c59      	adds	r1, r3, #1
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	6011      	str	r1, [r2, #0]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	3230      	adds	r2, #48	; 0x30
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1d2      	bne.n	8004bd0 <ts_itoa+0x2c>
	}
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b088      	sub	sp, #32
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8004c46:	e07d      	b.n	8004d44 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b25      	cmp	r3, #37	; 0x25
 8004c4e:	d171      	bne.n	8004d34 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	3301      	adds	r3, #1
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d01e      	beq.n	8004c9c <ts_formatstring+0x66>
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	dc06      	bgt.n	8004c70 <ts_formatstring+0x3a>
 8004c62:	2b58      	cmp	r3, #88	; 0x58
 8004c64:	d050      	beq.n	8004d08 <ts_formatstring+0xd2>
 8004c66:	2b63      	cmp	r3, #99	; 0x63
 8004c68:	d00e      	beq.n	8004c88 <ts_formatstring+0x52>
 8004c6a:	2b25      	cmp	r3, #37	; 0x25
 8004c6c:	d058      	beq.n	8004d20 <ts_formatstring+0xea>
 8004c6e:	e05d      	b.n	8004d2c <ts_formatstring+0xf6>
 8004c70:	2b73      	cmp	r3, #115	; 0x73
 8004c72:	d02b      	beq.n	8004ccc <ts_formatstring+0x96>
 8004c74:	2b73      	cmp	r3, #115	; 0x73
 8004c76:	dc02      	bgt.n	8004c7e <ts_formatstring+0x48>
 8004c78:	2b69      	cmp	r3, #105	; 0x69
 8004c7a:	d00f      	beq.n	8004c9c <ts_formatstring+0x66>
 8004c7c:	e056      	b.n	8004d2c <ts_formatstring+0xf6>
 8004c7e:	2b75      	cmp	r3, #117	; 0x75
 8004c80:	d037      	beq.n	8004cf2 <ts_formatstring+0xbc>
 8004c82:	2b78      	cmp	r3, #120	; 0x78
 8004c84:	d040      	beq.n	8004d08 <ts_formatstring+0xd2>
 8004c86:	e051      	b.n	8004d2c <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	60fa      	str	r2, [r7, #12]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	1d11      	adds	r1, r2, #4
 8004c92:	6079      	str	r1, [r7, #4]
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]
				break;
 8004c9a:	e047      	b.n	8004d2c <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	1d1a      	adds	r2, r3, #4
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da07      	bge.n	8004cbc <ts_formatstring+0x86>
					{
						val *= -1;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	425b      	negs	r3, r3
 8004cb0:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	60fa      	str	r2, [r7, #12]
 8004cb8:	222d      	movs	r2, #45	; 0x2d
 8004cba:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004cbc:	69f9      	ldr	r1, [r7, #28]
 8004cbe:	f107 030c 	add.w	r3, r7, #12
 8004cc2:	220a      	movs	r2, #10
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff ff6d 	bl	8004ba4 <ts_itoa>
				}
				break;
 8004cca:	e02f      	b.n	8004d2c <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	1d1a      	adds	r2, r3, #4
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004cd6:	e007      	b.n	8004ce8 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	60fa      	str	r2, [r7, #12]
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	1c51      	adds	r1, r2, #1
 8004ce2:	61b9      	str	r1, [r7, #24]
 8004ce4:	7812      	ldrb	r2, [r2, #0]
 8004ce6:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f3      	bne.n	8004cd8 <ts_formatstring+0xa2>
					}
				}
				break;
 8004cf0:	e01c      	b.n	8004d2c <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	1d1a      	adds	r2, r3, #4
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	6819      	ldr	r1, [r3, #0]
 8004cfa:	f107 030c 	add.w	r3, r7, #12
 8004cfe:	220a      	movs	r2, #10
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff ff4f 	bl	8004ba4 <ts_itoa>
				break;
 8004d06:	e011      	b.n	8004d2c <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1d1a      	adds	r2, r3, #4
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4619      	mov	r1, r3
 8004d12:	f107 030c 	add.w	r3, r7, #12
 8004d16:	2210      	movs	r2, #16
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff ff43 	bl	8004ba4 <ts_itoa>
				break;
 8004d1e:	e005      	b.n	8004d2c <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	60fa      	str	r2, [r7, #12]
 8004d26:	2225      	movs	r2, #37	; 0x25
 8004d28:	701a      	strb	r2, [r3, #0]
				  break;
 8004d2a:	bf00      	nop
			}
			fmt++;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	e007      	b.n	8004d44 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	60fa      	str	r2, [r7, #12]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	1c51      	adds	r1, r2, #1
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	7812      	ldrb	r2, [r2, #0]
 8004d42:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f47f af7d 	bne.w	8004c48 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	461a      	mov	r2, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	1ad3      	subs	r3, r2, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
	int length = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8004d72:	e081      	b.n	8004e78 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b25      	cmp	r3, #37	; 0x25
 8004d7a:	d177      	bne.n	8004e6c <ts_formatlength+0x108>
		{
			++fmt;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	3b58      	subs	r3, #88	; 0x58
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d86a      	bhi.n	8004e62 <ts_formatlength+0xfe>
 8004d8c:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <ts_formatlength+0x30>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004e55 	.word	0x08004e55
 8004d98:	08004e63 	.word	0x08004e63
 8004d9c:	08004e63 	.word	0x08004e63
 8004da0:	08004e63 	.word	0x08004e63
 8004da4:	08004e63 	.word	0x08004e63
 8004da8:	08004e63 	.word	0x08004e63
 8004dac:	08004e63 	.word	0x08004e63
 8004db0:	08004e63 	.word	0x08004e63
 8004db4:	08004e63 	.word	0x08004e63
 8004db8:	08004e63 	.word	0x08004e63
 8004dbc:	08004e63 	.word	0x08004e63
 8004dc0:	08004e19 	.word	0x08004e19
 8004dc4:	08004e27 	.word	0x08004e27
 8004dc8:	08004e63 	.word	0x08004e63
 8004dcc:	08004e63 	.word	0x08004e63
 8004dd0:	08004e63 	.word	0x08004e63
 8004dd4:	08004e63 	.word	0x08004e63
 8004dd8:	08004e27 	.word	0x08004e27
 8004ddc:	08004e63 	.word	0x08004e63
 8004de0:	08004e63 	.word	0x08004e63
 8004de4:	08004e63 	.word	0x08004e63
 8004de8:	08004e63 	.word	0x08004e63
 8004dec:	08004e63 	.word	0x08004e63
 8004df0:	08004e63 	.word	0x08004e63
 8004df4:	08004e63 	.word	0x08004e63
 8004df8:	08004e63 	.word	0x08004e63
 8004dfc:	08004e63 	.word	0x08004e63
 8004e00:	08004e35 	.word	0x08004e35
 8004e04:	08004e63 	.word	0x08004e63
 8004e08:	08004e27 	.word	0x08004e27
 8004e0c:	08004e63 	.word	0x08004e63
 8004e10:	08004e63 	.word	0x08004e63
 8004e14:	08004e55 	.word	0x08004e55
			{
			  case 'c':
		  		  va_arg(va, int);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	603b      	str	r3, [r7, #0]
				  ++length;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3301      	adds	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
				  break;
 8004e24:	e025      	b.n	8004e72 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	330b      	adds	r3, #11
 8004e2a:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	603b      	str	r3, [r7, #0]
				  break;
 8004e32:	e01e      	b.n	8004e72 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	1d1a      	adds	r2, r3, #4
 8004e38:	603a      	str	r2, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8004e3e:	e002      	b.n	8004e46 <ts_formatlength+0xe2>
			  			  ++length;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3301      	adds	r3, #1
 8004e44:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	60ba      	str	r2, [r7, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f6      	bne.n	8004e40 <ts_formatlength+0xdc>
			  	  }
				  break;
 8004e52:	e00e      	b.n	8004e72 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3308      	adds	r3, #8
 8004e58:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	603b      	str	r3, [r7, #0]
				  break;
 8004e60:	e007      	b.n	8004e72 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3301      	adds	r3, #1
 8004e66:	60fb      	str	r3, [r7, #12]
				  break;
 8004e68:	bf00      	nop
 8004e6a:	e002      	b.n	8004e72 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3301      	adds	r3, #1
 8004e76:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f47f af79 	bne.w	8004d74 <ts_formatlength+0x10>
	}
	return length;
 8004e82:	68fb      	ldr	r3, [r7, #12]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8004e90:	b40e      	push	{r1, r2, r3}
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b085      	sub	sp, #20
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8004e9a:	f107 0320 	add.w	r3, r7, #32
 8004e9e:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	69f9      	ldr	r1, [r7, #28]
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff fec6 	bl	8004c36 <ts_formatstring>
 8004eaa:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8004eac:	68fb      	ldr	r3, [r7, #12]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb8:	b003      	add	sp, #12
 8004eba:	4770      	bx	lr

08004ebc <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8004ebc:	b40f      	push	{r0, r1, r2, r3}
 8004ebe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
	int length = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8004eca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ece:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8004ed0:	6839      	ldr	r1, [r7, #0]
 8004ed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ed4:	f7ff ff46 	bl	8004d64 <ts_formatlength>
 8004ed8:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8004eda:	466b      	mov	r3, sp
 8004edc:	461e      	mov	r6, r3
		char buf[length];
 8004ede:	68f9      	ldr	r1, [r7, #12]
 8004ee0:	1e4b      	subs	r3, r1, #1
 8004ee2:	60bb      	str	r3, [r7, #8]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8004ef0:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8004ef4:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8004ef8:	460b      	mov	r3, r1
 8004efa:	461a      	mov	r2, r3
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	00dd      	lsls	r5, r3, #3
 8004f02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f06:	00d4      	lsls	r4, r2, #3
 8004f08:	460b      	mov	r3, r1
 8004f0a:	3307      	adds	r3, #7
 8004f0c:	08db      	lsrs	r3, r3, #3
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	ebad 0d03 	sub.w	sp, sp, r3
 8004f14:	466b      	mov	r3, sp
 8004f16:	3300      	adds	r3, #0
 8004f18:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8004f1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f1e:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff fe85 	bl	8004c36 <ts_formatstring>
 8004f2c:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4619      	mov	r1, r3
 8004f34:	2001      	movs	r0, #1
 8004f36:	f7ff fde0 	bl	8004afa <_write>
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f4a:	b004      	add	sp, #16
 8004f4c:	4770      	bx	lr
	...

08004f50 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7fb f939 	bl	80001d0 <strlen>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	f7ff fdc5 	bl	8004afa <_write>
 8004f70:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8004f72:	2201      	movs	r2, #1
 8004f74:	490b      	ldr	r1, [pc, #44]	; (8004fa4 <puts+0x54>)
 8004f76:	2001      	movs	r0, #1
 8004f78:	f7ff fdbf 	bl	8004afa <_write>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4413      	add	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d102      	bne.n	8004f94 <puts+0x44>
	{
		res = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	e002      	b.n	8004f9a <puts+0x4a>
	}
	else
	{
		res = EOF;
 8004f94:	f04f 33ff 	mov.w	r3, #4294967295
 8004f98:	617b      	str	r3, [r7, #20]
	}

	return res;
 8004f9a:	697b      	ldr	r3, [r7, #20]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	08005204 	.word	0x08005204

08004fa8 <__libc_init_array>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	4e0d      	ldr	r6, [pc, #52]	; (8004fe0 <__libc_init_array+0x38>)
 8004fac:	4c0d      	ldr	r4, [pc, #52]	; (8004fe4 <__libc_init_array+0x3c>)
 8004fae:	1ba4      	subs	r4, r4, r6
 8004fb0:	10a4      	asrs	r4, r4, #2
 8004fb2:	2500      	movs	r5, #0
 8004fb4:	42a5      	cmp	r5, r4
 8004fb6:	d109      	bne.n	8004fcc <__libc_init_array+0x24>
 8004fb8:	4e0b      	ldr	r6, [pc, #44]	; (8004fe8 <__libc_init_array+0x40>)
 8004fba:	4c0c      	ldr	r4, [pc, #48]	; (8004fec <__libc_init_array+0x44>)
 8004fbc:	f000 f820 	bl	8005000 <_init>
 8004fc0:	1ba4      	subs	r4, r4, r6
 8004fc2:	10a4      	asrs	r4, r4, #2
 8004fc4:	2500      	movs	r5, #0
 8004fc6:	42a5      	cmp	r5, r4
 8004fc8:	d105      	bne.n	8004fd6 <__libc_init_array+0x2e>
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fd0:	4798      	blx	r3
 8004fd2:	3501      	adds	r5, #1
 8004fd4:	e7ee      	b.n	8004fb4 <__libc_init_array+0xc>
 8004fd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fda:	4798      	blx	r3
 8004fdc:	3501      	adds	r5, #1
 8004fde:	e7f2      	b.n	8004fc6 <__libc_init_array+0x1e>
 8004fe0:	08005410 	.word	0x08005410
 8004fe4:	08005410 	.word	0x08005410
 8004fe8:	08005410 	.word	0x08005410
 8004fec:	08005414 	.word	0x08005414

08004ff0 <memset>:
 8004ff0:	4402      	add	r2, r0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d100      	bne.n	8004ffa <memset+0xa>
 8004ff8:	4770      	bx	lr
 8004ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8004ffe:	e7f9      	b.n	8004ff4 <memset+0x4>

08005000 <_init>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	bf00      	nop
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr

0800500c <_fini>:
 800500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500e:	bf00      	nop
 8005010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005012:	bc08      	pop	{r3}
 8005014:	469e      	mov	lr, r3
 8005016:	4770      	bx	lr
