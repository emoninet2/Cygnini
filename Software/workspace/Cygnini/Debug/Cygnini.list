
Cygnini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df8  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08007f88  08007f88  00017f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008468  08008468  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08008468  08008468  00018468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008470  08008470  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008470  08008470  00018470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08008480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008208  20000048  080084c8  00020048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20008250  080084c8  00028250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   000256c3  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004939  00000000  00000000  0004573b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b8  00000000  00000000  0004a078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015f0  00000000  00000000  0004b830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000bbac  00000000  00000000  0004ce20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00007c31  00000000  00000000  000589cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000605fd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006094  00000000  00000000  0006067c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000048 	.word	0x20000048
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f70 	.word	0x08007f70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000004c 	.word	0x2000004c
 80001cc:	08007f70 	.word	0x08007f70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b97a 	b.w	80004ec <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	9e08      	ldr	r6, [sp, #32]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d151      	bne.n	80002c4 <__udivmoddi4+0xb4>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d96d      	bls.n	8000302 <__udivmoddi4+0xf2>
 8000226:	fab2 fe82 	clz	lr, r2
 800022a:	f1be 0f00 	cmp.w	lr, #0
 800022e:	d00b      	beq.n	8000248 <__udivmoddi4+0x38>
 8000230:	f1ce 0c20 	rsb	ip, lr, #32
 8000234:	fa01 f50e 	lsl.w	r5, r1, lr
 8000238:	fa20 fc0c 	lsr.w	ip, r0, ip
 800023c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000240:	ea4c 0c05 	orr.w	ip, ip, r5
 8000244:	fa00 f40e 	lsl.w	r4, r0, lr
 8000248:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800024c:	0c25      	lsrs	r5, r4, #16
 800024e:	fbbc f8fa 	udiv	r8, ip, sl
 8000252:	fa1f f987 	uxth.w	r9, r7
 8000256:	fb0a cc18 	mls	ip, sl, r8, ip
 800025a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800025e:	fb08 f309 	mul.w	r3, r8, r9
 8000262:	42ab      	cmp	r3, r5
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x6c>
 8000266:	19ed      	adds	r5, r5, r7
 8000268:	f108 32ff 	add.w	r2, r8, #4294967295
 800026c:	f080 8123 	bcs.w	80004b6 <__udivmoddi4+0x2a6>
 8000270:	42ab      	cmp	r3, r5
 8000272:	f240 8120 	bls.w	80004b6 <__udivmoddi4+0x2a6>
 8000276:	f1a8 0802 	sub.w	r8, r8, #2
 800027a:	443d      	add	r5, r7
 800027c:	1aed      	subs	r5, r5, r3
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb5 f0fa 	udiv	r0, r5, sl
 8000284:	fb0a 5510 	mls	r5, sl, r0, r5
 8000288:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800028c:	fb00 f909 	mul.w	r9, r0, r9
 8000290:	45a1      	cmp	r9, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x98>
 8000294:	19e4      	adds	r4, r4, r7
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 810a 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 800029e:	45a1      	cmp	r9, r4
 80002a0:	f240 8107 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	eba4 0409 	sub.w	r4, r4, r9
 80002ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d061      	beq.n	800037a <__udivmoddi4+0x16a>
 80002b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ba:	2300      	movs	r3, #0
 80002bc:	6034      	str	r4, [r6, #0]
 80002be:	6073      	str	r3, [r6, #4]
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d907      	bls.n	80002d8 <__udivmoddi4+0xc8>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d054      	beq.n	8000376 <__udivmoddi4+0x166>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	f040 808e 	bne.w	80003fe <__udivmoddi4+0x1ee>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xdc>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2d0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0503 	sbc.w	r5, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	46ac      	mov	ip, r5
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d03f      	beq.n	800037a <__udivmoddi4+0x16a>
 80002fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	b912      	cbnz	r2, 800030a <__udivmoddi4+0xfa>
 8000304:	2701      	movs	r7, #1
 8000306:	fbb7 f7f2 	udiv	r7, r7, r2
 800030a:	fab7 fe87 	clz	lr, r7
 800030e:	f1be 0f00 	cmp.w	lr, #0
 8000312:	d134      	bne.n	800037e <__udivmoddi4+0x16e>
 8000314:	1beb      	subs	r3, r5, r7
 8000316:	0c3a      	lsrs	r2, r7, #16
 8000318:	fa1f fc87 	uxth.w	ip, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb02 3318 	mls	r3, r2, r8, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb0c f308 	mul.w	r3, ip, r8
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x134>
 8000334:	19ed      	adds	r5, r5, r7
 8000336:	f108 30ff 	add.w	r0, r8, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x132>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80d1 	bhi.w	80004e4 <__udivmoddi4+0x2d4>
 8000342:	4680      	mov	r8, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0f2 	udiv	r0, r5, r2
 800034c:	fb02 5510 	mls	r5, r2, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb0c fc00 	mul.w	ip, ip, r0
 8000358:	45a4      	cmp	ip, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x15c>
 800035c:	19e4      	adds	r4, r4, r7
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x15a>
 8000364:	45a4      	cmp	ip, r4
 8000366:	f200 80b8 	bhi.w	80004da <__udivmoddi4+0x2ca>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 040c 	sub.w	r4, r4, ip
 8000370:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000374:	e79d      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000376:	4631      	mov	r1, r6
 8000378:	4630      	mov	r0, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	f1ce 0420 	rsb	r4, lr, #32
 8000382:	fa05 f30e 	lsl.w	r3, r5, lr
 8000386:	fa07 f70e 	lsl.w	r7, r7, lr
 800038a:	fa20 f804 	lsr.w	r8, r0, r4
 800038e:	0c3a      	lsrs	r2, r7, #16
 8000390:	fa25 f404 	lsr.w	r4, r5, r4
 8000394:	ea48 0803 	orr.w	r8, r8, r3
 8000398:	fbb4 f1f2 	udiv	r1, r4, r2
 800039c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a0:	fb02 4411 	mls	r4, r2, r1, r4
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ac:	fb01 f30c 	mul.w	r3, r1, ip
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1bc>
 80003b8:	19ed      	adds	r5, r5, r7
 80003ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80003be:	f080 808a 	bcs.w	80004d6 <__udivmoddi4+0x2c6>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	f240 8087 	bls.w	80004d6 <__udivmoddi4+0x2c6>
 80003c8:	3902      	subs	r1, #2
 80003ca:	443d      	add	r5, r7
 80003cc:	1aeb      	subs	r3, r5, r3
 80003ce:	fa1f f588 	uxth.w	r5, r8
 80003d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003d6:	fb02 3310 	mls	r3, r2, r0, r3
 80003da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003de:	fb00 f30c 	mul.w	r3, r0, ip
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1e6>
 80003e6:	19ed      	adds	r5, r5, r7
 80003e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003ec:	d26f      	bcs.n	80004ce <__udivmoddi4+0x2be>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d96d      	bls.n	80004ce <__udivmoddi4+0x2be>
 80003f2:	3802      	subs	r0, #2
 80003f4:	443d      	add	r5, r7
 80003f6:	1aeb      	subs	r3, r5, r3
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	e78f      	b.n	800031e <__udivmoddi4+0x10e>
 80003fe:	f1c1 0720 	rsb	r7, r1, #32
 8000402:	fa22 f807 	lsr.w	r8, r2, r7
 8000406:	408b      	lsls	r3, r1
 8000408:	fa05 f401 	lsl.w	r4, r5, r1
 800040c:	ea48 0303 	orr.w	r3, r8, r3
 8000410:	fa20 fe07 	lsr.w	lr, r0, r7
 8000414:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4e 0e04 	orr.w	lr, lr, r4
 800041e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000422:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000426:	fb0c 5519 	mls	r5, ip, r9, r5
 800042a:	fa1f f883 	uxth.w	r8, r3
 800042e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000432:	fb09 f408 	mul.w	r4, r9, r8
 8000436:	42ac      	cmp	r4, r5
 8000438:	fa02 f201 	lsl.w	r2, r2, r1
 800043c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x244>
 8000442:	18ed      	adds	r5, r5, r3
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d243      	bcs.n	80004d2 <__udivmoddi4+0x2c2>
 800044a:	42ac      	cmp	r4, r5
 800044c:	d941      	bls.n	80004d2 <__udivmoddi4+0x2c2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	441d      	add	r5, r3
 8000454:	1b2d      	subs	r5, r5, r4
 8000456:	fa1f fe8e 	uxth.w	lr, lr
 800045a:	fbb5 f0fc 	udiv	r0, r5, ip
 800045e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000462:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45a0      	cmp	r8, r4
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x26e>
 800046e:	18e4      	adds	r4, r4, r3
 8000470:	f100 35ff 	add.w	r5, r0, #4294967295
 8000474:	d229      	bcs.n	80004ca <__udivmoddi4+0x2ba>
 8000476:	45a0      	cmp	r8, r4
 8000478:	d927      	bls.n	80004ca <__udivmoddi4+0x2ba>
 800047a:	3802      	subs	r0, #2
 800047c:	441c      	add	r4, r3
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454c      	cmp	r4, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	464d      	mov	r5, r9
 8000490:	d315      	bcc.n	80004be <__udivmoddi4+0x2ae>
 8000492:	d012      	beq.n	80004ba <__udivmoddi4+0x2aa>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x29c>
 8000496:	ebba 030e 	subs.w	r3, sl, lr
 800049a:	eb64 0405 	sbc.w	r4, r4, r5
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40cb      	lsrs	r3, r1
 80004a4:	431f      	orrs	r7, r3
 80004a6:	40cc      	lsrs	r4, r1
 80004a8:	6037      	str	r7, [r6, #0]
 80004aa:	6074      	str	r4, [r6, #4]
 80004ac:	2100      	movs	r1, #0
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	4618      	mov	r0, r3
 80004b4:	e6f8      	b.n	80002a8 <__udivmoddi4+0x98>
 80004b6:	4690      	mov	r8, r2
 80004b8:	e6e0      	b.n	800027c <__udivmoddi4+0x6c>
 80004ba:	45c2      	cmp	sl, r8
 80004bc:	d2ea      	bcs.n	8000494 <__udivmoddi4+0x284>
 80004be:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c2:	eb69 0503 	sbc.w	r5, r9, r3
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7e4      	b.n	8000494 <__udivmoddi4+0x284>
 80004ca:	4628      	mov	r0, r5
 80004cc:	e7d7      	b.n	800047e <__udivmoddi4+0x26e>
 80004ce:	4640      	mov	r0, r8
 80004d0:	e791      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e7be      	b.n	8000454 <__udivmoddi4+0x244>
 80004d6:	4601      	mov	r1, r0
 80004d8:	e778      	b.n	80003cc <__udivmoddi4+0x1bc>
 80004da:	3802      	subs	r0, #2
 80004dc:	443c      	add	r4, r7
 80004de:	e745      	b.n	800036c <__udivmoddi4+0x15c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xe6>
 80004e4:	f1a8 0802 	sub.w	r8, r8, #2
 80004e8:	443d      	add	r5, r7
 80004ea:	e72b      	b.n	8000344 <__udivmoddi4+0x134>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <c12832_hal_spi_init>:

SPI_HandleTypeDef hspi2;



void c12832_hal_spi_init(){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]


    /* USER CODE END SPI2_MspInit 0 */
	/* Peripheral clock enable */
	__HAL_RCC_SPI2_CLK_ENABLE();
 8000506:	4a31      	ldr	r2, [pc, #196]	; (80005cc <c12832_hal_spi_init+0xdc>)
 8000508:	4b30      	ldr	r3, [pc, #192]	; (80005cc <c12832_hal_spi_init+0xdc>)
 800050a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800050c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000510:	6593      	str	r3, [r2, #88]	; 0x58
 8000512:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <c12832_hal_spi_init+0xdc>)
 8000514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4a2b      	ldr	r2, [pc, #172]	; (80005cc <c12832_hal_spi_init+0xdc>)
 8000520:	4b2a      	ldr	r3, [pc, #168]	; (80005cc <c12832_hal_spi_init+0xdc>)
 8000522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b28      	ldr	r3, [pc, #160]	; (80005cc <c12832_hal_spi_init+0xdc>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
	/**SPI2 GPIO Configuration
	PB13     ------> SPI2_SCK
	PB14     ------> SPI2_MISO
	PB15     ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000536:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800053a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053c:	2302      	movs	r3, #2
 800053e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000544:	2303      	movs	r3, #3
 8000546:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000548:	2305      	movs	r3, #5
 800054a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	4619      	mov	r1, r3
 8000552:	481f      	ldr	r0, [pc, #124]	; (80005d0 <c12832_hal_spi_init+0xe0>)
 8000554:	f001 fbf0 	bl	8001d38 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */


	  hspi2.Instance = SPI2;
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 800055a:	4a1f      	ldr	r2, [pc, #124]	; (80005d8 <c12832_hal_spi_init+0xe8>)
 800055c:	601a      	str	r2, [r3, #0]
	  hspi2.Init.Mode = SPI_MODE_MASTER;
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 8000560:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000564:	605a      	str	r2, [r3, #4]
	  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
	  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 800056e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000572:	60da      	str	r2, [r3, #12]
	  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
	  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
	  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 8000582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000586:	619a      	str	r2, [r3, #24]
	  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 800058a:	2228      	movs	r2, #40	; 0x28
 800058c:	61da      	str	r2, [r3, #28]
	  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 8000590:	2200      	movs	r2, #0
 8000592:	621a      	str	r2, [r3, #32]
	  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 8000596:	2200      	movs	r2, #0
 8000598:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 800059c:	2200      	movs	r2, #0
 800059e:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi2.Init.CRCPolynomial = 7;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 80005a2:	2207      	movs	r2, #7
 80005a4:	62da      	str	r2, [r3, #44]	; 0x2c
	  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	631a      	str	r2, [r3, #48]	; 0x30
	  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <c12832_hal_spi_init+0xe4>)
 80005b4:	f003 fde8 	bl	8004188 <HAL_SPI_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <c12832_hal_spi_init+0xd2>
	  {
	    Error_Handler();
 80005be:	f007 f963 	bl	8007888 <Error_Handler>
	  }

}
 80005c2:	bf00      	nop
 80005c4:	3720      	adds	r7, #32
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000
 80005d0:	48000400 	.word	0x48000400
 80005d4:	20007f20 	.word	0x20007f20
 80005d8:	40003800 	.word	0x40003800

080005dc <c12832_hal_gpio_init>:


void c12832_hal_gpio_init(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4a43      	ldr	r2, [pc, #268]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 80005e4:	4b42      	ldr	r3, [pc, #264]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 80005e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fa:	4a3d      	ldr	r2, [pc, #244]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 80005fc:	4b3c      	ldr	r3, [pc, #240]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 80005fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4a37      	ldr	r2, [pc, #220]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 8000614:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 8000616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	4a31      	ldr	r2, [pc, #196]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 800062c:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 800062e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000642:	4a2b      	ldr	r2, [pc, #172]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 8000646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000648:	f043 0308 	orr.w	r3, r3, #8
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <c12832_hal_gpio_init+0x114>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0308 	and.w	r3, r3, #8
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]


	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, DISPLAY_NRESET_Pin|DISPLAY_A0_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2160      	movs	r1, #96	; 0x60
 800066e:	4821      	ldr	r0, [pc, #132]	; (80006f4 <c12832_hal_gpio_init+0x118>)
 8000670:	f001 fcf8 	bl	8002064 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DISPLAY_NSEL_GPIO_Port, DISPLAY_NSEL_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067a:	481f      	ldr	r0, [pc, #124]	; (80006f8 <c12832_hal_gpio_init+0x11c>)
 800067c:	f001 fcf2 	bl	8002064 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DISPLAY_BACKLIGHT_GPIO_Port, DISPLAY_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f001 fceb 	bl	8002064 <HAL_GPIO_WritePin>


	  /*Configure GPIO pins : DISPLAY_NRESET_Pin DISPLAY_A0_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_NRESET_Pin|DISPLAY_A0_Pin;
 800068e:	2360      	movs	r3, #96	; 0x60
 8000690:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4813      	ldr	r0, [pc, #76]	; (80006f4 <c12832_hal_gpio_init+0x118>)
 80006a6:	f001 fb47 	bl	8001d38 <HAL_GPIO_Init>

	  /*Configure GPIO pin : DISPLAY_NSEL_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_NSEL_Pin;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(DISPLAY_NSEL_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	; (80006f8 <c12832_hal_gpio_init+0x11c>)
 80006c4:	f001 fb38 	bl	8001d38 <HAL_GPIO_Init>

	  /*Configure GPIO pin : DISPLAY_BACKLIGHT_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_BACKLIGHT_Pin;
 80006c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006cc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(DISPLAY_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f001 fb28 	bl	8001d38 <HAL_GPIO_Init>



}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48000800 	.word	0x48000800
 80006f8:	48000400 	.word	0x48000400

080006fc <c12832_hal_spi_write_read>:


int c12832_hal_spi_write_read (uint8_t *tx_data, uint8_t *rx_data, uint16_t lenght) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	80fb      	strh	r3, [r7, #6]

	HAL_SPI_Transmit (&hspi2, tx_data, 1, 200);
 800070a:	23c8      	movs	r3, #200	; 0xc8
 800070c:	2201      	movs	r2, #1
 800070e:	68f9      	ldr	r1, [r7, #12]
 8000710:	4803      	ldr	r0, [pc, #12]	; (8000720 <c12832_hal_spi_write_read+0x24>)
 8000712:	f003 fdc1 	bl	8004298 <HAL_SPI_Transmit>
		//DEBUG_MESSAGE_AND_EXIT_FAILURE

	return EXIT_SUCCESS;
 8000716:	2300      	movs	r3, #0

}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20007f20 	.word	0x20007f20

08000724 <graphic_lcd_clear_screen>:

#include "graphic_lcd.h"
#include "st7565r.h"
#include "font.h"

int graphic_lcd_clear_screen(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	e019      	b.n	8000764 <graphic_lcd_clear_screen+0x40>
		st7565r_set_page_address(i);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f8cd 	bl	80008d4 <st7565r_set_page_address>
		st7565r_set_column_address(0);
 800073a:	2000      	movs	r0, #0
 800073c:	f000 f8de 	bl	80008fc <st7565r_set_column_address>
		st7565r_set_display_start_line_address(0);
 8000740:	2000      	movs	r0, #0
 8000742:	f000 f8f8 	bl	8000936 <st7565r_set_display_start_line_address>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	e005      	b.n	8000758 <graphic_lcd_clear_screen+0x34>
			st7565r_write_data(0);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 f881 	bl	8000854 <st7565r_write_data>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	2b84      	cmp	r3, #132	; 0x84
 800075c:	ddf6      	ble.n	800074c <graphic_lcd_clear_screen+0x28>
	for (i=0; i<LINE_COUNT; i++) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	3301      	adds	r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b03      	cmp	r3, #3
 8000768:	dde2      	ble.n	8000730 <graphic_lcd_clear_screen+0xc>
	}
	
	return EXIT_SUCCESS;
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <graphic_lcd_write>:

int graphic_lcd_write(int line, int offset, char *text) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]

	int i, j;
	
	st7565r_set_page_address(line);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f8a5 	bl	80008d4 <st7565r_set_page_address>
	st7565r_set_column_address(offset + FONT_SIZE);
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	3305      	adds	r3, #5
 8000790:	b2db      	uxtb	r3, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f8b2 	bl	80008fc <st7565r_set_column_address>
	
	for (i=0; i<strlen(text); i++) {
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	e01e      	b.n	80007dc <graphic_lcd_write+0x68>
	
		for (j=0; j<FONT_SIZE; j++) {
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	e012      	b.n	80007ca <graphic_lcd_write+0x56>
			st7565r_write_data(font_5x8_table[(((text[i] - ASCII_FONT_FIRST) * FONT_SIZE) + j)]);
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	f1a3 0220 	sub.w	r2, r3, #32
 80007b0:	4613      	mov	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	441a      	add	r2, r3
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	4413      	add	r3, r2
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <graphic_lcd_write+0x80>)
 80007bc:	5cd3      	ldrb	r3, [r2, r3]
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f848 	bl	8000854 <st7565r_write_data>
		for (j=0; j<FONT_SIZE; j++) {
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	3301      	adds	r3, #1
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	dde9      	ble.n	80007a4 <graphic_lcd_write+0x30>
		}
		st7565r_write_data(0);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 f83f 	bl	8000854 <st7565r_write_data>
	for (i=0; i<strlen(text); i++) {
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	3301      	adds	r3, #1
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff fcf7 	bl	80001d0 <strlen>
 80007e2:	4602      	mov	r2, r0
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d8d9      	bhi.n	800079e <graphic_lcd_write+0x2a>
	}
		
	return EXIT_SUCCESS;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	08008254 	.word	0x08008254

080007f8 <graphic_lcd_initialize>:

int graphic_lcd_initialize (void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	
	return st7565r_init ();
 80007fc:	f000 f8de 	bl	80009bc <st7565r_init>
 8000800:	4603      	mov	r3, r0
	
}
 8000802:	4618      	mov	r0, r3
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <st7565r_write_command>:
#include "C12832Port.h"


#define HUNDRED_MILLISECONDS  	(10 / portTICK_PERIOD_MS)

void st7565r_write_command(uint8_t command) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <st7565r_write_command+0x44>)
 800081a:	f001 fc23 	bl	8002064 <HAL_GPIO_WritePin>
        DISPLAY_A0_LOW;
 800081e:	2200      	movs	r2, #0
 8000820:	2140      	movs	r1, #64	; 0x40
 8000822:	480b      	ldr	r0, [pc, #44]	; (8000850 <st7565r_write_command+0x48>)
 8000824:	f001 fc1e 	bl	8002064 <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&command, &tmp, 1);
 8000828:	f107 010f 	add.w	r1, r7, #15
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	2201      	movs	r2, #1
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff63 	bl	80006fc <c12832_hal_spi_write_read>
        DISPLAY_CHIP_SELECT_HIGH;
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <st7565r_write_command+0x44>)
 800083e:	f001 fc11 	bl	8002064 <HAL_GPIO_WritePin>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	48000400 	.word	0x48000400
 8000850:	48000800 	.word	0x48000800

08000854 <st7565r_write_data>:

void st7565r_write_data(uint8_t data) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000864:	480e      	ldr	r0, [pc, #56]	; (80008a0 <st7565r_write_data+0x4c>)
 8000866:	f001 fbfd 	bl	8002064 <HAL_GPIO_WritePin>
        DISPLAY_A0_HIGH;
 800086a:	2201      	movs	r2, #1
 800086c:	2140      	movs	r1, #64	; 0x40
 800086e:	480d      	ldr	r0, [pc, #52]	; (80008a4 <st7565r_write_data+0x50>)
 8000870:	f001 fbf8 	bl	8002064 <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&data, &tmp, 1);
 8000874:	f107 010f 	add.w	r1, r7, #15
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	2201      	movs	r2, #1
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff3d 	bl	80006fc <c12832_hal_spi_write_read>
        DISPLAY_A0_LOW;
 8000882:	2200      	movs	r2, #0
 8000884:	2140      	movs	r1, #64	; 0x40
 8000886:	4807      	ldr	r0, [pc, #28]	; (80008a4 <st7565r_write_data+0x50>)
 8000888:	f001 fbec 	bl	8002064 <HAL_GPIO_WritePin>
        DISPLAY_CHIP_SELECT_HIGH;
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000892:	4803      	ldr	r0, [pc, #12]	; (80008a0 <st7565r_write_data+0x4c>)
 8000894:	f001 fbe6 	bl	8002064 <HAL_GPIO_WritePin>
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	48000400 	.word	0x48000400
 80008a4:	48000800 	.word	0x48000800

080008a8 <st7565r_hard_reset>:
 *
 * This functions will reset the LCD controller by setting the reset pin low.
 * \note this funtions should not be confused with the \ref st7565r_soft_reset()
 * function, this command will control the RST pin.
 */
void st7565r_hard_reset(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	
        DISPLAY_RESET_LOW;
 80008ac:	2200      	movs	r2, #0
 80008ae:	2120      	movs	r1, #32
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <st7565r_hard_reset+0x28>)
 80008b2:	f001 fbd7 	bl	8002064 <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 80008b6:	200a      	movs	r0, #10
 80008b8:	f005 fc28 	bl	800610c <vTaskDelay>
        DISPLAY_RESET_HIGH;
 80008bc:	2201      	movs	r2, #1
 80008be:	2120      	movs	r1, #32
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <st7565r_hard_reset+0x28>)
 80008c2:	f001 fbcf 	bl	8002064 <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 80008c6:	200a      	movs	r0, #10
 80008c8:	f005 fc20 	bl	800610c <vTaskDelay>
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	48000800 	.word	0x48000800

080008d4 <st7565r_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
void st7565r_set_page_address(uint8_t address)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
        // Make sure that the address is 4 bits (only 8 pages)
        address &= 0x0F;
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f003 030f 	and.w	r3, r3, #15
 80008e4:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff8a 	bl	8000808 <st7565r_write_command>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <st7565r_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void st7565r_set_column_address(uint8_t address)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
        // Make sure the address is 7 bits
        address &= 0x7F;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800090c:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff74 	bl	8000808 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	b2db      	uxtb	r3, r3
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff6d 	bl	8000808 <st7565r_write_command>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <st7565r_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the LCD.
 */
void st7565r_set_display_start_line_address(uint8_t address)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	4603      	mov	r3, r0
 800093e:	71fb      	strb	r3, [r7, #7]
        // Make sure address is 6 bits
        address &= 0x3F;
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000946:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff59 	bl	8000808 <st7565r_write_command>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <st7565r_display_on>:
 * \brief Turn the LCD display on
 *
 * This function will turn on the LCD.
 */
void st7565r_display_on(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_ON);
 8000962:	20af      	movs	r0, #175	; 0xaf
 8000964:	f7ff ff50 	bl	8000808 <st7565r_write_command>
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <st7565r_set_contrast>:
 *                 the LCD.
 *
 * \retval contrast the contrast value written to the LCD controller
 */
uint8_t st7565r_set_contrast(uint8_t contrast)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
        if (contrast < ST7565R_DISPLAY_CONTRAST_MIN) {
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b1d      	cmp	r3, #29
 800097a:	d801      	bhi.n	8000980 <st7565r_set_contrast+0x14>
                contrast = ST7565R_DISPLAY_CONTRAST_MIN;
 800097c:	231e      	movs	r3, #30
 800097e:	71fb      	strb	r3, [r7, #7]
        }
        if (contrast > ST7565R_DISPLAY_CONTRAST_MAX) {
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b28      	cmp	r3, #40	; 0x28
 8000984:	d901      	bls.n	800098a <st7565r_set_contrast+0x1e>
                contrast = ST7565R_DISPLAY_CONTRAST_MAX;
 8000986:	2328      	movs	r3, #40	; 0x28
 8000988:	71fb      	strb	r3, [r7, #7]
        }
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME_MODE_SET);
 800098a:	2081      	movs	r0, #129	; 0x81
 800098c:	f7ff ff3c 	bl	8000808 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME(contrast));
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	43db      	mvns	r3, r3
 8000994:	b2db      	uxtb	r3, r3
 8000996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff33 	bl	8000808 <st7565r_write_command>
        return contrast;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <st7565r_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the LCD
 *
 */
void st7565r_display_invert_disable(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_NORMAL);
 80009b0:	20a6      	movs	r0, #166	; 0xa6
 80009b2:	f7ff ff29 	bl	8000808 <st7565r_write_command>
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <st7565r_init>:

int st7565r_init(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	
        // Do a hard reset of the LCD display controller
        st7565r_hard_reset();
 80009c0:	f7ff ff72 	bl	80008a8 <st7565r_hard_reset>

        // Set the A0 pin to the default state (command)
        DISPLAY_A0_LOW;
 80009c4:	2200      	movs	r2, #0
 80009c6:	2140      	movs	r1, #64	; 0x40
 80009c8:	4810      	ldr	r0, [pc, #64]	; (8000a0c <st7565r_init+0x50>)
 80009ca:	f001 fb4b 	bl	8002064 <HAL_GPIO_WritePin>

        // The column address
        st7565r_write_command(ST7565R_CMD_ADC_NORMAL);
 80009ce:	20a0      	movs	r0, #160	; 0xa0
 80009d0:	f7ff ff1a 	bl	8000808 <st7565r_write_command>

        // Non-inverted display
        st7565r_display_invert_disable();
 80009d4:	f7ff ffea 	bl	80009ac <st7565r_display_invert_disable>

        // The common mode scan direction
        st7565r_write_command(ST7565R_CMD_REVERSE_SCAN_DIRECTION);
 80009d8:	20c8      	movs	r0, #200	; 0xc8
 80009da:	f7ff ff15 	bl	8000808 <st7565r_write_command>

        // Set the voltage bias ratio to 1/6
        st7565r_write_command(ST7565R_CMD_LCD_BIAS_1_DIV_6_DUTY33);
 80009de:	20a2      	movs	r0, #162	; 0xa2
 80009e0:	f7ff ff12 	bl	8000808 <st7565r_write_command>

        // Set booster circuit, voltage regulator and voltage follower all to on
        st7565r_write_command(ST7565R_CMD_POWER_CTRL_ALL_ON);
 80009e4:	202f      	movs	r0, #47	; 0x2f
 80009e6:	f7ff ff0f 	bl	8000808 <st7565r_write_command>

        // Set the booster ratio to 2X,3X,4X
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_SET);
 80009ea:	20f8      	movs	r0, #248	; 0xf8
 80009ec:	f7ff ff0c 	bl	8000808 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_2X_3X_4X);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff ff09 	bl	8000808 <st7565r_write_command>

        // Set voltage resistor ratio to 1
        st7565r_write_command(ST7565R_CMD_VOLTAGE_RESISTOR_RATIO_1);
 80009f6:	2021      	movs	r0, #33	; 0x21
 80009f8:	f7ff ff06 	bl	8000808 <st7565r_write_command>

        /* Set contrast to min value, no need to check return value as the contrast
        is set to the defined min*/
        st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);
 80009fc:	201e      	movs	r0, #30
 80009fe:	f7ff ffb5 	bl	800096c <st7565r_set_contrast>

        // Turn on the display
        st7565r_display_on();
 8000a02:	f7ff ffac 	bl	800095e <st7565r_display_on>
		
		return EXIT_SUCCESS;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	48000800 	.word	0x48000800

08000a10 <NRF24L01p_ResetConfigValues>:
#include "NRF24L01p.h"




void NRF24L01p_ResetConfigValues(NRF24L01p_RadioConfig_t *_RadioConfig, NRF24L01p_RxPipeConfig_t *_RxPipeConfig){
 8000a10:	b5b0      	push	{r4, r5, r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_Initialize();
 8000a1a:	f000 fef5 	bl	8001808 <NRF24L01p_port_Initialize>
    //ResetConfigValues(_RadioConfig, _RxPipeConfig);


    NRF24L01p_port_write_Pin_CE(0);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 ff38 	bl	8001894 <NRF24L01p_port_write_Pin_CE>
    NRF24L01p_port_write_Pin_CSN(0);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 ff47 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>

    NRF24L01p_port_DelayMs(_NRF24L01P_TIMING_PowerOnReset_ms);
 8000a2a:	2064      	movs	r0, #100	; 0x64
 8000a2c:	f000 fffc 	bl	8001a28 <NRF24L01p_port_DelayMs>

    NRF24L01p_RadioMode(NRF24L01P_MODE_POWER_DOWN);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f000 f8db 	bl	8000bec <NRF24L01p_RadioMode>
    NRF24L01p_RadioMode(NRF24L01P_MODE_RX);
 8000a36:	2003      	movs	r0, #3
 8000a38:	f000 f8d8 	bl	8000bec <NRF24L01p_RadioMode>

    NRF24L01p_clear_data_ready_flag();
 8000a3c:	f000 fd57 	bl	80014ee <NRF24L01p_clear_data_ready_flag>
    NRF24L01p_flush_rx();
 8000a40:	f000 fb79 	bl	8001136 <NRF24L01p_flush_rx>
    NRF24L01p_flush_tx();
 8000a44:	f000 fb62 	bl	800110c <NRF24L01p_flush_tx>

    uint8_t status_rst_val = 0x70;//reset status
 8000a48:	2370      	movs	r3, #112	; 0x70
 8000a4a:	72fb      	strb	r3, [r7, #11]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS, &status_rst_val,1);
 8000a4c:	f107 030b 	add.w	r3, r7, #11
 8000a50:	2201      	movs	r2, #1
 8000a52:	4619      	mov	r1, r3
 8000a54:	2007      	movs	r0, #7
 8000a56:	f000 faf2 	bl	800103e <NRF24L01p_write_register_buffer>
    uint8_t config_rst_val = 0x0b;//reset config
 8000a5a:	230b      	movs	r3, #11
 8000a5c:	72bb      	strb	r3, [r7, #10]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_CONFIG, &config_rst_val,1);
 8000a5e:	f107 030a 	add.w	r3, r7, #10
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 fae9 	bl	800103e <NRF24L01p_write_register_buffer>


    RadioConfig.DataReadyInterruptEnabled = _RadioConfig->DataReadyInterruptEnabled;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	4b5c      	ldr	r3, [pc, #368]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000a72:	701a      	strb	r2, [r3, #0]
    RadioConfig.DataSentInterruptFlagEnabled = _RadioConfig->DataSentInterruptFlagEnabled;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	785a      	ldrb	r2, [r3, #1]
 8000a78:	4b5a      	ldr	r3, [pc, #360]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000a7a:	705a      	strb	r2, [r3, #1]
    RadioConfig.MaxRetryInterruptFlagEnabled = _RadioConfig->MaxRetryInterruptFlagEnabled;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	789a      	ldrb	r2, [r3, #2]
 8000a80:	4b58      	ldr	r3, [pc, #352]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000a82:	709a      	strb	r2, [r3, #2]
    RadioConfig.Crc = _RadioConfig->Crc;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	78da      	ldrb	r2, [r3, #3]
 8000a88:	4b56      	ldr	r3, [pc, #344]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000a8a:	70da      	strb	r2, [r3, #3]
    RadioConfig.AutoReTransmissionCount = _RadioConfig->AutoReTransmissionCount;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	791a      	ldrb	r2, [r3, #4]
 8000a90:	4b54      	ldr	r3, [pc, #336]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000a92:	711a      	strb	r2, [r3, #4]
    RadioConfig.AutoReTransmitDelayX250us = _RadioConfig->AutoReTransmitDelayX250us;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	795a      	ldrb	r2, [r3, #5]
 8000a98:	4b52      	ldr	r3, [pc, #328]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000a9a:	715a      	strb	r2, [r3, #5]
    RadioConfig.frequencyOffset = _RadioConfig->frequencyOffset;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	799a      	ldrb	r2, [r3, #6]
 8000aa0:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000aa2:	719a      	strb	r2, [r3, #6]
    RadioConfig.datarate = _RadioConfig->datarate;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	79da      	ldrb	r2, [r3, #7]
 8000aa8:	4b4e      	ldr	r3, [pc, #312]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000aaa:	71da      	strb	r2, [r3, #7]
    RadioConfig.RfPower = _RadioConfig->RfPower;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7a1a      	ldrb	r2, [r3, #8]
 8000ab0:	4b4c      	ldr	r3, [pc, #304]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000ab2:	721a      	strb	r2, [r3, #8]
    RadioConfig.PllLock = _RadioConfig->PllLock;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	7a5a      	ldrb	r2, [r3, #9]
 8000ab8:	4b4a      	ldr	r3, [pc, #296]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000aba:	725a      	strb	r2, [r3, #9]
    RadioConfig.ContWaveEnabled = _RadioConfig->ContWaveEnabled;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7a9a      	ldrb	r2, [r3, #10]
 8000ac0:	4b48      	ldr	r3, [pc, #288]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000ac2:	729a      	strb	r2, [r3, #10]
    RadioConfig.FeatureDynamicPayloadEnabled = _RadioConfig->FeatureDynamicPayloadEnabled;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7ada      	ldrb	r2, [r3, #11]
 8000ac8:	4b46      	ldr	r3, [pc, #280]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000aca:	72da      	strb	r2, [r3, #11]
    RadioConfig.FeaturePayloadWithAckEnabled = _RadioConfig->FeaturePayloadWithAckEnabled;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7b1a      	ldrb	r2, [r3, #12]
 8000ad0:	4b44      	ldr	r3, [pc, #272]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000ad2:	731a      	strb	r2, [r3, #12]
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = _RadioConfig->FeatureDynamicPayloadWithNoAckEnabled;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7b5a      	ldrb	r2, [r3, #13]
 8000ad8:	4b42      	ldr	r3, [pc, #264]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000ada:	735a      	strb	r2, [r3, #13]

	int i;
    for(i=0;i<6;i++){
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	e019      	b.n	8000b16 <NRF24L01p_ResetConfigValues+0x106>
        RxPipeConfig[i] = _RxPipeConfig[i];
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	4413      	add	r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	461a      	mov	r2, r3
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	1898      	adds	r0, r3, r2
 8000af2:	493d      	ldr	r1, [pc, #244]	; (8000be8 <NRF24L01p_ResetConfigValues+0x1d8>)
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	440b      	add	r3, r1
 8000b00:	461c      	mov	r4, r3
 8000b02:	4605      	mov	r5, r0
 8000b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b0c:	e884 0003 	stmia.w	r4, {r0, r1}
    for(i=0;i<6;i++){
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	3301      	adds	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b05      	cmp	r3, #5
 8000b1a:	dde2      	ble.n	8000ae2 <NRF24L01p_ResetConfigValues+0xd2>
    }


    NRF24L01p_enable_dynamic_payload(RadioConfig.FeatureDynamicPayloadEnabled);
 8000b1c:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000b1e:	7adb      	ldrb	r3, [r3, #11]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fdf6 	bl	8001712 <NRF24L01p_enable_dynamic_payload>
    NRF24L01p_enable_payload_with_ack(RadioConfig.FeaturePayloadWithAckEnabled);
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000b28:	7b1b      	ldrb	r3, [r3, #12]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fe1a 	bl	8001764 <NRF24L01p_enable_payload_with_ack>
    NRF24L01p_enable_dynamic_payload_with_no_ack(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled);
 8000b30:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000b32:	7b5b      	ldrb	r3, [r3, #13]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 fe3e 	bl	80017b6 <NRF24L01p_enable_dynamic_payload_with_no_ack>
    NRF24L01p_set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000b3c:	791b      	ldrb	r3, [r3, #4]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fc27 	bl	8001392 <NRF24L01p_set_auto_retransmission_count>
    NRF24L01p_set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000b46:	795b      	ldrb	r3, [r3, #5]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fc3d 	bl	80013c8 <NRF24L01p_set_auto_retransmission_delay>
    NRF24L01p_set_DataRate(RadioConfig.datarate);
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <NRF24L01p_ResetConfigValues+0x1d4>)
 8000b50:	79db      	ldrb	r3, [r3, #7]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fc68 	bl	8001428 <NRF24L01p_set_DataRate>

    for(i=0;i<6;i++){
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	e03a      	b.n	8000bd4 <NRF24L01p_ResetConfigValues+0x1c4>
    	NRF24L01p_enable_rx_on_pipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].PipeEnabled );
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	b2d8      	uxtb	r0, r3
 8000b62:	4921      	ldr	r1, [pc, #132]	; (8000be8 <NRF24L01p_ResetConfigValues+0x1d8>)
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4619      	mov	r1, r3
 8000b74:	f000 fbd3 	bl	800131e <NRF24L01p_enable_rx_on_pipe>
    	NRF24L01p_enable_auto_ack((NRF24L01p_pipe_t)i,RxPipeConfig[i].autoAckEnabled );
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	b2d8      	uxtb	r0, r3
 8000b7c:	491a      	ldr	r1, [pc, #104]	; (8000be8 <NRF24L01p_ResetConfigValues+0x1d8>)
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	4613      	mov	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	440b      	add	r3, r1
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f000 fb8b 	bl	80012aa <NRF24L01p_enable_auto_ack>
    	NRF24L01p_enable_dynamic_payload_pipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	b2d8      	uxtb	r0, r3
 8000b98:	4913      	ldr	r1, [pc, #76]	; (8000be8 <NRF24L01p_ResetConfigValues+0x1d8>)
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	440b      	add	r3, r1
 8000ba6:	3311      	adds	r3, #17
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	f000 fd77 	bl	800169e <NRF24L01p_enable_dynamic_payload_pipe>
    	NRF24L01p_set_RX_pipe_address((NRF24L01p_pipe_t)i,RxPipeConfig[i].address);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	b2d8      	uxtb	r0, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <NRF24L01p_ResetConfigValues+0x1d8>)
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	cb18      	ldmia	r3, {r3, r4}
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4623      	mov	r3, r4
 8000bca:	f000 fcba 	bl	8001542 <NRF24L01p_set_RX_pipe_address>
    for(i=0;i<6;i++){
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b05      	cmp	r3, #5
 8000bd8:	ddc1      	ble.n	8000b5e <NRF24L01p_ResetConfigValues+0x14e>
    }
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bdb0      	pop	{r4, r5, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20007f8c 	.word	0x20007f8c
 8000be8:	20007fa8 	.word	0x20007fa8

08000bec <NRF24L01p_RadioMode>:

void NRF24L01p_RadioMode(NRF24L01p_RadioState_t mode){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
    switch(mode){
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d84e      	bhi.n	8000c9c <NRF24L01p_RadioMode+0xb0>
 8000bfe:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <NRF24L01p_RadioMode+0x18>)
 8000c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c04:	08000c15 	.word	0x08000c15
 8000c08:	08000c27 	.word	0x08000c27
 8000c0c:	08000c4b 	.word	0x08000c4b
 8000c10:	08000c71 	.word	0x08000c71
        case NRF24L01P_MODE_POWER_DOWN: {
        	NRF24L01p_power_down();
 8000c14:	f000 fb0a 	bl	800122c <NRF24L01p_power_down>
            NRF24L01p_port_write_Pin_CE(0);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 fe3b 	bl	8001894 <NRF24L01p_port_write_Pin_CE>
            RadioState = NRF24L01P_MODE_POWER_DOWN;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <NRF24L01p_RadioMode+0xb8>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
            break;
 8000c24:	e03a      	b.n	8000c9c <NRF24L01p_RadioMode+0xb0>
        }
        case NRF24L01P_MODE_STANDBY: {
            if(RadioState == NRF24L01P_MODE_POWER_DOWN){
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <NRF24L01p_RadioMode+0xb8>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d106      	bne.n	8000c3c <NRF24L01p_RadioMode+0x50>
            	NRF24L01p_power_up();
 8000c2e:	f000 fae8 	bl	8001202 <NRF24L01p_power_up>
                    NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tpd2stby_us);
 8000c32:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c36:	f000 ff03 	bl	8001a40 <NRF24L01p_port_DelayUs>
 8000c3a:	e002      	b.n	8000c42 <NRF24L01p_RadioMode+0x56>
            }
            else{
                    NRF24L01p_port_write_Pin_CE(0);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 fe29 	bl	8001894 <NRF24L01p_port_write_Pin_CE>
            }
            RadioState = NRF24L01P_MODE_STANDBY;
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <NRF24L01p_RadioMode+0xb8>)
 8000c44:	2202      	movs	r2, #2
 8000c46:	701a      	strb	r2, [r3, #0]
            break;
 8000c48:	e028      	b.n	8000c9c <NRF24L01p_RadioMode+0xb0>
        }
        case NRF24L01P_MODE_RX: {
            if(RadioState != NRF24L01P_MODE_RX){
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <NRF24L01p_RadioMode+0xb8>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d021      	beq.n	8000c96 <NRF24L01p_RadioMode+0xaa>
                NRF24L01p_port_write_Pin_CE(0);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f000 fe1e 	bl	8001894 <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_rx_mode();
 8000c58:	f000 fafd 	bl	8001256 <NRF24L01p_rx_mode>
                NRF24L01p_port_write_Pin_CE(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f000 fe19 	bl	8001894 <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 8000c62:	2082      	movs	r0, #130	; 0x82
 8000c64:	f000 feec 	bl	8001a40 <NRF24L01p_port_DelayUs>
                RadioState = NRF24L01P_MODE_RX;
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <NRF24L01p_RadioMode+0xb8>)
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000c6e:	e012      	b.n	8000c96 <NRF24L01p_RadioMode+0xaa>
        }
        case NRF24L01P_MODE_TX: {
            if(RadioState != NRF24L01P_MODE_TX){
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <NRF24L01p_RadioMode+0xb8>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	d010      	beq.n	8000c9a <NRF24L01p_RadioMode+0xae>
                NRF24L01p_port_write_Pin_CE(0);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f000 fe0b 	bl	8001894 <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_tx_mode();
 8000c7e:	f000 faff 	bl	8001280 <NRF24L01p_tx_mode>
                NRF24L01p_port_write_Pin_CE(1);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f000 fe06 	bl	8001894 <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 8000c88:	2082      	movs	r0, #130	; 0x82
 8000c8a:	f000 fed9 	bl	8001a40 <NRF24L01p_port_DelayUs>
                RadioState = NRF24L01P_MODE_TX;
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <NRF24L01p_RadioMode+0xb8>)
 8000c90:	2204      	movs	r2, #4
 8000c92:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000c94:	e001      	b.n	8000c9a <NRF24L01p_RadioMode+0xae>
            break;
 8000c96:	bf00      	nop
 8000c98:	e000      	b.n	8000c9c <NRF24L01p_RadioMode+0xb0>
            break;
 8000c9a:	bf00      	nop
        }
    }
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20007f88 	.word	0x20007f88

08000ca8 <NRF24L01p_readable>:


bool NRF24L01p_readable(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
    return (NRF24L01p_get_data_ready_flag() || !NRF24L01p_get_fifo_flag_rx_empty())&& (NRF24L01p_get_rx_payload_pipe() != 7)  ;
 8000cac:	f000 fc11 	bl	80014d2 <NRF24L01p_get_data_ready_flag>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d107      	bne.n	8000cc6 <NRF24L01p_readable+0x1e>
 8000cb6:	f000 fcd4 	bl	8001662 <NRF24L01p_get_fifo_flag_rx_empty>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f083 0301 	eor.w	r3, r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d006      	beq.n	8000cd4 <NRF24L01p_readable+0x2c>
 8000cc6:	f000 fc21 	bl	800150c <NRF24L01p_get_rx_payload_pipe>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b07      	cmp	r3, #7
 8000cce:	d001      	beq.n	8000cd4 <NRF24L01p_readable+0x2c>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <NRF24L01p_readable+0x2e>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
	//return (!NRF24L01p_get_fifo_flag_rx_empty()) ;

}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <NRF24L01p_writable>:
bool NRF24L01p_writable(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    return !NRF24L01p_get_fifo_flag_tx_full();
 8000ce4:	f000 fccc 	bl	8001680 <NRF24L01p_get_fifo_flag_tx_full>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bf14      	ite	ne
 8000cee:	2301      	movne	r3, #1
 8000cf0:	2300      	moveq	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	f083 0301 	eor.w	r3, r3, #1
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3

}
 8000d00:	4618      	mov	r0, r3
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <NRF24L01p_writePayload>:
bool NRF24L01p_readableOnPipe(NRF24L01p_pipe_t pipe){

}


NRF24L01p_ErrorStatus_t NRF24L01p_writePayload(NRF24L01p_Payload_t *payload){
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	NRF24L01p_set_TX_pipe_address(payload->address);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	cb18      	ldmia	r3, {r3, r4}
 8000d10:	4618      	mov	r0, r3
 8000d12:	4621      	mov	r1, r4
 8000d14:	f000 fc5d 	bl	80015d2 <NRF24L01p_set_TX_pipe_address>
    if(payload->UseAck == 1){
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7a5b      	ldrb	r3, [r3, #9]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d008      	beq.n	8000d32 <NRF24L01p_writePayload+0x2e>
    	NRF24L01p_write_tx_payload(payload->data,payload->length);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	f000 f9cf 	bl	80010ce <NRF24L01p_write_tx_payload>
 8000d30:	e00b      	b.n	8000d4a <NRF24L01p_writePayload+0x46>
    }else{
        if(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled == 1){
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <NRF24L01p_writePayload+0x50>)
 8000d34:	7b5b      	ldrb	r3, [r3, #13]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d007      	beq.n	8000d4a <NRF24L01p_writePayload+0x46>
        	NRF24L01p_write_tx_payload_noack(payload->data,payload->length);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68da      	ldr	r2, [r3, #12]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4610      	mov	r0, r2
 8000d46:	f000 fa27 	bl	8001198 <NRF24L01p_write_tx_payload_noack>
        }
    }
}
 8000d4a:	bf00      	nop
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	20007f8c 	.word	0x20007f8c

08000d58 <NRF24L01p_readPayload>:

NRF24L01p_ErrorStatus_t NRF24L01p_writeAckPayload(NRF24L01p_Payload_t *payload){
	NRF24L01p_write_ack_payload(payload->pipe, payload->data, payload->length);
}
NRF24L01p_ErrorStatus_t NRF24L01p_readPayload(NRF24L01p_Payload_t *payload){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    NRF24L01p_ErrorStatus_t error;
    payload->pipe = NRF24L01p_get_rx_payload_pipe();
 8000d60:	f000 fbd4 	bl	800150c <NRF24L01p_get_rx_payload_pipe>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	721a      	strb	r2, [r3, #8]

    if(payload->pipe>=0 && payload->pipe<=5){
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7a1b      	ldrb	r3, [r3, #8]
 8000d70:	2b05      	cmp	r3, #5
 8000d72:	d824      	bhi.n	8000dbe <NRF24L01p_readPayload+0x66>
        if(RadioConfig.FeatureDynamicPayloadEnabled == 1){
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <NRF24L01p_readPayload+0x70>)
 8000d76:	7adb      	ldrb	r3, [r3, #11]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <NRF24L01p_readPayload+0x32>
            payload->length = NRF24L01p_read_rx_payload_width();
 8000d7c:	f000 f9f0 	bl	8001160 <NRF24L01p_read_rx_payload_width>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	e008      	b.n	8000d9c <NRF24L01p_readPayload+0x44>
        }else{
            payload->length = NRF24L01p_get_RX_pipe_width(payload->pipe);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7a1b      	ldrb	r3, [r3, #8]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fc51 	bl	8001636 <NRF24L01p_get_RX_pipe_width>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	611a      	str	r2, [r3, #16]
        }


        if(payload->length <= 32){
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	2b20      	cmp	r3, #32
 8000da2:	d80a      	bhi.n	8000dba <NRF24L01p_readPayload+0x62>
        	NRF24L01p_read_rx_payload(payload->data,payload->length);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	4619      	mov	r1, r3
 8000dae:	4610      	mov	r0, r2
 8000db0:	f000 f96e 	bl	8001090 <NRF24L01p_read_rx_payload>
            error = NRF24L01P_SUCCESS;
 8000db4:	2301      	movs	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e001      	b.n	8000dbe <NRF24L01p_readPayload+0x66>
        }
        else{
            error = NRF24L01P_ERROR;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]
        }

    }
    return error;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20007f8c 	.word	0x20007f8c

08000dcc <NRF24L01p_TransmitPayload>:


NRF24L01p_ErrorStatus_t NRF24L01p_TransmitPayload(NRF24L01p_Payload_t *payload){
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
    NRF24L01p_ErrorStatus_t error;
    NRF24L01p_RadioState_t originalState = RadioState;
 8000dd4:	4b5c      	ldr	r3, [pc, #368]	; (8000f48 <NRF24L01p_TransmitPayload+0x17c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	73bb      	strb	r3, [r7, #14]
    NRF24L01p_RadioMode(NRF24L01P_MODE_STANDBY);
 8000dda:	2002      	movs	r0, #2
 8000ddc:	f7ff ff06 	bl	8000bec <NRF24L01p_RadioMode>




    if(TxPipeAddress != payload->address){
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000de6:	4b59      	ldr	r3, [pc, #356]	; (8000f4c <NRF24L01p_TransmitPayload+0x180>)
 8000de8:	cb18      	ldmia	r3, {r3, r4}
 8000dea:	42a2      	cmp	r2, r4
 8000dec:	bf08      	it	eq
 8000dee:	4299      	cmpeq	r1, r3
 8000df0:	d00a      	beq.n	8000e08 <NRF24L01p_TransmitPayload+0x3c>
    	NRF24L01p_set_TX_pipe_address(payload->address);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	cb18      	ldmia	r3, {r3, r4}
 8000df6:	4618      	mov	r0, r3
 8000df8:	4621      	mov	r1, r4
 8000dfa:	f000 fbea 	bl	80015d2 <NRF24L01p_set_TX_pipe_address>
	    TxPipeAddress = payload->address;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	cb18      	ldmia	r3, {r3, r4}
 8000e02:	4a52      	ldr	r2, [pc, #328]	; (8000f4c <NRF24L01p_TransmitPayload+0x180>)
 8000e04:	e882 0018 	stmia.w	r2, {r3, r4}
    }

    if(payload->UseAck){
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7a5b      	ldrb	r3, [r3, #9]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d06f      	beq.n	8000ef0 <NRF24L01p_TransmitPayload+0x124>

	    if(RxPipeConfig[PIPE_P0].autoAckEnabled == 0){
 8000e10:	4b4f      	ldr	r3, [pc, #316]	; (8000f50 <NRF24L01p_TransmitPayload+0x184>)
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	f083 0301 	eor.w	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <NRF24L01p_TransmitPayload+0x5a>
	    	NRF24L01p_enable_auto_ack(PIPE_P0, 1);
 8000e1e:	2101      	movs	r1, #1
 8000e20:	2000      	movs	r0, #0
 8000e22:	f000 fa42 	bl	80012aa <NRF24L01p_enable_auto_ack>
	    }
	    if(RxPipeConfig[PIPE_P0].PipeEnabled == 0){
 8000e26:	4b4a      	ldr	r3, [pc, #296]	; (8000f50 <NRF24L01p_TransmitPayload+0x184>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	f083 0301 	eor.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <NRF24L01p_TransmitPayload+0x70>
	    	NRF24L01p_enable_rx_on_pipe(PIPE_P0, 1);
 8000e34:	2101      	movs	r1, #1
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 fa71 	bl	800131e <NRF24L01p_enable_rx_on_pipe>
	    }
	    NRF24L01p_set_RX_pipe_address(PIPE_P0, payload->address);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	cb18      	ldmia	r3, {r3, r4}
 8000e40:	461a      	mov	r2, r3
 8000e42:	4623      	mov	r3, r4
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 fb7c 	bl	8001542 <NRF24L01p_set_RX_pipe_address>


	    NRF24L01p_writePayload(payload);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ff5a 	bl	8000d04 <NRF24L01p_writePayload>
	    NRF24L01p_clear_data_sent_flag();
 8000e50:	f000 fb30 	bl	80014b4 <NRF24L01p_clear_data_sent_flag>


	    if(NRF24L01p_writable()){
 8000e54:	f7ff ff44 	bl	8000ce0 <NRF24L01p_writable>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d025      	beq.n	8000eaa <NRF24L01p_TransmitPayload+0xde>
	    	NRF24L01p_clear_data_sent_flag();
 8000e5e:	f000 fb29 	bl	80014b4 <NRF24L01p_clear_data_sent_flag>
		    while(1){
			    NRF24L01p_RadioMode(NRF24L01P_MODE_TX);
 8000e62:	2004      	movs	r0, #4
 8000e64:	f7ff fec2 	bl	8000bec <NRF24L01p_RadioMode>
			    NRF24L01p_RadioMode(NRF24L01P_MODE_STANDBY);
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f7ff febf 	bl	8000bec <NRF24L01p_RadioMode>

			    if(NRF24L01p_get_data_sent_flag()){
 8000e6e:	f000 fb13 	bl	8001498 <NRF24L01p_get_data_sent_flag>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <NRF24L01p_TransmitPayload+0xb2>
				    error = NRF24L01P_SUCCESS;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	73fb      	strb	r3, [r7, #15]
				    break;
 8000e7c:	e015      	b.n	8000eaa <NRF24L01p_TransmitPayload+0xde>
			    }
			    if(NRF24L01p_get_max_retry_flag()){
 8000e7e:	f000 faee 	bl	800145e <NRF24L01p_get_max_retry_flag>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0ec      	beq.n	8000e62 <NRF24L01p_TransmitPayload+0x96>
			    	NRF24L01p_clear_max_retry_flag();
 8000e88:	f000 faf7 	bl	800147a <NRF24L01p_clear_max_retry_flag>
				    if(NRF24L01p_get_plos_count()>=payload->retransmitCount){
 8000e8c:	f000 fb49 	bl	8001522 <NRF24L01p_get_plos_count>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7d1b      	ldrb	r3, [r3, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d3e2      	bcc.n	8000e62 <NRF24L01p_TransmitPayload+0x96>
				    	NRF24L01p_set_frequency_offset(RadioConfig.frequencyOffset);
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <NRF24L01p_TransmitPayload+0x188>)
 8000e9e:	799b      	ldrb	r3, [r3, #6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fab0 	bl	8001406 <NRF24L01p_set_frequency_offset>
					    error = NRF24L01P_ERROR;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73fb      	strb	r3, [r7, #15]
			    }
		    }

	    }

	    NRF24L01p_RadioMode(originalState);
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe9d 	bl	8000bec <NRF24L01p_RadioMode>

	    NRF24L01p_set_RX_pipe_address(PIPE_P0, RxPipeConfig[PIPE_P0].address);
 8000eb2:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <NRF24L01p_TransmitPayload+0x184>)
 8000eb4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4623      	mov	r3, r4
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 fb40 	bl	8001542 <NRF24L01p_set_RX_pipe_address>
	    if(RxPipeConfig[PIPE_P0].autoAckEnabled == 0){
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <NRF24L01p_TransmitPayload+0x184>)
 8000ec4:	785b      	ldrb	r3, [r3, #1]
 8000ec6:	f083 0301 	eor.w	r3, r3, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <NRF24L01p_TransmitPayload+0x10c>
	    	NRF24L01p_enable_auto_ack(PIPE_P0, 0);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f9e9 	bl	80012aa <NRF24L01p_enable_auto_ack>
	    }
	    if(RxPipeConfig[PIPE_P0].PipeEnabled == 0){
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <NRF24L01p_TransmitPayload+0x184>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	f083 0301 	eor.w	r3, r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d028      	beq.n	8000f38 <NRF24L01p_TransmitPayload+0x16c>
	    	NRF24L01p_enable_rx_on_pipe(PIPE_P0, 0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f000 fa18 	bl	800131e <NRF24L01p_enable_rx_on_pipe>
 8000eee:	e023      	b.n	8000f38 <NRF24L01p_TransmitPayload+0x16c>
	    }
	    }else{
	    	NRF24L01p_set_TX_pipe_address(payload->address);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	cb18      	ldmia	r3, {r3, r4}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	4621      	mov	r1, r4
 8000ef8:	f000 fb6b 	bl	80015d2 <NRF24L01p_set_TX_pipe_address>
			NRF24L01p_writePayload(payload);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff01 	bl	8000d04 <NRF24L01p_writePayload>
			NRF24L01p_RadioState_t originalState = RadioState;
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <NRF24L01p_TransmitPayload+0x17c>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	737b      	strb	r3, [r7, #13]
			if(NRF24L01p_writable()){
 8000f08:	f7ff feea 	bl	8000ce0 <NRF24L01p_writable>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00e      	beq.n	8000f30 <NRF24L01p_TransmitPayload+0x164>
				NRF24L01p_clear_data_sent_flag();
 8000f12:	f000 facf 	bl	80014b4 <NRF24L01p_clear_data_sent_flag>
				while(1){
					NRF24L01p_RadioMode(NRF24L01P_MODE_TX);
 8000f16:	2004      	movs	r0, #4
 8000f18:	f7ff fe68 	bl	8000bec <NRF24L01p_RadioMode>
					NRF24L01p_RadioMode(NRF24L01P_MODE_STANDBY);
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f7ff fe65 	bl	8000bec <NRF24L01p_RadioMode>
					if(NRF24L01p_get_data_sent_flag()){
 8000f22:	f000 fab9 	bl	8001498 <NRF24L01p_get_data_sent_flag>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0f4      	beq.n	8000f16 <NRF24L01p_TransmitPayload+0x14a>
						error = NRF24L01P_SUCCESS;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
						break;
					}
				}
			}
			NRF24L01p_RadioMode(originalState);
 8000f30:	7b7b      	ldrb	r3, [r7, #13]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fe5a 	bl	8000bec <NRF24L01p_RadioMode>
		}

    NRF24L01p_flush_tx();
 8000f38:	f000 f8e8 	bl	800110c <NRF24L01p_flush_tx>
    return error;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd90      	pop	{r4, r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20007f88 	.word	0x20007f88
 8000f4c:	20007fa0 	.word	0x20007fa0
 8000f50:	20007fa8 	.word	0x20007fa8
 8000f54:	20007f8c 	.word	0x20007f8c

08000f58 <NRF24L01p_read_register>:

#include "NRF24L01pDriver.h"



uint8_t NRF24L01p_read_register(uint8_t address){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_write_Pin_CSN(0);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 fca8 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f003 031f 	and.w	r3, r3, #31
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	73fb      	strb	r3, [r7, #15]


    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8000f72:	f107 010f 	add.w	r1, r7, #15
 8000f76:	f107 030f 	add.w	r3, r7, #15
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fd3b 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8000f82:	f107 010f 	add.w	r1, r7, #15
 8000f86:	f107 030f 	add.w	r3, r7, #15
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fd33 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(&temp, 1);
    NRF24L01p_port_write_Pin_CSN(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 fc90 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]

}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <NRF24L01p_read_register_buffer>:
void NRF24L01p_read_register_buffer(uint8_t address, uint8_t *dataout, int len){
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_write_Pin_CSN(0);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 fc81 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f003 031f 	and.w	r3, r3, #31
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	75fb      	strb	r3, [r7, #23]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8000fc0:	f107 0117 	add.w	r1, r7, #23
 8000fc4:	f107 0317 	add.w	r3, r7, #23
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fd14 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(dataout, dataout,len);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	68b8      	ldr	r0, [r7, #8]
 8000fd8:	f000 fd0e 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(dataout, len);
    NRF24L01p_port_write_Pin_CSN(1);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f000 fc6b 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <NRF24L01p_write_register>:
void NRF24L01p_write_register(uint8_t address, uint8_t datain){
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	71bb      	strb	r3, [r7, #6]
    NRF24L01p_port_write_Pin_CSN(0);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 fc5c 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	f003 031f 	and.w	r3, r3, #31
 8001008:	b25b      	sxtb	r3, r3
 800100a:	f043 0320 	orr.w	r3, r3, #32
 800100e:	b25b      	sxtb	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001014:	f107 010f 	add.w	r1, r7, #15
 8001018:	f107 030f 	add.w	r3, r7, #15
 800101c:	2201      	movs	r2, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fcea 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&datain, &datain,1);
 8001024:	1db9      	adds	r1, r7, #6
 8001026:	1dbb      	adds	r3, r7, #6
 8001028:	2201      	movs	r2, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fce4 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(&datain, 1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001030:	2001      	movs	r0, #1
 8001032:	f000 fc41 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <NRF24L01p_write_register_buffer>:
void NRF24L01p_write_register_buffer(uint8_t address, uint8_t *datain, int len){
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_write_Pin_CSN(0);
 800104c:	2000      	movs	r0, #0
 800104e:	f000 fc33 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 8001052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	b25b      	sxtb	r3, r3
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	b25b      	sxtb	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	75fb      	strb	r3, [r7, #23]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001066:	f107 0117 	add.w	r1, r7, #23
 800106a:	f107 0317 	add.w	r3, r7, #23
 800106e:	2201      	movs	r2, #1
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fcc1 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(datain, datain,len);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	461a      	mov	r2, r3
 800107a:	68b9      	ldr	r1, [r7, #8]
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f000 fcbb 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(datain, len);
    NRF24L01p_port_write_Pin_CSN(1);
 8001082:	2001      	movs	r0, #1
 8001084:	f000 fc18 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <NRF24L01p_read_rx_payload>:
void NRF24L01p_read_rx_payload(uint8_t *dataout, int pay_len){
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_write_Pin_CSN(0);
 800109a:	2000      	movs	r0, #0
 800109c:	f000 fc0c 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_RD_RX_PAYLOAD);
 80010a0:	2361      	movs	r3, #97	; 0x61
 80010a2:	73fb      	strb	r3, [r7, #15]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80010a4:	f107 010f 	add.w	r1, r7, #15
 80010a8:	f107 030f 	add.w	r3, r7, #15
 80010ac:	2201      	movs	r2, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fca2 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(dataout,dataout,pay_len);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 fc9c 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(dataout,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 fbf9 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <NRF24L01p_write_tx_payload>:
void NRF24L01p_write_tx_payload(uint8_t *datain, int pay_len){
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_write_Pin_CSN(0);
 80010d8:	2000      	movs	r0, #0
 80010da:	f000 fbed 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
 80010de:	23a0      	movs	r3, #160	; 0xa0
 80010e0:	73fb      	strb	r3, [r7, #15]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80010e2:	f107 010f 	add.w	r1, r7, #15
 80010e6:	f107 030f 	add.w	r3, r7, #15
 80010ea:	2201      	movs	r2, #1
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fc83 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(datain,datain,pay_len);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 fc7d 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f000 fbda 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <NRF24L01p_flush_tx>:
void NRF24L01p_flush_tx(){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 8001112:	2000      	movs	r0, #0
 8001114:	f000 fbd0 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_TX);
 8001118:	23e1      	movs	r3, #225	; 0xe1
 800111a:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 800111c:	1df9      	adds	r1, r7, #7
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	2201      	movs	r2, #1
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fc68 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001128:	2001      	movs	r0, #1
 800112a:	f000 fbc5 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <NRF24L01p_flush_rx>:
void NRF24L01p_flush_rx(){
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 800113c:	2000      	movs	r0, #0
 800113e:	f000 fbbb 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_RX);
 8001142:	23e2      	movs	r3, #226	; 0xe2
 8001144:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001146:	1df9      	adds	r1, r7, #7
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	2201      	movs	r2, #1
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fc53 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f000 fbb0 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <NRF24L01p_read_rx_payload_width>:
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
    //port_SPI_Transcieve(&temp,1);

    NRF24L01p_port_write_Pin_CSN(1);
}
int NRF24L01p_read_rx_payload_width(){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 8001166:	2000      	movs	r0, #0
 8001168:	f000 fba6 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_R_RX_PL_WID);
 800116c:	2360      	movs	r3, #96	; 0x60
 800116e:	71fb      	strb	r3, [r7, #7]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001170:	1df9      	adds	r1, r7, #7
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	2201      	movs	r2, #1
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fc3e 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 800117c:	1df9      	adds	r1, r7, #7
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	2201      	movs	r2, #1
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fc38 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001188:	2001      	movs	r0, #1
 800118a:	f000 fb95 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 800118e:	79fb      	ldrb	r3, [r7, #7]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <NRF24L01p_write_tx_payload_noack>:
    NRF24L01p_port_SPI_Transcieve(datain, datain, pay_len);
    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
}
void NRF24L01p_write_tx_payload_noack(uint8_t *datain, int pay_len){
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_write_Pin_CSN(0);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f000 fb88 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_W_TX_PYLD_NO_ACK);
 80011a8:	23b0      	movs	r3, #176	; 0xb0
 80011aa:	73fb      	strb	r3, [r7, #15]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80011ac:	f107 010f 	add.w	r1, r7, #15
 80011b0:	f107 030f 	add.w	r3, r7, #15
 80011b4:	2201      	movs	r2, #1
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fc1e 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(datain, datain, pay_len);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 fc18 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f000 fb75 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <NRF24L01p_get_status>:
int NRF24L01p_get_status(){
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 80011dc:	2000      	movs	r0, #0
 80011de:	f000 fb6b 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_NOP );
 80011e2:	23ff      	movs	r3, #255	; 0xff
 80011e4:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp, 1);
 80011e6:	1df9      	adds	r1, r7, #7
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	2201      	movs	r2, #1
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fc03 	bl	80019f8 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 fb60 	bl	80018b8 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 80011f8:	79fb      	ldrb	r3, [r7, #7]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <NRF24L01p_power_up>:


void NRF24L01p_power_up(){
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_CONFIG);
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff fea5 	bl	8000f58 <NRF24L01p_read_register>
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    temp |= _NRF24L01P_CONFIG_PWR_UP;
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,temp);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4619      	mov	r1, r3
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff fee3 	bl	8000fea <NRF24L01p_write_register>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <NRF24L01p_power_down>:
void NRF24L01p_power_down(){
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_CONFIG);
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff fe90 	bl	8000f58 <NRF24L01p_read_register>
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
    temp &= ~_NRF24L01P_CONFIG_PWR_UP;
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f023 0302 	bic.w	r3, r3, #2
 8001242:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,temp);
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	4619      	mov	r1, r3
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fece 	bl	8000fea <NRF24L01p_write_register>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <NRF24L01p_rx_mode>:
void NRF24L01p_rx_mode(){
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_CONFIG);
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff fe7b 	bl	8000f58 <NRF24L01p_read_register>
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
    temp |= _NRF24L01P_CONFIG_PRIM_RX;
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,temp);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4619      	mov	r1, r3
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff feb9 	bl	8000fea <NRF24L01p_write_register>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <NRF24L01p_tx_mode>:
void NRF24L01p_tx_mode(){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_CONFIG);
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fe66 	bl	8000f58 <NRF24L01p_read_register>
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
    temp &= ~_NRF24L01P_CONFIG_PRIM_RX;
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f023 0301 	bic.w	r3, r3, #1
 8001296:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,temp);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	4619      	mov	r1, r3
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fea4 	bl	8000fea <NRF24L01p_write_register>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <NRF24L01p_enable_auto_ack>:
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_MASK_MAX_RT);
else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_MASK_MAX_RT);
}


void NRF24L01p_enable_auto_ack(NRF24L01p_pipe_t pipe, bool sel){
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	460a      	mov	r2, r1
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	4613      	mov	r3, r2
 80012b8:	71bb      	strb	r3, [r7, #6]
    if (sel){
 80012ba:	79bb      	ldrb	r3, [r7, #6]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d014      	beq.n	80012ea <NRF24L01p_enable_auto_ack+0x40>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff fe49 	bl	8000f58 <NRF24L01p_read_register>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_set_bit(temp,pipe);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2201      	movs	r2, #1
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	b25a      	sxtb	r2, r3
 80012d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d8:	4313      	orrs	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	4619      	mov	r1, r3
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff fe81 	bl	8000fea <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
        _nrf24l01p_clr_bit(temp,pipe);
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
    }

}
 80012e8:	e015      	b.n	8001316 <NRF24L01p_enable_auto_ack+0x6c>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f7ff fe34 	bl	8000f58 <NRF24L01p_read_register>
 80012f0:	4603      	mov	r3, r0
 80012f2:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_clr_bit(temp,pipe);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2201      	movs	r2, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	b25a      	sxtb	r2, r3
 8001302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001306:	4013      	ands	r3, r2
 8001308:	b25b      	sxtb	r3, r3
 800130a:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
 800130c:	7bbb      	ldrb	r3, [r7, #14]
 800130e:	4619      	mov	r1, r3
 8001310:	2001      	movs	r0, #1
 8001312:	f7ff fe6a 	bl	8000fea <NRF24L01p_write_register>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <NRF24L01p_enable_rx_on_pipe>:



void NRF24L01p_enable_rx_on_pipe(NRF24L01p_pipe_t pipe, bool sel){
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	460a      	mov	r2, r1
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	4613      	mov	r3, r2
 800132c:	71bb      	strb	r3, [r7, #6]
    if(sel){
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d014      	beq.n	800135e <NRF24L01p_enable_rx_on_pipe+0x40>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
 8001334:	2002      	movs	r0, #2
 8001336:	f7ff fe0f 	bl	8000f58 <NRF24L01p_read_register>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_set_bit(temp,pipe);
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2201      	movs	r2, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	b25a      	sxtb	r2, r3
 8001348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134c:	4313      	orrs	r3, r2
 800134e:	b25b      	sxtb	r3, r3
 8001350:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	4619      	mov	r1, r3
 8001356:	2002      	movs	r0, #2
 8001358:	f7ff fe47 	bl	8000fea <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
        _nrf24l01p_clr_bit(temp,pipe);
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
    }

}
 800135c:	e015      	b.n	800138a <NRF24L01p_enable_rx_on_pipe+0x6c>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
 800135e:	2002      	movs	r0, #2
 8001360:	f7ff fdfa 	bl	8000f58 <NRF24L01p_read_register>
 8001364:	4603      	mov	r3, r0
 8001366:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_clr_bit(temp,pipe);
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2201      	movs	r2, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	b25b      	sxtb	r3, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	b25a      	sxtb	r2, r3
 8001376:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800137a:	4013      	ands	r3, r2
 800137c:	b25b      	sxtb	r3, r3
 800137e:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	4619      	mov	r1, r3
 8001384:	2002      	movs	r0, #2
 8001386:	f7ff fe30 	bl	8000fea <NRF24L01p_write_register>
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <NRF24L01p_set_auto_retransmission_count>:
}
NRF24L01p_aw_t NRF24L01p_get_address_width(){
    return (NRF24L01p_aw_t) NRF24L01p_read_register(_NRF24L01P_REG_SETUP_AW);
}

void NRF24L01p_set_auto_retransmission_count(uint8_t count){
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
 800139c:	2004      	movs	r0, #4
 800139e:	f7ff fddb 	bl	8000f58 <NRF24L01p_read_register>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]
    temp &= ~ 0x0F;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	f023 030f 	bic.w	r3, r3, #15
 80013ac:	73fb      	strb	r3, [r7, #15]
    temp |= (count<<0);
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	4619      	mov	r1, r3
 80013ba:	2004      	movs	r0, #4
 80013bc:	f7ff fe15 	bl	8000fea <NRF24L01p_write_register>
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <NRF24L01p_set_auto_retransmission_delay>:
uint8_t NRF24L01p_read_auto_retransmission_count(){
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
    return temp & 0x0F;
}

void NRF24L01p_set_auto_retransmission_delay(uint8_t times250us){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
 80013d2:	2004      	movs	r0, #4
 80013d4:	f7ff fdc0 	bl	8000f58 <NRF24L01p_read_register>
 80013d8:	4603      	mov	r3, r0
 80013da:	73fb      	strb	r3, [r7, #15]
    temp &= ~(0xF0);
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	73fb      	strb	r3, [r7, #15]
    temp |= (times250us<<4);
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	b25a      	sxtb	r2, r3
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	4619      	mov	r1, r3
 80013f8:	2004      	movs	r0, #4
 80013fa:	f7ff fdf6 	bl	8000fea <NRF24L01p_write_register>
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <NRF24L01p_set_frequency_offset>:
uint8_t NRF24L01p_read_auto_retransmission_delay(){
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
    return temp & 0xF0;
}

void NRF24L01p_set_frequency_offset(uint8_t offset){
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	71fb      	strb	r3, [r7, #7]
    if( (offset >=0)  && ( offset <= 125)){
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b7d      	cmp	r3, #125	; 0x7d
 8001414:	d804      	bhi.n	8001420 <NRF24L01p_set_frequency_offset+0x1a>
            NRF24L01p_write_register(_NRF24L01P_REG_RF_CH,offset);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4619      	mov	r1, r3
 800141a:	2005      	movs	r0, #5
 800141c:	f7ff fde5 	bl	8000fea <NRF24L01p_write_register>
    }
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <NRF24L01p_set_DataRate>:
uint8_t NRF24L01p_get_frequency_offset(){
    return NRF24L01p_read_register(_NRF24L01P_REG_RF_CH);
}

void NRF24L01p_set_DataRate(NRF24L01p_datarate_t DataRate){
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_RF_SETUP);
 8001432:	2006      	movs	r0, #6
 8001434:	f7ff fd90 	bl	8000f58 <NRF24L01p_read_register>
 8001438:	4603      	mov	r3, r0
 800143a:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_RF_SETUP_RF_DR_MASK;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001442:	73fb      	strb	r3, [r7, #15]
    temp |= DataRate;
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4313      	orrs	r3, r2
 800144a:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_RF_SETUP,temp);
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	4619      	mov	r1, r3
 8001450:	2006      	movs	r0, #6
 8001452:	f7ff fdca 	bl	8000fea <NRF24L01p_write_register>
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <NRF24L01p_get_max_retry_flag>:

bool NRF24L01p_get_tx_fifo_full_flag(){
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_TX_FULL) return 1;
    else return 0;
}
bool NRF24L01p_get_max_retry_flag(){
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_MAX_RT) return 1;
 8001462:	f7ff feb8 	bl	80011d6 <NRF24L01p_get_status>
 8001466:	4603      	mov	r3, r0
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <NRF24L01p_get_max_retry_flag+0x16>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <NRF24L01p_get_max_retry_flag+0x18>
    else return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	bd80      	pop	{r7, pc}

0800147a <NRF24L01p_clear_max_retry_flag>:
void NRF24L01p_clear_max_retry_flag(){
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
    uint8_t temp = _NRF24L01P_STATUS_MAX_RT;
 8001480:	2310      	movs	r3, #16
 8001482:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	2201      	movs	r2, #1
 8001488:	4619      	mov	r1, r3
 800148a:	2007      	movs	r0, #7
 800148c:	f7ff fdd7 	bl	800103e <NRF24L01p_write_register_buffer>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <NRF24L01p_get_data_sent_flag>:
bool NRF24L01p_get_data_sent_flag(){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_TX_DS) return 1;
 800149c:	f7ff fe9b 	bl	80011d6 <NRF24L01p_get_status>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f003 0320 	and.w	r3, r3, #32
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <NRF24L01p_get_data_sent_flag+0x16>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <NRF24L01p_get_data_sent_flag+0x18>
    else return 0;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <NRF24L01p_clear_data_sent_flag>:
void NRF24L01p_clear_data_sent_flag(){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
    uint8_t temp = _NRF24L01P_STATUS_TX_DS;
 80014ba:	2320      	movs	r3, #32
 80014bc:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	2201      	movs	r2, #1
 80014c2:	4619      	mov	r1, r3
 80014c4:	2007      	movs	r0, #7
 80014c6:	f7ff fdba 	bl	800103e <NRF24L01p_write_register_buffer>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <NRF24L01p_get_data_ready_flag>:
bool NRF24L01p_get_data_ready_flag(){
 80014d2:	b580      	push	{r7, lr}
 80014d4:	af00      	add	r7, sp, #0
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_RX_DR) return 1;
 80014d6:	f7ff fe7e 	bl	80011d6 <NRF24L01p_get_status>
 80014da:	4603      	mov	r3, r0
 80014dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <NRF24L01p_get_data_ready_flag+0x16>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <NRF24L01p_get_data_ready_flag+0x18>
    else return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}

080014ee <NRF24L01p_clear_data_ready_flag>:
void NRF24L01p_clear_data_ready_flag(){
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
    uint8_t temp = _NRF24L01P_STATUS_RX_DR;
 80014f4:	2340      	movs	r3, #64	; 0x40
 80014f6:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 80014f8:	1dfb      	adds	r3, r7, #7
 80014fa:	2201      	movs	r2, #1
 80014fc:	4619      	mov	r1, r3
 80014fe:	2007      	movs	r0, #7
 8001500:	f7ff fd9d 	bl	800103e <NRF24L01p_write_register_buffer>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <NRF24L01p_get_rx_payload_pipe>:
NRF24L01p_pipe_t NRF24L01p_get_rx_payload_pipe(){
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
    return (NRF24L01p_pipe_t) ((NRF24L01p_get_status()&_NRF24L01P_STATUS_RX_P_NO)>>1);
 8001510:	f7ff fe61 	bl	80011d6 <NRF24L01p_get_status>
 8001514:	4603      	mov	r3, r0
 8001516:	105b      	asrs	r3, r3, #1
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	b2db      	uxtb	r3, r3
}
 800151e:	4618      	mov	r0, r3
 8001520:	bd80      	pop	{r7, pc}

08001522 <NRF24L01p_get_plos_count>:
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_OBSERVE_TX);
    return ((temp&_NRF24L01P_OBSERVE_TX_ARC_CNT_MASK)>>_NRF24L01P_OBSERVE_TX_ARC_CNT_BP);
    //return (temp&0x0F)>>0;

}
uint8_t NRF24L01p_get_plos_count(){
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
    uint8_t temp;
    NRF24L01p_read_register_buffer(_NRF24L01P_REG_OBSERVE_TX,&temp,sizeof(temp));
 8001528:	1dfb      	adds	r3, r7, #7
 800152a:	2201      	movs	r2, #1
 800152c:	4619      	mov	r1, r3
 800152e:	2008      	movs	r0, #8
 8001530:	f7ff fd37 	bl	8000fa2 <NRF24L01p_read_register_buffer>
    return ((temp&_NRF24L01P_OBSERVE_TX_PLOS_CNT_MASK)>>_NRF24L01P_OBSERVE_TX_PLOS_CNT_BP);
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	091b      	lsrs	r3, r3, #4
 8001538:	b2db      	uxtb	r3, r3
    //return (temp&0xF0)>>4;
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <NRF24L01p_set_RX_pipe_address>:
bool NRF24L01p_get_rpd(){
    if(NRF24L01p_read_register(_NRF24L01P_REG_RPD)) return 1;
    else return 0;
}

void NRF24L01p_set_RX_pipe_address(NRF24L01p_pipe_t pipe,NRF24L01p_PipeAddr_t address){
 8001542:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001544:	b089      	sub	sp, #36	; 0x24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4601      	mov	r1, r0
 800154a:	e9c7 2300 	strd	r2, r3, [r7]
 800154e:	460b      	mov	r3, r1
 8001550:	73fb      	strb	r3, [r7, #15]
    int max_pipe_addr_width = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    if((pipe>=0) && (pipe<=1)   ){max_pipe_addr_width = 5;}
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d802      	bhi.n	8001562 <NRF24L01p_set_RX_pipe_address+0x20>
 800155c:	2305      	movs	r3, #5
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	e007      	b.n	8001572 <NRF24L01p_set_RX_pipe_address+0x30>
    else if ((pipe>=2) && (pipe<=5)   ){max_pipe_addr_width = 1;}
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d904      	bls.n	8001572 <NRF24L01p_set_RX_pipe_address+0x30>
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b05      	cmp	r3, #5
 800156c:	d801      	bhi.n	8001572 <NRF24L01p_set_RX_pipe_address+0x30>
 800156e:	2301      	movs	r3, #1
 8001570:	61fb      	str	r3, [r7, #28]
    uint8_t temp[5];
    int i;
    for(i=0;i<max_pipe_addr_width;i++){
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	e01b      	b.n	80015b0 <NRF24L01p_set_RX_pipe_address+0x6e>
            temp[i] = (address>>(8*i))&0xFF;
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	00d9      	lsls	r1, r3, #3
 800157c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001580:	f1c1 0620 	rsb	r6, r1, #32
 8001584:	f1a1 0020 	sub.w	r0, r1, #32
 8001588:	fa22 f401 	lsr.w	r4, r2, r1
 800158c:	fa03 f606 	lsl.w	r6, r3, r6
 8001590:	4334      	orrs	r4, r6
 8001592:	fa23 f000 	lsr.w	r0, r3, r0
 8001596:	4304      	orrs	r4, r0
 8001598:	fa23 f501 	lsr.w	r5, r3, r1
 800159c:	b2e1      	uxtb	r1, r4
 800159e:	f107 0210 	add.w	r2, r7, #16
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4413      	add	r3, r2
 80015a6:	460a      	mov	r2, r1
 80015a8:	701a      	strb	r2, [r3, #0]
    for(i=0;i<max_pipe_addr_width;i++){
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbdf      	blt.n	8001578 <NRF24L01p_set_RX_pipe_address+0x36>
    }
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	330a      	adds	r3, #10
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f107 0110 	add.w	r1, r7, #16
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fd3a 	bl	800103e <NRF24L01p_write_register_buffer>
}
 80015ca:	bf00      	nop
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015d2 <NRF24L01p_set_TX_pipe_address>:
    }

    return temp_addr;
}

void NRF24L01p_set_TX_pipe_address(NRF24L01p_PipeAddr_t address){
 80015d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d4:	b087      	sub	sp, #28
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t temp[5];
    int i;
    for( i=0;i<5;i++){
 80015dc:	2200      	movs	r2, #0
 80015de:	617a      	str	r2, [r7, #20]
 80015e0:	e01b      	b.n	800161a <NRF24L01p_set_TX_pipe_address+0x48>
            temp[i] = (address>>(8*i))&0xFF;
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	00d0      	lsls	r0, r2, #3
 80015e6:	e897 0006 	ldmia.w	r7, {r1, r2}
 80015ea:	f1c0 0620 	rsb	r6, r0, #32
 80015ee:	f1a0 0520 	sub.w	r5, r0, #32
 80015f2:	fa21 f300 	lsr.w	r3, r1, r0
 80015f6:	fa02 f606 	lsl.w	r6, r2, r6
 80015fa:	4333      	orrs	r3, r6
 80015fc:	fa22 f505 	lsr.w	r5, r2, r5
 8001600:	432b      	orrs	r3, r5
 8001602:	fa22 f400 	lsr.w	r4, r2, r0
 8001606:	b2d8      	uxtb	r0, r3
 8001608:	f107 010c 	add.w	r1, r7, #12
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	440a      	add	r2, r1
 8001610:	4601      	mov	r1, r0
 8001612:	7011      	strb	r1, [r2, #0]
    for( i=0;i<5;i++){
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	3201      	adds	r2, #1
 8001618:	617a      	str	r2, [r7, #20]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	2a04      	cmp	r2, #4
 800161e:	dde0      	ble.n	80015e2 <NRF24L01p_set_TX_pipe_address+0x10>
    }
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_TX_ADDR,temp,5);
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2205      	movs	r2, #5
 8001626:	4619      	mov	r1, r3
 8001628:	2010      	movs	r0, #16
 800162a:	f7ff fd08 	bl	800103e <NRF24L01p_write_register_buffer>
}
 800162e:	bf00      	nop
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001636 <NRF24L01p_get_RX_pipe_width>:
            *(temp_addr_ptr+i)|= (temp[i]);
    }
    return temp_addr;
}

uint8_t NRF24L01p_get_RX_pipe_width(NRF24L01p_pipe_t pipe){
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
    uint8_t temp;
    NRF24L01p_read_register_buffer((_NRF24L01P_REG_RX_PW_P0+pipe),&temp,sizeof(temp));
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	3311      	adds	r3, #17
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f107 010f 	add.w	r1, r7, #15
 800164a:	2201      	movs	r2, #1
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fca8 	bl	8000fa2 <NRF24L01p_read_register_buffer>
    return (temp&(0x3F));
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001658:	b2db      	uxtb	r3, r3
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <NRF24L01p_get_fifo_flag_rx_empty>:

bool NRF24L01p_get_fifo_flag_rx_empty(){
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_EMPTY ) return 1;
 8001666:	2017      	movs	r0, #23
 8001668:	f7ff fc76 	bl	8000f58 <NRF24L01p_read_register>
 800166c:	4603      	mov	r3, r0
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <NRF24L01p_get_fifo_flag_rx_empty+0x18>
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <NRF24L01p_get_fifo_flag_rx_empty+0x1a>
    else return 0;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	bd80      	pop	{r7, pc}

08001680 <NRF24L01p_get_fifo_flag_tx_full>:
}
bool NRF24L01p_get_fifo_flag_tx_empty(){
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_TX_EMPTY ) return 1;
    else return 0;
}
bool NRF24L01p_get_fifo_flag_tx_full(){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_TX_FULL ) return 1;
 8001684:	2017      	movs	r0, #23
 8001686:	f7ff fc67 	bl	8000f58 <NRF24L01p_read_register>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 0320 	and.w	r3, r3, #32
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <NRF24L01p_get_fifo_flag_tx_full+0x18>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <NRF24L01p_get_fifo_flag_tx_full+0x1a>
    else return 0;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}

0800169e <NRF24L01p_enable_dynamic_payload_pipe>:
bool NRF24L01p_get_fifo_flag_tx_reuse(){
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_REUSE ) return 1;
    else return 0;
}

void NRF24L01p_enable_dynamic_payload_pipe(NRF24L01p_pipe_t pipe, bool sel){
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	460a      	mov	r2, r1
 80016a8:	71fb      	strb	r3, [r7, #7]
 80016aa:	4613      	mov	r3, r2
 80016ac:	71bb      	strb	r3, [r7, #6]
    if(sel){
 80016ae:	79bb      	ldrb	r3, [r7, #6]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d014      	beq.n	80016de <NRF24L01p_enable_dynamic_payload_pipe+0x40>
          uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_DYNPD);
 80016b4:	201c      	movs	r0, #28
 80016b6:	f7ff fc4f 	bl	8000f58 <NRF24L01p_read_register>
 80016ba:	4603      	mov	r3, r0
 80016bc:	73fb      	strb	r3, [r7, #15]
        temp |= (1<<pipe);
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2201      	movs	r2, #1
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	b25a      	sxtb	r2, r3
 80016c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,temp);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4619      	mov	r1, r3
 80016d6:	201c      	movs	r0, #28
 80016d8:	f7ff fc87 	bl	8000fea <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_DYNPD);
        temp &= ~(1<<pipe);
        NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,temp);
    }

}
 80016dc:	e015      	b.n	800170a <NRF24L01p_enable_dynamic_payload_pipe+0x6c>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_DYNPD);
 80016de:	201c      	movs	r0, #28
 80016e0:	f7ff fc3a 	bl	8000f58 <NRF24L01p_read_register>
 80016e4:	4603      	mov	r3, r0
 80016e6:	73bb      	strb	r3, [r7, #14]
        temp &= ~(1<<pipe);
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2201      	movs	r2, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016fa:	4013      	ands	r3, r2
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,temp);
 8001700:	7bbb      	ldrb	r3, [r7, #14]
 8001702:	4619      	mov	r1, r3
 8001704:	201c      	movs	r0, #28
 8001706:	f7ff fc70 	bl	8000fea <NRF24L01p_write_register>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <NRF24L01p_enable_dynamic_payload>:



void NRF24L01p_enable_dynamic_payload(bool sel){
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
    if(sel){
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00e      	beq.n	8001740 <NRF24L01p_enable_dynamic_payload+0x2e>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001722:	201d      	movs	r0, #29
 8001724:	f7ff fc18 	bl	8000f58 <NRF24L01p_read_register>
 8001728:	4603      	mov	r3, r0
 800172a:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_DPL;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	4619      	mov	r1, r3
 8001738:	201d      	movs	r0, #29
 800173a:	f7ff fc56 	bl	8000fea <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
    }

}
 800173e:	e00d      	b.n	800175c <NRF24L01p_enable_dynamic_payload+0x4a>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001740:	201d      	movs	r0, #29
 8001742:	f7ff fc09 	bl	8000f58 <NRF24L01p_read_register>
 8001746:	4603      	mov	r3, r0
 8001748:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
 800174a:	7bbb      	ldrb	r3, [r7, #14]
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8001752:	7bbb      	ldrb	r3, [r7, #14]
 8001754:	4619      	mov	r1, r3
 8001756:	201d      	movs	r0, #29
 8001758:	f7ff fc47 	bl	8000fea <NRF24L01p_write_register>
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <NRF24L01p_enable_payload_with_ack>:



void NRF24L01p_enable_payload_with_ack(bool sel){
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
    if(sel){
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00e      	beq.n	8001792 <NRF24L01p_enable_payload_with_ack+0x2e>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001774:	201d      	movs	r0, #29
 8001776:	f7ff fbef 	bl	8000f58 <NRF24L01p_read_register>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	4619      	mov	r1, r3
 800178a:	201d      	movs	r0, #29
 800178c:	f7ff fc2d 	bl	8000fea <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
    }

}
 8001790:	e00d      	b.n	80017ae <NRF24L01p_enable_payload_with_ack+0x4a>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 8001792:	201d      	movs	r0, #29
 8001794:	f7ff fbe0 	bl	8000f58 <NRF24L01p_read_register>
 8001798:	4603      	mov	r3, r0
 800179a:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
 800179c:	7bbb      	ldrb	r3, [r7, #14]
 800179e:	f023 0302 	bic.w	r3, r3, #2
 80017a2:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 80017a4:	7bbb      	ldrb	r3, [r7, #14]
 80017a6:	4619      	mov	r1, r3
 80017a8:	201d      	movs	r0, #29
 80017aa:	f7ff fc1e 	bl	8000fea <NRF24L01p_write_register>
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <NRF24L01p_enable_dynamic_payload_with_no_ack>:



void NRF24L01p_enable_dynamic_payload_with_no_ack(bool sel){
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	71fb      	strb	r3, [r7, #7]
    if(sel){
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00e      	beq.n	80017e4 <NRF24L01p_enable_dynamic_payload_with_no_ack+0x2e>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 80017c6:	201d      	movs	r0, #29
 80017c8:	f7ff fbc6 	bl	8000f58 <NRF24L01p_read_register>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73fb      	strb	r3, [r7, #15]
        temp |= _NRF24L01_FEATURE_EN_DYN_ACK;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	4619      	mov	r1, r3
 80017dc:	201d      	movs	r0, #29
 80017de:	f7ff fc04 	bl	8000fea <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
    }

}
 80017e2:	e00d      	b.n	8001800 <NRF24L01p_enable_dynamic_payload_with_no_ack+0x4a>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_FEATURE);
 80017e4:	201d      	movs	r0, #29
 80017e6:	f7ff fbb7 	bl	8000f58 <NRF24L01p_read_register>
 80017ea:	4603      	mov	r3, r0
 80017ec:	73bb      	strb	r3, [r7, #14]
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
 80017ee:	7bbb      	ldrb	r3, [r7, #14]
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,temp);
 80017f6:	7bbb      	ldrb	r3, [r7, #14]
 80017f8:	4619      	mov	r1, r3
 80017fa:	201d      	movs	r0, #29
 80017fc:	f7ff fbf5 	bl	8000fea <NRF24L01p_write_register>
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <NRF24L01p_port_Initialize>:
static GPIO_InitTypeDef nrf24l01p_CSN_pin_Struct = {NRF24L01P_CSN_PIN,GPIO_MODE_OUTPUT_PP,GPIO_NOPULL,GPIO_SPEED_FREQ_LOW,};
static GPIO_InitTypeDef nrf24l01p_IRQ_pin_Struct = {NRF24L01P_IRQ_PIN,GPIO_MODE_IT_FALLING,GPIO_NOPULL,GPIO_SPEED_FREQ_LOW,};



void NRF24L01p_port_Initialize(){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
	NRF24L01p_port_SPI_initialize();
 800180e:	f000 f865 	bl	80018dc <NRF24L01p_port_SPI_initialize>

	/* Enable GPIOA clock */
	//__HAL_RCC_GPIOA_CLK_ENABLE();
	//__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <NRF24L01p_port_Initialize+0x3c>)
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <NRF24L01p_port_Initialize+0x3c>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <NRF24L01p_port_Initialize+0x3c>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]


	HAL_SPI_Init(&nrf24l01p_SpiHandle);
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <NRF24L01p_port_Initialize+0x40>)
 800182c:	f002 fcac 	bl	8004188 <HAL_SPI_Init>

	NRF24L01p_port_Pin_CE_Initialize();
 8001830:	f000 f80c 	bl	800184c <NRF24L01p_port_Pin_CE_Initialize>
	NRF24L01p_port_Pin_CSN_Initialize();
 8001834:	f000 f816 	bl	8001864 <NRF24L01p_port_Pin_CSN_Initialize>
	NRF24L01p_port_Pin_IRQ_Initialize();
 8001838:	f000 f820 	bl	800187c <NRF24L01p_port_Pin_IRQ_Initialize>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	20000064 	.word	0x20000064

0800184c <NRF24L01p_port_Pin_CE_Initialize>:
void NRF24L01p_port_DeInitialize(){
	HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
}
void NRF24L01p_port_Pin_CE_Initialize(){
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
 8001850:	4902      	ldr	r1, [pc, #8]	; (800185c <NRF24L01p_port_Pin_CE_Initialize+0x10>)
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <NRF24L01p_port_Pin_CE_Initialize+0x14>)
 8001854:	f000 fa70 	bl	8001d38 <HAL_GPIO_Init>
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000000 	.word	0x20000000
 8001860:	48000800 	.word	0x48000800

08001864 <NRF24L01p_port_Pin_CSN_Initialize>:
void NRF24L01p_port_Pin_CSN_Initialize(){
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_CSN_PORT, &nrf24l01p_CSN_pin_Struct);
 8001868:	4902      	ldr	r1, [pc, #8]	; (8001874 <NRF24L01p_port_Pin_CSN_Initialize+0x10>)
 800186a:	4803      	ldr	r0, [pc, #12]	; (8001878 <NRF24L01p_port_Pin_CSN_Initialize+0x14>)
 800186c:	f000 fa64 	bl	8001d38 <HAL_GPIO_Init>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000014 	.word	0x20000014
 8001878:	48000800 	.word	0x48000800

0800187c <NRF24L01p_port_Pin_IRQ_Initialize>:
void NRF24L01p_port_Pin_IRQ_Initialize(){
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_IRQ_PORT, &nrf24l01p_IRQ_pin_Struct);
 8001880:	4902      	ldr	r1, [pc, #8]	; (800188c <NRF24L01p_port_Pin_IRQ_Initialize+0x10>)
 8001882:	4803      	ldr	r0, [pc, #12]	; (8001890 <NRF24L01p_port_Pin_IRQ_Initialize+0x14>)
 8001884:	f000 fa58 	bl	8001d38 <HAL_GPIO_Init>

	//HAL_NVIC_SetPriority(EXTI9_5_IRQn, 10, 0);//------------------------------------------------
	//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//---------------------------------------------------------
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000028 	.word	0x20000028
 8001890:	48000800 	.word	0x48000800

08001894 <NRF24L01p_port_write_Pin_CE>:
	return HAL_GPIO_ReadPin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN);
}
bool NRF24L01p_port_read_Pin_CSN(){
	return HAL_GPIO_ReadPin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN);
}
void NRF24L01p_port_write_Pin_CE(bool val){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN, (GPIO_PinState)val);
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	461a      	mov	r2, r3
 80018a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a6:	4803      	ldr	r0, [pc, #12]	; (80018b4 <NRF24L01p_port_write_Pin_CE+0x20>)
 80018a8:	f000 fbdc 	bl	8002064 <HAL_GPIO_WritePin>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	48000800 	.word	0x48000800

080018b8 <NRF24L01p_port_write_Pin_CSN>:
void NRF24L01p_port_write_Pin_CSN(bool val){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN, (GPIO_PinState)val);
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	461a      	mov	r2, r3
 80018c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ca:	4803      	ldr	r0, [pc, #12]	; (80018d8 <NRF24L01p_port_write_Pin_CSN+0x20>)
 80018cc:	f000 fbca 	bl	8002064 <HAL_GPIO_WritePin>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	48000800 	.word	0x48000800

080018dc <NRF24L01p_port_SPI_initialize>:
void NRF24L01p_port_SPI_initialize(){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
	// TODO Auto-generated destructor stub
	/*##-1- Configure the SPI peripheral #######################################*/
	/* Set the SPI parameters */
	nrf24l01p_SpiHandle.Instance               = NRF24L01P_SPIx;
 80018e2:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <NRF24L01p_port_SPI_initialize+0x10c>)
 80018e4:	4a41      	ldr	r2, [pc, #260]	; (80019ec <NRF24L01p_port_SPI_initialize+0x110>)
 80018e6:	601a      	str	r2, [r3, #0]
	nrf24l01p_SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018e8:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <NRF24L01p_port_SPI_initialize+0x10c>)
 80018ea:	2238      	movs	r2, #56	; 0x38
 80018ec:	61da      	str	r2, [r3, #28]
	nrf24l01p_SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 80018ee:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <NRF24L01p_port_SPI_initialize+0x10c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
	nrf24l01p_SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80018f4:	4b3c      	ldr	r3, [pc, #240]	; (80019e8 <NRF24L01p_port_SPI_initialize+0x10c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
	nrf24l01p_SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <NRF24L01p_port_SPI_initialize+0x10c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
	nrf24l01p_SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8001900:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001902:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001906:	60da      	str	r2, [r3, #12]
	nrf24l01p_SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001908:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <NRF24L01p_port_SPI_initialize+0x10c>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
	nrf24l01p_SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 800190e:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001910:	2200      	movs	r2, #0
 8001912:	625a      	str	r2, [r3, #36]	; 0x24
	nrf24l01p_SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001914:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
	nrf24l01p_SpiHandle.Init.CRCPolynomial     = 7;
 800191a:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <NRF24L01p_port_SPI_initialize+0x10c>)
 800191c:	2207      	movs	r2, #7
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
	//nrf24l01p_SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
	nrf24l01p_SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8001920:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001926:	619a      	str	r2, [r3, #24]
	//nrf24l01p_SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

	nrf24l01p_SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <NRF24L01p_port_SPI_initialize+0x10c>)
 800192a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800192e:	605a      	str	r2, [r3, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	NRF24L01P_SPIx_SCK_GPIO_CLK_ENABLE();
 8001930:	4a2f      	ldr	r2, [pc, #188]	; (80019f0 <NRF24L01p_port_SPI_initialize+0x114>)
 8001932:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <NRF24L01p_port_SPI_initialize+0x114>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193c:	4b2c      	ldr	r3, [pc, #176]	; (80019f0 <NRF24L01p_port_SPI_initialize+0x114>)
 800193e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]
	NRF24L01P_SPIx_MISO_GPIO_CLK_ENABLE();
 8001948:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <NRF24L01p_port_SPI_initialize+0x114>)
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <NRF24L01p_port_SPI_initialize+0x114>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001954:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <NRF24L01p_port_SPI_initialize+0x114>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
	NRF24L01P_SPIx_MOSI_GPIO_CLK_ENABLE();
 8001960:	4a23      	ldr	r2, [pc, #140]	; (80019f0 <NRF24L01p_port_SPI_initialize+0x114>)
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <NRF24L01p_port_SPI_initialize+0x114>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <NRF24L01p_port_SPI_initialize+0x114>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
	/* Enable SPI clock */
	NRF24L01P_SPIx_CLK_ENABLE();
 8001978:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <NRF24L01p_port_SPI_initialize+0x114>)
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <NRF24L01p_port_SPI_initialize+0x114>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001982:	6593      	str	r3, [r2, #88]	; 0x58
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <NRF24L01p_port_SPI_initialize+0x114>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* SPI SCK GPIO pin configuration  */
	GPIO_InitStruct.Pin       = NRF24L01P_SPIx_SCK_PIN;
 8001990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001994:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 800199a:	2302      	movs	r3, #2
 800199c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800199e:	2302      	movs	r3, #2
 80019a0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_SCK_AF;
 80019a2:	2306      	movs	r3, #6
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4811      	ldr	r0, [pc, #68]	; (80019f4 <NRF24L01p_port_SPI_initialize+0x118>)
 80019ae:	f000 f9c3 	bl	8001d38 <HAL_GPIO_Init>

	/* SPI MISO GPIO pin configuration  */
	GPIO_InitStruct.Pin = NRF24L01P_SPIx_MISO_PIN;
 80019b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_MISO_AF;
 80019b8:	2306      	movs	r3, #6
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	480c      	ldr	r0, [pc, #48]	; (80019f4 <NRF24L01p_port_SPI_initialize+0x118>)
 80019c4:	f000 f9b8 	bl	8001d38 <HAL_GPIO_Init>

	/* SPI MOSI GPIO pin configuration  */
	GPIO_InitStruct.Pin = NRF24L01P_SPIx_MOSI_PIN;
 80019c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_MOSI_AF;
 80019ce:	2306      	movs	r3, #6
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4806      	ldr	r0, [pc, #24]	; (80019f4 <NRF24L01p_port_SPI_initialize+0x118>)
 80019da:	f000 f9ad 	bl	8001d38 <HAL_GPIO_Init>
}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000064 	.word	0x20000064
 80019ec:	40003c00 	.word	0x40003c00
 80019f0:	40021000 	.word	0x40021000
 80019f4:	48000800 	.word	0x48000800

080019f8 <NRF24L01p_port_SPI_Transcieve>:
int NRF24L01p_port_SPI_Transcieve(uint8_t *dataOut, uint8_t *dataIn, unsigned int size){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
	return HAL_SPI_TransmitReceive(&nrf24l01p_SpiHandle, dataOut, dataIn, size,1000);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	68f9      	ldr	r1, [r7, #12]
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <NRF24L01p_port_SPI_Transcieve+0x2c>)
 8001a16:	f002 fd95 	bl	8004544 <HAL_SPI_TransmitReceive>
 8001a1a:	4603      	mov	r3, r0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000064 	.word	0x20000064

08001a28 <NRF24L01p_port_DelayMs>:
int NRF24L01p_port_SPI_Receive(uint8_t *data, unsigned int size){
	HAL_SPI_Receive(&nrf24l01p_SpiHandle, data, size, 1000);
}


void NRF24L01p_port_DelayMs(unsigned int ms){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f85f 	bl	8001af4 <HAL_Delay>
	//vTaskDelay ((ms / portTICK_PERIOD_MS));

}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <NRF24L01p_port_DelayUs>:
void NRF24L01p_port_DelayUs(unsigned int us){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	unsigned int ms = us/1000;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <NRF24L01p_port_DelayUs+0x28>)
 8001a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a50:	099b      	lsrs	r3, r3, #6
 8001a52:	60fb      	str	r3, [r7, #12]
	HAL_Delay(ms + 1);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3301      	adds	r3, #1
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 f84b 	bl	8001af4 <HAL_Delay>
	//vTaskDelay (( ms / portTICK_PERIOD_MS));
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	10624dd3 	.word	0x10624dd3

08001a6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a70:	2003      	movs	r0, #3
 8001a72:	f000 f91f 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f000 f806 	bl	8001a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7c:	f005 ff36 	bl	80078ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_InitTick+0x30>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a09      	ldr	r2, [pc, #36]	; (8001abc <HAL_InitTick+0x34>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 f93e 	bl	8001d1e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aaa:	f000 f90e 	bl	8001cca <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000044 	.word	0x20000044
 8001abc:	10624dd3 	.word	0x10624dd3

08001ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick++;
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_IncTick+0x18>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <HAL_IncTick+0x18>)
 8001acc:	6013      	str	r3, [r2, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	20008038 	.word	0x20008038

08001adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_GetTick+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20008038 	.word	0x20008038

08001af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8001b00:	f7ff ffec 	bl	8001adc <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffe8 	bl	8001adc <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad2      	subs	r2, r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d3f7      	bcc.n	8001b08 <HAL_Delay+0x14>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <NVIC_SetPriorityGrouping+0x44>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b52:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <NVIC_SetPriorityGrouping+0x44>)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	60d3      	str	r3, [r2, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <NVIC_GetPriorityGrouping+0x18>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	f003 0307 	and.w	r3, r3, #7
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b8e:	4909      	ldr	r1, [pc, #36]	; (8001bb4 <NVIC_EnableIRQ+0x30>)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	095b      	lsrs	r3, r3, #5
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	f002 021f 	and.w	r2, r2, #31
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	da0b      	bge.n	8001be4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	490d      	ldr	r1, [pc, #52]	; (8001c04 <NVIC_SetPriority+0x4c>)
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	3b04      	subs	r3, #4
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be2:	e009      	b.n	8001bf8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	4908      	ldr	r1, [pc, #32]	; (8001c08 <NVIC_SetPriority+0x50>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	2201      	movs	r2, #1
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	1e5a      	subs	r2, r3, #1
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c52:	2101      	movs	r1, #1
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	1e59      	subs	r1, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f7ff ff90 	bl	8001bb8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff2f 	bl	8001b20 <NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff44 	bl	8001b68 <NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff90 	bl	8001c0c <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5f 	bl	8001bb8 <NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff37 	bl	8001b84 <NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffa2 	bl	8001c70 <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001d4e:	e154      	b.n	8001ffa <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8146 	beq.w	8001ff4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x40>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b12      	cmp	r3, #18
 8001d76:	d123      	bne.n	8001dc0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	08da      	lsrs	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3208      	adds	r2, #8
 8001d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	6939      	ldr	r1, [r7, #16]
 8001dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d00b      	beq.n	8001e14 <HAL_GPIO_Init+0xdc>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d007      	beq.n	8001e14 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e08:	2b11      	cmp	r3, #17
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b12      	cmp	r3, #18
 8001e12:	d130      	bne.n	8001e76 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	f003 0201 	and.w	r2, r3, #1
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2203      	movs	r2, #3
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80a0 	beq.w	8001ff4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb4:	4a58      	ldr	r2, [pc, #352]	; (8002018 <HAL_GPIO_Init+0x2e0>)
 8001eb6:	4b58      	ldr	r3, [pc, #352]	; (8002018 <HAL_GPIO_Init+0x2e0>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6613      	str	r3, [r2, #96]	; 0x60
 8001ec0:	4b55      	ldr	r3, [pc, #340]	; (8002018 <HAL_GPIO_Init+0x2e0>)
 8001ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ecc:	4a53      	ldr	r2, [pc, #332]	; (800201c <HAL_GPIO_Init+0x2e4>)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ef6:	d019      	beq.n	8001f2c <HAL_GPIO_Init+0x1f4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a49      	ldr	r2, [pc, #292]	; (8002020 <HAL_GPIO_Init+0x2e8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d013      	beq.n	8001f28 <HAL_GPIO_Init+0x1f0>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a48      	ldr	r2, [pc, #288]	; (8002024 <HAL_GPIO_Init+0x2ec>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00d      	beq.n	8001f24 <HAL_GPIO_Init+0x1ec>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a47      	ldr	r2, [pc, #284]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d007      	beq.n	8001f20 <HAL_GPIO_Init+0x1e8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a46      	ldr	r2, [pc, #280]	; (800202c <HAL_GPIO_Init+0x2f4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d101      	bne.n	8001f1c <HAL_GPIO_Init+0x1e4>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e008      	b.n	8001f2e <HAL_GPIO_Init+0x1f6>
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	e006      	b.n	8001f2e <HAL_GPIO_Init+0x1f6>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e004      	b.n	8001f2e <HAL_GPIO_Init+0x1f6>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e002      	b.n	8001f2e <HAL_GPIO_Init+0x1f6>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <HAL_GPIO_Init+0x1f6>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	f002 0203 	and.w	r2, r2, #3
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	4093      	lsls	r3, r2
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f3e:	4937      	ldr	r1, [pc, #220]	; (800201c <HAL_GPIO_Init+0x2e4>)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3302      	adds	r3, #2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f4c:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_GPIO_Init+0x2f8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f70:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <HAL_GPIO_Init+0x2f8>)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f76:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <HAL_GPIO_Init+0x2f8>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f9a:	4a25      	ldr	r2, [pc, #148]	; (8002030 <HAL_GPIO_Init+0x2f8>)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa0:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_GPIO_Init+0x2f8>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fc4:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <HAL_GPIO_Init+0x2f8>)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fca:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_GPIO_Init+0x2f8>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fee:	4a10      	ldr	r2, [pc, #64]	; (8002030 <HAL_GPIO_Init+0x2f8>)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	f47f aea3 	bne.w	8001d50 <HAL_GPIO_Init+0x18>
  }
}
 800200a:	bf00      	nop
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	40010000 	.word	0x40010000
 8002020:	48000400 	.word	0x48000400
 8002024:	48000800 	.word	0x48000800
 8002028:	48000c00 	.word	0x48000c00
 800202c:	48001000 	.word	0x48001000
 8002030:	40010400 	.word	0x40010400

08002034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	e001      	b.n	8002056 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
 8002070:	4613      	mov	r3, r2
 8002072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002074:	787b      	ldrb	r3, [r7, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002080:	e002      	b.n	8002088 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e080      	b.n	80021a8 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f005 fc40 	bl	8007940 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2224      	movs	r2, #36	; 0x24
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6852      	ldr	r2, [r2, #4]
 80020e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	6892      	ldr	r2, [r2, #8]
 80020f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d107      	bne.n	800210e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6892      	ldr	r2, [r2, #8]
 8002106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	e006      	b.n	800211c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6892      	ldr	r2, [r2, #8]
 8002116:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800211a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d104      	bne.n	800212e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800212c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800213c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002140:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	68d2      	ldr	r2, [r2, #12]
 800214c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002150:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6911      	ldr	r1, [r2, #16]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6952      	ldr	r2, [r2, #20]
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6992      	ldr	r2, [r2, #24]
 8002164:	0212      	lsls	r2, r2, #8
 8002166:	430a      	orrs	r2, r1
 8002168:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	69d1      	ldr	r1, [r2, #28]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6a12      	ldr	r2, [r2, #32]
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	f042 0201 	orr.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	461a      	mov	r2, r3
 80021bc:	460b      	mov	r3, r1
 80021be:	817b      	strh	r3, [r7, #10]
 80021c0:	4613      	mov	r3, r2
 80021c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	f040 80e6 	bne.w	80023a2 <HAL_I2C_Master_Transmit+0x1f2>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_I2C_Master_Transmit+0x34>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0df      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1f4>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021ec:	f7ff fc76 	bl	8001adc <HAL_GetTick>
 80021f0:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2319      	movs	r3, #25
 80021f8:	2201      	movs	r2, #1
 80021fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 fada 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e0ca      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1f4>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2221      	movs	r2, #33	; 0x21
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2210      	movs	r2, #16
 800221a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	893a      	ldrh	r2, [r7, #8]
 800222e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	2bff      	cmp	r3, #255	; 0xff
 800223e:	d90f      	bls.n	8002260 <HAL_I2C_Master_Transmit+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	22ff      	movs	r2, #255	; 0xff
 8002244:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	b2da      	uxtb	r2, r3
 800224c:	8979      	ldrh	r1, [r7, #10]
 800224e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 fc1f 	bl	8002a9c <I2C_TransferConfig>
 800225e:	e071      	b.n	8002344 <HAL_I2C_Master_Transmit+0x194>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	b2da      	uxtb	r2, r3
 8002270:	8979      	ldrh	r1, [r7, #10]
 8002272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fc0d 	bl	8002a9c <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8002282:	e05f      	b.n	8002344 <HAL_I2C_Master_Transmit+0x194>
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	6a39      	ldr	r1, [r7, #32]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 facf 	bl	800282c <I2C_WaitOnTXISFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <HAL_I2C_Master_Transmit+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	2b04      	cmp	r3, #4
 800229a:	d101      	bne.n	80022a0 <HAL_I2C_Master_Transmit+0xf0>
        {
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e081      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1f4>
        }
        else
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e07f      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1f4>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	1c58      	adds	r0, r3, #1
 80022ae:	68f9      	ldr	r1, [r7, #12]
 80022b0:	6248      	str	r0, [r1, #36]	; 0x24
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d135      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x194>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d030      	beq.n	8002344 <HAL_I2C_Master_Transmit+0x194>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	2200      	movs	r2, #0
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 fa63 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_I2C_Master_Transmit+0x14c>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e053      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1f4>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	2bff      	cmp	r3, #255	; 0xff
 8002304:	d90e      	bls.n	8002324 <HAL_I2C_Master_Transmit+0x174>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	22ff      	movs	r2, #255	; 0xff
 800230a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	b2da      	uxtb	r2, r3
 8002312:	8979      	ldrh	r1, [r7, #10]
 8002314:	2300      	movs	r3, #0
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fbbd 	bl	8002a9c <I2C_TransferConfig>
 8002322:	e00f      	b.n	8002344 <HAL_I2C_Master_Transmit+0x194>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	b2da      	uxtb	r2, r3
 8002334:	8979      	ldrh	r1, [r7, #10]
 8002336:	2300      	movs	r3, #0
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fbac 	bl	8002a9c <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d19a      	bne.n	8002284 <HAL_I2C_Master_Transmit+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	6a39      	ldr	r1, [r7, #32]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 faaa 	bl	80028ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <HAL_I2C_Master_Transmit+0x1be>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	2b04      	cmp	r3, #4
 8002364:	d101      	bne.n	800236a <HAL_I2C_Master_Transmit+0x1ba>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e01c      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1f4>
      }
      else
      {
        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e01a      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1f4>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2220      	movs	r2, #32
 8002374:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_I2C_Master_Transmit+0x1fc>)
 8002382:	400b      	ands	r3, r1
 8002384:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e000      	b.n	80023a4 <HAL_I2C_Master_Transmit+0x1f4>
  }
  else
  {
    return HAL_BUSY;
 80023a2:	2302      	movs	r3, #2
  }
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	fe00e800 	.word	0xfe00e800

080023b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	461a      	mov	r2, r3
 80023bc:	460b      	mov	r3, r1
 80023be:	817b      	strh	r3, [r7, #10]
 80023c0:	4613      	mov	r3, r2
 80023c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	f040 80e7 	bne.w	80025a4 <HAL_I2C_Master_Receive+0x1f4>
  {    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_I2C_Master_Receive+0x34>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e0e0      	b.n	80025a6 <HAL_I2C_Master_Receive+0x1f6>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023ec:	f7ff fb76 	bl	8001adc <HAL_GetTick>
 80023f0:	6178      	str	r0, [r7, #20]

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	2319      	movs	r3, #25
 80023f8:	2201      	movs	r2, #1
 80023fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f9da 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0cb      	b.n	80025a6 <HAL_I2C_Master_Receive+0x1f6>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2222      	movs	r2, #34	; 0x22
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2210      	movs	r2, #16
 800241a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	893a      	ldrh	r2, [r7, #8]
 800242e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	2bff      	cmp	r3, #255	; 0xff
 800243e:	d90f      	bls.n	8002460 <HAL_I2C_Master_Receive+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	22ff      	movs	r2, #255	; 0xff
 8002444:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244a:	b2da      	uxtb	r2, r3
 800244c:	8979      	ldrh	r1, [r7, #10]
 800244e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fb1f 	bl	8002a9c <I2C_TransferConfig>
 800245e:	e072      	b.n	8002546 <HAL_I2C_Master_Receive+0x196>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	b2da      	uxtb	r2, r3
 8002470:	8979      	ldrh	r1, [r7, #10]
 8002472:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 fb0d 	bl	8002a9c <I2C_TransferConfig>
    }

    while(hi2c->XferCount > 0U)
 8002482:	e060      	b.n	8002546 <HAL_I2C_Master_Receive+0x196>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	6a39      	ldr	r1, [r7, #32]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 fa4b 	bl	8002924 <I2C_WaitOnRXNEFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_I2C_Master_Receive+0xf4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	2b04      	cmp	r3, #4
 800249a:	d101      	bne.n	80024a0 <HAL_I2C_Master_Receive+0xf0>
        {
          return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e082      	b.n	80025a6 <HAL_I2C_Master_Receive+0x1f6>
        }
        else
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e080      	b.n	80025a6 <HAL_I2C_Master_Receive+0x1f6>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	1c59      	adds	r1, r3, #1
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	6251      	str	r1, [r2, #36]	; 0x24
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d135      	bne.n	8002546 <HAL_I2C_Master_Receive+0x196>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d030      	beq.n	8002546 <HAL_I2C_Master_Receive+0x196>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	2200      	movs	r2, #0
 80024ec:	2180      	movs	r1, #128	; 0x80
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f962 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_Master_Receive+0x14e>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e053      	b.n	80025a6 <HAL_I2C_Master_Receive+0x1f6>
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	2bff      	cmp	r3, #255	; 0xff
 8002506:	d90e      	bls.n	8002526 <HAL_I2C_Master_Receive+0x176>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	22ff      	movs	r2, #255	; 0xff
 800250c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	b2da      	uxtb	r2, r3
 8002514:	8979      	ldrh	r1, [r7, #10]
 8002516:	2300      	movs	r3, #0
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fabc 	bl	8002a9c <I2C_TransferConfig>
 8002524:	e00f      	b.n	8002546 <HAL_I2C_Master_Receive+0x196>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	b2da      	uxtb	r2, r3
 8002536:	8979      	ldrh	r1, [r7, #10]
 8002538:	2300      	movs	r3, #0
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 faab 	bl	8002a9c <I2C_TransferConfig>
    while(hi2c->XferCount > 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d199      	bne.n	8002484 <HAL_I2C_Master_Receive+0xd4>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	6a39      	ldr	r1, [r7, #32]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f9a9 	bl	80028ac <I2C_WaitOnSTOPFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_I2C_Master_Receive+0x1c0>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	2b04      	cmp	r3, #4
 8002566:	d101      	bne.n	800256c <HAL_I2C_Master_Receive+0x1bc>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e01c      	b.n	80025a6 <HAL_I2C_Master_Receive+0x1f6>
      }
      else
      {
        return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e01a      	b.n	80025a6 <HAL_I2C_Master_Receive+0x1f6>
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2220      	movs	r2, #32
 8002576:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_I2C_Master_Receive+0x200>)
 8002584:	400b      	ands	r3, r1
 8002586:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e000      	b.n	80025a6 <HAL_I2C_Master_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	fe00e800 	.word	0xfe00e800

080025b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	460b      	mov	r3, r1
 80025c2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]

  __IO uint32_t I2C_Trials = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	f040 80c6 	bne.w	8002766 <HAL_I2C_IsDeviceReady+0x1b2>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e8:	d101      	bne.n	80025ee <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80025ea:	2302      	movs	r3, #2
 80025ec:	e0bc      	b.n	8002768 <HAL_I2C_IsDeviceReady+0x1b4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_I2C_IsDeviceReady+0x48>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e0b5      	b.n	8002768 <HAL_I2C_IsDeviceReady+0x1b4>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2224      	movs	r2, #36	; 0x24
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode,DevAddress);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d107      	bne.n	800262e <HAL_I2C_IsDeviceReady+0x7a>
 800261e:	897b      	ldrh	r3, [r7, #10]
 8002620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002624:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002628:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800262c:	e004      	b.n	8002638 <HAL_I2C_IsDeviceReady+0x84>
 800262e:	897b      	ldrh	r3, [r7, #10]
 8002630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002634:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002638:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800263a:	f7ff fa4f 	bl	8001adc <HAL_GetTick>
 800263e:	6178      	str	r0, [r7, #20]
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8002640:	e018      	b.n	8002674 <HAL_I2C_IsDeviceReady+0xc0>
      {
      	if(Timeout != HAL_MAX_DELAY)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d014      	beq.n	8002674 <HAL_I2C_IsDeviceReady+0xc0>
      	{
          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_I2C_IsDeviceReady+0xac>
 8002650:	f7ff fa44 	bl	8001adc <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	1ad2      	subs	r2, r2, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d909      	bls.n	8002674 <HAL_I2C_IsDeviceReady+0xc0>
          {
            /* Device is ready */
            hi2c->State = HAL_I2C_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e079      	b.n	8002768 <HAL_I2C_IsDeviceReady+0x1b4>
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b20      	cmp	r3, #32
 8002680:	d00c      	beq.n	800269c <HAL_I2C_IsDeviceReady+0xe8>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b10      	cmp	r3, #16
 800268e:	d005      	beq.n	800269c <HAL_I2C_IsDeviceReady+0xe8>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2ba0      	cmp	r3, #160	; 0xa0
 800269a:	d1d2      	bne.n	8002642 <HAL_I2C_IsDeviceReady+0x8e>
          }
        } 
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d01a      	beq.n	80026e0 <HAL_I2C_IsDeviceReady+0x12c>
      {
        /* Wait until STOPF flag is reset */ 
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2200      	movs	r2, #0
 80026b2:	2120      	movs	r1, #32
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f87f 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_I2C_IsDeviceReady+0x110>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e051      	b.n	8002768 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2220      	movs	r2, #32
 80026ca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e043      	b.n	8002768 <HAL_I2C_IsDeviceReady+0x1b4>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2200      	movs	r2, #0
 80026e8:	2120      	movs	r1, #32
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f864 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_I2C_IsDeviceReady+0x146>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e036      	b.n	8002768 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2210      	movs	r2, #16
 8002700:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2220      	movs	r2, #32
 8002708:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials++ == Trials)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	613a      	str	r2, [r7, #16]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	4293      	cmp	r3, r2
 8002714:	d118      	bne.n	8002748 <HAL_I2C_IsDeviceReady+0x194>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	6852      	ldr	r2, [r2, #4]
 8002720:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002724:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */ 
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2200      	movs	r2, #0
 800272e:	2120      	movs	r1, #32
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f841 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_I2C_IsDeviceReady+0x18c>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e013      	b.n	8002768 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2220      	movs	r2, #32
 8002746:	61da      	str	r2, [r3, #28]
      }
    }while(I2C_Trials < Trials);
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	429a      	cmp	r2, r3
 800274e:	f4ff af60 	bcc.w	8002612 <HAL_I2C_IsDeviceReady+0x5e>

    hi2c->State = HAL_I2C_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e000      	b.n	8002768 <HAL_I2C_IsDeviceReady+0x1b4>
  }
  else
  {
    return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
  }
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d103      	bne.n	800278e <I2C_Flush_TXDR+0x1e>
  {
     hi2c->Instance->TXDR = 0x00U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d007      	beq.n	80027ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	6992      	ldr	r2, [r2, #24]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	619a      	str	r2, [r3, #24]
  }
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	71fb      	strb	r3, [r7, #7]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c8:	e01c      	b.n	8002804 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d018      	beq.n	8002804 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027d8:	f7ff f980 	bl	8001adc <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	1ad2      	subs	r2, r2, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d90d      	bls.n	8002804 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e00f      	b.n	8002824 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	401a      	ands	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	429a      	cmp	r2, r3
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	429a      	cmp	r2, r3
 8002820:	d0d3      	beq.n	80027ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002838:	e02c      	b.n	8002894 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f8ce 	bl	80029e0 <I2C_IsAcknowledgeFailed>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e02a      	b.n	80028a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d01e      	beq.n	8002894 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800285c:	f7ff f93e 	bl	8001adc <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	1ad2      	subs	r2, r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	429a      	cmp	r2, r3
 800286a:	d913      	bls.n	8002894 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	f043 0220 	orr.w	r2, r3, #32
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e007      	b.n	80028a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d1cb      	bne.n	800283a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028b8:	e028      	b.n	800290c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f88e 	bl	80029e0 <I2C_IsAcknowledgeFailed>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e026      	b.n	800291c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028d4:	f7ff f902 	bl	8001adc <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	1ad2      	subs	r2, r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d913      	bls.n	800290c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	f043 0220 	orr.w	r2, r3, #32
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e007      	b.n	800291c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b20      	cmp	r3, #32
 8002918:	d1cf      	bne.n	80028ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002930:	e048      	b.n	80029c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f852 	bl	80029e0 <I2C_IsAcknowledgeFailed>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e046      	b.n	80029d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b20      	cmp	r3, #32
 8002952:	d11c      	bne.n	800298e <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2220      	movs	r2, #32
 800295a:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>)
 8002968:	400b      	ands	r3, r1
 800296a:	6053      	str	r3, [r2, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e022      	b.n	80029d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8002994:	f7ff f8a2 	bl	8001adc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	1ad2      	subs	r2, r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d90f      	bls.n	80029c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e007      	b.n	80029d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d1af      	bne.n	8002932 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	fe00e800 	.word	0xfe00e800

080029e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	d148      	bne.n	8002a8c <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029fa:	e01c      	b.n	8002a36 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a02:	d018      	beq.n	8002a36 <I2C_IsAcknowledgeFailed+0x56>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <I2C_IsAcknowledgeFailed+0x3a>
 8002a0a:	f7ff f867 	bl	8001adc <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	1ad2      	subs	r2, r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d90d      	bls.n	8002a36 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e02b      	b.n	8002a8e <I2C_IsAcknowledgeFailed+0xae>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d1db      	bne.n	80029fc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2210      	movs	r2, #16
 8002a4a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2220      	movs	r2, #32
 8002a52:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7ff fe8b 	bl	8002770 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <I2C_IsAcknowledgeFailed+0xb8>)
 8002a66:	400b      	ands	r3, r1
 8002a68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	fe00e800 	.word	0xfe00e800

08002a9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	607b      	str	r3, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	817b      	strh	r3, [r7, #10]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <I2C_TransferConfig+0x58>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8002ac2:	897b      	ldrh	r3, [r7, #10]
 8002ac4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ac8:	7a7b      	ldrb	r3, [r7, #9]
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	605a      	str	r2, [r3, #4]
}
 8002ae8:	bf00      	nop
 8002aea:	371c      	adds	r7, #28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	fc009800 	.word	0xfc009800

08002af8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d138      	bne.n	8002b80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e032      	b.n	8002b82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2224      	movs	r2, #36	; 0x24
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	6811      	ldr	r1, [r2, #0]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b80:	2302      	movs	r3, #2
  }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d139      	bne.n	8002c1c <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e033      	b.n	8002c1e <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2224      	movs	r2, #36	; 0x24
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002be4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e000      	b.n	8002c1e <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002c1c:	2302      	movs	r3, #2
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8002c30:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40007000 	.word	0x40007000

08002c4c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40007000 	.word	0x40007000

08002c68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c7a:	d12f      	bne.n	8002cdc <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c7c:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c88:	d037      	beq.n	8002cfa <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c8a:	4a1f      	ldr	r2, [pc, #124]	; (8002d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c98:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8002c9a:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	0c9b      	lsrs	r3, r3, #18
 8002ca6:	2232      	movs	r2, #50	; 0x32
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8002cae:	e002      	b.n	8002cb6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d006      	beq.n	8002cca <HAL_PWREx_ControlVoltageScaling+0x62>
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc8:	d0f2      	beq.n	8002cb0 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cca:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd6:	d110      	bne.n	8002cfa <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e00f      	b.n	8002cfc <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce8:	d007      	beq.n	8002cfa <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cea:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cf8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}  
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	20000044 	.word	0x20000044
 8002d10:	431bde83 	.word	0x431bde83

08002d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08c      	sub	sp, #48	; 0x30
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80db 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8002d2e:	4ba2      	ldr	r3, [pc, #648]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f040 8084 	bne.w	8002e44 <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d3c:	4b9e      	ldr	r3, [pc, #632]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_OscConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e39b      	b.n	800348c <HAL_RCC_OscConfig+0x778>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1a      	ldr	r2, [r3, #32]
 8002d58:	4b97      	ldr	r3, [pc, #604]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d004      	beq.n	8002d6e <HAL_RCC_OscConfig+0x5a>
 8002d64:	4b94      	ldr	r3, [pc, #592]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6c:	e005      	b.n	8002d7a <HAL_RCC_OscConfig+0x66>
 8002d6e:	4b92      	ldr	r3, [pc, #584]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d923      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fdf4 	bl	8003970 <RCC_SetFlashLatencyFromMSIRange>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e37c      	b.n	800348c <HAL_RCC_OscConfig+0x778>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d92:	4a89      	ldr	r2, [pc, #548]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002d94:	4b88      	ldr	r3, [pc, #544]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f043 0308 	orr.w	r3, r3, #8
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4986      	ldr	r1, [pc, #536]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002da0:	4b85      	ldr	r3, [pc, #532]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002db0:	4981      	ldr	r1, [pc, #516]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002db2:	4b81      	ldr	r3, [pc, #516]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
 8002dc4:	e022      	b.n	8002e0c <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dc6:	4a7c      	ldr	r2, [pc, #496]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002dc8:	4b7b      	ldr	r3, [pc, #492]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f043 0308 	orr.w	r3, r3, #8
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	4979      	ldr	r1, [pc, #484]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002dd4:	4b78      	ldr	r3, [pc, #480]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002de4:	4974      	ldr	r1, [pc, #464]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002de6:	4b74      	ldr	r3, [pc, #464]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fdb7 	bl	8003970 <RCC_SetFlashLatencyFromMSIRange>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e33f      	b.n	800348c <HAL_RCC_OscConfig+0x778>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002e0c:	f000 fc66 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 8002e10:	4601      	mov	r1, r0
 8002e12:	4b69      	ldr	r3, [pc, #420]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e1a:	23f0      	movs	r3, #240	; 0xf0
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e30:	4a62      	ldr	r2, [pc, #392]	; (8002fbc <HAL_RCC_OscConfig+0x2a8>)
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	fa21 f303 	lsr.w	r3, r1, r3
 8002e38:	4a61      	ldr	r2, [pc, #388]	; (8002fc0 <HAL_RCC_OscConfig+0x2ac>)
 8002e3a:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7fe fe23 	bl	8001a88 <HAL_InitTick>
 8002e42:	e04f      	b.n	8002ee4 <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d032      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e4c:	4a5a      	ldr	r2, [pc, #360]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002e4e:	4b5a      	ldr	r3, [pc, #360]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e58:	f7fe fe40 	bl	8001adc <HAL_GetTick>
 8002e5c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e60:	f7fe fe3c 	bl	8001adc <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e30c      	b.n	800348c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002e72:	4b51      	ldr	r3, [pc, #324]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e7e:	4a4e      	ldr	r2, [pc, #312]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002e80:	4b4d      	ldr	r3, [pc, #308]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f043 0308 	orr.w	r3, r3, #8
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	494b      	ldr	r1, [pc, #300]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002e8c:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e9c:	4946      	ldr	r1, [pc, #280]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002e9e:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	021b      	lsls	r3, r3, #8
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
 8002eb0:	e018      	b.n	8002ee4 <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002eb2:	4a41      	ldr	r2, [pc, #260]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002eb4:	4b40      	ldr	r3, [pc, #256]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fe0d 	bl	8001adc <HAL_GetTick>
 8002ec2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ec6:	f7fe fe09 	bl	8001adc <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e2d9      	b.n	800348c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8002ed8:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f0      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d07a      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8002ef0:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d00b      	beq.n	8002f14 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002efc:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8002f04:	2b0c      	cmp	r3, #12
 8002f06:	d111      	bne.n	8002f2c <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f08:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d10b      	bne.n	8002f2c <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d061      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x2d0>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d15d      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x2d0>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e2af      	b.n	800348c <HAL_RCC_OscConfig+0x778>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d106      	bne.n	8002f44 <HAL_RCC_OscConfig+0x230>
 8002f36:	4a20      	ldr	r2, [pc, #128]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002f38:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e01d      	b.n	8002f80 <HAL_RCC_OscConfig+0x26c>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x254>
 8002f4e:	4a1a      	ldr	r2, [pc, #104]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0x26c>
 8002f68:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x29c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fda8 	bl	8001adc <HAL_GetTick>
 8002f8c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fda4 	bl	8001adc <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e274      	b.n	800348c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_RCC_OscConfig+0x2a4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0x27c>
 8002fae:	e01a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fd94 	bl	8001adc <HAL_GetTick>
 8002fb4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002fb6:	e00e      	b.n	8002fd6 <HAL_RCC_OscConfig+0x2c2>
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	0800841c 	.word	0x0800841c
 8002fc0:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fd8a 	bl	8001adc <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e25a      	b.n	800348c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002fd6:	4bb0      	ldr	r3, [pc, #704]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2b0>
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d07f      	beq.n	80030f2 <HAL_RCC_OscConfig+0x3de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002ff2:	4ba9      	ldr	r3, [pc, #676]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d00b      	beq.n	8003016 <HAL_RCC_OscConfig+0x302>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ffe:	4ba6      	ldr	r3, [pc, #664]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8003006:	2b0c      	cmp	r3, #12
 8003008:	d127      	bne.n	800305a <HAL_RCC_OscConfig+0x346>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800300a:	4ba3      	ldr	r3, [pc, #652]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d121      	bne.n	800305a <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003016:	4ba0      	ldr	r3, [pc, #640]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_RCC_OscConfig+0x31a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e22e      	b.n	800348c <HAL_RCC_OscConfig+0x778>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	489a      	ldr	r0, [pc, #616]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003030:	4b99      	ldr	r3, [pc, #612]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6919      	ldr	r1, [r3, #16]
 800303c:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8003040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	61bb      	str	r3, [r7, #24]
  return(result);
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	fa01 f303 	lsl.w	r3, r1, r3
 8003054:	4313      	orrs	r3, r2
 8003056:	6043      	str	r3, [r0, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003058:	e04b      	b.n	80030f2 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02e      	beq.n	80030c0 <HAL_RCC_OscConfig+0x3ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003062:	4a8d      	ldr	r2, [pc, #564]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003064:	4b8c      	ldr	r3, [pc, #560]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7fe fd35 	bl	8001adc <HAL_GetTick>
 8003072:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003076:	f7fe fd31 	bl	8001adc <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e201      	b.n	800348c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003088:	4b83      	ldr	r3, [pc, #524]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	4880      	ldr	r0, [pc, #512]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003096:	4b80      	ldr	r3, [pc, #512]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6919      	ldr	r1, [r3, #16]
 80030a2:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 80030a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	613b      	str	r3, [r7, #16]
  return(result);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	4313      	orrs	r3, r2
 80030bc:	6043      	str	r3, [r0, #4]
 80030be:	e018      	b.n	80030f2 <HAL_RCC_OscConfig+0x3de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c0:	4a75      	ldr	r2, [pc, #468]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 80030c2:	4b75      	ldr	r3, [pc, #468]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe fd06 	bl	8001adc <HAL_GetTick>
 80030d0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fe fd02 	bl	8001adc <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1d2      	b.n	800348c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80030e6:	4b6c      	ldr	r3, [pc, #432]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d03c      	beq.n	8003178 <HAL_RCC_OscConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01c      	beq.n	8003140 <HAL_RCC_OscConfig+0x42c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003106:	4a64      	ldr	r2, [pc, #400]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003108:	4b63      	ldr	r3, [pc, #396]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003116:	f7fe fce1 	bl	8001adc <HAL_GetTick>
 800311a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800311e:	f7fe fcdd 	bl	8001adc <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e1ad      	b.n	800348c <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8003130:	4b59      	ldr	r3, [pc, #356]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0ef      	beq.n	800311e <HAL_RCC_OscConfig+0x40a>
 800313e:	e01b      	b.n	8003178 <HAL_RCC_OscConfig+0x464>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003140:	4a55      	ldr	r2, [pc, #340]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003142:	4b55      	ldr	r3, [pc, #340]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe fcc4 	bl	8001adc <HAL_GetTick>
 8003154:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003158:	f7fe fcc0 	bl	8001adc <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e190      	b.n	800348c <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800316a:	4b4b      	ldr	r3, [pc, #300]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 800316c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1ef      	bne.n	8003158 <HAL_RCC_OscConfig+0x444>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80a9 	beq.w	80032d8 <HAL_RCC_OscConfig+0x5c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800318c:	4b42      	ldr	r3, [pc, #264]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10e      	bne.n	80031b6 <HAL_RCC_OscConfig+0x4a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003198:	4a3f      	ldr	r2, [pc, #252]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 800319a:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a2:	6593      	str	r3, [r2, #88]	; 0x58
 80031a4:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 80031a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031b0:	2301      	movs	r3, #1
 80031b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b6:	4b39      	ldr	r3, [pc, #228]	; (800329c <HAL_RCC_OscConfig+0x588>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d118      	bne.n	80031f4 <HAL_RCC_OscConfig+0x4e0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c2:	4a36      	ldr	r2, [pc, #216]	; (800329c <HAL_RCC_OscConfig+0x588>)
 80031c4:	4b35      	ldr	r3, [pc, #212]	; (800329c <HAL_RCC_OscConfig+0x588>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ce:	f7fe fc85 	bl	8001adc <HAL_GetTick>
 80031d2:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d6:	f7fe fc81 	bl	8001adc <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e151      	b.n	800348c <HAL_RCC_OscConfig+0x778>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e8:	4b2c      	ldr	r3, [pc, #176]	; (800329c <HAL_RCC_OscConfig+0x588>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x4c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d108      	bne.n	800320e <HAL_RCC_OscConfig+0x4fa>
 80031fc:	4a26      	ldr	r2, [pc, #152]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 80031fe:	4b26      	ldr	r3, [pc, #152]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800320c:	e024      	b.n	8003258 <HAL_RCC_OscConfig+0x544>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2b05      	cmp	r3, #5
 8003214:	d110      	bne.n	8003238 <HAL_RCC_OscConfig+0x524>
 8003216:	4a20      	ldr	r2, [pc, #128]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003218:	4b1f      	ldr	r3, [pc, #124]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003226:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003236:	e00f      	b.n	8003258 <HAL_RCC_OscConfig+0x544>
 8003238:	4a17      	ldr	r2, [pc, #92]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 800323a:	4b17      	ldr	r3, [pc, #92]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003248:	4a13      	ldr	r2, [pc, #76]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d016      	beq.n	800328e <HAL_RCC_OscConfig+0x57a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe fc3c 	bl	8001adc <HAL_GetTick>
 8003264:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8003266:	e00a      	b.n	800327e <HAL_RCC_OscConfig+0x56a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003268:	f7fe fc38 	bl	8001adc <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x56a>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e106      	b.n	800348c <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_OscConfig+0x584>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ed      	beq.n	8003268 <HAL_RCC_OscConfig+0x554>
 800328c:	e01a      	b.n	80032c4 <HAL_RCC_OscConfig+0x5b0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7fe fc25 	bl	8001adc <HAL_GetTick>
 8003292:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8003294:	e00f      	b.n	80032b6 <HAL_RCC_OscConfig+0x5a2>
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a0:	f7fe fc1c 	bl	8001adc <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x5a2>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e0ea      	b.n	800348c <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80032b6:	4b77      	ldr	r3, [pc, #476]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1ed      	bne.n	80032a0 <HAL_RCC_OscConfig+0x58c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <HAL_RCC_OscConfig+0x5c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032cc:	4a71      	ldr	r2, [pc, #452]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 80032ce:	4b71      	ldr	r3, [pc, #452]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d03c      	beq.n	800335e <HAL_RCC_OscConfig+0x64a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01c      	beq.n	8003326 <HAL_RCC_OscConfig+0x612>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032ec:	4a69      	ldr	r2, [pc, #420]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 80032ee:	4b69      	ldr	r3, [pc, #420]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 80032f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fe fbee 	bl	8001adc <HAL_GetTick>
 8003300:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x602>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003304:	f7fe fbea 	bl	8001adc <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x602>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e0ba      	b.n	800348c <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8003316:	4b5f      	ldr	r3, [pc, #380]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 8003318:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0ef      	beq.n	8003304 <HAL_RCC_OscConfig+0x5f0>
 8003324:	e01b      	b.n	800335e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003326:	4a5b      	ldr	r2, [pc, #364]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 8003328:	4b5a      	ldr	r3, [pc, #360]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 800332a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7fe fbd1 	bl	8001adc <HAL_GetTick>
 800333a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x63c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800333e:	f7fe fbcd 	bl	8001adc <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e09d      	b.n	800348c <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8003350:	4b50      	ldr	r3, [pc, #320]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 8003352:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1ef      	bne.n	800333e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8091 	beq.w	800348a <HAL_RCC_OscConfig+0x776>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003368:	4b4a      	ldr	r3, [pc, #296]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	2b0c      	cmp	r3, #12
 8003372:	f000 8088 	beq.w	8003486 <HAL_RCC_OscConfig+0x772>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	2b02      	cmp	r3, #2
 800337c:	d155      	bne.n	800342a <HAL_RCC_OscConfig+0x716>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337e:	4a45      	ldr	r2, [pc, #276]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 8003380:	4b44      	ldr	r3, [pc, #272]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fe fba7 	bl	8001adc <HAL_GetTick>
 800338e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003392:	f7fe fba3 	bl	8001adc <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e073      	b.n	800348c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80033a4:	4b3b      	ldr	r3, [pc, #236]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f0      	bne.n	8003392 <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b0:	4938      	ldr	r1, [pc, #224]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	3b01      	subs	r3, #1
 80033b8:	011a      	lsls	r2, r3, #4
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	3b01      	subs	r3, #1
 80033d0:	055b      	lsls	r3, r3, #21
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	3b01      	subs	r3, #1
 80033dc:	065b      	lsls	r3, r3, #25
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	06db      	lsls	r3, r3, #27
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ea:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 80033ec:	4b29      	ldr	r3, [pc, #164]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033f4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033f6:	4a27      	ldr	r2, [pc, #156]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 80033f8:	4b26      	ldr	r3, [pc, #152]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003400:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fe fb6b 	bl	8001adc <HAL_GetTick>
 8003406:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x708>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7fe fb67 	bl	8001adc <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x708>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e037      	b.n	800348c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x6f6>
 8003428:	e02f      	b.n	800348a <HAL_RCC_OscConfig+0x776>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003434:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d105      	bne.n	800344e <HAL_RCC_OscConfig+0x73a>
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003442:	4a14      	ldr	r2, [pc, #80]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 8003444:	4b13      	ldr	r3, [pc, #76]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f023 0303 	bic.w	r3, r3, #3
 800344c:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800344e:	4a11      	ldr	r2, [pc, #68]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 8003450:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe fb3d 	bl	8001adc <HAL_GetTick>
 8003462:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x764>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe fb39 	bl	8001adc <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x764>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e009      	b.n	800348c <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_RCC_OscConfig+0x780>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f0      	bne.n	8003466 <HAL_RCC_OscConfig+0x752>
 8003484:	e001      	b.n	800348a <HAL_RCC_OscConfig+0x776>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_RCC_OscConfig+0x778>
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3730      	adds	r7, #48	; 0x30
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021000 	.word	0x40021000

08003498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80034a6:	4b89      	ldr	r3, [pc, #548]	; (80036cc <HAL_RCC_ClockConfig+0x234>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0207 	and.w	r2, r3, #7
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d210      	bcs.n	80034d6 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b4:	4985      	ldr	r1, [pc, #532]	; (80036cc <HAL_RCC_ClockConfig+0x234>)
 80034b6:	4b85      	ldr	r3, [pc, #532]	; (80036cc <HAL_RCC_ClockConfig+0x234>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 0207 	bic.w	r2, r3, #7
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034c4:	4b81      	ldr	r3, [pc, #516]	; (80036cc <HAL_RCC_ClockConfig+0x234>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0207 	and.w	r2, r3, #7
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e0f6      	b.n	80036c4 <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e2:	497b      	ldr	r1, [pc, #492]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 80034e4:	4b7a      	ldr	r3, [pc, #488]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 808e 	beq.w	800361e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d107      	bne.n	800351a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800350a:	4b71      	ldr	r3, [pc, #452]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d121      	bne.n	800355a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0d4      	b.n	80036c4 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003522:	4b6b      	ldr	r3, [pc, #428]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d115      	bne.n	800355a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e0c8      	b.n	80036c4 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800353a:	4b65      	ldr	r3, [pc, #404]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0bc      	b.n	80036c4 <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800354a:	4b61      	ldr	r3, [pc, #388]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0b4      	b.n	80036c4 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800355a:	495d      	ldr	r1, [pc, #372]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 800355c:	4b5c      	ldr	r3, [pc, #368]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f023 0203 	bic.w	r2, r3, #3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4313      	orrs	r3, r2
 800356a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800356c:	f7fe fab6 	bl	8001adc <HAL_GetTick>
 8003570:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d112      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800357a:	e00a      	b.n	8003592 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7fe faae 	bl	8001adc <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e098      	b.n	80036c4 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8003592:	4b4f      	ldr	r3, [pc, #316]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b08      	cmp	r3, #8
 800359c:	d1ee      	bne.n	800357c <HAL_RCC_ClockConfig+0xe4>
 800359e:	e03e      	b.n	800361e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d112      	bne.n	80035ce <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a8:	e00a      	b.n	80035c0 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035aa:	f7fe fa97 	bl	8001adc <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e081      	b.n	80036c4 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035c0:	4b43      	ldr	r3, [pc, #268]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d1ee      	bne.n	80035aa <HAL_RCC_ClockConfig+0x112>
 80035cc:	e027      	b.n	800361e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11d      	bne.n	8003612 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d8:	f7fe fa80 	bl	8001adc <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e06a      	b.n	80036c4 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80035ee:	4b38      	ldr	r3, [pc, #224]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1ee      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x140>
 80035fa:	e010      	b.n	800361e <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035fc:	f7fe fa6e 	bl	8001adc <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	; 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e058      	b.n	80036c4 <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8003612:	4b2f      	ldr	r3, [pc, #188]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b04      	cmp	r3, #4
 800361c:	d1ee      	bne.n	80035fc <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800361e:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_RCC_ClockConfig+0x234>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0207 	and.w	r2, r3, #7
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d910      	bls.n	800364e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362c:	4927      	ldr	r1, [pc, #156]	; (80036cc <HAL_RCC_ClockConfig+0x234>)
 800362e:	4b27      	ldr	r3, [pc, #156]	; (80036cc <HAL_RCC_ClockConfig+0x234>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 0207 	bic.w	r2, r3, #7
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	4313      	orrs	r3, r2
 800363a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800363c:	4b23      	ldr	r3, [pc, #140]	; (80036cc <HAL_RCC_ClockConfig+0x234>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0207 	and.w	r2, r3, #7
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d001      	beq.n	800364e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e03a      	b.n	80036c4 <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800365a:	491d      	ldr	r1, [pc, #116]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 800365c:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d009      	beq.n	800368c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003678:	4915      	ldr	r1, [pc, #84]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4313      	orrs	r3, r2
 800368a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800368c:	f000 f826 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 8003690:	4601      	mov	r1, r0
 8003692:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <HAL_RCC_ClockConfig+0x238>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800369a:	23f0      	movs	r3, #240	; 0xf0
 800369c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
 80036b0:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <HAL_RCC_ClockConfig+0x23c>)
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	fa21 f303 	lsr.w	r3, r1, r3
 80036b8:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <HAL_RCC_ClockConfig+0x240>)
 80036ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80036bc:	2000      	movs	r0, #0
 80036be:	f7fe f9e3 	bl	8001a88 <HAL_InitTick>

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40022000 	.word	0x40022000
 80036d0:	40021000 	.word	0x40021000
 80036d4:	0800841c 	.word	0x0800841c
 80036d8:	20000044 	.word	0x20000044

080036dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	b095      	sub	sp, #84	; 0x54
 80036e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e6:	2300      	movs	r3, #0
 80036e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ea:	2300      	movs	r3, #0
 80036ec:	643b      	str	r3, [r7, #64]	; 0x40
 80036ee:	2302      	movs	r3, #2
 80036f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f2:	2302      	movs	r3, #2
 80036f4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80036fa:	4b71      	ldr	r3, [pc, #452]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8003706:	4b6e      	ldr	r3, [pc, #440]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800370e:	2b0c      	cmp	r3, #12
 8003710:	d13c      	bne.n	800378c <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8003712:	4b6b      	ldr	r3, [pc, #428]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d136      	bne.n	800378c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800371e:	4b68      	ldr	r3, [pc, #416]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d112      	bne.n	8003750 <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 800372a:	4b65      	ldr	r3, [pc, #404]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800372c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003730:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003734:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003738:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373c:	fa93 f3a3 	rbit	r3, r3
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
 800374c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800374e:	e00f      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8003750:	4b5b      	ldr	r3, [pc, #364]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003758:	23f0      	movs	r3, #240	; 0xf0
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003770:	4a54      	ldr	r2, [pc, #336]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8003772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003778:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800377a:	4b51      	ldr	r3, [pc, #324]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b00      	cmp	r3, #0
 8003784:	d113      	bne.n	80037ae <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003788:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800378a:	e010      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800378c:	4b4c      	ldr	r3, [pc, #304]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	2b04      	cmp	r3, #4
 8003796:	d102      	bne.n	800379e <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003798:	4b4b      	ldr	r3, [pc, #300]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1ec>)
 800379a:	647b      	str	r3, [r7, #68]	; 0x44
 800379c:	e007      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800379e:	4b48      	ldr	r3, [pc, #288]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037aa:	4b48      	ldr	r3, [pc, #288]	; (80038cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80037ac:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037ae:	4b44      	ldr	r3, [pc, #272]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d17b      	bne.n	80038b2 <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80037ba:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 80037c4:	4b3e      	ldr	r3, [pc, #248]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037cc:	2370      	movs	r3, #112	; 0x70
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	623b      	str	r3, [r7, #32]
  return(result);
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 80037e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d002      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0x116>
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d018      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0x146>
 80037f0:	e02f      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80037f2:	4a35      	ldr	r2, [pc, #212]	; (80038c8 <HAL_RCC_GetSysClockFreq+0x1ec>)
 80037f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fa:	4a31      	ldr	r2, [pc, #196]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80037fc:	68d2      	ldr	r2, [r2, #12]
 80037fe:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8003802:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003806:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	fa92 f2a2 	rbit	r2, r2
 800380e:	61ba      	str	r2, [r7, #24]
  return(result);
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	fab2 f282 	clz	r2, r2
 8003816:	fa21 f202 	lsr.w	r2, r1, r2
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003820:	e02f      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8003822:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	4a25      	ldr	r2, [pc, #148]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800382c:	68d2      	ldr	r2, [r2, #12]
 800382e:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8003832:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003836:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	fa92 f2a2 	rbit	r2, r2
 800383e:	613a      	str	r2, [r7, #16]
  return(result);
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	fab2 f282 	clz	r2, r2
 8003846:	fa21 f202 	lsr.w	r2, r1, r2
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003850:	e017      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8003852:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800385c:	68d2      	ldr	r2, [r2, #12]
 800385e:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8003862:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003866:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	fa92 f2a2 	rbit	r2, r2
 800386e:	60ba      	str	r2, [r7, #8]
  return(result);
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	fab2 f282 	clz	r2, r2
 8003876:	fa21 f202 	lsr.w	r2, r1, r2
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003880:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800388a:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800388e:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	fa93 f3a3 	rbit	r3, r3
 8003896:	603b      	str	r3, [r7, #0]
  return(result);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 80038a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 80038b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3754      	adds	r7, #84	; 0x54
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	40021000 	.word	0x40021000
 80038c4:	08008434 	.word	0x08008434
 80038c8:	00f42400 	.word	0x00f42400
 80038cc:	007a1200 	.word	0x007a1200

080038d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000044 	.word	0x20000044

080038e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80038ee:	f7ff ffef 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 80038f2:	4601      	mov	r1, r0
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038fc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003900:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	fa93 f3a3 	rbit	r3, r3
 8003908:	603b      	str	r3, [r7, #0]
  return(result);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	fab3 f383 	clz	r3, r3
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
 8003914:	4a04      	ldr	r2, [pc, #16]	; (8003928 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003916:	5cd3      	ldrb	r3, [r2, r3]
 8003918:	fa21 f303 	lsr.w	r3, r1, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	0800842c 	.word	0x0800842c

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003932:	f7ff ffcd 	bl	80038d0 <HAL_RCC_GetHCLKFreq>
 8003936:	4601      	mov	r1, r0
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003940:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003944:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	fa93 f3a3 	rbit	r3, r3
 800394c:	603b      	str	r3, [r7, #0]
  return(result);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	fab3 f383 	clz	r3, r3
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <HAL_RCC_GetPCLK2Freq+0x40>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	0800842c 	.word	0x0800842c

08003970 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003980:	4b2a      	ldr	r3, [pc, #168]	; (8003a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800398c:	f7ff f95e 	bl	8002c4c <HAL_PWREx_GetVoltageRange>
 8003990:	6178      	str	r0, [r7, #20]
 8003992:	e014      	b.n	80039be <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003994:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003996:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399e:	6593      	str	r3, [r2, #88]	; 0x58
 80039a0:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039ac:	f7ff f94e 	bl	8002c4c <HAL_PWREx_GetVoltageRange>
 80039b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039b2:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c4:	d10b      	bne.n	80039de <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b80      	cmp	r3, #128	; 0x80
 80039ca:	d919      	bls.n	8003a00 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2ba0      	cmp	r3, #160	; 0xa0
 80039d0:	d902      	bls.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039d2:	2302      	movs	r3, #2
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	e013      	b.n	8003a00 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039d8:	2301      	movs	r3, #1
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	e010      	b.n	8003a00 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b80      	cmp	r3, #128	; 0x80
 80039e2:	d902      	bls.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039e4:	2303      	movs	r3, #3
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	e00a      	b.n	8003a00 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b80      	cmp	r3, #128	; 0x80
 80039ee:	d102      	bne.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039f0:	2302      	movs	r3, #2
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	e004      	b.n	8003a00 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b70      	cmp	r3, #112	; 0x70
 80039fa:	d101      	bne.n	8003a00 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039fc:	2301      	movs	r3, #1
 80039fe:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8003a00:	490b      	ldr	r1, [pc, #44]	; (8003a30 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 0207 	bic.w	r2, r3, #7
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003a10:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0207 	and.w	r2, r3, #7
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d001      	beq.n	8003a22 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40022000 	.word	0x40022000

08003a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a44:	2300      	movs	r3, #0
 8003a46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a48:	2300      	movs	r3, #0
 8003a4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d02f      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a60:	d005      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003a62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a66:	d015      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003a6c:	e00f      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003a6e:	4a5a      	ldr	r2, [pc, #360]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003a70:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a7a:	e00c      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x62>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fa2c 	bl	8003ee0 <RCCEx_PLLSAI1_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a8c:	e003      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x62>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	74fb      	strb	r3, [r7, #19]
      break;
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x62>
      break;
 8003a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a96:	7cfb      	ldrb	r3, [r7, #19]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10b      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a9c:	494e      	ldr	r1, [pc, #312]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003a9e:	4b4e      	ldr	r3, [pc, #312]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ab2:	e001      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8098 	beq.w	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aca:	4b43      	ldr	r3, [pc, #268]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10d      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad6:	4a40      	ldr	r2, [pc, #256]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ad8:	4b3f      	ldr	r3, [pc, #252]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae2:	4b3d      	ldr	r3, [pc, #244]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aee:	2301      	movs	r3, #1
 8003af0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af2:	4a3a      	ldr	r2, [pc, #232]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003af4:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003afe:	f7fd ffed 	bl	8001adc <HAL_GetTick>
 8003b02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b04:	e009      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b06:	f7fd ffe9 	bl	8001adc <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d902      	bls.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      {
        ret = HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	74fb      	strb	r3, [r7, #19]
        break;
 8003b18:	e005      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b1a:	4b30      	ldr	r3, [pc, #192]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0ef      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }

    if(ret == HAL_OK)
 8003b26:	7cfb      	ldrb	r3, [r7, #19]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d159      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b2c:	4b2a      	ldr	r3, [pc, #168]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01e      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d019      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x148>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b48:	4b23      	ldr	r3, [pc, #140]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b54:	4a20      	ldr	r2, [pc, #128]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b64:	4a1c      	ldr	r2, [pc, #112]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003b66:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b74:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d016      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fd ffa9 	bl	8001adc <HAL_GetTick>
 8003b8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8003b8c:	e00b      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x172>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fd ffa5 	bl	8001adc <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d902      	bls.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x172>
          {
            ret = HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ba4:	e006      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x180>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ec      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bba:	4907      	ldr	r1, [pc, #28]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bd0:	e008      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	74bb      	strb	r3, [r7, #18]
 8003bd6:	e005      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003be4:	7c7b      	ldrb	r3, [r7, #17]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d105      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bea:	4a8d      	ldr	r2, [pc, #564]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003bec:	4b8c      	ldr	r3, [pc, #560]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c02:	4987      	ldr	r1, [pc, #540]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c04:	4b86      	ldr	r3, [pc, #536]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0a:	f023 0203 	bic.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c24:	497e      	ldr	r1, [pc, #504]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c26:	4b7e      	ldr	r3, [pc, #504]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f023 020c 	bic.w	r2, r3, #12
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c46:	4976      	ldr	r1, [pc, #472]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c48:	4b75      	ldr	r3, [pc, #468]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c68:	496d      	ldr	r1, [pc, #436]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c6a:	4b6d      	ldr	r3, [pc, #436]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c8a:	4965      	ldr	r1, [pc, #404]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c8c:	4b64      	ldr	r3, [pc, #400]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cac:	495c      	ldr	r1, [pc, #368]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003cae:	4b5c      	ldr	r3, [pc, #368]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cce:	4954      	ldr	r1, [pc, #336]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003cd0:	4b53      	ldr	r3, [pc, #332]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)  

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cf0:	494b      	ldr	r1, [pc, #300]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003cf2:	4b4b      	ldr	r3, [pc, #300]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d12:	4943      	ldr	r1, [pc, #268]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d14:	4b42      	ldr	r3, [pc, #264]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d028      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d34:	493a      	ldr	r1, [pc, #232]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d36:	4b3a      	ldr	r3, [pc, #232]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d52:	d106      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d54:	4a32      	ldr	r2, [pc, #200]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d56:	4b32      	ldr	r3, [pc, #200]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d5e:	60d3      	str	r3, [r2, #12]
 8003d60:	e011      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x352>
    }
    else if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d6a:	d10c      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x352>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f8b4 	bl	8003ee0 <RCCEx_PLLSAI1_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x352>
      {
        /* set overall return value */
        status = ret;
 8003d82:	7cfb      	ldrb	r3, [r7, #19]
 8003d84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d028      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d92:	4923      	ldr	r1, [pc, #140]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d94:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003db0:	d106      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db2:	4a1b      	ldr	r2, [pc, #108]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003db4:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dbc:	60d3      	str	r3, [r2, #12]
 8003dbe:	e011      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2101      	movs	r1, #1
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f885 	bl	8003ee0 <RCCEx_PLLSAI1_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8003dda:	7cfb      	ldrb	r3, [r7, #19]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      {
        /* set overall return value */
        status = ret;
 8003de0:	7cfb      	ldrb	r3, [r7, #19]
 8003de2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d02b      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x414>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003df0:	490b      	ldr	r1, [pc, #44]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e0e:	d109      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e10:	4a03      	ldr	r2, [pc, #12]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003e12:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e1a:	60d3      	str	r3, [r2, #12]
 8003e1c:	e014      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3304      	adds	r3, #4
 8003e32:	2101      	movs	r1, #1
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f853 	bl	8003ee0 <RCCEx_PLLSAI1_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8003e3e:	7cfb      	ldrb	r3, [r7, #19]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x414>
      {
        /* set overall return value */
        status = ret;
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01c      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e54:	4919      	ldr	r1, [pc, #100]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e56:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e72:	d10c      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	2102      	movs	r1, #2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f830 	bl	8003ee0 <RCCEx_PLLSAI1_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x45a>
      {
        /* set overall return value */
        status = ret;
 8003e8a:	7cfb      	ldrb	r3, [r7, #19]
 8003e8c:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e9a:	4908      	ldr	r1, [pc, #32]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e9c:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8003eb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000

08003ec0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ec4:	4a05      	ldr	r2, [pc, #20]	; (8003edc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f043 0304 	orr.w	r3, r3, #4
 8003ece:	6013      	str	r3, [r2, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000

08003ee0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ee0:	b590      	push	{r4, r7, lr}
 8003ee2:	b095      	sub	sp, #84	; 0x54
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ef4:	4ba3      	ldr	r3, [pc, #652]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d023      	beq.n	8003f48 <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f00:	4ba0      	ldr	r3, [pc, #640]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0203 	and.w	r2, r3, #3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d117      	bne.n	8003f40 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
       || 
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d013      	beq.n	8003f40 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 8003f18:	4b9a      	ldr	r3, [pc, #616]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f20:	2370      	movs	r3, #112	; 0x70
 8003f22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	fa22 f303 	lsr.w	r3, r2, r3
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
       || 
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d054      	beq.n	8003fea <RCCEx_PLLSAI1_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003f46:	e050      	b.n	8003fea <RCCEx_PLLSAI1_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d00d      	beq.n	8003f6c <RCCEx_PLLSAI1_Config+0x8c>
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d015      	beq.n	8003f80 <RCCEx_PLLSAI1_Config+0xa0>
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d123      	bne.n	8003fa0 <RCCEx_PLLSAI1_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f58:	4b8a      	ldr	r3, [pc, #552]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d121      	bne.n	8003fa8 <RCCEx_PLLSAI1_Config+0xc8>
      {
        status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8003f6a:	e01d      	b.n	8003fa8 <RCCEx_PLLSAI1_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f6c:	4b85      	ldr	r3, [pc, #532]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d119      	bne.n	8003fac <RCCEx_PLLSAI1_Config+0xcc>
      {
        status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8003f7e:	e015      	b.n	8003fac <RCCEx_PLLSAI1_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f80:	4b80      	ldr	r3, [pc, #512]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d111      	bne.n	8003fb0 <RCCEx_PLLSAI1_Config+0xd0>
 8003f8c:	4b7d      	ldr	r3, [pc, #500]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <RCCEx_PLLSAI1_Config+0xd0>
      {
        status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8003f9e:	e007      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0xd0>
    default:
      status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      break;
 8003fa6:	e004      	b.n	8003fb2 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8003fa8:	bf00      	nop
 8003faa:	e002      	b.n	8003fb2 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8003fb0:	bf00      	nop
    }
    
    if(status == HAL_OK)
 8003fb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d117      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0x10a>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8003fba:	4c72      	ldr	r4, [pc, #456]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003fbc:	4b71      	ldr	r3, [pc, #452]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6819      	ldr	r1, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	1e58      	subs	r0, r3, #1
 8003fce:	2370      	movs	r3, #112	; 0x70
 8003fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	fab3 f383 	clz	r3, r3
 8003fe0:	fa00 f303 	lsl.w	r3, r0, r3
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 8003fea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f040 80c1 	bne.w	8004176 <RCCEx_PLLSAI1_Config+0x296>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ff4:	4a63      	ldr	r2, [pc, #396]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003ff6:	4b63      	ldr	r3, [pc, #396]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004000:	f7fd fd6c 	bl	8001adc <HAL_GetTick>
 8004004:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8004006:	e00a      	b.n	800401e <RCCEx_PLLSAI1_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004008:	f7fd fd68 	bl	8001adc <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d903      	bls.n	800401e <RCCEx_PLLSAI1_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        break;
 800401c:	e005      	b.n	800402a <RCCEx_PLLSAI1_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800401e:	4b59      	ldr	r3, [pc, #356]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ee      	bne.n	8004008 <RCCEx_PLLSAI1_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 800402a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800402e:	2b00      	cmp	r3, #0
 8004030:	f040 80a1 	bne.w	8004176 <RCCEx_PLLSAI1_Config+0x296>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d125      	bne.n	8004086 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800403a:	4c52      	ldr	r4, [pc, #328]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 800403c:	4b51      	ldr	r3, [pc, #324]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004044:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6891      	ldr	r1, [r2, #8]
 800404c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004050:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004054:	fa92 f2a2 	rbit	r2, r2
 8004058:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 800405a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800405c:	fab2 f282 	clz	r2, r2
 8004060:	4091      	lsls	r1, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68d0      	ldr	r0, [r2, #12]
 8004066:	f04f 4278 	mov.w	r2, #4160749568	; 0xf8000000
 800406a:	637a      	str	r2, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800406e:	fa92 f2a2 	rbit	r2, r2
 8004072:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8004074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004076:	fab2 f282 	clz	r2, r2
 800407a:	fa00 f202 	lsl.w	r2, r0, r2
 800407e:	430a      	orrs	r2, r1
 8004080:	4313      	orrs	r3, r2
 8004082:	6123      	str	r3, [r4, #16]
 8004084:	e051      	b.n	800412a <RCCEx_PLLSAI1_Config+0x24a>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d127      	bne.n	80040dc <RCCEx_PLLSAI1_Config+0x1fc>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800408c:	4c3d      	ldr	r4, [pc, #244]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 800408e:	4b3d      	ldr	r3, [pc, #244]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004096:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6891      	ldr	r1, [r2, #8]
 800409e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80040a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	fa92 f2a2 	rbit	r2, r2
 80040aa:	61ba      	str	r2, [r7, #24]
  return(result);
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	fab2 f282 	clz	r2, r2
 80040b2:	4091      	lsls	r1, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6912      	ldr	r2, [r2, #16]
 80040b8:	0852      	lsrs	r2, r2, #1
 80040ba:	1e50      	subs	r0, r2, #1
 80040bc:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80040c0:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c4:	fa92 f2a2 	rbit	r2, r2
 80040c8:	623a      	str	r2, [r7, #32]
  return(result);
 80040ca:	6a3a      	ldr	r2, [r7, #32]
 80040cc:	fab2 f282 	clz	r2, r2
 80040d0:	fa00 f202 	lsl.w	r2, r0, r2
 80040d4:	430a      	orrs	r2, r1
 80040d6:	4313      	orrs	r3, r2
 80040d8:	6123      	str	r3, [r4, #16]
 80040da:	e026      	b.n	800412a <RCCEx_PLLSAI1_Config+0x24a>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80040dc:	4c29      	ldr	r4, [pc, #164]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 80040de:	4b29      	ldr	r3, [pc, #164]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6891      	ldr	r1, [r2, #8]
 80040ee:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80040f2:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	fa92 f2a2 	rbit	r2, r2
 80040fa:	60ba      	str	r2, [r7, #8]
  return(result);
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	fab2 f282 	clz	r2, r2
 8004102:	4091      	lsls	r1, r2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6952      	ldr	r2, [r2, #20]
 8004108:	0852      	lsrs	r2, r2, #1
 800410a:	1e50      	subs	r0, r2, #1
 800410c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	fa92 f2a2 	rbit	r2, r2
 8004118:	613a      	str	r2, [r7, #16]
  return(result);
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	fab2 f282 	clz	r2, r2
 8004120:	fa00 f202 	lsl.w	r2, r0, r2
 8004124:	430a      	orrs	r2, r1
 8004126:	4313      	orrs	r3, r2
 8004128:	6123      	str	r3, [r4, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800412a:	4a16      	ldr	r2, [pc, #88]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 800412c:	4b15      	ldr	r3, [pc, #84]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004134:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004136:	f7fd fcd1 	bl	8001adc <HAL_GetTick>
 800413a:	64b8      	str	r0, [r7, #72]	; 0x48

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800413c:	e00a      	b.n	8004154 <RCCEx_PLLSAI1_Config+0x274>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800413e:	f7fd fccd 	bl	8001adc <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d903      	bls.n	8004154 <RCCEx_PLLSAI1_Config+0x274>
        {
          status = HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8004152:	e005      	b.n	8004160 <RCCEx_PLLSAI1_Config+0x280>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ee      	beq.n	800413e <RCCEx_PLLSAI1_Config+0x25e>
        }
      }

      if(status == HAL_OK)    
 8004160:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <RCCEx_PLLSAI1_Config+0x296>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004168:	4906      	ldr	r1, [pc, #24]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <RCCEx_PLLSAI1_Config+0x2a4>)
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	4313      	orrs	r3, r2
 8004174:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 8004176:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800417a:	4618      	mov	r0, r3
 800417c:	3754      	adds	r7, #84	; 0x54
 800417e:	46bd      	mov	sp, r7
 8004180:	bd90      	pop	{r4, r7, pc}
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000

08004188 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e07a      	b.n	8004290 <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f003 fc07 	bl	80079c8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041da:	d902      	bls.n	80041e2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e002      	b.n	80041e8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80041f0:	d007      	beq.n	8004202 <HAL_SPI_Init+0x7a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10b      	bne.n	8004222 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004212:	d903      	bls.n	800421c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
 800421a:	e002      	b.n	8004222 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6851      	ldr	r1, [r2, #4]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6892      	ldr	r2, [r2, #8]
 800422e:	4311      	orrs	r1, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6912      	ldr	r2, [r2, #16]
 8004234:	4311      	orrs	r1, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6952      	ldr	r2, [r2, #20]
 800423a:	4311      	orrs	r1, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6992      	ldr	r2, [r2, #24]
 8004240:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004244:	4311      	orrs	r1, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	69d2      	ldr	r2, [r2, #28]
 800424a:	4311      	orrs	r1, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6a12      	ldr	r2, [r2, #32]
 8004250:	4311      	orrs	r1, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004256:	430a      	orrs	r2, r1
 8004258:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6992      	ldr	r2, [r2, #24]
 8004262:	0c12      	lsrs	r2, r2, #16
 8004264:	f002 0104 	and.w	r1, r2, #4
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800426c:	4311      	orrs	r1, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004272:	4311      	orrs	r1, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	68d2      	ldr	r2, [r2, #12]
 8004278:	4311      	orrs	r1, r2
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_SPI_Transmit+0x26>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e13e      	b.n	800453c <HAL_SPI_Transmit+0x2a4>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042c6:	f7fd fc09 	bl	8001adc <HAL_GetTick>
 80042ca:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d002      	beq.n	80042de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
 80042da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042dc:	e125      	b.n	800452a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_SPI_Transmit+0x52>
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042ee:	e11c      	b.n	800452a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2203      	movs	r2, #3
 80042f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	88fa      	ldrh	r2, [r7, #6]
 8004308:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433a:	d107      	bne.n	800434c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800434a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d007      	beq.n	800436a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004368:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004372:	d947      	bls.n	8004404 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d004      	beq.n	8004386 <HAL_SPI_Transmit+0xee>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d138      	bne.n	80043f8 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	8812      	ldrh	r2, [r2, #0]
 800438e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	3302      	adds	r3, #2
 8004394:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043a4:	e028      	b.n	80043f8 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d10f      	bne.n	80043d4 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	8812      	ldrh	r2, [r2, #0]
 80043bc:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	3302      	adds	r3, #2
 80043c2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d2:	e011      	b.n	80043f8 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00b      	beq.n	80043f2 <HAL_SPI_Transmit+0x15a>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d00a      	beq.n	80043f8 <HAL_SPI_Transmit+0x160>
 80043e2:	f7fd fb7b 	bl	8001adc <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	1ad2      	subs	r2, r2, r3
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043f6:	e098      	b.n	800452a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1d1      	bne.n	80043a6 <HAL_SPI_Transmit+0x10e>
 8004402:	e072      	b.n	80044ea <HAL_SPI_Transmit+0x252>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <HAL_SPI_Transmit+0x17e>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	d164      	bne.n	80044e0 <HAL_SPI_Transmit+0x248>
    {
      if (hspi->TxXferCount > 1U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	d90f      	bls.n	8004440 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	8812      	ldrh	r2, [r2, #0]
 8004428:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	3302      	adds	r3, #2
 800442e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b02      	subs	r3, #2
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800443e:	e04f      	b.n	80044e0 <HAL_SPI_Transmit+0x248>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f103 020c 	add.w	r2, r3, #12
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	1c59      	adds	r1, r3, #1
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004460:	e03e      	b.n	80044e0 <HAL_SPI_Transmit+0x248>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b02      	cmp	r3, #2
 800446e:	d125      	bne.n	80044bc <HAL_SPI_Transmit+0x224>
      {
        if (hspi->TxXferCount > 1U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d90f      	bls.n	800449a <HAL_SPI_Transmit+0x202>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	8812      	ldrh	r2, [r2, #0]
 8004482:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	3302      	adds	r3, #2
 8004488:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b02      	subs	r3, #2
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004498:	e022      	b.n	80044e0 <HAL_SPI_Transmit+0x248>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f103 020c 	add.w	r2, r3, #12
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	1c59      	adds	r1, r3, #1
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044ba:	e011      	b.n	80044e0 <HAL_SPI_Transmit+0x248>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <HAL_SPI_Transmit+0x242>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c8:	d00a      	beq.n	80044e0 <HAL_SPI_Transmit+0x248>
 80044ca:	f7fd fb07 	bl	8001adc <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	1ad2      	subs	r2, r2, r3
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d302      	bcc.n	80044e0 <HAL_SPI_Transmit+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044de:	e024      	b.n	800452a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1bb      	bne.n	8004462 <HAL_SPI_Transmit+0x1ca>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	6839      	ldr	r1, [r7, #0]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fb01 	bl	8004af6 <SPI_EndRxTxTransaction>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_SPI_Transmit+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <HAL_SPI_Transmit+0x286>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_SPI_Transmit+0x292>
  {
    errorcode = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800453a:	7ffb      	ldrb	r3, [r7, #31]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08a      	sub	sp, #40	; 0x28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	2300      	movs	r3, #0
 8004558:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 800455e:	2301      	movs	r3, #1
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_SPI_TransmitReceive+0x32>
 8004572:	2302      	movs	r3, #2
 8004574:	e1e1      	b.n	800493a <HAL_SPI_TransmitReceive+0x3f6>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800457e:	f7fd faad 	bl	8001adc <HAL_GetTick>
 8004582:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800458a:	b2db      	uxtb	r3, r3
 800458c:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d00e      	beq.n	80045b8 <HAL_SPI_TransmitReceive+0x74>
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a0:	d106      	bne.n	80045b0 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <HAL_SPI_TransmitReceive+0x6c>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d003      	beq.n	80045b8 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045b6:	e1b6      	b.n	8004926 <HAL_SPI_TransmitReceive+0x3e2>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <HAL_SPI_TransmitReceive+0x86>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_SPI_TransmitReceive+0x86>
 80045c4:	887b      	ldrh	r3, [r7, #2]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045d0:	e1a9      	b.n	8004926 <HAL_SPI_TransmitReceive+0x3e2>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d003      	beq.n	80045e6 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2205      	movs	r2, #5
 80045e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	887a      	ldrh	r2, [r7, #2]
 80045f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	887a      	ldrh	r2, [r7, #2]
 80045fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	887a      	ldrh	r2, [r7, #2]
 800460c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	887a      	ldrh	r2, [r7, #2]
 8004612:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fido threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004628:	d805      	bhi.n	8004636 <HAL_SPI_TransmitReceive+0xf2>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b01      	cmp	r3, #1
 8004634:	d908      	bls.n	8004648 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	6852      	ldr	r2, [r2, #4]
 8004640:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	e007      	b.n	8004658 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	6852      	ldr	r2, [r2, #4]
 8004652:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004656:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d007      	beq.n	8004676 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004674:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800467e:	d975      	bls.n	800476c <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <HAL_SPI_TransmitReceive+0x14e>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d160      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	8812      	ldrh	r2, [r2, #0]
 800469a:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	3302      	adds	r3, #2
 80046a0:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046b0:	e050      	b.n	8004754 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01c      	beq.n	80046f2 <HAL_SPI_TransmitReceive+0x1ae>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d017      	beq.n	80046f2 <HAL_SPI_TransmitReceive+0x1ae>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d110      	bne.n	80046f2 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	8812      	ldrh	r2, [r2, #0]
 80046d8:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	3302      	adds	r3, #2
 80046de:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d01a      	beq.n	8004734 <HAL_SPI_TransmitReceive+0x1f0>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b01      	cmp	r3, #1
 800470a:	d113      	bne.n	8004734 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3302      	adds	r3, #2
 800471c:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004730:	2301      	movs	r3, #1
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d00b      	beq.n	8004754 <HAL_SPI_TransmitReceive+0x210>
 800473c:	f7fd f9ce 	bl	8001adc <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	1ad2      	subs	r2, r2, r3
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	429a      	cmp	r2, r3
 800474a:	d303      	bcc.n	8004754 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004752:	e0e8      	b.n	8004926 <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1a9      	bne.n	80046b2 <HAL_SPI_TransmitReceive+0x16e>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1a3      	bne.n	80046b2 <HAL_SPI_TransmitReceive+0x16e>
 800476a:	e0ca      	b.n	8004902 <HAL_SPI_TransmitReceive+0x3be>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_SPI_TransmitReceive+0x23c>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b01      	cmp	r3, #1
 800477c:	f040 80b4 	bne.w	80048e8 <HAL_SPI_TransmitReceive+0x3a4>
    {
      if (hspi->TxXferCount > 1U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	d90f      	bls.n	80047aa <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	8812      	ldrh	r2, [r2, #0]
 8004792:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	3302      	adds	r3, #2
 8004798:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b02      	subs	r3, #2
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047a8:	e09e      	b.n	80048e8 <HAL_SPI_TransmitReceive+0x3a4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f103 020c 	add.w	r2, r3, #12
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	1c59      	adds	r1, r3, #1
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ca:	e08d      	b.n	80048e8 <HAL_SPI_TransmitReceive+0x3a4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d032      	beq.n	8004838 <HAL_SPI_TransmitReceive+0x2f4>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d02d      	beq.n	8004838 <HAL_SPI_TransmitReceive+0x2f4>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d126      	bne.n	8004838 <HAL_SPI_TransmitReceive+0x2f4>
      {
        if (hspi->TxXferCount > 1U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d90f      	bls.n	8004814 <HAL_SPI_TransmitReceive+0x2d0>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	8812      	ldrh	r2, [r2, #0]
 80047fc:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	3302      	adds	r3, #2
 8004802:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b02      	subs	r3, #2
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004812:	e00f      	b.n	8004834 <HAL_SPI_TransmitReceive+0x2f0>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f103 020c 	add.w	r2, r3, #12
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	1c59      	adds	r1, r3, #1
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d041      	beq.n	80048c8 <HAL_SPI_TransmitReceive+0x384>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b01      	cmp	r3, #1
 8004850:	d13a      	bne.n	80048c8 <HAL_SPI_TransmitReceive+0x384>
      {
        if (hspi->RxXferCount > 1U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	d920      	bls.n	80048a0 <HAL_SPI_TransmitReceive+0x35c>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	b29a      	uxth	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3302      	adds	r3, #2
 800486e:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b02      	subs	r3, #2
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d81a      	bhi.n	80048c4 <HAL_SPI_TransmitReceive+0x380>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	6852      	ldr	r2, [r2, #4]
 8004898:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	e011      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x380>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	320c      	adds	r2, #12
 80048ac:	7812      	ldrb	r2, [r2, #0]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048c4:	2301      	movs	r3, #1
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ce:	d00b      	beq.n	80048e8 <HAL_SPI_TransmitReceive+0x3a4>
 80048d0:	f7fd f904 	bl	8001adc <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	1ad2      	subs	r2, r2, r3
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	429a      	cmp	r2, r3
 80048de:	d303      	bcc.n	80048e8 <HAL_SPI_TransmitReceive+0x3a4>
      {
        errorcode = HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048e6:	e01e      	b.n	8004926 <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f47f af6c 	bne.w	80047cc <HAL_SPI_TransmitReceive+0x288>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f47f af65 	bne.w	80047cc <HAL_SPI_TransmitReceive+0x288>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f8f5 	bl	8004af6 <SPI_EndRxTxTransaction>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <HAL_SPI_TransmitReceive+0x3d4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800493a:	4618      	mov	r0, r3
 800493c:	3728      	adds	r7, #40	; 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004950:	e04d      	b.n	80049ee <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d049      	beq.n	80049ee <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8004960:	f7fd f8bc 	bl	8001adc <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	1ad2      	subs	r2, r2, r3
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d33e      	bcc.n	80049ee <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	6852      	ldr	r2, [r2, #4]
 800497a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800497e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004988:	d111      	bne.n	80049ae <SPI_WaitFlagStateUntilTimeout+0x6c>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004992:	d004      	beq.n	800499e <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499c:	d107      	bne.n	80049ae <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b6:	d110      	bne.n	80049da <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6819      	ldr	r1, [r3, #0]
 80049c2:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80049c6:	400b      	ands	r3, r1
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e00e      	b.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0xca>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	401a      	ands	r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d101      	bne.n	8004a02 <SPI_WaitFlagStateUntilTimeout+0xc0>
 80049fe:	2201      	movs	r2, #1
 8004a00:	e000      	b.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8004a02:	2200      	movs	r2, #0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d1a3      	bne.n	8004952 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8004a22:	e05b      	b.n	8004adc <SPI_WaitFifoStateUntilTimeout+0xc8>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a2a:	d109      	bne.n	8004a40 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	330c      	adds	r3, #12
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a46:	d049      	beq.n	8004adc <SPI_WaitFifoStateUntilTimeout+0xc8>
    {
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <SPI_WaitFifoStateUntilTimeout+0x4a>
 8004a4e:	f7fd f845 	bl	8001adc <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	1ad2      	subs	r2, r2, r3
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d33e      	bcc.n	8004adc <SPI_WaitFifoStateUntilTimeout+0xc8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	6852      	ldr	r2, [r2, #4]
 8004a68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a76:	d111      	bne.n	8004a9c <SPI_WaitFifoStateUntilTimeout+0x88>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a80:	d004      	beq.n	8004a8c <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8a:	d107      	bne.n	8004a9c <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa4:	d110      	bne.n	8004ac8 <SPI_WaitFifoStateUntilTimeout+0xb4>
        {
          SPI_RESET_CRC(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8004ab4:	400b      	ands	r3, r1
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e008      	b.n	8004aee <SPI_WaitFifoStateUntilTimeout+0xda>
  while ((hspi->Instance->SR & Fifo) != State)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	401a      	ands	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d19b      	bne.n	8004a24 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <SPI_EndRxTxTransaction>:
  * @param hspi: SPI handle
  * @param Timeout: Timeout duration
  * @param  Tickstart: tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b086      	sub	sp, #24
 8004afa:	af02      	add	r7, sp, #8
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f7ff ff80 	bl	8004a14 <SPI_WaitFifoStateUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1e:	f043 0220 	orr.w	r2, r3, #32
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e013      	b.n	8004b52 <SPI_EndRxTxTransaction+0x5c>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2200      	movs	r2, #0
 8004b32:	2180      	movs	r1, #128	; 0x80
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff ff04 	bl	8004942 <SPI_WaitFlagStateUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b44:	f043 0220 	orr.w	r2, r3, #32
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e000      	b.n	8004b52 <SPI_EndRxTxTransaction+0x5c>
  }
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e043      	b.n	8004bf4 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f002 ffa1 	bl	8007ac8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2224      	movs	r2, #36	; 0x24
 8004b8a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f97c 	bl	8004e9c <UART_SetConfig>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e022      	b.n	8004bf4 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fc3e 	bl	8005438 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	6852      	ldr	r2, [r2, #4]
 8004bc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	6892      	ldr	r2, [r2, #8]
 8004bd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bda:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fcc5 	bl	800557c <UART_CheckIdleState>
 8004bf2:	4603      	mov	r3, r0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d177      	bne.n	8004d0c <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_UART_Transmit+0x2c>
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e070      	b.n	8004d0e <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_UART_Transmit+0x3e>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e069      	b.n	8004d0e <HAL_UART_Transmit+0x112>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2221      	movs	r2, #33	; 0x21
 8004c4c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004c50:	f7fc ff44 	bl	8001adc <HAL_GetTick>
 8004c54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	88fa      	ldrh	r2, [r7, #6]
 8004c5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0)
 8004c66:	e034      	b.n	8004cd2 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	2180      	movs	r1, #128	; 0x80
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fcc2 	bl	800560e <UART_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e03c      	b.n	8004d0e <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9c:	d111      	bne.n	8004cc2 <HAL_UART_Transmit+0xc6>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10d      	bne.n	8004cc2 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	8812      	ldrh	r2, [r2, #0]
 8004cb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cb6:	b292      	uxth	r2, r2
 8004cb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	e007      	b.n	8004cd2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	1c59      	adds	r1, r3, #1
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	8513      	strh	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1c4      	bne.n	8004c68 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2140      	movs	r1, #64	; 0x40
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fc90 	bl	800560e <UART_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e00a      	b.n	8004d0e <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e000      	b.n	8004d0e <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
  }
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b08a      	sub	sp, #40	; 0x28
 8004d1a:	af02      	add	r7, sp, #8
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	f040 80ad 	bne.w	8004e92 <HAL_UART_Receive+0x17c>
  {
    if((pData == NULL ) || (Size == 0))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_UART_Receive+0x2e>
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0a5      	b.n	8004e94 <HAL_UART_Receive+0x17e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Receive+0x40>
 8004d52:	2302      	movs	r3, #2
 8004d54:	e09e      	b.n	8004e94 <HAL_UART_Receive+0x17e>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2222      	movs	r2, #34	; 0x22
 8004d68:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004d6c:	f7fc feb6 	bl	8001adc <HAL_GetTick>
 8004d70:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	88fa      	ldrh	r2, [r7, #6]
 8004d7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8a:	d10e      	bne.n	8004daa <HAL_UART_Receive+0x94>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <HAL_UART_Receive+0x8a>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d9e:	e028      	b.n	8004df2 <HAL_UART_Receive+0xdc>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	22ff      	movs	r2, #255	; 0xff
 8004da4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004da8:	e023      	b.n	8004df2 <HAL_UART_Receive+0xdc>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <HAL_UART_Receive+0xb8>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <HAL_UART_Receive+0xae>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	22ff      	movs	r2, #255	; 0xff
 8004dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc2:	e016      	b.n	8004df2 <HAL_UART_Receive+0xdc>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	227f      	movs	r2, #127	; 0x7f
 8004dc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dcc:	e011      	b.n	8004df2 <HAL_UART_Receive+0xdc>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dd6:	d10c      	bne.n	8004df2 <HAL_UART_Receive+0xdc>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <HAL_UART_Receive+0xd4>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	227f      	movs	r2, #127	; 0x7f
 8004de4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004de8:	e003      	b.n	8004df2 <HAL_UART_Receive+0xdc>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	223f      	movs	r2, #63	; 0x3f
 8004dee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004df8:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0)
 8004dfa:	e03a      	b.n	8004e72 <HAL_UART_Receive+0x15c>
    {
      huart->RxXferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	2200      	movs	r2, #0
 8004e16:	2120      	movs	r1, #32
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 fbf8 	bl	800560e <UART_WaitOnFlagUntilTimeout>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e035      	b.n	8004e94 <HAL_UART_Receive+0x17e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e30:	d112      	bne.n	8004e58 <HAL_UART_Receive+0x142>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10e      	bne.n	8004e58 <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	8b7b      	ldrh	r3, [r7, #26]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	801a      	strh	r2, [r3, #0]
        pData +=2;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	3302      	adds	r3, #2
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	e00c      	b.n	8004e72 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	60ba      	str	r2, [r7, #8]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004e64:	b292      	uxth	r2, r2
 8004e66:	b2d1      	uxtb	r1, r2
 8004e68:	8b7a      	ldrh	r2, [r7, #26]
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	400a      	ands	r2, r1
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1be      	bne.n	8004dfc <HAL_UART_Receive+0xe6>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e000      	b.n	8004e94 <HAL_UART_Receive+0x17e>
  }
  else
  {
    return HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
  }
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3720      	adds	r7, #32
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ea0:	b086      	sub	sp, #24
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004eaa:	2310      	movs	r3, #16
 8004eac:	74fb      	strb	r3, [r7, #19]
  uint16_t brrtemp                    = 0x0000;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	81bb      	strh	r3, [r7, #12]
  uint16_t usartdiv                   = 0x0000;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	823b      	strh	r3, [r7, #16]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	73fb      	strb	r3, [r7, #15]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6819      	ldr	r1, [r3, #0]
 8004edc:	4bb8      	ldr	r3, [pc, #736]	; (80051c0 <UART_SetConfig+0x324>)
 8004ede:	400b      	ands	r3, r1
 8004ee0:	6979      	ldr	r1, [r7, #20]
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	6852      	ldr	r2, [r2, #4]
 8004ef0:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	68d2      	ldr	r2, [r2, #12]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4aaf      	ldr	r2, [pc, #700]	; (80051c4 <UART_SetConfig+0x328>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d004      	beq.n	8004f16 <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	6892      	ldr	r2, [r2, #8]
 8004f20:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4aa6      	ldr	r2, [pc, #664]	; (80051c8 <UART_SetConfig+0x32c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d121      	bne.n	8004f78 <UART_SetConfig+0xdc>
 8004f34:	4ba5      	ldr	r3, [pc, #660]	; (80051cc <UART_SetConfig+0x330>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d816      	bhi.n	8004f70 <UART_SetConfig+0xd4>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <UART_SetConfig+0xac>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f59 	.word	0x08004f59
 8004f4c:	08004f65 	.word	0x08004f65
 8004f50:	08004f5f 	.word	0x08004f5f
 8004f54:	08004f6b 	.word	0x08004f6b
 8004f58:	2301      	movs	r3, #1
 8004f5a:	74fb      	strb	r3, [r7, #19]
 8004f5c:	e094      	b.n	8005088 <UART_SetConfig+0x1ec>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	74fb      	strb	r3, [r7, #19]
 8004f62:	e091      	b.n	8005088 <UART_SetConfig+0x1ec>
 8004f64:	2304      	movs	r3, #4
 8004f66:	74fb      	strb	r3, [r7, #19]
 8004f68:	e08e      	b.n	8005088 <UART_SetConfig+0x1ec>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	74fb      	strb	r3, [r7, #19]
 8004f6e:	e08b      	b.n	8005088 <UART_SetConfig+0x1ec>
 8004f70:	2310      	movs	r3, #16
 8004f72:	74fb      	strb	r3, [r7, #19]
 8004f74:	bf00      	nop
 8004f76:	e087      	b.n	8005088 <UART_SetConfig+0x1ec>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a94      	ldr	r2, [pc, #592]	; (80051d0 <UART_SetConfig+0x334>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d134      	bne.n	8004fec <UART_SetConfig+0x150>
 8004f82:	4b92      	ldr	r3, [pc, #584]	; (80051cc <UART_SetConfig+0x330>)
 8004f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b0c      	cmp	r3, #12
 8004f8e:	d829      	bhi.n	8004fe4 <UART_SetConfig+0x148>
 8004f90:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <UART_SetConfig+0xfc>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fcd 	.word	0x08004fcd
 8004f9c:	08004fe5 	.word	0x08004fe5
 8004fa0:	08004fe5 	.word	0x08004fe5
 8004fa4:	08004fe5 	.word	0x08004fe5
 8004fa8:	08004fd9 	.word	0x08004fd9
 8004fac:	08004fe5 	.word	0x08004fe5
 8004fb0:	08004fe5 	.word	0x08004fe5
 8004fb4:	08004fe5 	.word	0x08004fe5
 8004fb8:	08004fd3 	.word	0x08004fd3
 8004fbc:	08004fe5 	.word	0x08004fe5
 8004fc0:	08004fe5 	.word	0x08004fe5
 8004fc4:	08004fe5 	.word	0x08004fe5
 8004fc8:	08004fdf 	.word	0x08004fdf
 8004fcc:	2300      	movs	r3, #0
 8004fce:	74fb      	strb	r3, [r7, #19]
 8004fd0:	e05a      	b.n	8005088 <UART_SetConfig+0x1ec>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	74fb      	strb	r3, [r7, #19]
 8004fd6:	e057      	b.n	8005088 <UART_SetConfig+0x1ec>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	74fb      	strb	r3, [r7, #19]
 8004fdc:	e054      	b.n	8005088 <UART_SetConfig+0x1ec>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	74fb      	strb	r3, [r7, #19]
 8004fe2:	e051      	b.n	8005088 <UART_SetConfig+0x1ec>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	74fb      	strb	r3, [r7, #19]
 8004fe8:	bf00      	nop
 8004fea:	e04d      	b.n	8005088 <UART_SetConfig+0x1ec>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a78      	ldr	r2, [pc, #480]	; (80051d4 <UART_SetConfig+0x338>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d120      	bne.n	8005038 <UART_SetConfig+0x19c>
 8004ff6:	4b75      	ldr	r3, [pc, #468]	; (80051cc <UART_SetConfig+0x330>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005000:	2b10      	cmp	r3, #16
 8005002:	d00f      	beq.n	8005024 <UART_SetConfig+0x188>
 8005004:	2b10      	cmp	r3, #16
 8005006:	d802      	bhi.n	800500e <UART_SetConfig+0x172>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <UART_SetConfig+0x17c>
 800500c:	e010      	b.n	8005030 <UART_SetConfig+0x194>
 800500e:	2b20      	cmp	r3, #32
 8005010:	d005      	beq.n	800501e <UART_SetConfig+0x182>
 8005012:	2b30      	cmp	r3, #48	; 0x30
 8005014:	d009      	beq.n	800502a <UART_SetConfig+0x18e>
 8005016:	e00b      	b.n	8005030 <UART_SetConfig+0x194>
 8005018:	2300      	movs	r3, #0
 800501a:	74fb      	strb	r3, [r7, #19]
 800501c:	e034      	b.n	8005088 <UART_SetConfig+0x1ec>
 800501e:	2302      	movs	r3, #2
 8005020:	74fb      	strb	r3, [r7, #19]
 8005022:	e031      	b.n	8005088 <UART_SetConfig+0x1ec>
 8005024:	2304      	movs	r3, #4
 8005026:	74fb      	strb	r3, [r7, #19]
 8005028:	e02e      	b.n	8005088 <UART_SetConfig+0x1ec>
 800502a:	2308      	movs	r3, #8
 800502c:	74fb      	strb	r3, [r7, #19]
 800502e:	e02b      	b.n	8005088 <UART_SetConfig+0x1ec>
 8005030:	2310      	movs	r3, #16
 8005032:	74fb      	strb	r3, [r7, #19]
 8005034:	bf00      	nop
 8005036:	e027      	b.n	8005088 <UART_SetConfig+0x1ec>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a61      	ldr	r2, [pc, #388]	; (80051c4 <UART_SetConfig+0x328>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d123      	bne.n	800508a <UART_SetConfig+0x1ee>
 8005042:	4b62      	ldr	r3, [pc, #392]	; (80051cc <UART_SetConfig+0x330>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005048:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800504c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005050:	d012      	beq.n	8005078 <UART_SetConfig+0x1dc>
 8005052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005056:	d802      	bhi.n	800505e <UART_SetConfig+0x1c2>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <UART_SetConfig+0x1d0>
 800505c:	e012      	b.n	8005084 <UART_SetConfig+0x1e8>
 800505e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005062:	d006      	beq.n	8005072 <UART_SetConfig+0x1d6>
 8005064:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005068:	d009      	beq.n	800507e <UART_SetConfig+0x1e2>
 800506a:	e00b      	b.n	8005084 <UART_SetConfig+0x1e8>
 800506c:	2300      	movs	r3, #0
 800506e:	74fb      	strb	r3, [r7, #19]
 8005070:	e00a      	b.n	8005088 <UART_SetConfig+0x1ec>
 8005072:	2302      	movs	r3, #2
 8005074:	74fb      	strb	r3, [r7, #19]
 8005076:	e007      	b.n	8005088 <UART_SetConfig+0x1ec>
 8005078:	2304      	movs	r3, #4
 800507a:	74fb      	strb	r3, [r7, #19]
 800507c:	e004      	b.n	8005088 <UART_SetConfig+0x1ec>
 800507e:	2308      	movs	r3, #8
 8005080:	74fb      	strb	r3, [r7, #19]
 8005082:	e001      	b.n	8005088 <UART_SetConfig+0x1ec>
 8005084:	2310      	movs	r3, #16
 8005086:	74fb      	strb	r3, [r7, #19]
 8005088:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a4d      	ldr	r2, [pc, #308]	; (80051c4 <UART_SetConfig+0x328>)
 8005090:	4293      	cmp	r3, r2
 8005092:	f040 80ec 	bne.w	800526e <UART_SetConfig+0x3d2>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]

    switch (clocksource)
 800509a:	7cfb      	ldrb	r3, [r7, #19]
 800509c:	2b08      	cmp	r3, #8
 800509e:	d824      	bhi.n	80050ea <UART_SetConfig+0x24e>
 80050a0:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <UART_SetConfig+0x20c>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050cd 	.word	0x080050cd
 80050ac:	080050eb 	.word	0x080050eb
 80050b0:	080050d5 	.word	0x080050d5
 80050b4:	080050eb 	.word	0x080050eb
 80050b8:	080050db 	.word	0x080050db
 80050bc:	080050eb 	.word	0x080050eb
 80050c0:	080050eb 	.word	0x080050eb
 80050c4:	080050eb 	.word	0x080050eb
 80050c8:	080050e3 	.word	0x080050e3
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 80050cc:	f7fe fc0c 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 80050d0:	6178      	str	r0, [r7, #20]
      break;
 80050d2:	e00d      	b.n	80050f0 <UART_SetConfig+0x254>
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 80050d4:	4b40      	ldr	r3, [pc, #256]	; (80051d8 <UART_SetConfig+0x33c>)
 80050d6:	617b      	str	r3, [r7, #20]
      break;
 80050d8:	e00a      	b.n	80050f0 <UART_SetConfig+0x254>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 80050da:	f7fe faff 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 80050de:	6178      	str	r0, [r7, #20]
      break;
 80050e0:	e006      	b.n	80050f0 <UART_SetConfig+0x254>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 80050e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e6:	617b      	str	r3, [r7, #20]
      break;
 80050e8:	e002      	b.n	80050f0 <UART_SetConfig+0x254>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	73fb      	strb	r3, [r7, #15]
      break;
 80050ee:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 8199 	beq.w	800542a <UART_SetConfig+0x58e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	441a      	add	r2, r3
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	429a      	cmp	r2, r3
 8005106:	d805      	bhi.n	8005114 <UART_SetConfig+0x278>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	429a      	cmp	r2, r3
 8005112:	d202      	bcs.n	800511a <UART_SetConfig+0x27e>
      {
        ret = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
 8005118:	e187      	b.n	800542a <UART_SetConfig+0x58e>
      }
      else
      {
        switch (clocksource)
 800511a:	7cfb      	ldrb	r3, [r7, #19]
 800511c:	2b08      	cmp	r3, #8
 800511e:	f200 8093 	bhi.w	8005248 <UART_SetConfig+0x3ac>
 8005122:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <UART_SetConfig+0x28c>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	0800514d 	.word	0x0800514d
 800512c:	08005249 	.word	0x08005249
 8005130:	0800518d 	.word	0x0800518d
 8005134:	08005249 	.word	0x08005249
 8005138:	080051e1 	.word	0x080051e1
 800513c:	08005249 	.word	0x08005249
 8005140:	08005249 	.word	0x08005249
 8005144:	08005249 	.word	0x08005249
 8005148:	0800521f 	.word	0x0800521f
        {
        case UART_CLOCKSOURCE_PCLK1:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800514c:	f7fe fbcc 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 8005150:	4603      	mov	r3, r0
 8005152:	f04f 0400 	mov.w	r4, #0
 8005156:	ea4f 2904 	mov.w	r9, r4, lsl #8
 800515a:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 800515e:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	f04f 0400 	mov.w	r4, #0
 800516c:	eb18 0003 	adds.w	r0, r8, r3
 8005170:	eb49 0104 	adc.w	r1, r9, r4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f04f 0400 	mov.w	r4, #0
 800517c:	461a      	mov	r2, r3
 800517e:	4623      	mov	r3, r4
 8005180:	f7fb f82e 	bl	80001e0 <__aeabi_uldivmod>
 8005184:	4603      	mov	r3, r0
 8005186:	460c      	mov	r4, r1
 8005188:	617b      	str	r3, [r7, #20]
          break;
 800518a:	e060      	b.n	800524e <UART_SetConfig+0x3b2>
        case UART_CLOCKSOURCE_HSI:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	f04f 0400 	mov.w	r4, #0
 8005196:	4911      	ldr	r1, [pc, #68]	; (80051dc <UART_SetConfig+0x340>)
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	eb13 0801 	adds.w	r8, r3, r1
 80051a0:	eb44 0902 	adc.w	r9, r4, r2
 80051a4:	4640      	mov	r0, r8
 80051a6:	4649      	mov	r1, r9
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f04f 0400 	mov.w	r4, #0
 80051b0:	461a      	mov	r2, r3
 80051b2:	4623      	mov	r3, r4
 80051b4:	f7fb f814 	bl	80001e0 <__aeabi_uldivmod>
 80051b8:	4603      	mov	r3, r0
 80051ba:	460c      	mov	r4, r1
 80051bc:	617b      	str	r3, [r7, #20]
          break;
 80051be:	e046      	b.n	800524e <UART_SetConfig+0x3b2>
 80051c0:	efff69f3 	.word	0xefff69f3
 80051c4:	40008000 	.word	0x40008000
 80051c8:	40013800 	.word	0x40013800
 80051cc:	40021000 	.word	0x40021000
 80051d0:	40004400 	.word	0x40004400
 80051d4:	40004800 	.word	0x40004800
 80051d8:	00f42400 	.word	0x00f42400
 80051dc:	f4240000 	.word	0xf4240000
        case UART_CLOCKSOURCE_SYSCLK:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80051e0:	f7fe fa7c 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 80051e4:	4603      	mov	r3, r0
 80051e6:	461a      	mov	r2, r3
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	021d      	lsls	r5, r3, #8
 80051ee:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80051f2:	0214      	lsls	r4, r2, #8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	461a      	mov	r2, r3
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	18a0      	adds	r0, r4, r2
 8005202:	eb45 0103 	adc.w	r1, r5, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f04f 0400 	mov.w	r4, #0
 800520e:	461a      	mov	r2, r3
 8005210:	4623      	mov	r3, r4
 8005212:	f7fa ffe5 	bl	80001e0 <__aeabi_uldivmod>
 8005216:	4603      	mov	r3, r0
 8005218:	460c      	mov	r4, r1
 800521a:	617b      	str	r3, [r7, #20]
          break;
 800521c:	e017      	b.n	800524e <UART_SetConfig+0x3b2>
        case UART_CLOCKSOURCE_LSE:
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	f04f 0400 	mov.w	r4, #0
 8005228:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800522c:	f144 0100 	adc.w	r1, r4, #0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f04f 0400 	mov.w	r4, #0
 8005238:	461a      	mov	r2, r3
 800523a:	4623      	mov	r3, r4
 800523c:	f7fa ffd0 	bl	80001e0 <__aeabi_uldivmod>
 8005240:	4603      	mov	r3, r0
 8005242:	460c      	mov	r4, r1
 8005244:	617b      	str	r3, [r7, #20]
          break;
 8005246:	e002      	b.n	800524e <UART_SetConfig+0x3b2>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
          ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
          break;
 800524c:	bf00      	nop
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005254:	d308      	bcc.n	8005268 <UART_SetConfig+0x3cc>
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800525c:	d204      	bcs.n	8005268 <UART_SetConfig+0x3cc>
        {
           huart->Instance->BRR = tmpreg;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	e0e0      	b.n	800542a <UART_SetConfig+0x58e>
        }
        else
        {
          ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	73fb      	strb	r3, [r7, #15]
 800526c:	e0dd      	b.n	800542a <UART_SetConfig+0x58e>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005276:	d16e      	bne.n	8005356 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8005278:	7cfb      	ldrb	r3, [r7, #19]
 800527a:	2b08      	cmp	r3, #8
 800527c:	d856      	bhi.n	800532c <UART_SetConfig+0x490>
 800527e:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x3e8>)
 8005280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052c5 	.word	0x080052c5
 800528c:	080052e1 	.word	0x080052e1
 8005290:	0800532d 	.word	0x0800532d
 8005294:	080052fb 	.word	0x080052fb
 8005298:	0800532d 	.word	0x0800532d
 800529c:	0800532d 	.word	0x0800532d
 80052a0:	0800532d 	.word	0x0800532d
 80052a4:	08005317 	.word	0x08005317
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80052a8:	f7fe fb1e 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 80052ac:	4603      	mov	r3, r0
 80052ae:	005a      	lsls	r2, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	441a      	add	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c0:	823b      	strh	r3, [r7, #16]
      break;
 80052c2:	e036      	b.n	8005332 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80052c4:	f7fe fb32 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 80052c8:	4603      	mov	r3, r0
 80052ca:	005a      	lsls	r2, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	085b      	lsrs	r3, r3, #1
 80052d2:	441a      	add	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052dc:	823b      	strh	r3, [r7, #16]
      break;
 80052de:	e028      	b.n	8005332 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_HSI:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80052ea:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6852      	ldr	r2, [r2, #4]
 80052f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80052f6:	823b      	strh	r3, [r7, #16]
      break;
 80052f8:	e01b      	b.n	8005332 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80052fa:	f7fe f9ef 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 80052fe:	4603      	mov	r3, r0
 8005300:	005a      	lsls	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	085b      	lsrs	r3, r3, #1
 8005308:	441a      	add	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005312:	823b      	strh	r3, [r7, #16]
      break;
 8005314:	e00d      	b.n	8005332 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	085b      	lsrs	r3, r3, #1
 800531c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	823b      	strh	r3, [r7, #16]
      break;
 800532a:	e002      	b.n	8005332 <UART_SetConfig+0x496>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
      break;
 8005330:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 8005332:	8a3b      	ldrh	r3, [r7, #16]
 8005334:	f023 030f 	bic.w	r3, r3, #15
 8005338:	81bb      	strh	r3, [r7, #12]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 800533a:	8a3b      	ldrh	r3, [r7, #16]
 800533c:	105b      	asrs	r3, r3, #1
 800533e:	b29b      	uxth	r3, r3
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	b29a      	uxth	r2, r3
 8005346:	89bb      	ldrh	r3, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	81bb      	strh	r3, [r7, #12]
    huart->Instance->BRR = brrtemp;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	89ba      	ldrh	r2, [r7, #12]
 8005352:	60da      	str	r2, [r3, #12]
 8005354:	e069      	b.n	800542a <UART_SetConfig+0x58e>
  }
  else
  {
    switch (clocksource)
 8005356:	7cfb      	ldrb	r3, [r7, #19]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d863      	bhi.n	8005424 <UART_SetConfig+0x588>
 800535c:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <UART_SetConfig+0x4c8>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	08005389 	.word	0x08005389
 8005368:	080053a9 	.word	0x080053a9
 800536c:	080053c9 	.word	0x080053c9
 8005370:	08005425 	.word	0x08005425
 8005374:	080053e9 	.word	0x080053e9
 8005378:	08005425 	.word	0x08005425
 800537c:	08005425 	.word	0x08005425
 8005380:	08005425 	.word	0x08005425
 8005384:	08005409 	.word	0x08005409
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681c      	ldr	r4, [r3, #0]
 800538c:	f7fe faac 	bl	80038e8 <HAL_RCC_GetPCLK1Freq>
 8005390:	4602      	mov	r2, r0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	441a      	add	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	60e3      	str	r3, [r4, #12]
      break;
 80053a6:	e040      	b.n	800542a <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681c      	ldr	r4, [r3, #0]
 80053ac:	f7fe fabe 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 80053b0:	4602      	mov	r2, r0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	60e3      	str	r3, [r4, #12]
      break;
 80053c6:	e030      	b.n	800542a <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_HSI:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	085b      	lsrs	r3, r3, #1
 80053d2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80053d6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	6849      	ldr	r1, [r1, #4]
 80053de:	fbb3 f3f1 	udiv	r3, r3, r1
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	60d3      	str	r3, [r2, #12]
      break;
 80053e6:	e020      	b.n	800542a <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681c      	ldr	r4, [r3, #0]
 80053ec:	f7fe f976 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 80053f0:	4602      	mov	r2, r0
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	441a      	add	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	b29b      	uxth	r3, r3
 8005404:	60e3      	str	r3, [r4, #12]
      break;
 8005406:	e010      	b.n	800542a <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6852      	ldr	r2, [r2, #4]
 8005410:	0852      	lsrs	r2, r2, #1
 8005412:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6852      	ldr	r2, [r2, #4]
 800541a:	fbb1 f2f2 	udiv	r2, r1, r2
 800541e:	b292      	uxth	r2, r2
 8005420:	60da      	str	r2, [r3, #12]
      break;
 8005422:	e002      	b.n	800542a <UART_SetConfig+0x58e>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	73fb      	strb	r3, [r7, #15]
      break;
 8005428:	bf00      	nop
    }
  }

  return ret;
 800542a:	7bfb      	ldrb	r3, [r7, #15]

}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005436:	bf00      	nop

08005438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	6852      	ldr	r2, [r2, #4]
 8005456:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	6852      	ldr	r2, [r2, #4]
 8005478:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	6852      	ldr	r2, [r2, #4]
 800549a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	6852      	ldr	r2, [r2, #4]
 80054bc:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054c4:	430a      	orrs	r2, r1
 80054c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	6892      	ldr	r2, [r2, #8]
 80054de:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054e6:	430a      	orrs	r2, r1
 80054e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	6892      	ldr	r2, [r2, #8]
 8005500:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005508:	430a      	orrs	r2, r1
 800550a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01a      	beq.n	800554e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6812      	ldr	r2, [r2, #0]
 8005520:	6852      	ldr	r2, [r2, #4]
 8005522:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005536:	d10a      	bne.n	800554e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	6852      	ldr	r2, [r2, #4]
 8005542:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	6852      	ldr	r2, [r2, #4]
 8005564:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800556c:	430a      	orrs	r2, r1
 800556e:	605a      	str	r2, [r3, #4]
  }
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af02      	add	r7, sp, #8
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800558e:	f7fc faa5 	bl	8001adc <HAL_GetTick>
 8005592:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d10e      	bne.n	80055c0 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f82c 	bl	800560e <UART_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e022      	b.n	8005606 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d10e      	bne.n	80055ec <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f816 	bl	800560e <UART_WaitOnFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e00c      	b.n	8005606 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	603b      	str	r3, [r7, #0]
 800561a:	4613      	mov	r3, r2
 800561c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800561e:	e02c      	b.n	800567a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d028      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <UART_WaitOnFlagUntilTimeout+0x30>
 800562e:	f7fc fa55 	bl	8001adc <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	1ad2      	subs	r2, r2, r3
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	429a      	cmp	r2, r3
 800563c:	d91d      	bls.n	800567a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800564c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	6892      	ldr	r2, [r2, #8]
 8005658:	f022 0201 	bic.w	r2, r2, #1
 800565c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e00f      	b.n	800569a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69da      	ldr	r2, [r3, #28]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	401a      	ands	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	429a      	cmp	r2, r3
 8005688:	bf0c      	ite	eq
 800568a:	2301      	moveq	r3, #1
 800568c:	2300      	movne	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	429a      	cmp	r2, r3
 8005696:	d0c3      	beq.n	8005620 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80056a6:	f001 f90f 	bl	80068c8 <xTaskGetSchedulerState>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d001      	beq.n	80056b4 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80056b0:	f000 fa3c 	bl	8005b2c <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80056b4:	bf00      	nop
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f103 0208 	add.w	r2, r3, #8
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f04f 32ff 	mov.w	r2, #4294967295
 80056d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f103 0208 	add.w	r2, r3, #8
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f103 0208 	add.w	r2, r3, #8
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005712:	b480      	push	{r7}
 8005714:	b085      	sub	sp, #20
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	601a      	str	r2, [r3, #0]
}
 800574e:	bf00      	nop
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d103      	bne.n	800577a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	e00c      	b.n	8005794 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3308      	adds	r3, #8
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	e002      	b.n	8005788 <vListInsert+0x2e>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	429a      	cmp	r2, r3
 8005792:	d9f6      	bls.n	8005782 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	601a      	str	r2, [r3, #0]
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6892      	ldr	r2, [r2, #8]
 80057e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6852      	ldr	r2, [r2, #4]
 80057ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d103      	bne.n	8005800 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	1e5a      	subs	r2, r3, #1
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3b04      	subs	r3, #4
 8005830:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3b04      	subs	r3, #4
 800583e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3b04      	subs	r3, #4
 800584a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800584c:	4a0c      	ldr	r2, [pc, #48]	; (8005880 <pxPortInitialiseStack+0x60>)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3b14      	subs	r3, #20
 8005856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3b04      	subs	r3, #4
 8005862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f06f 0202 	mvn.w	r2, #2
 800586a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3b20      	subs	r3, #32
 8005870:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005872:	68fb      	ldr	r3, [r7, #12]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	08005885 	.word	0x08005885

08005884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <prvTaskExitError+0x38>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d009      	beq.n	80058a8 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	607b      	str	r3, [r7, #4]
 80058a6:	e7fe      	b.n	80058a6 <prvTaskExitError+0x22>
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80058ba:	e7fe      	b.n	80058ba <prvTaskExitError+0x36>
 80058bc:	2000003c 	.word	0x2000003c

080058c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058c0:	4b06      	ldr	r3, [pc, #24]	; (80058dc <pxCurrentTCBConst2>)
 80058c2:	6819      	ldr	r1, [r3, #0]
 80058c4:	6808      	ldr	r0, [r1, #0]
 80058c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ca:	f380 8809 	msr	PSP, r0
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f04f 0000 	mov.w	r0, #0
 80058d6:	f380 8811 	msr	BASEPRI, r0
 80058da:	4770      	bx	lr

080058dc <pxCurrentTCBConst2>:
 80058dc:	20007de8 	.word	0x20007de8
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop

080058e4 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80058e4:	4806      	ldr	r0, [pc, #24]	; (8005900 <prvPortStartFirstTask+0x1c>)
 80058e6:	6800      	ldr	r0, [r0, #0]
 80058e8:	6800      	ldr	r0, [r0, #0]
 80058ea:	f380 8808 	msr	MSP, r0
 80058ee:	b662      	cpsie	i
 80058f0:	b661      	cpsie	f
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	df00      	svc	0
 80058fc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058fe:	bf00      	nop
 8005900:	e000ed08 	.word	0xe000ed08

08005904 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800590a:	4b3b      	ldr	r3, [pc, #236]	; (80059f8 <xPortStartScheduler+0xf4>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a3b      	ldr	r2, [pc, #236]	; (80059fc <xPortStartScheduler+0xf8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d109      	bne.n	8005928 <xPortStartScheduler+0x24>
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	e7fe      	b.n	8005926 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005928:	4b33      	ldr	r3, [pc, #204]	; (80059f8 <xPortStartScheduler+0xf4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a34      	ldr	r2, [pc, #208]	; (8005a00 <xPortStartScheduler+0xfc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d109      	bne.n	8005946 <xPortStartScheduler+0x42>
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	e7fe      	b.n	8005944 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005946:	4b2f      	ldr	r3, [pc, #188]	; (8005a04 <xPortStartScheduler+0x100>)
 8005948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	22ff      	movs	r2, #255	; 0xff
 8005956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005968:	b2da      	uxtb	r2, r3
 800596a:	4b27      	ldr	r3, [pc, #156]	; (8005a08 <xPortStartScheduler+0x104>)
 800596c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800596e:	4b27      	ldr	r3, [pc, #156]	; (8005a0c <xPortStartScheduler+0x108>)
 8005970:	2207      	movs	r2, #7
 8005972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005974:	e009      	b.n	800598a <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005976:	4b25      	ldr	r3, [pc, #148]	; (8005a0c <xPortStartScheduler+0x108>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3b01      	subs	r3, #1
 800597c:	4a23      	ldr	r2, [pc, #140]	; (8005a0c <xPortStartScheduler+0x108>)
 800597e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	b2db      	uxtb	r3, r3
 8005988:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005992:	2b80      	cmp	r3, #128	; 0x80
 8005994:	d0ef      	beq.n	8005976 <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005996:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <xPortStartScheduler+0x108>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	4a1b      	ldr	r2, [pc, #108]	; (8005a0c <xPortStartScheduler+0x108>)
 800599e:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059a0:	4b1a      	ldr	r3, [pc, #104]	; (8005a0c <xPortStartScheduler+0x108>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059a8:	4a18      	ldr	r2, [pc, #96]	; (8005a0c <xPortStartScheduler+0x108>)
 80059aa:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059b4:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <xPortStartScheduler+0x10c>)
 80059b6:	4b16      	ldr	r3, [pc, #88]	; (8005a10 <xPortStartScheduler+0x10c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059be:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059c0:	4a13      	ldr	r2, [pc, #76]	; (8005a10 <xPortStartScheduler+0x10c>)
 80059c2:	4b13      	ldr	r3, [pc, #76]	; (8005a10 <xPortStartScheduler+0x10c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059ca:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059cc:	f000 f8d2 	bl	8005b74 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059d0:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <xPortStartScheduler+0x110>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059d6:	f000 f8e9 	bl	8005bac <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059da:	4a0f      	ldr	r2, [pc, #60]	; (8005a18 <xPortStartScheduler+0x114>)
 80059dc:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <xPortStartScheduler+0x114>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059e4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059e6:	f7ff ff7d 	bl	80058e4 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80059ea:	f7ff ff4b 	bl	8005884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	e000ed00 	.word	0xe000ed00
 80059fc:	410fc271 	.word	0x410fc271
 8005a00:	410fc270 	.word	0x410fc270
 8005a04:	e000e400 	.word	0xe000e400
 8005a08:	200000c8 	.word	0x200000c8
 8005a0c:	200000cc 	.word	0x200000cc
 8005a10:	e000ed20 	.word	0xe000ed20
 8005a14:	2000003c 	.word	0x2000003c
 8005a18:	e000ef34 	.word	0xe000ef34

08005a1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a34:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <vPortEnterCritical+0x54>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	4a0d      	ldr	r2, [pc, #52]	; (8005a70 <vPortEnterCritical+0x54>)
 8005a3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a3e:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <vPortEnterCritical+0x54>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d10e      	bne.n	8005a64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <vPortEnterCritical+0x58>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d009      	beq.n	8005a64 <vPortEnterCritical+0x48>
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	603b      	str	r3, [r7, #0]
 8005a62:	e7fe      	b.n	8005a62 <vPortEnterCritical+0x46>
	}
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	2000003c 	.word	0x2000003c
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <vPortExitCritical+0x4c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <vPortExitCritical+0x22>
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	e7fe      	b.n	8005a98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005a9a:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <vPortExitCritical+0x4c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	4a08      	ldr	r2, [pc, #32]	; (8005ac4 <vPortExitCritical+0x4c>)
 8005aa2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005aa4:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <vPortExitCritical+0x4c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d104      	bne.n	8005ab6 <vPortExitCritical+0x3e>
 8005aac:	2300      	movs	r3, #0
 8005aae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	2000003c 	.word	0x2000003c

08005ac8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ac8:	f3ef 8009 	mrs	r0, PSP
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	4b14      	ldr	r3, [pc, #80]	; (8005b24 <pxCurrentTCBConst>)
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	f01e 0f10 	tst.w	lr, #16
 8005ad8:	bf08      	it	eq
 8005ada:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ade:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae2:	6010      	str	r0, [r2, #0]
 8005ae4:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005ae8:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005aec:	f380 8811 	msr	BASEPRI, r0
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f000 fd02 	bl	8006500 <vTaskSwitchContext>
 8005afc:	f04f 0000 	mov.w	r0, #0
 8005b00:	f380 8811 	msr	BASEPRI, r0
 8005b04:	bc08      	pop	{r3}
 8005b06:	6819      	ldr	r1, [r3, #0]
 8005b08:	6808      	ldr	r0, [r1, #0]
 8005b0a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0e:	f01e 0f10 	tst.w	lr, #16
 8005b12:	bf08      	it	eq
 8005b14:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b18:	f380 8809 	msr	PSP, r0
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop

08005b24 <pxCurrentTCBConst>:
 8005b24:	20007de8 	.word	0x20007de8
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop

08005b2c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
	__asm volatile
 8005b32:	f3ef 8211 	mrs	r2, BASEPRI
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	60fa      	str	r2, [r7, #12]
 8005b48:	60bb      	str	r3, [r7, #8]
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b4a:	f000 fc1b 	bl	8006384 <xTaskIncrementTick>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b54:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <xPortSysTickHandler+0x44>)
 8005b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	607b      	str	r3, [r7, #4]
	__asm volatile
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
}
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b78:	4a08      	ldr	r2, [pc, #32]	; (8005b9c <vPortSetupTimerInterrupt+0x28>)
 8005b7a:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <vPortSetupTimerInterrupt+0x2c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4909      	ldr	r1, [pc, #36]	; (8005ba4 <vPortSetupTimerInterrupt+0x30>)
 8005b80:	fba1 1303 	umull	r1, r3, r1, r3
 8005b84:	099b      	lsrs	r3, r3, #6
 8005b86:	3b01      	subs	r3, #1
 8005b88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <vPortSetupTimerInterrupt+0x34>)
 8005b8c:	2207      	movs	r2, #7
 8005b8e:	601a      	str	r2, [r3, #0]
}
 8005b90:	bf00      	nop
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	e000e014 	.word	0xe000e014
 8005ba0:	20000044 	.word	0x20000044
 8005ba4:	10624dd3 	.word	0x10624dd3
 8005ba8:	e000e010 	.word	0xe000e010

08005bac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bbc <vPortEnableVFP+0x10>
 8005bb0:	6801      	ldr	r1, [r0, #0]
 8005bb2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bb6:	6001      	str	r1, [r0, #0]
 8005bb8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bba:	bf00      	nop
 8005bbc:	e000ed88 	.word	0xe000ed88

08005bc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005bcc:	f000 fb38 	bl	8006240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005bd0:	4b57      	ldr	r3, [pc, #348]	; (8005d30 <pvPortMalloc+0x170>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005bd8:	f000 f90c 	bl	8005df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bdc:	4b55      	ldr	r3, [pc, #340]	; (8005d34 <pvPortMalloc+0x174>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f040 808c 	bne.w	8005d02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01c      	beq.n	8005c2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005bf0:	2208      	movs	r2, #8
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d013      	beq.n	8005c2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f023 0307 	bic.w	r3, r3, #7
 8005c08:	3308      	adds	r3, #8
 8005c0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <pvPortMalloc+0x6a>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	e7fe      	b.n	8005c28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d068      	beq.n	8005d02 <pvPortMalloc+0x142>
 8005c30:	4b41      	ldr	r3, [pc, #260]	; (8005d38 <pvPortMalloc+0x178>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d863      	bhi.n	8005d02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c3a:	4b40      	ldr	r3, [pc, #256]	; (8005d3c <pvPortMalloc+0x17c>)
 8005c3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c3e:	4b3f      	ldr	r3, [pc, #252]	; (8005d3c <pvPortMalloc+0x17c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c44:	e004      	b.n	8005c50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d203      	bcs.n	8005c62 <pvPortMalloc+0xa2>
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f1      	bne.n	8005c46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c62:	4b33      	ldr	r3, [pc, #204]	; (8005d30 <pvPortMalloc+0x170>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d04a      	beq.n	8005d02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2208      	movs	r2, #8
 8005c72:	4413      	add	r3, r2
 8005c74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	1ad2      	subs	r2, r2, r3
 8005c86:	2308      	movs	r3, #8
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d91e      	bls.n	8005ccc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4413      	add	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d009      	beq.n	8005cb4 <pvPortMalloc+0xf4>
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	e7fe      	b.n	8005cb2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	1ad2      	subs	r2, r2, r3
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cc6:	69b8      	ldr	r0, [r7, #24]
 8005cc8:	f000 f8f6 	bl	8005eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ccc:	4b1a      	ldr	r3, [pc, #104]	; (8005d38 <pvPortMalloc+0x178>)
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	4a18      	ldr	r2, [pc, #96]	; (8005d38 <pvPortMalloc+0x178>)
 8005cd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cda:	4b17      	ldr	r3, [pc, #92]	; (8005d38 <pvPortMalloc+0x178>)
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4b18      	ldr	r3, [pc, #96]	; (8005d40 <pvPortMalloc+0x180>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d203      	bcs.n	8005cee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ce6:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <pvPortMalloc+0x178>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <pvPortMalloc+0x180>)
 8005cec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	4b10      	ldr	r3, [pc, #64]	; (8005d34 <pvPortMalloc+0x174>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d02:	f000 faab 	bl	800625c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d009      	beq.n	8005d24 <pvPortMalloc+0x164>
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	e7fe      	b.n	8005d22 <pvPortMalloc+0x162>
	return pvReturn;
 8005d24:	69fb      	ldr	r3, [r7, #28]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3728      	adds	r7, #40	; 0x28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20007dd8 	.word	0x20007dd8
 8005d34:	20007de4 	.word	0x20007de4
 8005d38:	20007ddc 	.word	0x20007ddc
 8005d3c:	20007dd0 	.word	0x20007dd0
 8005d40:	20007de0 	.word	0x20007de0

08005d44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d046      	beq.n	8005de4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d56:	2308      	movs	r3, #8
 8005d58:	425b      	negs	r3, r3
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	4b20      	ldr	r3, [pc, #128]	; (8005dec <vPortFree+0xa8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d109      	bne.n	8005d86 <vPortFree+0x42>
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e7fe      	b.n	8005d84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <vPortFree+0x5e>
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	e7fe      	b.n	8005da0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	4b11      	ldr	r3, [pc, #68]	; (8005dec <vPortFree+0xa8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d019      	beq.n	8005de4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d115      	bne.n	8005de4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <vPortFree+0xa8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	401a      	ands	r2, r3
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005dc8:	f000 fa3a 	bl	8006240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <vPortFree+0xac>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	4a06      	ldr	r2, [pc, #24]	; (8005df0 <vPortFree+0xac>)
 8005dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dda:	6938      	ldr	r0, [r7, #16]
 8005ddc:	f000 f86c 	bl	8005eb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005de0:	f000 fa3c 	bl	800625c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005de4:	bf00      	nop
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	20007de4 	.word	0x20007de4
 8005df0:	20007ddc 	.word	0x20007ddc

08005df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dfa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e00:	4b27      	ldr	r3, [pc, #156]	; (8005ea0 <prvHeapInit+0xac>)
 8005e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00c      	beq.n	8005e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3307      	adds	r3, #7
 8005e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0307 	bic.w	r3, r3, #7
 8005e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	4a1f      	ldr	r2, [pc, #124]	; (8005ea0 <prvHeapInit+0xac>)
 8005e24:	4413      	add	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e2c:	4a1d      	ldr	r2, [pc, #116]	; (8005ea4 <prvHeapInit+0xb0>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e32:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <prvHeapInit+0xb0>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e40:	2208      	movs	r2, #8
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0307 	bic.w	r3, r3, #7
 8005e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4a15      	ldr	r2, [pc, #84]	; (8005ea8 <prvHeapInit+0xb4>)
 8005e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e56:	4b14      	ldr	r3, [pc, #80]	; (8005ea8 <prvHeapInit+0xb4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e5e:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <prvHeapInit+0xb4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	1ad2      	subs	r2, r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e74:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <prvHeapInit+0xb4>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <prvHeapInit+0xb8>)
 8005e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <prvHeapInit+0xbc>)
 8005e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e8c:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <prvHeapInit+0xc0>)
 8005e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e92:	601a      	str	r2, [r3, #0]
}
 8005e94:	bf00      	nop
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	200000d0 	.word	0x200000d0
 8005ea4:	20007dd0 	.word	0x20007dd0
 8005ea8:	20007dd8 	.word	0x20007dd8
 8005eac:	20007de0 	.word	0x20007de0
 8005eb0:	20007ddc 	.word	0x20007ddc
 8005eb4:	20007de4 	.word	0x20007de4

08005eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ec0:	4b28      	ldr	r3, [pc, #160]	; (8005f64 <prvInsertBlockIntoFreeList+0xac>)
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	e002      	b.n	8005ecc <prvInsertBlockIntoFreeList+0x14>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d3f7      	bcc.n	8005ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	441a      	add	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d108      	bne.n	8005efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	441a      	add	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	441a      	add	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d118      	bne.n	8005f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	4b15      	ldr	r3, [pc, #84]	; (8005f68 <prvInsertBlockIntoFreeList+0xb0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d00d      	beq.n	8005f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e008      	b.n	8005f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <prvInsertBlockIntoFreeList+0xb0>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	e003      	b.n	8005f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d002      	beq.n	8005f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	20007dd0 	.word	0x20007dd0
 8005f68:	20007dd8 	.word	0x20007dd8

08005f6c <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08c      	sub	sp, #48	; 0x30
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d109      	bne.n	8005f96 <xTaskGenericCreate+0x2a>
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	e7fe      	b.n	8005f94 <xTaskGenericCreate+0x28>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	2b06      	cmp	r3, #6
 8005f9a:	d909      	bls.n	8005fb0 <xTaskGenericCreate+0x44>
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	e7fe      	b.n	8005fae <xTaskGenericCreate+0x42>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fc1b 	bl	80067f0 <prvAllocateTCBAndStack>
 8005fba:	6238      	str	r0, [r7, #32]

	if( pxNewTCB != NULL )
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d078      	beq.n	80060b4 <xTaskGenericCreate+0x148>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	61fb      	str	r3, [r7, #28]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f023 0307 	bic.w	r3, r3, #7
 8005fda:	61fb      	str	r3, [r7, #28]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d009      	beq.n	8005ffa <xTaskGenericCreate+0x8e>
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	e7fe      	b.n	8005ff8 <xTaskGenericCreate+0x8c>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	6a38      	ldr	r0, [r7, #32]
 8006006:	f000 faed 	bl	80065e4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	68f9      	ldr	r1, [r7, #12]
 800600e:	69f8      	ldr	r0, [r7, #28]
 8006010:	f7ff fc06 	bl	8005820 <pxPortInitialiseStack>
 8006014:	4602      	mov	r2, r0
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <xTaskGenericCreate+0xba>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	6a3a      	ldr	r2, [r7, #32]
 8006024:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8006026:	f7ff fcf9 	bl	8005a1c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 800602a:	4b31      	ldr	r3, [pc, #196]	; (80060f0 <xTaskGenericCreate+0x184>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3301      	adds	r3, #1
 8006030:	4a2f      	ldr	r2, [pc, #188]	; (80060f0 <xTaskGenericCreate+0x184>)
 8006032:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8006034:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <xTaskGenericCreate+0x188>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d109      	bne.n	8006050 <xTaskGenericCreate+0xe4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 800603c:	4a2d      	ldr	r2, [pc, #180]	; (80060f4 <xTaskGenericCreate+0x188>)
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006042:	4b2b      	ldr	r3, [pc, #172]	; (80060f0 <xTaskGenericCreate+0x184>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d10f      	bne.n	800606a <xTaskGenericCreate+0xfe>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 800604a:	f000 fb1f 	bl	800668c <prvInitialiseTaskLists>
 800604e:	e00c      	b.n	800606a <xTaskGenericCreate+0xfe>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8006050:	4b29      	ldr	r3, [pc, #164]	; (80060f8 <xTaskGenericCreate+0x18c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d108      	bne.n	800606a <xTaskGenericCreate+0xfe>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8006058:	4b26      	ldr	r3, [pc, #152]	; (80060f4 <xTaskGenericCreate+0x188>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	429a      	cmp	r2, r3
 8006062:	d802      	bhi.n	800606a <xTaskGenericCreate+0xfe>
					{
						pxCurrentTCB = pxNewTCB;
 8006064:	4a23      	ldr	r2, [pc, #140]	; (80060f4 <xTaskGenericCreate+0x188>)
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	6013      	str	r3, [r2, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 800606a:	4b24      	ldr	r3, [pc, #144]	; (80060fc <xTaskGenericCreate+0x190>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3301      	adds	r3, #1
 8006070:	4a22      	ldr	r2, [pc, #136]	; (80060fc <xTaskGenericCreate+0x190>)
 8006072:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006074:	4b21      	ldr	r3, [pc, #132]	; (80060fc <xTaskGenericCreate+0x190>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	645a      	str	r2, [r3, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	2201      	movs	r2, #1
 8006082:	409a      	lsls	r2, r3
 8006084:	4b1e      	ldr	r3, [pc, #120]	; (8006100 <xTaskGenericCreate+0x194>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4313      	orrs	r3, r2
 800608a:	4a1d      	ldr	r2, [pc, #116]	; (8006100 <xTaskGenericCreate+0x194>)
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4a1a      	ldr	r2, [pc, #104]	; (8006104 <xTaskGenericCreate+0x198>)
 800609c:	441a      	add	r2, r3
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	3304      	adds	r3, #4
 80060a2:	4619      	mov	r1, r3
 80060a4:	4610      	mov	r0, r2
 80060a6:	f7ff fb34 	bl	8005712 <vListInsertEnd>

			xReturn = pdPASS;
 80060aa:	2301      	movs	r3, #1
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80060ae:	f7ff fce3 	bl	8005a78 <vPortExitCritical>
 80060b2:	e002      	b.n	80060ba <xTaskGenericCreate+0x14e>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060b4:	f04f 33ff 	mov.w	r3, #4294967295
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d111      	bne.n	80060e4 <xTaskGenericCreate+0x178>
	{
		if( xSchedulerRunning != pdFALSE )
 80060c0:	4b0d      	ldr	r3, [pc, #52]	; (80060f8 <xTaskGenericCreate+0x18c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00d      	beq.n	80060e4 <xTaskGenericCreate+0x178>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80060c8:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <xTaskGenericCreate+0x188>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d207      	bcs.n	80060e4 <xTaskGenericCreate+0x178>
			{
				taskYIELD_IF_USING_PREEMPTION();
 80060d4:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <xTaskGenericCreate+0x19c>)
 80060d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	f3bf 8f6f 	isb	sy
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3728      	adds	r7, #40	; 0x28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20007ee8 	.word	0x20007ee8
 80060f4:	20007de8 	.word	0x20007de8
 80060f8:	20007ef4 	.word	0x20007ef4
 80060fc:	20007f04 	.word	0x20007f04
 8006100:	20007ef0 	.word	0x20007ef0
 8006104:	20007dec 	.word	0x20007dec
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d02f      	beq.n	800617e <vTaskDelay+0x72>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800611e:	4b1f      	ldr	r3, [pc, #124]	; (800619c <vTaskDelay+0x90>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d009      	beq.n	800613a <vTaskDelay+0x2e>
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	e7fe      	b.n	8006138 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800613a:	f000 f881 	bl	8006240 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800613e:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <vTaskDelay+0x94>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4413      	add	r3, r2
 8006146:	613b      	str	r3, [r7, #16]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006148:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <vTaskDelay+0x98>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3304      	adds	r3, #4
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fb3c 	bl	80057cc <uxListRemove>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <vTaskDelay+0x66>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800615a:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <vTaskDelay+0x98>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	2201      	movs	r2, #1
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	43da      	mvns	r2, r3
 8006168:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <vTaskDelay+0x9c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4013      	ands	r3, r2
 800616e:	4a0e      	ldr	r2, [pc, #56]	; (80061a8 <vTaskDelay+0x9c>)
 8006170:	6013      	str	r3, [r2, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8006172:	6938      	ldr	r0, [r7, #16]
 8006174:	f000 fb06 	bl	8006784 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006178:	f000 f870 	bl	800625c <xTaskResumeAll>
 800617c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d107      	bne.n	8006194 <vTaskDelay+0x88>
		{
			portYIELD_WITHIN_API();
 8006184:	4b09      	ldr	r3, [pc, #36]	; (80061ac <vTaskDelay+0xa0>)
 8006186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006194:	bf00      	nop
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20007f0c 	.word	0x20007f0c
 80061a0:	20007eec 	.word	0x20007eec
 80061a4:	20007de8 	.word	0x20007de8
 80061a8:	20007ef0 	.word	0x20007ef0
 80061ac:	e000ed04 	.word	0xe000ed04

080061b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 80061b6:	2300      	movs	r3, #0
 80061b8:	9303      	str	r3, [sp, #12]
 80061ba:	2300      	movs	r3, #0
 80061bc:	9302      	str	r3, [sp, #8]
 80061be:	2300      	movs	r3, #0
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	2300      	movs	r3, #0
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	2300      	movs	r3, #0
 80061c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061cc:	4917      	ldr	r1, [pc, #92]	; (800622c <vTaskStartScheduler+0x7c>)
 80061ce:	4818      	ldr	r0, [pc, #96]	; (8006230 <vTaskStartScheduler+0x80>)
 80061d0:	f7ff fecc 	bl	8005f6c <xTaskGenericCreate>
 80061d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d115      	bne.n	8006208 <vTaskStartScheduler+0x58>
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061ee:	4b11      	ldr	r3, [pc, #68]	; (8006234 <vTaskStartScheduler+0x84>)
 80061f0:	f04f 32ff 	mov.w	r2, #4294967295
 80061f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061f6:	4b10      	ldr	r3, [pc, #64]	; (8006238 <vTaskStartScheduler+0x88>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80061fc:	4b0f      	ldr	r3, [pc, #60]	; (800623c <vTaskStartScheduler+0x8c>)
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006202:	f7ff fb7f 	bl	8005904 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8006206:	e00c      	b.n	8006222 <vTaskStartScheduler+0x72>
		configASSERT( xReturn );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d109      	bne.n	8006222 <vTaskStartScheduler+0x72>
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	607b      	str	r3, [r7, #4]
 8006220:	e7fe      	b.n	8006220 <vTaskStartScheduler+0x70>
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	08007f88 	.word	0x08007f88
 8006230:	080065b5 	.word	0x080065b5
 8006234:	20007f08 	.word	0x20007f08
 8006238:	20007ef4 	.word	0x20007ef4
 800623c:	20007eec 	.word	0x20007eec

08006240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006244:	4b04      	ldr	r3, [pc, #16]	; (8006258 <vTaskSuspendAll+0x18>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3301      	adds	r3, #1
 800624a:	4a03      	ldr	r2, [pc, #12]	; (8006258 <vTaskSuspendAll+0x18>)
 800624c:	6013      	str	r3, [r2, #0]
}
 800624e:	bf00      	nop
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	20007f0c 	.word	0x20007f0c

0800625c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8006262:	2300      	movs	r3, #0
 8006264:	60fb      	str	r3, [r7, #12]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006266:	4b3e      	ldr	r3, [pc, #248]	; (8006360 <xTaskResumeAll+0x104>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <xTaskResumeAll+0x26>
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	607b      	str	r3, [r7, #4]
 8006280:	e7fe      	b.n	8006280 <xTaskResumeAll+0x24>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006282:	f7ff fbcb 	bl	8005a1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006286:	4b36      	ldr	r3, [pc, #216]	; (8006360 <xTaskResumeAll+0x104>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3b01      	subs	r3, #1
 800628c:	4a34      	ldr	r2, [pc, #208]	; (8006360 <xTaskResumeAll+0x104>)
 800628e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006290:	4b33      	ldr	r3, [pc, #204]	; (8006360 <xTaskResumeAll+0x104>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d15b      	bne.n	8006350 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006298:	4b32      	ldr	r3, [pc, #200]	; (8006364 <xTaskResumeAll+0x108>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d057      	beq.n	8006350 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062a0:	e02e      	b.n	8006300 <xTaskResumeAll+0xa4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80062a2:	4b31      	ldr	r3, [pc, #196]	; (8006368 <xTaskResumeAll+0x10c>)
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	60bb      	str	r3, [r7, #8]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	3318      	adds	r3, #24
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff fa8c 	bl	80057cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	3304      	adds	r3, #4
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fa87 	bl	80057cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c2:	2201      	movs	r2, #1
 80062c4:	409a      	lsls	r2, r3
 80062c6:	4b29      	ldr	r3, [pc, #164]	; (800636c <xTaskResumeAll+0x110>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	4a27      	ldr	r2, [pc, #156]	; (800636c <xTaskResumeAll+0x110>)
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4a24      	ldr	r2, [pc, #144]	; (8006370 <xTaskResumeAll+0x114>)
 80062de:	441a      	add	r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4619      	mov	r1, r3
 80062e6:	4610      	mov	r0, r2
 80062e8:	f7ff fa13 	bl	8005712 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f0:	4b20      	ldr	r3, [pc, #128]	; (8006374 <xTaskResumeAll+0x118>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d302      	bcc.n	8006300 <xTaskResumeAll+0xa4>
					{
						xYieldPending = pdTRUE;
 80062fa:	4b1f      	ldr	r3, [pc, #124]	; (8006378 <xTaskResumeAll+0x11c>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006300:	4b19      	ldr	r3, [pc, #100]	; (8006368 <xTaskResumeAll+0x10c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1cc      	bne.n	80062a2 <xTaskResumeAll+0x46>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8006308:	4b1c      	ldr	r3, [pc, #112]	; (800637c <xTaskResumeAll+0x120>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d011      	beq.n	8006334 <xTaskResumeAll+0xd8>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8006310:	e00c      	b.n	800632c <xTaskResumeAll+0xd0>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8006312:	f000 f837 	bl	8006384 <xTaskIncrementTick>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <xTaskResumeAll+0xc6>
						{
							xYieldPending = pdTRUE;
 800631c:	4b16      	ldr	r3, [pc, #88]	; (8006378 <xTaskResumeAll+0x11c>)
 800631e:	2201      	movs	r2, #1
 8006320:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8006322:	4b16      	ldr	r3, [pc, #88]	; (800637c <xTaskResumeAll+0x120>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3b01      	subs	r3, #1
 8006328:	4a14      	ldr	r2, [pc, #80]	; (800637c <xTaskResumeAll+0x120>)
 800632a:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800632c:	4b13      	ldr	r3, [pc, #76]	; (800637c <xTaskResumeAll+0x120>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1ee      	bne.n	8006312 <xTaskResumeAll+0xb6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8006334:	4b10      	ldr	r3, [pc, #64]	; (8006378 <xTaskResumeAll+0x11c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d109      	bne.n	8006350 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800633c:	2301      	movs	r3, #1
 800633e:	60fb      	str	r3, [r7, #12]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006340:	4b0f      	ldr	r3, [pc, #60]	; (8006380 <xTaskResumeAll+0x124>)
 8006342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006350:	f7ff fb92 	bl	8005a78 <vPortExitCritical>

	return xAlreadyYielded;
 8006354:	68fb      	ldr	r3, [r7, #12]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20007f0c 	.word	0x20007f0c
 8006364:	20007ee8 	.word	0x20007ee8
 8006368:	20007ea8 	.word	0x20007ea8
 800636c:	20007ef0 	.word	0x20007ef0
 8006370:	20007dec 	.word	0x20007dec
 8006374:	20007de8 	.word	0x20007de8
 8006378:	20007efc 	.word	0x20007efc
 800637c:	20007ef8 	.word	0x20007ef8
 8006380:	e000ed04 	.word	0xe000ed04

08006384 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800638e:	4b51      	ldr	r3, [pc, #324]	; (80064d4 <xTaskIncrementTick+0x150>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 808d 	bne.w	80064b2 <xTaskIncrementTick+0x12e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8006398:	4b4f      	ldr	r3, [pc, #316]	; (80064d8 <xTaskIncrementTick+0x154>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	4a4e      	ldr	r2, [pc, #312]	; (80064d8 <xTaskIncrementTick+0x154>)
 80063a0:	6013      	str	r3, [r2, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80063a2:	4b4d      	ldr	r3, [pc, #308]	; (80064d8 <xTaskIncrementTick+0x154>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d11f      	bne.n	80063ee <xTaskIncrementTick+0x6a>
			{
				taskSWITCH_DELAYED_LISTS();
 80063ae:	4b4b      	ldr	r3, [pc, #300]	; (80064dc <xTaskIncrementTick+0x158>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d009      	beq.n	80063cc <xTaskIncrementTick+0x48>
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	e7fe      	b.n	80063ca <xTaskIncrementTick+0x46>
 80063cc:	4b43      	ldr	r3, [pc, #268]	; (80064dc <xTaskIncrementTick+0x158>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	4b43      	ldr	r3, [pc, #268]	; (80064e0 <xTaskIncrementTick+0x15c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a41      	ldr	r2, [pc, #260]	; (80064dc <xTaskIncrementTick+0x158>)
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4a41      	ldr	r2, [pc, #260]	; (80064e0 <xTaskIncrementTick+0x15c>)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	4b40      	ldr	r3, [pc, #256]	; (80064e4 <xTaskIncrementTick+0x160>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3301      	adds	r3, #1
 80063e6:	4a3f      	ldr	r2, [pc, #252]	; (80064e4 <xTaskIncrementTick+0x160>)
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	f000 fa47 	bl	800687c <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 80063ee:	4b3e      	ldr	r3, [pc, #248]	; (80064e8 <xTaskIncrementTick+0x164>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d34d      	bcc.n	8006494 <xTaskIncrementTick+0x110>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f8:	4b38      	ldr	r3, [pc, #224]	; (80064dc <xTaskIncrementTick+0x158>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <xTaskIncrementTick+0x82>
 8006402:	2301      	movs	r3, #1
 8006404:	e000      	b.n	8006408 <xTaskIncrementTick+0x84>
 8006406:	2300      	movs	r3, #0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <xTaskIncrementTick+0x92>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 800640c:	4b36      	ldr	r3, [pc, #216]	; (80064e8 <xTaskIncrementTick+0x164>)
 800640e:	f04f 32ff 	mov.w	r2, #4294967295
 8006412:	601a      	str	r2, [r3, #0]
						break;
 8006414:	e03e      	b.n	8006494 <xTaskIncrementTick+0x110>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006416:	4b31      	ldr	r3, [pc, #196]	; (80064dc <xTaskIncrementTick+0x158>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	429a      	cmp	r2, r3
 800642c:	d203      	bcs.n	8006436 <xTaskIncrementTick+0xb2>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 800642e:	4a2e      	ldr	r2, [pc, #184]	; (80064e8 <xTaskIncrementTick+0x164>)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6013      	str	r3, [r2, #0]
							break;
 8006434:	e02e      	b.n	8006494 <xTaskIncrementTick+0x110>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	3304      	adds	r3, #4
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff f9c6 	bl	80057cc <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	2b00      	cmp	r3, #0
 8006446:	d004      	beq.n	8006452 <xTaskIncrementTick+0xce>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	3318      	adds	r3, #24
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff f9bd 	bl	80057cc <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	2201      	movs	r2, #1
 8006458:	409a      	lsls	r2, r3
 800645a:	4b24      	ldr	r3, [pc, #144]	; (80064ec <xTaskIncrementTick+0x168>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4313      	orrs	r3, r2
 8006460:	4a22      	ldr	r2, [pc, #136]	; (80064ec <xTaskIncrementTick+0x168>)
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4a1f      	ldr	r2, [pc, #124]	; (80064f0 <xTaskIncrementTick+0x16c>)
 8006472:	441a      	add	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	3304      	adds	r3, #4
 8006478:	4619      	mov	r1, r3
 800647a:	4610      	mov	r0, r2
 800647c:	f7ff f949 	bl	8005712 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006484:	4b1b      	ldr	r3, [pc, #108]	; (80064f4 <xTaskIncrementTick+0x170>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648a:	429a      	cmp	r2, r3
 800648c:	d3b4      	bcc.n	80063f8 <xTaskIncrementTick+0x74>
							{
								xSwitchRequired = pdTRUE;
 800648e:	2301      	movs	r3, #1
 8006490:	617b      	str	r3, [r7, #20]
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006492:	e7b1      	b.n	80063f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006494:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <xTaskIncrementTick+0x170>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649a:	4915      	ldr	r1, [pc, #84]	; (80064f0 <xTaskIncrementTick+0x16c>)
 800649c:	4613      	mov	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d907      	bls.n	80064bc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80064ac:	2301      	movs	r3, #1
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	e004      	b.n	80064bc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80064b2:	4b11      	ldr	r3, [pc, #68]	; (80064f8 <xTaskIncrementTick+0x174>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3301      	adds	r3, #1
 80064b8:	4a0f      	ldr	r2, [pc, #60]	; (80064f8 <xTaskIncrementTick+0x174>)
 80064ba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80064bc:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <xTaskIncrementTick+0x178>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064c8:	697b      	ldr	r3, [r7, #20]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20007f0c 	.word	0x20007f0c
 80064d8:	20007eec 	.word	0x20007eec
 80064dc:	20007ea0 	.word	0x20007ea0
 80064e0:	20007ea4 	.word	0x20007ea4
 80064e4:	20007f00 	.word	0x20007f00
 80064e8:	20007f08 	.word	0x20007f08
 80064ec:	20007ef0 	.word	0x20007ef0
 80064f0:	20007dec 	.word	0x20007dec
 80064f4:	20007de8 	.word	0x20007de8
 80064f8:	20007ef8 	.word	0x20007ef8
 80064fc:	20007efc 	.word	0x20007efc

08006500 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006506:	4b26      	ldr	r3, [pc, #152]	; (80065a0 <vTaskSwitchContext+0xa0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800650e:	4b25      	ldr	r3, [pc, #148]	; (80065a4 <vTaskSwitchContext+0xa4>)
 8006510:	2201      	movs	r2, #1
 8006512:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006514:	e03e      	b.n	8006594 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006516:	4b23      	ldr	r3, [pc, #140]	; (80065a4 <vTaskSwitchContext+0xa4>)
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800651c:	4b22      	ldr	r3, [pc, #136]	; (80065a8 <vTaskSwitchContext+0xa8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	fab3 f383 	clz	r3, r3
 8006528:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800652a:	7afb      	ldrb	r3, [r7, #11]
 800652c:	f1c3 031f 	rsb	r3, r3, #31
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	491e      	ldr	r1, [pc, #120]	; (80065ac <vTaskSwitchContext+0xac>)
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	440b      	add	r3, r1
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <vTaskSwitchContext+0x5a>
	__asm volatile
 8006546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	607b      	str	r3, [r7, #4]
 8006558:	e7fe      	b.n	8006558 <vTaskSwitchContext+0x58>
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4613      	mov	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4a11      	ldr	r2, [pc, #68]	; (80065ac <vTaskSwitchContext+0xac>)
 8006566:	4413      	add	r3, r2
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	605a      	str	r2, [r3, #4]
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	3308      	adds	r3, #8
 800657c:	429a      	cmp	r2, r3
 800657e:	d104      	bne.n	800658a <vTaskSwitchContext+0x8a>
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	605a      	str	r2, [r3, #4]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4a07      	ldr	r2, [pc, #28]	; (80065b0 <vTaskSwitchContext+0xb0>)
 8006592:	6013      	str	r3, [r2, #0]
}
 8006594:	bf00      	nop
 8006596:	371c      	adds	r7, #28
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	20007f0c 	.word	0x20007f0c
 80065a4:	20007efc 	.word	0x20007efc
 80065a8:	20007ef0 	.word	0x20007ef0
 80065ac:	20007dec 	.word	0x20007dec
 80065b0:	20007de8 	.word	0x20007de8

080065b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 80065bc:	f000 f8a6 	bl	800670c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065c0:	4b06      	ldr	r3, [pc, #24]	; (80065dc <prvIdleTask+0x28>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d9f9      	bls.n	80065bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80065c8:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <prvIdleTask+0x2c>)
 80065ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065d8:	e7f0      	b.n	80065bc <prvIdleTask+0x8>
 80065da:	bf00      	nop
 80065dc:	20007dec 	.word	0x20007dec
 80065e0:	e000ed04 	.word	0xe000ed04

080065e4 <prvInitialiseTCBVariables>:

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	e012      	b.n	800661e <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4413      	add	r3, r2
 80065fe:	7819      	ldrb	r1, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	4413      	add	r3, r2
 8006606:	3334      	adds	r3, #52	; 0x34
 8006608:	460a      	mov	r2, r1
 800660a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	4413      	add	r3, r2
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d006      	beq.n	8006626 <prvInitialiseTCBVariables+0x42>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	3301      	adds	r3, #1
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b0f      	cmp	r3, #15
 8006622:	d9e9      	bls.n	80065f8 <prvInitialiseTCBVariables+0x14>
 8006624:	e000      	b.n	8006628 <prvInitialiseTCBVariables+0x44>
		{
			break;
 8006626:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b06      	cmp	r3, #6
 8006634:	d901      	bls.n	800663a <prvInitialiseTCBVariables+0x56>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006636:	2306      	movs	r3, #6
 8006638:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	64da      	str	r2, [r3, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3304      	adds	r3, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff f851 	bl	80056f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3318      	adds	r3, #24
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff f84c 	bl	80056f8 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f1c3 0207 	rsb	r2, r3, #7
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	655a      	str	r2, [r3, #84]	; 0x54
		pxTCB->eNotifyState = eNotWaitingNotification;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8006684:	bf00      	nop
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]
 8006696:	e00c      	b.n	80066b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4a12      	ldr	r2, [pc, #72]	; (80066ec <prvInitialiseTaskLists+0x60>)
 80066a4:	4413      	add	r3, r2
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff f806 	bl	80056b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3301      	adds	r3, #1
 80066b0:	607b      	str	r3, [r7, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b06      	cmp	r3, #6
 80066b6:	d9ef      	bls.n	8006698 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066b8:	480d      	ldr	r0, [pc, #52]	; (80066f0 <prvInitialiseTaskLists+0x64>)
 80066ba:	f7fe fffd 	bl	80056b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066be:	480d      	ldr	r0, [pc, #52]	; (80066f4 <prvInitialiseTaskLists+0x68>)
 80066c0:	f7fe fffa 	bl	80056b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066c4:	480c      	ldr	r0, [pc, #48]	; (80066f8 <prvInitialiseTaskLists+0x6c>)
 80066c6:	f7fe fff7 	bl	80056b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066ca:	480c      	ldr	r0, [pc, #48]	; (80066fc <prvInitialiseTaskLists+0x70>)
 80066cc:	f7fe fff4 	bl	80056b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066d0:	480b      	ldr	r0, [pc, #44]	; (8006700 <prvInitialiseTaskLists+0x74>)
 80066d2:	f7fe fff1 	bl	80056b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066d6:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <prvInitialiseTaskLists+0x78>)
 80066d8:	4a05      	ldr	r2, [pc, #20]	; (80066f0 <prvInitialiseTaskLists+0x64>)
 80066da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066dc:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <prvInitialiseTaskLists+0x7c>)
 80066de:	4a05      	ldr	r2, [pc, #20]	; (80066f4 <prvInitialiseTaskLists+0x68>)
 80066e0:	601a      	str	r2, [r3, #0]
}
 80066e2:	bf00      	nop
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20007dec 	.word	0x20007dec
 80066f0:	20007e78 	.word	0x20007e78
 80066f4:	20007e8c 	.word	0x20007e8c
 80066f8:	20007ea8 	.word	0x20007ea8
 80066fc:	20007ebc 	.word	0x20007ebc
 8006700:	20007ed4 	.word	0x20007ed4
 8006704:	20007ea0 	.word	0x20007ea0
 8006708:	20007ea4 	.word	0x20007ea4

0800670c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8006712:	e028      	b.n	8006766 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8006714:	f7ff fd94 	bl	8006240 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006718:	4b17      	ldr	r3, [pc, #92]	; (8006778 <prvCheckTasksWaitingTermination+0x6c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	bf0c      	ite	eq
 8006720:	2301      	moveq	r3, #1
 8006722:	2300      	movne	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8006728:	f7ff fd98 	bl	800625c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d119      	bne.n	8006766 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8006732:	f7ff f973 	bl	8005a1c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006736:	4b10      	ldr	r3, [pc, #64]	; (8006778 <prvCheckTasksWaitingTermination+0x6c>)
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	3304      	adds	r3, #4
 8006742:	4618      	mov	r0, r3
 8006744:	f7ff f842 	bl	80057cc <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006748:	4b0c      	ldr	r3, [pc, #48]	; (800677c <prvCheckTasksWaitingTermination+0x70>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3b01      	subs	r3, #1
 800674e:	4a0b      	ldr	r2, [pc, #44]	; (800677c <prvCheckTasksWaitingTermination+0x70>)
 8006750:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8006752:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <prvCheckTasksWaitingTermination+0x74>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3b01      	subs	r3, #1
 8006758:	4a09      	ldr	r2, [pc, #36]	; (8006780 <prvCheckTasksWaitingTermination+0x74>)
 800675a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800675c:	f7ff f98c 	bl	8005a78 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8006760:	6838      	ldr	r0, [r7, #0]
 8006762:	f000 f87b 	bl	800685c <prvDeleteTCB>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <prvCheckTasksWaitingTermination+0x74>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1d2      	bne.n	8006714 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20007ebc 	.word	0x20007ebc
 800677c:	20007ee8 	.word	0x20007ee8
 8006780:	20007ed0 	.word	0x20007ed0

08006784 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800678c:	4b13      	ldr	r3, [pc, #76]	; (80067dc <prvAddCurrentTaskToDelayedList+0x58>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8006794:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <prvAddCurrentTaskToDelayedList+0x5c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	429a      	cmp	r2, r3
 800679c:	d209      	bcs.n	80067b2 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800679e:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <prvAddCurrentTaskToDelayedList+0x60>)
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	4b0e      	ldr	r3, [pc, #56]	; (80067dc <prvAddCurrentTaskToDelayedList+0x58>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3304      	adds	r3, #4
 80067a8:	4619      	mov	r1, r3
 80067aa:	4610      	mov	r0, r2
 80067ac:	f7fe ffd5 	bl	800575a <vListInsert>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067b0:	e010      	b.n	80067d4 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <prvAddCurrentTaskToDelayedList+0x64>)
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4b09      	ldr	r3, [pc, #36]	; (80067dc <prvAddCurrentTaskToDelayedList+0x58>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3304      	adds	r3, #4
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f7fe ffcb 	bl	800575a <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 80067c4:	4b09      	ldr	r3, [pc, #36]	; (80067ec <prvAddCurrentTaskToDelayedList+0x68>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d202      	bcs.n	80067d4 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
 80067ce:	4a07      	ldr	r2, [pc, #28]	; (80067ec <prvAddCurrentTaskToDelayedList+0x68>)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6013      	str	r3, [r2, #0]
}
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	20007de8 	.word	0x20007de8
 80067e0:	20007eec 	.word	0x20007eec
 80067e4:	20007ea4 	.word	0x20007ea4
 80067e8:	20007ea0 	.word	0x20007ea0
 80067ec:	20007f08 	.word	0x20007f08

080067f0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	6039      	str	r1, [r7, #0]
 80067fa:	80fb      	strh	r3, [r7, #6]
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <prvAllocateTCBAndStack+0x20>
 8006802:	88fb      	ldrh	r3, [r7, #6]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff f9da 	bl	8005bc0 <pvPortMalloc>
 800680c:	4603      	mov	r3, r0
 800680e:	e000      	b.n	8006812 <prvAllocateTCBAndStack+0x22>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	60bb      	str	r3, [r7, #8]

		if( pxStack != NULL )
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <prvAllocateTCBAndStack+0x48>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800681a:	205c      	movs	r0, #92	; 0x5c
 800681c:	f7ff f9d0 	bl	8005bc0 <pvPortMalloc>
 8006820:	60f8      	str	r0, [r7, #12]

			if( pxNewTCB != NULL )
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <prvAllocateTCBAndStack+0x40>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	631a      	str	r2, [r3, #48]	; 0x30
 800682e:	e005      	b.n	800683c <prvAllocateTCBAndStack+0x4c>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8006830:	68b8      	ldr	r0, [r7, #8]
 8006832:	f7ff fa87 	bl	8005d44 <vPortFree>
 8006836:	e001      	b.n	800683c <prvAllocateTCBAndStack+0x4c>
			}
		}
		else
		{
			pxNewTCB = NULL;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d007      	beq.n	8006852 <prvAllocateTCBAndStack+0x62>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006846:	88fb      	ldrh	r3, [r7, #6]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	461a      	mov	r2, r3
 800684c:	21a5      	movs	r1, #165	; 0xa5
 800684e:	f001 fb87 	bl	8007f60 <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
 8006852:	68fb      	ldr	r3, [r7, #12]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff fa6b 	bl	8005d44 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff fa68 	bl	8005d44 <vPortFree>
	}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006882:	4b0f      	ldr	r3, [pc, #60]	; (80068c0 <prvResetNextTaskUnblockTime+0x44>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <prvResetNextTaskUnblockTime+0x14>
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <prvResetNextTaskUnblockTime+0x16>
 8006890:	2300      	movs	r3, #0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d004      	beq.n	80068a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006896:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <prvResetNextTaskUnblockTime+0x48>)
 8006898:	f04f 32ff 	mov.w	r2, #4294967295
 800689c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800689e:	e008      	b.n	80068b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80068a0:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <prvResetNextTaskUnblockTime+0x44>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	4a05      	ldr	r2, [pc, #20]	; (80068c4 <prvResetNextTaskUnblockTime+0x48>)
 80068b0:	6013      	str	r3, [r2, #0]
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	20007ea0 	.word	0x20007ea0
 80068c4:	20007f08 	.word	0x20007f08

080068c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068ce:	4b0b      	ldr	r3, [pc, #44]	; (80068fc <xTaskGetSchedulerState+0x34>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d102      	bne.n	80068dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068d6:	2301      	movs	r3, #1
 80068d8:	607b      	str	r3, [r7, #4]
 80068da:	e008      	b.n	80068ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068dc:	4b08      	ldr	r3, [pc, #32]	; (8006900 <xTaskGetSchedulerState+0x38>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d102      	bne.n	80068ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068e4:	2302      	movs	r3, #2
 80068e6:	607b      	str	r3, [r7, #4]
 80068e8:	e001      	b.n	80068ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068ea:	2300      	movs	r3, #0
 80068ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068ee:	687b      	ldr	r3, [r7, #4]
	}
 80068f0:	4618      	mov	r0, r3
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	20007ef4 	.word	0x20007ef4
 8006900:	20007f0c 	.word	0x20007f0c

08006904 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006912:	f7ff f883 	bl	8005a1c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
 8006916:	4b39      	ldr	r3, [pc, #228]	; (80069fc <xTaskNotifyWait+0xf8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d03f      	beq.n	80069a4 <xTaskNotifyWait+0xa0>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006924:	4b35      	ldr	r3, [pc, #212]	; (80069fc <xTaskNotifyWait+0xf8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	43d2      	mvns	r2, r2
 800692e:	400a      	ands	r2, r1
 8006930:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8006932:	4b32      	ldr	r3, [pc, #200]	; (80069fc <xTaskNotifyWait+0xf8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d030      	beq.n	80069a4 <xTaskNotifyWait+0xa0>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8006942:	4b2e      	ldr	r3, [pc, #184]	; (80069fc <xTaskNotifyWait+0xf8>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3304      	adds	r3, #4
 8006948:	4618      	mov	r0, r3
 800694a:	f7fe ff3f 	bl	80057cc <uxListRemove>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10b      	bne.n	800696c <xTaskNotifyWait+0x68>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006954:	4b29      	ldr	r3, [pc, #164]	; (80069fc <xTaskNotifyWait+0xf8>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	2201      	movs	r2, #1
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	43da      	mvns	r2, r3
 8006962:	4b27      	ldr	r3, [pc, #156]	; (8006a00 <xTaskNotifyWait+0xfc>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4013      	ands	r3, r2
 8006968:	4a25      	ldr	r2, [pc, #148]	; (8006a00 <xTaskNotifyWait+0xfc>)
 800696a:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d107      	bne.n	8006984 <xTaskNotifyWait+0x80>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8006974:	4b21      	ldr	r3, [pc, #132]	; (80069fc <xTaskNotifyWait+0xf8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3304      	adds	r3, #4
 800697a:	4619      	mov	r1, r3
 800697c:	4821      	ldr	r0, [pc, #132]	; (8006a04 <xTaskNotifyWait+0x100>)
 800697e:	f7fe fec8 	bl	8005712 <vListInsertEnd>
 8006982:	e007      	b.n	8006994 <xTaskNotifyWait+0x90>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 8006984:	4b20      	ldr	r3, [pc, #128]	; (8006a08 <xTaskNotifyWait+0x104>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	4413      	add	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800698e:	6938      	ldr	r0, [r7, #16]
 8006990:	f7ff fef8 	bl	8006784 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006994:	4b1d      	ldr	r3, [pc, #116]	; (8006a0c <xTaskNotifyWait+0x108>)
 8006996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80069a4:	f7ff f868 	bl	8005a78 <vPortExitCritical>

		taskENTER_CRITICAL();
 80069a8:	f7ff f838 	bl	8005a1c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d004      	beq.n	80069bc <xTaskNotifyWait+0xb8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80069b2:	4b12      	ldr	r3, [pc, #72]	; (80069fc <xTaskNotifyWait+0xf8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	601a      	str	r2, [r3, #0]

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 80069bc:	4b0f      	ldr	r3, [pc, #60]	; (80069fc <xTaskNotifyWait+0xf8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d102      	bne.n	80069d0 <xTaskNotifyWait+0xcc>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	e008      	b.n	80069e2 <xTaskNotifyWait+0xde>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80069d0:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <xTaskNotifyWait+0xf8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	43d2      	mvns	r2, r2
 80069da:	400a      	ands	r2, r1
 80069dc:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80069de:	2301      	movs	r3, #1
 80069e0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <xTaskNotifyWait+0xf8>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80069ec:	f7ff f844 	bl	8005a78 <vPortExitCritical>

		return xReturn;
 80069f0:	697b      	ldr	r3, [r7, #20]
	}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20007de8 	.word	0x20007de8
 8006a00:	20007ef0 	.word	0x20007ef0
 8006a04:	20007ed4 	.word	0x20007ed4
 8006a08:	20007eec 	.word	0x20007eec
 8006a0c:	e000ed04 	.word	0xe000ed04

08006a10 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08a      	sub	sp, #40	; 0x28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	603b      	str	r3, [r7, #0]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006a20:	2301      	movs	r3, #1
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( xTaskToNotify );
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d109      	bne.n	8006a3e <xTaskGenericNotify+0x2e>
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	e7fe      	b.n	8006a3c <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006a42:	f7fe ffeb 	bl	8005a1c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	601a      	str	r2, [r3, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006a5a:	77fb      	strb	r3, [r7, #31]

			pxTCB->eNotifyState = eNotified;
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d827      	bhi.n	8006aba <xTaskGenericNotify+0xaa>
 8006a6a:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <xTaskGenericNotify+0x60>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006abb 	.word	0x08006abb
 8006a74:	08006a85 	.word	0x08006a85
 8006a78:	08006a93 	.word	0x08006a93
 8006a7c:	08006a9f 	.word	0x08006a9f
 8006a80:	08006aa7 	.word	0x08006aa7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006a90:	e013      	b.n	8006aba <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006a9c:	e00d      	b.n	8006aba <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8006aa4:	e009      	b.n	8006aba <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 8006aa6:	7ffb      	ldrb	r3, [r7, #31]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d003      	beq.n	8006ab4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006ab2:	e001      	b.n	8006ab8 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006ab8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8006aba:	7ffb      	ldrb	r3, [r7, #31]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d138      	bne.n	8006b32 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fe81 	bl	80057cc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	2201      	movs	r2, #1
 8006ad0:	409a      	lsls	r2, r3
 8006ad2:	4b1b      	ldr	r3, [pc, #108]	; (8006b40 <xTaskGenericNotify+0x130>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	4a19      	ldr	r2, [pc, #100]	; (8006b40 <xTaskGenericNotify+0x130>)
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4a16      	ldr	r2, [pc, #88]	; (8006b44 <xTaskGenericNotify+0x134>)
 8006aea:	441a      	add	r2, r3
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4619      	mov	r1, r3
 8006af2:	4610      	mov	r0, r2
 8006af4:	f7fe fe0d 	bl	8005712 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d009      	beq.n	8006b14 <xTaskGenericNotify+0x104>
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	e7fe      	b.n	8006b12 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b18:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <xTaskGenericNotify+0x138>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d907      	bls.n	8006b32 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006b22:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <xTaskGenericNotify+0x13c>)
 8006b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006b32:	f7fe ffa1 	bl	8005a78 <vPortExitCritical>

		return xReturn;
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3728      	adds	r7, #40	; 0x28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20007ef0 	.word	0x20007ef0
 8006b44:	20007dec 	.word	0x20007dec
 8006b48:	20007de8 	.word	0x20007de8
 8006b4c:	e000ed04 	.word	0xe000ed04

08006b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08e      	sub	sp, #56	; 0x38
 8006b54:	af04      	add	r7, sp, #16

	HAL_Init();
 8006b56:	f7fa ff89 	bl	8001a6c <HAL_Init>
	SystemClock_Config();
 8006b5a:	f000 fc3b 	bl	80073d4 <SystemClock_Config>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006b5e:	4a85      	ldr	r2, [pc, #532]	; (8006d74 <main+0x224>)
 8006b60:	4b84      	ldr	r3, [pc, #528]	; (8006d74 <main+0x224>)
 8006b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b64:	f043 0304 	orr.w	r3, r3, #4
 8006b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b6a:	4b82      	ldr	r3, [pc, #520]	; (8006d74 <main+0x224>)
 8006b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	68fb      	ldr	r3, [r7, #12]
	//__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006b76:	4a7f      	ldr	r2, [pc, #508]	; (8006d74 <main+0x224>)
 8006b78:	4b7e      	ldr	r3, [pc, #504]	; (8006d74 <main+0x224>)
 8006b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7c:	f043 0301 	orr.w	r3, r3, #1
 8006b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b82:	4b7c      	ldr	r3, [pc, #496]	; (8006d74 <main+0x224>)
 8006b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	60bb      	str	r3, [r7, #8]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8006b8e:	4a79      	ldr	r2, [pc, #484]	; (8006d74 <main+0x224>)
 8006b90:	4b78      	ldr	r3, [pc, #480]	; (8006d74 <main+0x224>)
 8006b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b94:	f043 0302 	orr.w	r3, r3, #2
 8006b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b9a:	4b76      	ldr	r3, [pc, #472]	; (8006d74 <main+0x224>)
 8006b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	607b      	str	r3, [r7, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8006ba6:	4a73      	ldr	r2, [pc, #460]	; (8006d74 <main+0x224>)
 8006ba8:	4b72      	ldr	r3, [pc, #456]	; (8006d74 <main+0x224>)
 8006baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bac:	f043 0308 	orr.w	r3, r3, #8
 8006bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bb2:	4b70      	ldr	r3, [pc, #448]	; (8006d74 <main+0x224>)
 8006bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	683b      	ldr	r3, [r7, #0]

	c12832_hal_spi_init();
 8006bbe:	f7f9 fc97 	bl	80004f0 <c12832_hal_spi_init>
	c12832_hal_gpio_init();
 8006bc2:	f7f9 fd0b 	bl	80005dc <c12832_hal_gpio_init>


	MX_GPIO_Init();
 8006bc6:	f000 fd95 	bl	80076f4 <MX_GPIO_Init>
	MX_DMA_Init();
 8006bca:	f000 fd8b 	bl	80076e4 <MX_DMA_Init>
	MX_I2C1_Init();
 8006bce:	f000 fc9d 	bl	800750c <MX_I2C1_Init>
	MX_SPI2_Init();
 8006bd2:	f000 fcdb 	bl	800758c <MX_SPI2_Init>
	MX_SPI3_Init();
 8006bd6:	f000 fd17 	bl	8007608 <MX_SPI3_Init>
	MX_USART1_UART_Init();
 8006bda:	f000 fd53 	bl	8007684 <MX_USART1_UART_Init>


	//testLedAndButtones();


	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8006bde:	2200      	movs	r2, #0
 8006be0:	2110      	movs	r1, #16
 8006be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006be6:	f7fb fa3d 	bl	8002064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8006bea:	2200      	movs	r2, #0
 8006bec:	2120      	movs	r1, #32
 8006bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bf2:	f7fb fa37 	bl	8002064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2140      	movs	r1, #64	; 0x40
 8006bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bfe:	f7fb fa31 	bl	8002064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8006c02:	2200      	movs	r2, #0
 8006c04:	2180      	movs	r1, #128	; 0x80
 8006c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c0a:	f7fb fa2b 	bl	8002064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c14:	4858      	ldr	r0, [pc, #352]	; (8006d78 <main+0x228>)
 8006c16:	f7fb fa25 	bl	8002064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c20:	4855      	ldr	r0, [pc, #340]	; (8006d78 <main+0x228>)
 8006c22:	f7fb fa1f 	bl	8002064 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(DISPLAY_BACKLIGHT_GPIO_Port, DISPLAY_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8006c26:	2200      	movs	r2, #0
 8006c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c30:	f7fb fa18 	bl	8002064 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c34:	f107 0310 	add.w	r3, r7, #16
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	605a      	str	r2, [r3, #4]
 8006c3e:	609a      	str	r2, [r3, #8]
 8006c40:	60da      	str	r2, [r3, #12]
 8006c42:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DISPLAY_BACKLIGHT_Pin;
 8006c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c48:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DISPLAY_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8006c56:	f107 0310 	add.w	r3, r7, #16
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c60:	f7fb f86a 	bl	8001d38 <HAL_GPIO_Init>

	DISPLAY_BACKLIGHT_OFF;
 8006c64:	2200      	movs	r2, #0
 8006c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c6e:	f7fb f9f9 	bl	8002064 <HAL_GPIO_WritePin>

	//HAL_Delay(2000);

	graphic_lcd_initialize ();
 8006c72:	f7f9 fdc1 	bl	80007f8 <graphic_lcd_initialize>
	graphic_lcd_clear_screen ();
 8006c76:	f7f9 fd55 	bl	8000724 <graphic_lcd_clear_screen>
	DISPLAY_BACKLIGHT_ON;
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c84:	f7fb f9ee 	bl	8002064 <HAL_GPIO_WritePin>
	//HAL_Delay(1000);




	Si7006_port_init();
 8006c88:	f000 f89e 	bl	8006dc8 <Si7006_port_init>





	if(Si7006.check_hardware() == SI7006_ERROR){
 8006c8c:	4b3b      	ldr	r3, [pc, #236]	; (8006d7c <main+0x22c>)
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	4798      	blx	r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d105      	bne.n	8006ca4 <main+0x154>
		graphic_lcd_write(0, 0, "Si7006 NOT READY");
 8006c98:	4a39      	ldr	r2, [pc, #228]	; (8006d80 <main+0x230>)
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	f7f9 fd69 	bl	8000774 <graphic_lcd_write>
 8006ca2:	e004      	b.n	8006cae <main+0x15e>
	}else{
		graphic_lcd_write(0, 0, "Si7006 READY");
 8006ca4:	4a37      	ldr	r2, [pc, #220]	; (8006d84 <main+0x234>)
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	2000      	movs	r0, #0
 8006caa:	f7f9 fd63 	bl	8000774 <graphic_lcd_write>
	}


	int x = HAL_I2C_IsDeviceReady(&hi2c1,Si1133DevAddr, 1000, 1000);
 8006cae:	4b36      	ldr	r3, [pc, #216]	; (8006d88 <main+0x238>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	b299      	uxth	r1, r3
 8006cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cbc:	4833      	ldr	r0, [pc, #204]	; (8006d8c <main+0x23c>)
 8006cbe:	f7fb fc79 	bl	80025b4 <HAL_I2C_IsDeviceReady>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
	if(x == HAL_OK) graphic_lcd_write(1, 0, "Si1133 READY");
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d105      	bne.n	8006cd8 <main+0x188>
 8006ccc:	4a30      	ldr	r2, [pc, #192]	; (8006d90 <main+0x240>)
 8006cce:	2100      	movs	r1, #0
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	f7f9 fd4f 	bl	8000774 <graphic_lcd_write>
 8006cd6:	e004      	b.n	8006ce2 <main+0x192>
	else graphic_lcd_write(1, 0, "Si1133 NOT READY");
 8006cd8:	4a2e      	ldr	r2, [pc, #184]	; (8006d94 <main+0x244>)
 8006cda:	2100      	movs	r1, #0
 8006cdc:	2001      	movs	r0, #1
 8006cde:	f7f9 fd49 	bl	8000774 <graphic_lcd_write>



	HAL_Delay(3000);
 8006ce2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006ce6:	f7fa ff05 	bl	8001af4 <HAL_Delay>
	graphic_lcd_clear_screen ();
 8006cea:	f7f9 fd1b 	bl	8000724 <graphic_lcd_clear_screen>

#if(TX_NODE == 1)

	//testLedAndButtones();
	//xTaskCreate(xRadio,(signed portCHAR *) "t1", 500, NULL, tskIDLE_PRIORITY, &xRadioHandle );
	xTaskCreate(xGLCD,(signed portCHAR *) "t3", 500, NULL, tskIDLE_PRIORITY, &xGLCDHandle );
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9303      	str	r3, [sp, #12]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	9302      	str	r3, [sp, #8]
 8006cf6:	4b28      	ldr	r3, [pc, #160]	; (8006d98 <main+0x248>)
 8006cf8:	9301      	str	r3, [sp, #4]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006d04:	4925      	ldr	r1, [pc, #148]	; (8006d9c <main+0x24c>)
 8006d06:	4826      	ldr	r0, [pc, #152]	; (8006da0 <main+0x250>)
 8006d08:	f7ff f930 	bl	8005f6c <xTaskGenericCreate>
	xTaskCreate(xNotification,(signed portCHAR *) "t4", 200, NULL, tskIDLE_PRIORITY, &xNotificationHandle );
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9303      	str	r3, [sp, #12]
 8006d10:	2300      	movs	r3, #0
 8006d12:	9302      	str	r3, [sp, #8]
 8006d14:	4b23      	ldr	r3, [pc, #140]	; (8006da4 <main+0x254>)
 8006d16:	9301      	str	r3, [sp, #4]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	22c8      	movs	r2, #200	; 0xc8
 8006d20:	4921      	ldr	r1, [pc, #132]	; (8006da8 <main+0x258>)
 8006d22:	4822      	ldr	r0, [pc, #136]	; (8006dac <main+0x25c>)
 8006d24:	f7ff f922 	bl	8005f6c <xTaskGenericCreate>
	xTaskCreate(xPC,(signed portCHAR *) "t5", 1000, NULL, tskIDLE_PRIORITY, &xPCHandle );
 8006d28:	2300      	movs	r3, #0
 8006d2a:	9303      	str	r3, [sp, #12]
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	9302      	str	r3, [sp, #8]
 8006d30:	4b1f      	ldr	r3, [pc, #124]	; (8006db0 <main+0x260>)
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	2300      	movs	r3, #0
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d3e:	491d      	ldr	r1, [pc, #116]	; (8006db4 <main+0x264>)
 8006d40:	481d      	ldr	r0, [pc, #116]	; (8006db8 <main+0x268>)
 8006d42:	f7ff f913 	bl	8005f6c <xTaskGenericCreate>
	xTaskCreate(xButtons,(signed portCHAR *) "t6", 500, NULL, tskIDLE_PRIORITY, &xButtonsHandle );
 8006d46:	2300      	movs	r3, #0
 8006d48:	9303      	str	r3, [sp, #12]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9302      	str	r3, [sp, #8]
 8006d4e:	4b1b      	ldr	r3, [pc, #108]	; (8006dbc <main+0x26c>)
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	2300      	movs	r3, #0
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	2300      	movs	r3, #0
 8006d58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006d5c:	4918      	ldr	r1, [pc, #96]	; (8006dc0 <main+0x270>)
 8006d5e:	4819      	ldr	r0, [pc, #100]	; (8006dc4 <main+0x274>)
 8006d60:	f7ff f904 	bl	8005f6c <xTaskGenericCreate>
	//xTaskCreate(xTxNode,(signed portCHAR *) "t7", 1000, NULL, tskIDLE_PRIORITY, &xTxNodeHandle );

	vTaskStartScheduler();
 8006d64:	f7ff fa24 	bl	80061b0 <vTaskStartScheduler>

	return 0;
 8006d68:	2300      	movs	r3, #0

	}



}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3728      	adds	r7, #40	; 0x28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	40021000 	.word	0x40021000
 8006d78:	48000400 	.word	0x48000400
 8006d7c:	2000808c 	.word	0x2000808c
 8006d80:	08007f90 	.word	0x08007f90
 8006d84:	08007fa4 	.word	0x08007fa4
 8006d88:	20000040 	.word	0x20000040
 8006d8c:	20008040 	.word	0x20008040
 8006d90:	08007fb4 	.word	0x08007fb4
 8006d94:	08007fc4 	.word	0x08007fc4
 8006d98:	20007f10 	.word	0x20007f10
 8006d9c:	08007fd8 	.word	0x08007fd8
 8006da0:	080072ed 	.word	0x080072ed
 8006da4:	20007f14 	.word	0x20007f14
 8006da8:	08007fdc 	.word	0x08007fdc
 8006dac:	08007021 	.word	0x08007021
 8006db0:	20007f18 	.word	0x20007f18
 8006db4:	08007fe0 	.word	0x08007fe0
 8006db8:	08007071 	.word	0x08007071
 8006dbc:	20007f1c 	.word	0x20007f1c
 8006dc0:	08007fe4 	.word	0x08007fe4
 8006dc4:	08007351 	.word	0x08007351

08006dc8 <Si7006_port_init>:





Si7006_error_t Si7006_port_init(void){
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
	Si7006.init = Si7006_port_init;
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <Si7006_port_init+0x34>)
 8006dce:	4a0c      	ldr	r2, [pc, #48]	; (8006e00 <Si7006_port_init+0x38>)
 8006dd0:	601a      	str	r2, [r3, #0]
	Si7006.i2c_init = Si7006_port_i2c_init;
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <Si7006_port_init+0x34>)
 8006dd4:	4a0b      	ldr	r2, [pc, #44]	; (8006e04 <Si7006_port_init+0x3c>)
 8006dd6:	605a      	str	r2, [r3, #4]
	Si7006.i2c_transmit = Si7006_port_i2c_transmit;
 8006dd8:	4b08      	ldr	r3, [pc, #32]	; (8006dfc <Si7006_port_init+0x34>)
 8006dda:	4a0b      	ldr	r2, [pc, #44]	; (8006e08 <Si7006_port_init+0x40>)
 8006ddc:	609a      	str	r2, [r3, #8]
	Si7006.i2c_receive = Si7006_port_i2c_receive;
 8006dde:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <Si7006_port_init+0x34>)
 8006de0:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <Si7006_port_init+0x44>)
 8006de2:	60da      	str	r2, [r3, #12]
	Si7006.check_hardware = Si7006_port_check_hardware;
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <Si7006_port_init+0x34>)
 8006de6:	4a0a      	ldr	r2, [pc, #40]	; (8006e10 <Si7006_port_init+0x48>)
 8006de8:	611a      	str	r2, [r3, #16]
	Si7006.delay = Si7006_port_delay;
 8006dea:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <Si7006_port_init+0x34>)
 8006dec:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <Si7006_port_init+0x4c>)
 8006dee:	615a      	str	r2, [r3, #20]
}
 8006df0:	bf00      	nop
 8006df2:	4618      	mov	r0, r3
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	2000808c 	.word	0x2000808c
 8006e00:	08006dc9 	.word	0x08006dc9
 8006e04:	08006e19 	.word	0x08006e19
 8006e08:	08006e29 	.word	0x08006e29
 8006e0c:	08006e65 	.word	0x08006e65
 8006e10:	08006ea1 	.word	0x08006ea1
 8006e14:	08006ed5 	.word	0x08006ed5

08006e18 <Si7006_port_i2c_init>:
Si7006_error_t Si7006_port_i2c_init(void){
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0

}
 8006e1c:	bf00      	nop
 8006e1e:	4618      	mov	r0, r3
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <Si7006_port_i2c_transmit>:
Si7006_error_t Si7006_port_i2c_transmit(uint8_t *data, unsigned int size){
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1,(0x40<<1) ,data,size, 1000);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	2180      	movs	r1, #128	; 0x80
 8006e42:	4807      	ldr	r0, [pc, #28]	; (8006e60 <Si7006_port_i2c_transmit+0x38>)
 8006e44:	f7fb f9b4 	bl	80021b0 <HAL_I2C_Master_Transmit>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <Si7006_port_i2c_transmit+0x2e>
 8006e52:	2300      	movs	r3, #0
 8006e54:	e000      	b.n	8006e58 <Si7006_port_i2c_transmit+0x30>
	else return SI7006_ERROR;
 8006e56:	2301      	movs	r3, #1
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20008040 	.word	0x20008040

08006e64 <Si7006_port_i2c_receive>:
Si7006_error_t Si7006_port_i2c_receive(uint8_t *data, unsigned int size){
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c1,(0x40<<1) ,data,size, 1000);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	2180      	movs	r1, #128	; 0x80
 8006e7e:	4807      	ldr	r0, [pc, #28]	; (8006e9c <Si7006_port_i2c_receive+0x38>)
 8006e80:	f7fb fa96 	bl	80023b0 <HAL_I2C_Master_Receive>
 8006e84:	4603      	mov	r3, r0
 8006e86:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <Si7006_port_i2c_receive+0x2e>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e000      	b.n	8006e94 <Si7006_port_i2c_receive+0x30>
	else return SI7006_ERROR;
 8006e92:	2301      	movs	r3, #1
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20008040 	.word	0x20008040

08006ea0 <Si7006_port_check_hardware>:
Si7006_error_t Si7006_port_check_hardware(){
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1,(0x40<<1), 1000, 1000);
 8006ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006eae:	2180      	movs	r1, #128	; 0x80
 8006eb0:	4807      	ldr	r0, [pc, #28]	; (8006ed0 <Si7006_port_check_hardware+0x30>)
 8006eb2:	f7fb fb7f 	bl	80025b4 <HAL_I2C_IsDeviceReady>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <Si7006_port_check_hardware+0x24>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	e000      	b.n	8006ec6 <Si7006_port_check_hardware+0x26>
	else return SI7006_ERROR;
 8006ec4:	2301      	movs	r3, #1
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20008040 	.word	0x20008040

08006ed4 <Si7006_port_delay>:
Si7006_error_t Si7006_port_delay(unsigned int ms){
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]

	HAL_Delay(ms);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7fa fe09 	bl	8001af4 <HAL_Delay>
}
 8006ee2:	bf00      	nop
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	0000      	movs	r0, r0
	...

08006ef0 <RadioReset>:
*/




void RadioReset(){
 8006ef0:	b590      	push	{r4, r7, lr}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0

	NRF24L01p_RadioConfig.DataReadyInterruptEnabled = 0;
 8006ef6:	4b48      	ldr	r3, [pc, #288]	; (8007018 <RadioReset+0x128>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	701a      	strb	r2, [r3, #0]
	NRF24L01p_RadioConfig.DataSentInterruptFlagEnabled = 0;
 8006efc:	4b46      	ldr	r3, [pc, #280]	; (8007018 <RadioReset+0x128>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	705a      	strb	r2, [r3, #1]
	NRF24L01p_RadioConfig.MaxRetryInterruptFlagEnabled = 0;
 8006f02:	4b45      	ldr	r3, [pc, #276]	; (8007018 <RadioReset+0x128>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	709a      	strb	r2, [r3, #2]
	NRF24L01p_RadioConfig.Crc = CONFIG_CRC_16BIT;
 8006f08:	4b43      	ldr	r3, [pc, #268]	; (8007018 <RadioReset+0x128>)
 8006f0a:	220c      	movs	r2, #12
 8006f0c:	70da      	strb	r2, [r3, #3]
	NRF24L01p_RadioConfig.AutoReTransmissionCount = 15;
 8006f0e:	4b42      	ldr	r3, [pc, #264]	; (8007018 <RadioReset+0x128>)
 8006f10:	220f      	movs	r2, #15
 8006f12:	711a      	strb	r2, [r3, #4]
	NRF24L01p_RadioConfig.AutoReTransmitDelayX250us = 15;
 8006f14:	4b40      	ldr	r3, [pc, #256]	; (8007018 <RadioReset+0x128>)
 8006f16:	220f      	movs	r2, #15
 8006f18:	715a      	strb	r2, [r3, #5]
	NRF24L01p_RadioConfig.frequencyOffset = 2;
 8006f1a:	4b3f      	ldr	r3, [pc, #252]	; (8007018 <RadioReset+0x128>)
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	719a      	strb	r2, [r3, #6]
	NRF24L01p_RadioConfig.datarate = RF_SETUP_RF_DR_2MBPS;
 8006f20:	4b3d      	ldr	r3, [pc, #244]	; (8007018 <RadioReset+0x128>)
 8006f22:	2208      	movs	r2, #8
 8006f24:	71da      	strb	r2, [r3, #7]
	NRF24L01p_RadioConfig.RfPower = RF_SETUP_RF_PWR_0DBM;
 8006f26:	4b3c      	ldr	r3, [pc, #240]	; (8007018 <RadioReset+0x128>)
 8006f28:	2206      	movs	r2, #6
 8006f2a:	721a      	strb	r2, [r3, #8]
	NRF24L01p_RadioConfig.PllLock = 0;
 8006f2c:	4b3a      	ldr	r3, [pc, #232]	; (8007018 <RadioReset+0x128>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	725a      	strb	r2, [r3, #9]
	NRF24L01p_RadioConfig.ContWaveEnabled = 0;
 8006f32:	4b39      	ldr	r3, [pc, #228]	; (8007018 <RadioReset+0x128>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	729a      	strb	r2, [r3, #10]
	NRF24L01p_RadioConfig.FeatureDynamicPayloadEnabled = 1;
 8006f38:	4b37      	ldr	r3, [pc, #220]	; (8007018 <RadioReset+0x128>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	72da      	strb	r2, [r3, #11]
	NRF24L01p_RadioConfig.FeaturePayloadWithAckEnabled = 1;
 8006f3e:	4b36      	ldr	r3, [pc, #216]	; (8007018 <RadioReset+0x128>)
 8006f40:	2201      	movs	r2, #1
 8006f42:	731a      	strb	r2, [r3, #12]
	NRF24L01p_RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
 8006f44:	4b34      	ldr	r3, [pc, #208]	; (8007018 <RadioReset+0x128>)
 8006f46:	2201      	movs	r2, #1
 8006f48:	735a      	strb	r2, [r3, #13]

    RxPipeConfig[0].address = 0x11223344EE;
 8006f4a:	4a34      	ldr	r2, [pc, #208]	; (800701c <RadioReset+0x12c>)
 8006f4c:	a426      	add	r4, pc, #152	; (adr r4, 8006fe8 <RadioReset+0xf8>)
 8006f4e:	cc18      	ldmia	r4, {r3, r4}
 8006f50:	e9c2 3402 	strd	r3, r4, [r2, #8]
    RxPipeConfig[1].address = 0x9A4524CE01;
 8006f54:	4a31      	ldr	r2, [pc, #196]	; (800701c <RadioReset+0x12c>)
 8006f56:	a426      	add	r4, pc, #152	; (adr r4, 8006ff0 <RadioReset+0x100>)
 8006f58:	cc18      	ldmia	r4, {r3, r4}
 8006f5a:	e9c2 3408 	strd	r3, r4, [r2, #32]
    RxPipeConfig[2].address = 0x9A4524CE02;
 8006f5e:	4a2f      	ldr	r2, [pc, #188]	; (800701c <RadioReset+0x12c>)
 8006f60:	a425      	add	r4, pc, #148	; (adr r4, 8006ff8 <RadioReset+0x108>)
 8006f62:	cc18      	ldmia	r4, {r3, r4}
 8006f64:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    RxPipeConfig[3].address = 0x9A4524CE03;
 8006f68:	4a2c      	ldr	r2, [pc, #176]	; (800701c <RadioReset+0x12c>)
 8006f6a:	a425      	add	r4, pc, #148	; (adr r4, 8007000 <RadioReset+0x110>)
 8006f6c:	cc18      	ldmia	r4, {r3, r4}
 8006f6e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    RxPipeConfig[4].address = 0x9A4524CE04;
 8006f72:	4a2a      	ldr	r2, [pc, #168]	; (800701c <RadioReset+0x12c>)
 8006f74:	a424      	add	r4, pc, #144	; (adr r4, 8007008 <RadioReset+0x118>)
 8006f76:	cc18      	ldmia	r4, {r3, r4}
 8006f78:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    RxPipeConfig[5].address = 0x9A4524CE05;
 8006f7c:	4a27      	ldr	r2, [pc, #156]	; (800701c <RadioReset+0x12c>)
 8006f7e:	a424      	add	r4, pc, #144	; (adr r4, 8007010 <RadioReset+0x120>)
 8006f80:	cc18      	ldmia	r4, {r3, r4}
 8006f82:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80


	int i;
	for(i=0;i<6;i++){
 8006f86:	2300      	movs	r3, #0
 8006f88:	607b      	str	r3, [r7, #4]
 8006f8a:	e01f      	b.n	8006fcc <RadioReset+0xdc>
		RxPipeConfig[i].PipeEnabled = 1;
 8006f8c:	4923      	ldr	r1, [pc, #140]	; (800701c <RadioReset+0x12c>)
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	4613      	mov	r3, r2
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	4413      	add	r3, r2
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	440b      	add	r3, r1
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	701a      	strb	r2, [r3, #0]
		RxPipeConfig[i].autoAckEnabled = 1;
 8006f9e:	491f      	ldr	r1, [pc, #124]	; (800701c <RadioReset+0x12c>)
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	4413      	add	r3, r2
 8006fa8:	00db      	lsls	r3, r3, #3
 8006faa:	440b      	add	r3, r1
 8006fac:	3301      	adds	r3, #1
 8006fae:	2201      	movs	r2, #1
 8006fb0:	701a      	strb	r2, [r3, #0]
		RxPipeConfig[i].dynamicPayloadEnabled = 1;
 8006fb2:	491a      	ldr	r1, [pc, #104]	; (800701c <RadioReset+0x12c>)
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	4413      	add	r3, r2
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	440b      	add	r3, r1
 8006fc0:	3311      	adds	r3, #17
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	701a      	strb	r2, [r3, #0]
	for(i=0;i<6;i++){
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	607b      	str	r3, [r7, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b05      	cmp	r3, #5
 8006fd0:	dddc      	ble.n	8006f8c <RadioReset+0x9c>
	}


	NRF24L01p_ResetConfigValues(&NRF24L01p_RadioConfig, RxPipeConfig);
 8006fd2:	4912      	ldr	r1, [pc, #72]	; (800701c <RadioReset+0x12c>)
 8006fd4:	4810      	ldr	r0, [pc, #64]	; (8007018 <RadioReset+0x128>)
 8006fd6:	f7f9 fd1b 	bl	8000a10 <NRF24L01p_ResetConfigValues>
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd90      	pop	{r4, r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	f3af 8000 	nop.w
 8006fe8:	223344ee 	.word	0x223344ee
 8006fec:	00000011 	.word	0x00000011
 8006ff0:	4524ce01 	.word	0x4524ce01
 8006ff4:	0000009a 	.word	0x0000009a
 8006ff8:	4524ce02 	.word	0x4524ce02
 8006ffc:	0000009a 	.word	0x0000009a
 8007000:	4524ce03 	.word	0x4524ce03
 8007004:	0000009a 	.word	0x0000009a
 8007008:	4524ce04 	.word	0x4524ce04
 800700c:	0000009a 	.word	0x0000009a
 8007010:	4524ce05 	.word	0x4524ce05
 8007014:	0000009a 	.word	0x0000009a
 8007018:	20008200 	.word	0x20008200
 800701c:	20007fa8 	.word	0x20007fa8

08007020 <xNotification>:

		}
	}
}

void xNotification( void *pvParameters ){
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifiedValue;
	while(1){

		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 8007028:	f107 020c 	add.w	r2, r7, #12
 800702c:	f04f 33ff 	mov.w	r3, #4294967295
 8007030:	f04f 31ff 	mov.w	r1, #4294967295
 8007034:	2000      	movs	r0, #0
 8007036:	f7ff fc65 	bl	8006904 <xTaskNotifyWait>
 800703a:	4603      	mov	r3, r0
 800703c:	2b01      	cmp	r3, #1
 800703e:	d10e      	bne.n	800705e <xNotification+0x3e>
						//DigitalPin_ClearValue(&led1);
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8007040:	2201      	movs	r2, #1
 8007042:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007046:	4808      	ldr	r0, [pc, #32]	; (8007068 <xNotification+0x48>)
 8007048:	f7fb f80c 	bl	8002064 <HAL_GPIO_WritePin>
						vTaskDelay(200);
 800704c:	20c8      	movs	r0, #200	; 0xc8
 800704e:	f7ff f85d 	bl	800610c <vTaskDelay>
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8007052:	2200      	movs	r2, #0
 8007054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007058:	4803      	ldr	r0, [pc, #12]	; (8007068 <xNotification+0x48>)
 800705a:	f7fb f803 	bl	8002064 <HAL_GPIO_WritePin>

						//DigitalPin_SetValue(&led1);
		}

		vTaskDelay(100);
 800705e:	2064      	movs	r0, #100	; 0x64
 8007060:	f7ff f854 	bl	800610c <vTaskDelay>
		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 8007064:	e7e0      	b.n	8007028 <xNotification+0x8>
 8007066:	bf00      	nop
 8007068:	48000400 	.word	0x48000400
 800706c:	00000000 	.word	0x00000000

08007070 <xPC>:
}




void xPC( void *pvParameters ){
 8007070:	b590      	push	{r4, r7, lr}
 8007072:	b0ab      	sub	sp, #172	; 0xac
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	char cmd[50];
	int CmdSize = 32;
 8007078:	2320      	movs	r3, #32
 800707a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	custom_print("initialization\r\n");
 800707e:	488c      	ldr	r0, [pc, #560]	; (80072b0 <xPC+0x240>)
 8007080:	f000 fbec 	bl	800785c <custom_print>

	RadioReset();
 8007084:	f7ff ff34 	bl	8006ef0 <RadioReset>

	char myMesg[32];

	Rxpayload.UseAck = 1;
 8007088:	4b8a      	ldr	r3, [pc, #552]	; (80072b4 <xPC+0x244>)
 800708a:	2201      	movs	r2, #1
 800708c:	725a      	strb	r2, [r3, #9]


	Rxpayload.address = 0x11223344EE;
 800708e:	4a89      	ldr	r2, [pc, #548]	; (80072b4 <xPC+0x244>)
 8007090:	a485      	add	r4, pc, #532	; (adr r4, 80072a8 <xPC+0x238>)
 8007092:	cc18      	ldmia	r4, {r3, r4}
 8007094:	e882 0018 	stmia.w	r2, {r3, r4}
	Rxpayload.data = (uint8_t*)myMesg;
 8007098:	4a86      	ldr	r2, [pc, #536]	; (80072b4 <xPC+0x244>)
 800709a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800709e:	60d3      	str	r3, [r2, #12]
	Rxpayload.length = strlen(myMesg);
 80070a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7f9 f893 	bl	80001d0 <strlen>
 80070aa:	4602      	mov	r2, r0
 80070ac:	4b81      	ldr	r3, [pc, #516]	; (80072b4 <xPC+0x244>)
 80070ae:	611a      	str	r2, [r3, #16]
	Rxpayload.retransmitCount = 15;
 80070b0:	4b80      	ldr	r3, [pc, #512]	; (80072b4 <xPC+0x244>)
 80070b2:	220f      	movs	r2, #15
 80070b4:	751a      	strb	r2, [r3, #20]


	//////
	/////
	custom_print ("\e[1;32mWlecome Everyone.\r\n\e[0m");
 80070b6:	4880      	ldr	r0, [pc, #512]	; (80072b8 <xPC+0x248>)
 80070b8:	f000 fbd0 	bl	800785c <custom_print>
	custom_print ("\e[1;34mCygning Demo\r\n\e[0m");
 80070bc:	487f      	ldr	r0, [pc, #508]	; (80072bc <xPC+0x24c>)
 80070be:	f000 fbcd 	bl	800785c <custom_print>
    custom_print ("\e[1;35mFYS4260\r\n\e[0m");
 80070c2:	487f      	ldr	r0, [pc, #508]	; (80072c0 <xPC+0x250>)
 80070c4:	f000 fbca 	bl	800785c <custom_print>

    char command[50];
    char commandPtr = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	while(1){

		//custom_print("hello world\b\b\b\r\n");
		//custom_print ("\e[1;30mThis is a gray text.\r\n\e[0m");
		//custom_print ("\e[1;31mThis is a red text.\r\n\e[0m");
		custom_print("\r\n\e[1;32mCygnini>>\e[0m");
 80070ce:	487d      	ldr	r0, [pc, #500]	; (80072c4 <xPC+0x254>)
 80070d0:	f000 fbc4 	bl	800785c <custom_print>
	    //custom_print ("\e[1;36mThis is a cyan text.\r\n\e[0m");
	    //custom_print ("\e[1;37mThis is a white text.\r\n\e[0m");


	    int i = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		char c;
		while(1){
			//c = pc_getc();
			HAL_StatusTypeDef rxerr = HAL_UART_Receive(&huart1, &c, 1, 0);
 80070da:	f107 010b 	add.w	r1, r7, #11
 80070de:	2300      	movs	r3, #0
 80070e0:	2201      	movs	r2, #1
 80070e2:	4879      	ldr	r0, [pc, #484]	; (80072c8 <xPC+0x258>)
 80070e4:	f7fd fe17 	bl	8004d16 <HAL_UART_Receive>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

			if(rxerr == HAL_OK){
 80070ee:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d13a      	bne.n	800716c <xPC+0xfc>
				//printf("%#2x",c);
				if(c == '\r'){
 80070f6:	7afb      	ldrb	r3, [r7, #11]
 80070f8:	2b0d      	cmp	r3, #13
 80070fa:	d113      	bne.n	8007124 <xPC+0xb4>
				   cmd[i] = 0;
 80070fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007100:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007104:	4413      	add	r3, r2
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]
				   if(i>0) break;
 800710a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800710e:	2b00      	cmp	r3, #0
 8007110:	dc7c      	bgt.n	800720c <xPC+0x19c>

				   command[commandPtr] = 0;
 8007112:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007116:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800711a:	4413      	add	r3, r2
 800711c:	2200      	movs	r2, #0
 800711e:	f803 2c9c 	strb.w	r2, [r3, #-156]
 8007122:	e023      	b.n	800716c <xPC+0xfc>
				//	i--;
				//	cmd[i] = 0;
				//	pc_putc(0x7f);
				//}
				else{
					if(i<CmdSize){
 8007124:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007128:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800712c:	429a      	cmp	r2, r3
 800712e:	da1d      	bge.n	800716c <xPC+0xfc>
						pc_putc(c);
 8007130:	7afb      	ldrb	r3, [r7, #11]
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fb80 	bl	8007838 <pc_putc>
						cmd[i] = c;
 8007138:	7af9      	ldrb	r1, [r7, #11]
 800713a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800713e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007142:	4413      	add	r3, r2
 8007144:	460a      	mov	r2, r1
 8007146:	701a      	strb	r2, [r3, #0]
						i++;
 8007148:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800714c:	3301      	adds	r3, #1
 800714e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

						command[commandPtr] = c;
 8007152:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007156:	7afa      	ldrb	r2, [r7, #11]
 8007158:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800715c:	440b      	add	r3, r1
 800715e:	f803 2c9c 	strb.w	r2, [r3, #-156]
						commandPtr++;
 8007162:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007166:	3301      	adds	r3, #1
 8007168:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			}




			if(NRF24L01p_readable()){
 800716c:	f7f9 fd9c 	bl	8000ca8 <NRF24L01p_readable>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0b1      	beq.n	80070da <xPC+0x6a>
				xTaskNotify ( xNotificationHandle, (1<<0), eSetBits);
 8007176:	4b55      	ldr	r3, [pc, #340]	; (80072cc <xPC+0x25c>)
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	2300      	movs	r3, #0
 800717c:	2201      	movs	r2, #1
 800717e:	2101      	movs	r1, #1
 8007180:	f7ff fc46 	bl	8006a10 <xTaskGenericNotify>
				//custom_print("message received\r\n");

				Rxpayload.data = RxData;
 8007184:	4b4b      	ldr	r3, [pc, #300]	; (80072b4 <xPC+0x244>)
 8007186:	4a52      	ldr	r2, [pc, #328]	; (80072d0 <xPC+0x260>)
 8007188:	60da      	str	r2, [r3, #12]

				NRF24L01p_clear_data_ready_flag();
 800718a:	f7fa f9b0 	bl	80014ee <NRF24L01p_clear_data_ready_flag>
				NRF24L01p_readPayload(&Rxpayload);
 800718e:	4849      	ldr	r0, [pc, #292]	; (80072b4 <xPC+0x244>)
 8007190:	f7f9 fde2 	bl	8000d58 <NRF24L01p_readPayload>
				Rxpayload.data[Rxpayload.length] = '\0';
 8007194:	4b47      	ldr	r3, [pc, #284]	; (80072b4 <xPC+0x244>)
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	4b46      	ldr	r3, [pc, #280]	; (80072b4 <xPC+0x244>)
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	4413      	add	r3, r2
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]

				graphic_lcd_write(1, 0, "RECEIVED DATA");
 80071a2:	4a4c      	ldr	r2, [pc, #304]	; (80072d4 <xPC+0x264>)
 80071a4:	2100      	movs	r1, #0
 80071a6:	2001      	movs	r0, #1
 80071a8:	f7f9 fae4 	bl	8000774 <graphic_lcd_write>
				graphic_lcd_write(2, 0, Rxpayload.data);
 80071ac:	4b41      	ldr	r3, [pc, #260]	; (80072b4 <xPC+0x244>)
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	461a      	mov	r2, r3
 80071b2:	2100      	movs	r1, #0
 80071b4:	2002      	movs	r0, #2
 80071b6:	f7f9 fadd 	bl	8000774 <graphic_lcd_write>

				custom_print("\r\n\r\n");
 80071ba:	4847      	ldr	r0, [pc, #284]	; (80072d8 <xPC+0x268>)
 80071bc:	f000 fb4e 	bl	800785c <custom_print>
				custom_print(Rxpayload.data);
 80071c0:	4b3c      	ldr	r3, [pc, #240]	; (80072b4 <xPC+0x244>)
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 fb49 	bl	800785c <custom_print>
				custom_print("\r\n\r\n");
 80071ca:	4843      	ldr	r0, [pc, #268]	; (80072d8 <xPC+0x268>)
 80071cc:	f000 fb46 	bl	800785c <custom_print>

				//xTaskNotify ( xGLCDHandle, (1<<0), eSetBits);
				NRF24L01p_flush_rx();
 80071d0:	f7f9 ffb1 	bl	8001136 <NRF24L01p_flush_rx>


				custom_print("\r\n\e[1;32mCygnini>>\e[0m");
 80071d4:	483b      	ldr	r0, [pc, #236]	; (80072c4 <xPC+0x254>)
 80071d6:	f000 fb41 	bl	800785c <custom_print>


				for(int m=0;m<commandPtr;m++){
 80071da:	2300      	movs	r3, #0
 80071dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071e0:	e00d      	b.n	80071fe <xPC+0x18e>
					pc_putc(command[m]);
 80071e2:	f107 020c 	add.w	r2, r7, #12
 80071e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071ea:	4413      	add	r3, r2
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fb22 	bl	8007838 <pc_putc>
				for(int m=0;m<commandPtr;m++){
 80071f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071f8:	3301      	adds	r3, #1
 80071fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071fe:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8007202:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007206:	429a      	cmp	r2, r3
 8007208:	dceb      	bgt.n	80071e2 <xPC+0x172>
		while(1){
 800720a:	e766      	b.n	80070da <xPC+0x6a>
				   if(i>0) break;
 800720c:	bf00      	nop



		}

		commandPtr = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


		for(int j=0;j<=i;j++){
 8007214:	2300      	movs	r3, #0
 8007216:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800721a:	e010      	b.n	800723e <xPC+0x1ce>
			cmdMsg[j] = cmd[j];
 800721c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007224:	4413      	add	r3, r2
 8007226:	7819      	ldrb	r1, [r3, #0]
 8007228:	4a2c      	ldr	r2, [pc, #176]	; (80072dc <xPC+0x26c>)
 800722a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800722e:	4413      	add	r3, r2
 8007230:	460a      	mov	r2, r1
 8007232:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<=i;j++){
 8007234:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007238:	3301      	adds	r3, #1
 800723a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800723e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007246:	429a      	cmp	r2, r3
 8007248:	dde8      	ble.n	800721c <xPC+0x1ac>

		//custom_print(cmdMsg);
		//custom_print("\r\n");


		sprintf(TxData, cmdMsg);
 800724a:	4924      	ldr	r1, [pc, #144]	; (80072dc <xPC+0x26c>)
 800724c:	4824      	ldr	r0, [pc, #144]	; (80072e0 <xPC+0x270>)
 800724e:	f000 fe21 	bl	8007e94 <siprintf>
		//TxPayload.data = tempString;
		TxPayload.data = TxData;
 8007252:	4b24      	ldr	r3, [pc, #144]	; (80072e4 <xPC+0x274>)
 8007254:	4a22      	ldr	r2, [pc, #136]	; (80072e0 <xPC+0x270>)
 8007256:	60da      	str	r2, [r3, #12]
		TxPayload.UseAck = 1;
 8007258:	4b22      	ldr	r3, [pc, #136]	; (80072e4 <xPC+0x274>)
 800725a:	2201      	movs	r2, #1
 800725c:	725a      	strb	r2, [r3, #9]
		TxPayload.length = strlen(cmdMsg);
 800725e:	481f      	ldr	r0, [pc, #124]	; (80072dc <xPC+0x26c>)
 8007260:	f7f8 ffb6 	bl	80001d0 <strlen>
 8007264:	4602      	mov	r2, r0
 8007266:	4b1f      	ldr	r3, [pc, #124]	; (80072e4 <xPC+0x274>)
 8007268:	611a      	str	r2, [r3, #16]
		//TxPayload.length = strlen(tempString);
		TxPayload.address = 0x11223344EE;
 800726a:	4a1e      	ldr	r2, [pc, #120]	; (80072e4 <xPC+0x274>)
 800726c:	a40e      	add	r4, pc, #56	; (adr r4, 80072a8 <xPC+0x238>)
 800726e:	cc18      	ldmia	r4, {r3, r4}
 8007270:	e882 0018 	stmia.w	r2, {r3, r4}

		NRF24L01p_writePayload(&TxPayload);
 8007274:	481b      	ldr	r0, [pc, #108]	; (80072e4 <xPC+0x274>)
 8007276:	f7f9 fd45 	bl	8000d04 <NRF24L01p_writePayload>

		NRF24L01p_ErrorStatus_t ret = NRF24L01p_TransmitPayload(&TxPayload);
 800727a:	481a      	ldr	r0, [pc, #104]	; (80072e4 <xPC+0x274>)
 800727c:	f7f9 fda6 	bl	8000dcc <NRF24L01p_TransmitPayload>
 8007280:	4603      	mov	r3, r0
 8007282:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92

		if(ret == NRF24L01P_SUCCESS){
 8007286:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800728a:	2b01      	cmp	r3, #1
 800728c:	d002      	beq.n	8007294 <xPC+0x224>

		}
		else{
			custom_print("\t\t\r\n\e[1;31mTransmission Failed\e[0m");
 800728e:	4816      	ldr	r0, [pc, #88]	; (80072e8 <xPC+0x278>)
 8007290:	f000 fae4 	bl	800785c <custom_print>
		}



		NRF24L01p_flush_tx();
 8007294:	f7f9 ff3a 	bl	800110c <NRF24L01p_flush_tx>
		//NRF24L01p_flush_rx();

		HAL_Delay(200);
 8007298:	20c8      	movs	r0, #200	; 0xc8
 800729a:	f7fa fc2b 	bl	8001af4 <HAL_Delay>




		//xTaskNotify ( xGLCDHandle, (1<<0), eSetBits);
		vTaskDelay(100);
 800729e:	2064      	movs	r0, #100	; 0x64
 80072a0:	f7fe ff34 	bl	800610c <vTaskDelay>
	while(1){
 80072a4:	e713      	b.n	80070ce <xPC+0x5e>
 80072a6:	bf00      	nop
 80072a8:	223344ee 	.word	0x223344ee
 80072ac:	00000011 	.word	0x00000011
 80072b0:	08008008 	.word	0x08008008
 80072b4:	20008140 	.word	0x20008140
 80072b8:	0800801c 	.word	0x0800801c
 80072bc:	0800803c 	.word	0x0800803c
 80072c0:	08008058 	.word	0x08008058
 80072c4:	08008070 	.word	0x08008070
 80072c8:	20008190 	.word	0x20008190
 80072cc:	20007f14 	.word	0x20007f14
 80072d0:	20008230 	.word	0x20008230
 80072d4:	08008088 	.word	0x08008088
 80072d8:	08008098 	.word	0x08008098
 80072dc:	200080a4 	.word	0x200080a4
 80072e0:	20008210 	.word	0x20008210
 80072e4:	20008178 	.word	0x20008178
 80072e8:	080080a0 	.word	0x080080a0

080072ec <xGLCD>:
}




void xGLCD( void *pvParameters ){
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08c      	sub	sp, #48	; 0x30
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifiedValue;

	int dataCount = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	char msg[30];
	while(1){

		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 80072f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80072fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007300:	f04f 31ff 	mov.w	r1, #4294967295
 8007304:	2000      	movs	r0, #0
 8007306:	f7ff fafd 	bl	8006904 <xTaskNotifyWait>
 800730a:	4603      	mov	r3, r0
 800730c:	2b01      	cmp	r3, #1
 800730e:	d117      	bne.n	8007340 <xGLCD+0x54>
			dataCount++;
 8007310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007312:	3301      	adds	r3, #1
 8007314:	62fb      	str	r3, [r7, #44]	; 0x2c
			sprintf(msg, "total messages: %d", dataCount);
 8007316:	f107 0308 	add.w	r3, r7, #8
 800731a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800731c:	490a      	ldr	r1, [pc, #40]	; (8007348 <xGLCD+0x5c>)
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fdb8 	bl	8007e94 <siprintf>
			graphic_lcd_clear_screen ();
 8007324:	f7f9 f9fe 	bl	8000724 <graphic_lcd_clear_screen>
			graphic_lcd_write(1, 0, msg);
 8007328:	f107 0308 	add.w	r3, r7, #8
 800732c:	461a      	mov	r2, r3
 800732e:	2100      	movs	r1, #0
 8007330:	2001      	movs	r0, #1
 8007332:	f7f9 fa1f 	bl	8000774 <graphic_lcd_write>
			graphic_lcd_write(3, 0, cmdMsg);
 8007336:	4a05      	ldr	r2, [pc, #20]	; (800734c <xGLCD+0x60>)
 8007338:	2100      	movs	r1, #0
 800733a:	2003      	movs	r0, #3
 800733c:	f7f9 fa1a 	bl	8000774 <graphic_lcd_write>
						//DigitalPin_SetValue(&led1);
		}

		vTaskDelay(100);
 8007340:	2064      	movs	r0, #100	; 0x64
 8007342:	f7fe fee3 	bl	800610c <vTaskDelay>
		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 8007346:	e7d7      	b.n	80072f8 <xGLCD+0xc>
 8007348:	080080c4 	.word	0x080080c4
 800734c:	200080a4 	.word	0x200080a4

08007350 <xButtons>:

	}
}

void xButtons (void *pvParameters) {
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]

	printf("this is button loop\r\n");
 8007358:	4819      	ldr	r0, [pc, #100]	; (80073c0 <xButtons+0x70>)
 800735a:	f000 fdb1 	bl	8007ec0 <puts>
	while(1){
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0){
 800735e:	2101      	movs	r1, #1
 8007360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007364:	f7fa fe66 	bl	8002034 <HAL_GPIO_ReadPin>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d102      	bne.n	8007374 <xButtons+0x24>
			custom_print("you pressed button D\r\n");
 800736e:	4815      	ldr	r0, [pc, #84]	; (80073c4 <xButtons+0x74>)
 8007370:	f000 fa74 	bl	800785c <custom_print>

		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 8007374:	2102      	movs	r1, #2
 8007376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800737a:	f7fa fe5b 	bl	8002034 <HAL_GPIO_ReadPin>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <xButtons+0x3a>
			custom_print("you pressed button C\r\n");
 8007384:	4810      	ldr	r0, [pc, #64]	; (80073c8 <xButtons+0x78>)
 8007386:	f000 fa69 	bl	800785c <custom_print>

		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 0){
 800738a:	2104      	movs	r1, #4
 800738c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007390:	f7fa fe50 	bl	8002034 <HAL_GPIO_ReadPin>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d102      	bne.n	80073a0 <xButtons+0x50>
			custom_print("you pressed button B\r\n");
 800739a:	480c      	ldr	r0, [pc, #48]	; (80073cc <xButtons+0x7c>)
 800739c:	f000 fa5e 	bl	800785c <custom_print>

		}
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0){
 80073a0:	2108      	movs	r1, #8
 80073a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80073a6:	f7fa fe45 	bl	8002034 <HAL_GPIO_ReadPin>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d102      	bne.n	80073b6 <xButtons+0x66>
			custom_print("you pressed button A\r\n");
 80073b0:	4807      	ldr	r0, [pc, #28]	; (80073d0 <xButtons+0x80>)
 80073b2:	f000 fa53 	bl	800785c <custom_print>

		}

		vTaskDelay(200);
 80073b6:	20c8      	movs	r0, #200	; 0xc8
 80073b8:	f7fe fea8 	bl	800610c <vTaskDelay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0){
 80073bc:	e7cf      	b.n	800735e <xButtons+0xe>
 80073be:	bf00      	nop
 80073c0:	080080d8 	.word	0x080080d8
 80073c4:	080080f0 	.word	0x080080f0
 80073c8:	08008108 	.word	0x08008108
 80073cc:	08008120 	.word	0x08008120
 80073d0:	08008138 	.word	0x08008138

080073d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b0ae      	sub	sp, #184	; 0xb8
 80073d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80073da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80073de:	2244      	movs	r2, #68	; 0x44
 80073e0:	2100      	movs	r1, #0
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fdbc 	bl	8007f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	605a      	str	r2, [r3, #4]
 80073f2:	609a      	str	r2, [r3, #8]
 80073f4:	60da      	str	r2, [r3, #12]
 80073f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80073f8:	463b      	mov	r3, r7
 80073fa:	2260      	movs	r2, #96	; 0x60
 80073fc:	2100      	movs	r1, #0
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fdae 	bl	8007f60 <memset>

  /**Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007404:	f7fb fc12 	bl	8002c2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007408:	4a3e      	ldr	r2, [pc, #248]	; (8007504 <SystemClock_Config+0x130>)
 800740a:	4b3e      	ldr	r3, [pc, #248]	; (8007504 <SystemClock_Config+0x130>)
 800740c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007410:	f023 0318 	bic.w	r3, r3, #24
 8007414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8007418:	2314      	movs	r3, #20
 800741a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800741c:	2301      	movs	r3, #1
 800741e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007420:	2301      	movs	r3, #1
 8007422:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 800742c:	2370      	movs	r3, #112	; 0x70
 800742e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007432:	2302      	movs	r3, #2
 8007434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007438:	2301      	movs	r3, #1
 800743a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800743e:	2301      	movs	r3, #1
 8007440:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 36;
 8007444:	2324      	movs	r3, #36	; 0x24
 8007446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800744a:	2307      	movs	r3, #7
 800744c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8007450:	2306      	movs	r3, #6
 8007452:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8007456:	2304      	movs	r3, #4
 8007458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800745c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007460:	4618      	mov	r0, r3
 8007462:	f7fb fc57 	bl	8002d14 <HAL_RCC_OscConfig>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800746c:	f000 fa0c 	bl	8007888 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007470:	230f      	movs	r3, #15
 8007472:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007474:	2303      	movs	r3, #3
 8007476:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007478:	2300      	movs	r3, #0
 800747a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800747c:	2300      	movs	r3, #0
 800747e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007480:	2300      	movs	r3, #0
 8007482:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007484:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007488:	2104      	movs	r1, #4
 800748a:	4618      	mov	r0, r3
 800748c:	f7fc f804 	bl	8003498 <HAL_RCC_ClockConfig>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007496:	f000 f9f7 	bl	8007888 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 800749a:	4b1b      	ldr	r3, [pc, #108]	; (8007508 <SystemClock_Config+0x134>)
 800749c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800749e:	2300      	movs	r3, #0
 80074a0:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80074a2:	2300      	movs	r3, #0
 80074a4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80074a6:	2300      	movs	r3, #0
 80074a8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80074aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80074b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074b4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80074b6:	2301      	movs	r3, #1
 80074b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80074ba:	2301      	movs	r3, #1
 80074bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 26;
 80074be:	231a      	movs	r3, #26
 80074c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80074c2:	2311      	movs	r3, #17
 80074c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80074c6:	2302      	movs	r3, #2
 80074c8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80074ca:	2302      	movs	r3, #2
 80074cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80074ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80074d2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80074d4:	463b      	mov	r3, r7
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fc faac 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80074e2:	f000 f9d1 	bl	8007888 <Error_Handler>
  }
  /**Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80074e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80074ea:	f7fb fbbd 	bl	8002c68 <HAL_PWREx_ControlVoltageScaling>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <SystemClock_Config+0x124>
  {
    Error_Handler();
 80074f4:	f000 f9c8 	bl	8007888 <Error_Handler>
  }
  /**Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80074f8:	f7fc fce2 	bl	8003ec0 <HAL_RCCEx_EnableMSIPLLMode>


}
 80074fc:	bf00      	nop
 80074fe:	37b8      	adds	r7, #184	; 0xb8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	40021000 	.word	0x40021000
 8007508:	00022841 	.word	0x00022841

0800750c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007510:	4b1b      	ldr	r3, [pc, #108]	; (8007580 <MX_I2C1_Init+0x74>)
 8007512:	4a1c      	ldr	r2, [pc, #112]	; (8007584 <MX_I2C1_Init+0x78>)
 8007514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8007516:	4b1a      	ldr	r3, [pc, #104]	; (8007580 <MX_I2C1_Init+0x74>)
 8007518:	4a1b      	ldr	r2, [pc, #108]	; (8007588 <MX_I2C1_Init+0x7c>)
 800751a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800751c:	4b18      	ldr	r3, [pc, #96]	; (8007580 <MX_I2C1_Init+0x74>)
 800751e:	2200      	movs	r2, #0
 8007520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007522:	4b17      	ldr	r3, [pc, #92]	; (8007580 <MX_I2C1_Init+0x74>)
 8007524:	2201      	movs	r2, #1
 8007526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007528:	4b15      	ldr	r3, [pc, #84]	; (8007580 <MX_I2C1_Init+0x74>)
 800752a:	2200      	movs	r2, #0
 800752c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800752e:	4b14      	ldr	r3, [pc, #80]	; (8007580 <MX_I2C1_Init+0x74>)
 8007530:	2200      	movs	r2, #0
 8007532:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007534:	4b12      	ldr	r3, [pc, #72]	; (8007580 <MX_I2C1_Init+0x74>)
 8007536:	2200      	movs	r2, #0
 8007538:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800753a:	4b11      	ldr	r3, [pc, #68]	; (8007580 <MX_I2C1_Init+0x74>)
 800753c:	2200      	movs	r2, #0
 800753e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007540:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <MX_I2C1_Init+0x74>)
 8007542:	2200      	movs	r2, #0
 8007544:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007546:	480e      	ldr	r0, [pc, #56]	; (8007580 <MX_I2C1_Init+0x74>)
 8007548:	f7fa fda4 	bl	8002094 <HAL_I2C_Init>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007552:	f000 f999 	bl	8007888 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007556:	2100      	movs	r1, #0
 8007558:	4809      	ldr	r0, [pc, #36]	; (8007580 <MX_I2C1_Init+0x74>)
 800755a:	f7fb facd 	bl	8002af8 <HAL_I2CEx_ConfigAnalogFilter>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007564:	f000 f990 	bl	8007888 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007568:	2100      	movs	r1, #0
 800756a:	4805      	ldr	r0, [pc, #20]	; (8007580 <MX_I2C1_Init+0x74>)
 800756c:	f7fb fb0f 	bl	8002b8e <HAL_I2CEx_ConfigDigitalFilter>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007576:	f000 f987 	bl	8007888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800757a:	bf00      	nop
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20008040 	.word	0x20008040
 8007584:	40005400 	.word	0x40005400
 8007588:	00702991 	.word	0x00702991

0800758c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007590:	4b1b      	ldr	r3, [pc, #108]	; (8007600 <MX_SPI2_Init+0x74>)
 8007592:	4a1c      	ldr	r2, [pc, #112]	; (8007604 <MX_SPI2_Init+0x78>)
 8007594:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007596:	4b1a      	ldr	r3, [pc, #104]	; (8007600 <MX_SPI2_Init+0x74>)
 8007598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800759c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800759e:	4b18      	ldr	r3, [pc, #96]	; (8007600 <MX_SPI2_Init+0x74>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80075a4:	4b16      	ldr	r3, [pc, #88]	; (8007600 <MX_SPI2_Init+0x74>)
 80075a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80075aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80075ac:	4b14      	ldr	r3, [pc, #80]	; (8007600 <MX_SPI2_Init+0x74>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80075b2:	4b13      	ldr	r3, [pc, #76]	; (8007600 <MX_SPI2_Init+0x74>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80075b8:	4b11      	ldr	r3, [pc, #68]	; (8007600 <MX_SPI2_Init+0x74>)
 80075ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075c0:	4b0f      	ldr	r3, [pc, #60]	; (8007600 <MX_SPI2_Init+0x74>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80075c6:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <MX_SPI2_Init+0x74>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80075cc:	4b0c      	ldr	r3, [pc, #48]	; (8007600 <MX_SPI2_Init+0x74>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075d2:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <MX_SPI2_Init+0x74>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80075d8:	4b09      	ldr	r3, [pc, #36]	; (8007600 <MX_SPI2_Init+0x74>)
 80075da:	2207      	movs	r2, #7
 80075dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80075de:	4b08      	ldr	r3, [pc, #32]	; (8007600 <MX_SPI2_Init+0x74>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80075e4:	4b06      	ldr	r3, [pc, #24]	; (8007600 <MX_SPI2_Init+0x74>)
 80075e6:	2208      	movs	r2, #8
 80075e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80075ea:	4805      	ldr	r0, [pc, #20]	; (8007600 <MX_SPI2_Init+0x74>)
 80075ec:	f7fc fdcc 	bl	8004188 <HAL_SPI_Init>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80075f6:	f000 f947 	bl	8007888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80075fa:	bf00      	nop
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20007f20 	.word	0x20007f20
 8007604:	40003800 	.word	0x40003800

08007608 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800760c:	4b1b      	ldr	r3, [pc, #108]	; (800767c <MX_SPI3_Init+0x74>)
 800760e:	4a1c      	ldr	r2, [pc, #112]	; (8007680 <MX_SPI3_Init+0x78>)
 8007610:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007612:	4b1a      	ldr	r3, [pc, #104]	; (800767c <MX_SPI3_Init+0x74>)
 8007614:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007618:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800761a:	4b18      	ldr	r3, [pc, #96]	; (800767c <MX_SPI3_Init+0x74>)
 800761c:	2200      	movs	r2, #0
 800761e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007620:	4b16      	ldr	r3, [pc, #88]	; (800767c <MX_SPI3_Init+0x74>)
 8007622:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007626:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007628:	4b14      	ldr	r3, [pc, #80]	; (800767c <MX_SPI3_Init+0x74>)
 800762a:	2200      	movs	r2, #0
 800762c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <MX_SPI3_Init+0x74>)
 8007630:	2200      	movs	r2, #0
 8007632:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007634:	4b11      	ldr	r3, [pc, #68]	; (800767c <MX_SPI3_Init+0x74>)
 8007636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800763a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800763c:	4b0f      	ldr	r3, [pc, #60]	; (800767c <MX_SPI3_Init+0x74>)
 800763e:	2200      	movs	r2, #0
 8007640:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007642:	4b0e      	ldr	r3, [pc, #56]	; (800767c <MX_SPI3_Init+0x74>)
 8007644:	2200      	movs	r2, #0
 8007646:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007648:	4b0c      	ldr	r3, [pc, #48]	; (800767c <MX_SPI3_Init+0x74>)
 800764a:	2200      	movs	r2, #0
 800764c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800764e:	4b0b      	ldr	r3, [pc, #44]	; (800767c <MX_SPI3_Init+0x74>)
 8007650:	2200      	movs	r2, #0
 8007652:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007654:	4b09      	ldr	r3, [pc, #36]	; (800767c <MX_SPI3_Init+0x74>)
 8007656:	2207      	movs	r2, #7
 8007658:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800765a:	4b08      	ldr	r3, [pc, #32]	; (800767c <MX_SPI3_Init+0x74>)
 800765c:	2200      	movs	r2, #0
 800765e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007660:	4b06      	ldr	r3, [pc, #24]	; (800767c <MX_SPI3_Init+0x74>)
 8007662:	2208      	movs	r2, #8
 8007664:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007666:	4805      	ldr	r0, [pc, #20]	; (800767c <MX_SPI3_Init+0x74>)
 8007668:	f7fc fd8e 	bl	8004188 <HAL_SPI_Init>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007672:	f000 f909 	bl	8007888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007676:	bf00      	nop
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	200080d8 	.word	0x200080d8
 8007680:	40003c00 	.word	0x40003c00

08007684 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007688:	4b14      	ldr	r3, [pc, #80]	; (80076dc <MX_USART1_UART_Init+0x58>)
 800768a:	4a15      	ldr	r2, [pc, #84]	; (80076e0 <MX_USART1_UART_Init+0x5c>)
 800768c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <MX_USART1_UART_Init+0x58>)
 8007690:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007694:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007696:	4b11      	ldr	r3, [pc, #68]	; (80076dc <MX_USART1_UART_Init+0x58>)
 8007698:	2200      	movs	r2, #0
 800769a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800769c:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <MX_USART1_UART_Init+0x58>)
 800769e:	2200      	movs	r2, #0
 80076a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80076a2:	4b0e      	ldr	r3, [pc, #56]	; (80076dc <MX_USART1_UART_Init+0x58>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80076a8:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <MX_USART1_UART_Init+0x58>)
 80076aa:	220c      	movs	r2, #12
 80076ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80076ae:	4b0b      	ldr	r3, [pc, #44]	; (80076dc <MX_USART1_UART_Init+0x58>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80076b4:	4b09      	ldr	r3, [pc, #36]	; (80076dc <MX_USART1_UART_Init+0x58>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80076ba:	4b08      	ldr	r3, [pc, #32]	; (80076dc <MX_USART1_UART_Init+0x58>)
 80076bc:	2200      	movs	r2, #0
 80076be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80076c0:	4b06      	ldr	r3, [pc, #24]	; (80076dc <MX_USART1_UART_Init+0x58>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80076c6:	4805      	ldr	r0, [pc, #20]	; (80076dc <MX_USART1_UART_Init+0x58>)
 80076c8:	f7fd fa47 	bl	8004b5a <HAL_UART_Init>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80076d2:	f000 f8d9 	bl	8007888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80076d6:	bf00      	nop
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20008190 	.word	0x20008190
 80076e0:	40013800 	.word	0x40013800

080076e4 <MX_DMA_Init>:
  *   hdma_memtomem_dma2_channel1
  *   hdma_memtomem_dma2_channel2
  *   hdma_memtomem_dma1_channel2
  */
static void MX_DMA_Init(void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0


}
 80076e8:	bf00      	nop
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
	...

080076f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076fa:	f107 030c 	add.w	r3, r7, #12
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	605a      	str	r2, [r3, #4]
 8007704:	609a      	str	r2, [r3, #8]
 8007706:	60da      	str	r2, [r3, #12]
 8007708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800770a:	4a47      	ldr	r2, [pc, #284]	; (8007828 <MX_GPIO_Init+0x134>)
 800770c:	4b46      	ldr	r3, [pc, #280]	; (8007828 <MX_GPIO_Init+0x134>)
 800770e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007710:	f043 0301 	orr.w	r3, r3, #1
 8007714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007716:	4b44      	ldr	r3, [pc, #272]	; (8007828 <MX_GPIO_Init+0x134>)
 8007718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	60bb      	str	r3, [r7, #8]
 8007720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007722:	4a41      	ldr	r2, [pc, #260]	; (8007828 <MX_GPIO_Init+0x134>)
 8007724:	4b40      	ldr	r3, [pc, #256]	; (8007828 <MX_GPIO_Init+0x134>)
 8007726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007728:	f043 0304 	orr.w	r3, r3, #4
 800772c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800772e:	4b3e      	ldr	r3, [pc, #248]	; (8007828 <MX_GPIO_Init+0x134>)
 8007730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007732:	f003 0304 	and.w	r3, r3, #4
 8007736:	607b      	str	r3, [r7, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800773a:	4a3b      	ldr	r2, [pc, #236]	; (8007828 <MX_GPIO_Init+0x134>)
 800773c:	4b3a      	ldr	r3, [pc, #232]	; (8007828 <MX_GPIO_Init+0x134>)
 800773e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007740:	f043 0302 	orr.w	r3, r3, #2
 8007744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007746:	4b38      	ldr	r3, [pc, #224]	; (8007828 <MX_GPIO_Init+0x134>)
 8007748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8007752:	2200      	movs	r2, #0
 8007754:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8007758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800775c:	f7fa fc82 	bl	8002064 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8007760:	2200      	movs	r2, #0
 8007762:	f44f 7158 	mov.w	r1, #864	; 0x360
 8007766:	4831      	ldr	r0, [pc, #196]	; (800782c <MX_GPIO_Init+0x138>)
 8007768:	f7fa fc7c 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800776c:	2200      	movs	r2, #0
 800776e:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8007772:	482f      	ldr	r0, [pc, #188]	; (8007830 <MX_GPIO_Init+0x13c>)
 8007774:	f7fa fc76 	bl	8002064 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007778:	230f      	movs	r3, #15
 800777a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800777c:	2300      	movs	r3, #0
 800777e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007784:	f107 030c 	add.w	r3, r7, #12
 8007788:	4619      	mov	r1, r3
 800778a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800778e:	f7fa fad3 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8007792:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8007796:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007798:	2301      	movs	r3, #1
 800779a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800779c:	2300      	movs	r3, #0
 800779e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077a0:	2300      	movs	r3, #0
 80077a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077a4:	f107 030c 	add.w	r3, r7, #12
 80077a8:	4619      	mov	r1, r3
 80077aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077ae:	f7fa fac3 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80077b2:	f44f 7358 	mov.w	r3, #864	; 0x360
 80077b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077b8:	2301      	movs	r3, #1
 80077ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077bc:	2300      	movs	r3, #0
 80077be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077c0:	2300      	movs	r3, #0
 80077c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077c4:	f107 030c 	add.w	r3, r7, #12
 80077c8:	4619      	mov	r1, r3
 80077ca:	4818      	ldr	r0, [pc, #96]	; (800782c <MX_GPIO_Init+0x138>)
 80077cc:	f7fa fab4 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80077d0:	2301      	movs	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80077d4:	4b17      	ldr	r3, [pc, #92]	; (8007834 <MX_GPIO_Init+0x140>)
 80077d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d8:	2300      	movs	r3, #0
 80077da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077dc:	f107 030c 	add.w	r3, r7, #12
 80077e0:	4619      	mov	r1, r3
 80077e2:	4813      	ldr	r0, [pc, #76]	; (8007830 <MX_GPIO_Init+0x13c>)
 80077e4:	f7fa faa8 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 80077e8:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 80077ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077ee:	2301      	movs	r3, #1
 80077f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077f6:	2300      	movs	r3, #0
 80077f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077fa:	f107 030c 	add.w	r3, r7, #12
 80077fe:	4619      	mov	r1, r3
 8007800:	480b      	ldr	r0, [pc, #44]	; (8007830 <MX_GPIO_Init+0x13c>)
 8007802:	f7fa fa99 	bl	8001d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007806:	2380      	movs	r3, #128	; 0x80
 8007808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800780a:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <MX_GPIO_Init+0x140>)
 800780c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007812:	f107 030c 	add.w	r3, r7, #12
 8007816:	4619      	mov	r1, r3
 8007818:	4804      	ldr	r0, [pc, #16]	; (800782c <MX_GPIO_Init+0x138>)
 800781a:	f7fa fa8d 	bl	8001d38 <HAL_GPIO_Init>

}
 800781e:	bf00      	nop
 8007820:	3720      	adds	r7, #32
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	40021000 	.word	0x40021000
 800782c:	48000800 	.word	0x48000800
 8007830:	48000400 	.word	0x48000400
 8007834:	10110000 	.word	0x10110000

08007838 <pc_putc>:




static void pc_putc(char c){
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &c, 1,0xFFFF);
 8007842:	1df9      	adds	r1, r7, #7
 8007844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007848:	2201      	movs	r2, #1
 800784a:	4803      	ldr	r0, [pc, #12]	; (8007858 <pc_putc+0x20>)
 800784c:	f7fd f9d6 	bl	8004bfc <HAL_UART_Transmit>

}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20008190 	.word	0x20008190

0800785c <custom_print>:
	char c;
	HAL_UART_Receive(&huart1, &c, 1, 0);
	return c;
}

static void custom_print(char *str){
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str),0xFFFF);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7f8 fcb3 	bl	80001d0 <strlen>
 800786a:	4603      	mov	r3, r0
 800786c:	b29a      	uxth	r2, r3
 800786e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	4803      	ldr	r0, [pc, #12]	; (8007884 <custom_print+0x28>)
 8007876:	f7fd f9c1 	bl	8004bfc <HAL_UART_Transmit>

}
 800787a:	bf00      	nop
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20008190 	.word	0x20008190

08007888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800788c:	bf00      	nop
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
	...

08007898 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80078d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800789c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800789e:	e003      	b.n	80078a8 <LoopCopyDataInit>

080078a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80078a0:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80078a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80078a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80078a6:	3104      	adds	r1, #4

080078a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80078a8:	480b      	ldr	r0, [pc, #44]	; (80078d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80078aa:	4b0c      	ldr	r3, [pc, #48]	; (80078dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80078ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80078ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80078b0:	d3f6      	bcc.n	80078a0 <CopyDataInit>
	ldr	r2, =_sbss
 80078b2:	4a0b      	ldr	r2, [pc, #44]	; (80078e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80078b4:	e002      	b.n	80078bc <LoopFillZerobss>

080078b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80078b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80078b8:	f842 3b04 	str.w	r3, [r2], #4

080078bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80078bc:	4b09      	ldr	r3, [pc, #36]	; (80078e4 <LoopForever+0x16>)
	cmp	r2, r3
 80078be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80078c0:	d3f9      	bcc.n	80078b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80078c2:	f000 f9d1 	bl	8007c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80078c6:	f000 fb27 	bl	8007f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80078ca:	f7ff f941 	bl	8006b50 <main>

080078ce <LoopForever>:

LoopForever:
    b LoopForever
 80078ce:	e7fe      	b.n	80078ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80078d0:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 80078d4:	08008480 	.word	0x08008480
	ldr	r0, =_sdata
 80078d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80078dc:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 80078e0:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 80078e4:	20008250 	.word	0x20008250

080078e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80078e8:	e7fe      	b.n	80078e8 <ADC1_IRQHandler>
	...

080078ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078f2:	4a12      	ldr	r2, [pc, #72]	; (800793c <HAL_MspInit+0x50>)
 80078f4:	4b11      	ldr	r3, [pc, #68]	; (800793c <HAL_MspInit+0x50>)
 80078f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f8:	f043 0301 	orr.w	r3, r3, #1
 80078fc:	6613      	str	r3, [r2, #96]	; 0x60
 80078fe:	4b0f      	ldr	r3, [pc, #60]	; (800793c <HAL_MspInit+0x50>)
 8007900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	607b      	str	r3, [r7, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800790a:	4a0c      	ldr	r2, [pc, #48]	; (800793c <HAL_MspInit+0x50>)
 800790c:	4b0b      	ldr	r3, [pc, #44]	; (800793c <HAL_MspInit+0x50>)
 800790e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007914:	6593      	str	r3, [r2, #88]	; 0x58
 8007916:	4b09      	ldr	r3, [pc, #36]	; (800793c <HAL_MspInit+0x50>)
 8007918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007922:	2200      	movs	r2, #0
 8007924:	210f      	movs	r1, #15
 8007926:	f06f 0001 	mvn.w	r0, #1
 800792a:	f7fa f9ce 	bl	8001cca <HAL_NVIC_SetPriority>
  HAL_InitTick(15);
 800792e:	200f      	movs	r0, #15
 8007930:	f7fa f8aa 	bl	8001a88 <HAL_InitTick>
  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	40021000 	.word	0x40021000

08007940 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08a      	sub	sp, #40	; 0x28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007948:	f107 0314 	add.w	r3, r7, #20
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	605a      	str	r2, [r3, #4]
 8007952:	609a      	str	r2, [r3, #8]
 8007954:	60da      	str	r2, [r3, #12]
 8007956:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a18      	ldr	r2, [pc, #96]	; (80079c0 <HAL_I2C_MspInit+0x80>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d129      	bne.n	80079b6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007962:	4a18      	ldr	r2, [pc, #96]	; (80079c4 <HAL_I2C_MspInit+0x84>)
 8007964:	4b17      	ldr	r3, [pc, #92]	; (80079c4 <HAL_I2C_MspInit+0x84>)
 8007966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007968:	f043 0301 	orr.w	r3, r3, #1
 800796c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800796e:	4b15      	ldr	r3, [pc, #84]	; (80079c4 <HAL_I2C_MspInit+0x84>)
 8007970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	613b      	str	r3, [r7, #16]
 8007978:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800797a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800797e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007980:	2312      	movs	r3, #18
 8007982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007984:	2301      	movs	r3, #1
 8007986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007988:	2303      	movs	r3, #3
 800798a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800798c:	2304      	movs	r3, #4
 800798e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007990:	f107 0314 	add.w	r3, r7, #20
 8007994:	4619      	mov	r1, r3
 8007996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800799a:	f7fa f9cd 	bl	8001d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800799e:	4a09      	ldr	r2, [pc, #36]	; (80079c4 <HAL_I2C_MspInit+0x84>)
 80079a0:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <HAL_I2C_MspInit+0x84>)
 80079a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079a8:	6593      	str	r3, [r2, #88]	; 0x58
 80079aa:	4b06      	ldr	r3, [pc, #24]	; (80079c4 <HAL_I2C_MspInit+0x84>)
 80079ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80079b6:	bf00      	nop
 80079b8:	3728      	adds	r7, #40	; 0x28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	40005400 	.word	0x40005400
 80079c4:	40021000 	.word	0x40021000

080079c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08c      	sub	sp, #48	; 0x30
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079d0:	f107 031c 	add.w	r3, r7, #28
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	605a      	str	r2, [r3, #4]
 80079da:	609a      	str	r2, [r3, #8]
 80079dc:	60da      	str	r2, [r3, #12]
 80079de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a33      	ldr	r2, [pc, #204]	; (8007ab4 <HAL_SPI_MspInit+0xec>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d129      	bne.n	8007a3e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80079ea:	4a33      	ldr	r2, [pc, #204]	; (8007ab8 <HAL_SPI_MspInit+0xf0>)
 80079ec:	4b32      	ldr	r3, [pc, #200]	; (8007ab8 <HAL_SPI_MspInit+0xf0>)
 80079ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079f4:	6593      	str	r3, [r2, #88]	; 0x58
 80079f6:	4b30      	ldr	r3, [pc, #192]	; (8007ab8 <HAL_SPI_MspInit+0xf0>)
 80079f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a02:	4a2d      	ldr	r2, [pc, #180]	; (8007ab8 <HAL_SPI_MspInit+0xf0>)
 8007a04:	4b2c      	ldr	r3, [pc, #176]	; (8007ab8 <HAL_SPI_MspInit+0xf0>)
 8007a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a08:	f043 0302 	orr.w	r3, r3, #2
 8007a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a0e:	4b2a      	ldr	r3, [pc, #168]	; (8007ab8 <HAL_SPI_MspInit+0xf0>)
 8007a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007a1a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a20:	2302      	movs	r3, #2
 8007a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a24:	2300      	movs	r3, #0
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007a2c:	2305      	movs	r3, #5
 8007a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a30:	f107 031c 	add.w	r3, r7, #28
 8007a34:	4619      	mov	r1, r3
 8007a36:	4821      	ldr	r0, [pc, #132]	; (8007abc <HAL_SPI_MspInit+0xf4>)
 8007a38:	f7fa f97e 	bl	8001d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007a3c:	e035      	b.n	8007aaa <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a1f      	ldr	r2, [pc, #124]	; (8007ac0 <HAL_SPI_MspInit+0xf8>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d130      	bne.n	8007aaa <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007a48:	4a1b      	ldr	r2, [pc, #108]	; (8007ab8 <HAL_SPI_MspInit+0xf0>)
 8007a4a:	4b1b      	ldr	r3, [pc, #108]	; (8007ab8 <HAL_SPI_MspInit+0xf0>)
 8007a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a52:	6593      	str	r3, [r2, #88]	; 0x58
 8007a54:	4b18      	ldr	r3, [pc, #96]	; (8007ab8 <HAL_SPI_MspInit+0xf0>)
 8007a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a5c:	613b      	str	r3, [r7, #16]
 8007a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a60:	4a15      	ldr	r2, [pc, #84]	; (8007ab8 <HAL_SPI_MspInit+0xf0>)
 8007a62:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <HAL_SPI_MspInit+0xf0>)
 8007a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a66:	f043 0304 	orr.w	r3, r3, #4
 8007a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a6c:	4b12      	ldr	r3, [pc, #72]	; (8007ab8 <HAL_SPI_MspInit+0xf0>)
 8007a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007a78:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a86:	2303      	movs	r3, #3
 8007a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007a8a:	2306      	movs	r3, #6
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a8e:	f107 031c 	add.w	r3, r7, #28
 8007a92:	4619      	mov	r1, r3
 8007a94:	480b      	ldr	r0, [pc, #44]	; (8007ac4 <HAL_SPI_MspInit+0xfc>)
 8007a96:	f7fa f94f 	bl	8001d38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2105      	movs	r1, #5
 8007a9e:	2033      	movs	r0, #51	; 0x33
 8007aa0:	f7fa f913 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8007aa4:	2033      	movs	r0, #51	; 0x33
 8007aa6:	f7fa f92c 	bl	8001d02 <HAL_NVIC_EnableIRQ>
}
 8007aaa:	bf00      	nop
 8007aac:	3730      	adds	r7, #48	; 0x30
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	40003800 	.word	0x40003800
 8007ab8:	40021000 	.word	0x40021000
 8007abc:	48000400 	.word	0x48000400
 8007ac0:	40003c00 	.word	0x40003c00
 8007ac4:	48000800 	.word	0x48000800

08007ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	; 0x28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ad0:	f107 0314 	add.w	r3, r7, #20
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	605a      	str	r2, [r3, #4]
 8007ada:	609a      	str	r2, [r3, #8]
 8007adc:	60da      	str	r2, [r3, #12]
 8007ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1b      	ldr	r2, [pc, #108]	; (8007b54 <HAL_UART_MspInit+0x8c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d12f      	bne.n	8007b4a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007aea:	4a1b      	ldr	r2, [pc, #108]	; (8007b58 <HAL_UART_MspInit+0x90>)
 8007aec:	4b1a      	ldr	r3, [pc, #104]	; (8007b58 <HAL_UART_MspInit+0x90>)
 8007aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007af4:	6613      	str	r3, [r2, #96]	; 0x60
 8007af6:	4b18      	ldr	r3, [pc, #96]	; (8007b58 <HAL_UART_MspInit+0x90>)
 8007af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007afe:	613b      	str	r3, [r7, #16]
 8007b00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b02:	4a15      	ldr	r2, [pc, #84]	; (8007b58 <HAL_UART_MspInit+0x90>)
 8007b04:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <HAL_UART_MspInit+0x90>)
 8007b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b08:	f043 0302 	orr.w	r3, r3, #2
 8007b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b0e:	4b12      	ldr	r3, [pc, #72]	; (8007b58 <HAL_UART_MspInit+0x90>)
 8007b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007b1a:	23c0      	movs	r3, #192	; 0xc0
 8007b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b1e:	2302      	movs	r3, #2
 8007b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b26:	2303      	movs	r3, #3
 8007b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007b2a:	2307      	movs	r3, #7
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b2e:	f107 0314 	add.w	r3, r7, #20
 8007b32:	4619      	mov	r1, r3
 8007b34:	4809      	ldr	r0, [pc, #36]	; (8007b5c <HAL_UART_MspInit+0x94>)
 8007b36:	f7fa f8ff 	bl	8001d38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2105      	movs	r1, #5
 8007b3e:	2025      	movs	r0, #37	; 0x25
 8007b40:	f7fa f8c3 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007b44:	2025      	movs	r0, #37	; 0x25
 8007b46:	f7fa f8dc 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007b4a:	bf00      	nop
 8007b4c:	3728      	adds	r7, #40	; 0x28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	40013800 	.word	0x40013800
 8007b58:	40021000 	.word	0x40021000
 8007b5c:	48000400 	.word	0x48000400

08007b60 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007b64:	bf00      	nop
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007b72:	e7fe      	b.n	8007b72 <HardFault_Handler+0x4>

08007b74 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007b78:	e7fe      	b.n	8007b78 <MemManage_Handler+0x4>

08007b7a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007b7e:	e7fe      	b.n	8007b7e <BusFault_Handler+0x4>

08007b80 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007b84:	e7fe      	b.n	8007b84 <UsageFault_Handler+0x4>

08007b86 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8007b86:	b480      	push	{r7}
 8007b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b8a:	bf00      	nop
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8007b98:	f7fd fd83 	bl	80056a2 <osSystickHandler>
  HAL_IncTick();
 8007b9c:	f7f9 ff90 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007ba0:	bf00      	nop
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <TIM1_UP_TIM16_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
*/
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007ba8:	bf00      	nop
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <DMA2_Channel1_IRQHandler>:

/**
* @brief This function handles DMA2 channel1 global interrupt.
*/
void DMA2_Channel1_IRQHandler(void)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8007bb6:	bf00      	nop
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <DMA2_Channel2_IRQHandler>:

/**
* @brief This function handles DMA2 channel2 global interrupt.
*/
void DMA2_Channel2_IRQHandler(void)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8007bc4:	bf00      	nop
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <USB_IRQHandler>:

/**
* @brief This function handles USB event interrupt through EXTI line 17.
*/
void USB_IRQHandler(void)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	af00      	add	r7, sp, #0
  /* USER CODE END USB_IRQn 0 */

  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8007bd2:	bf00      	nop
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007be4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007be8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d013      	beq.n	8007c1c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007bf4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007bf8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007bfc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007c04:	e000      	b.n	8007c08 <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 8007c06:	bf00      	nop
 8007c08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0f9      	beq.n	8007c06 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007c12:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	b2d2      	uxtb	r2, r2
 8007c1a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007c1c:	687b      	ldr	r3, [r7, #4]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <_write>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b086      	sub	sp, #24
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	e009      	b.n	8007c54 <_write+0x2a>
	ITM_SendChar((*ptr++));
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	60ba      	str	r2, [r7, #8]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7ff ffc7 	bl	8007bdc <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	3301      	adds	r3, #1
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	dbf1      	blt.n	8007c40 <_write+0x16>

	return len;
 8007c5c:	687b      	ldr	r3, [r7, #4]

}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007c6c:	4a17      	ldr	r2, [pc, #92]	; (8007ccc <SystemInit+0x64>)
 8007c6e:	4b17      	ldr	r3, [pc, #92]	; (8007ccc <SystemInit+0x64>)
 8007c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007c7c:	4a14      	ldr	r2, [pc, #80]	; (8007cd0 <SystemInit+0x68>)
 8007c7e:	4b14      	ldr	r3, [pc, #80]	; (8007cd0 <SystemInit+0x68>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f043 0301 	orr.w	r3, r3, #1
 8007c86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007c88:	4b11      	ldr	r3, [pc, #68]	; (8007cd0 <SystemInit+0x68>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007c8e:	4a10      	ldr	r2, [pc, #64]	; (8007cd0 <SystemInit+0x68>)
 8007c90:	4b0f      	ldr	r3, [pc, #60]	; (8007cd0 <SystemInit+0x68>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007c98:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007c9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007c9e:	4b0c      	ldr	r3, [pc, #48]	; (8007cd0 <SystemInit+0x68>)
 8007ca0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ca4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007ca6:	4a0a      	ldr	r2, [pc, #40]	; (8007cd0 <SystemInit+0x68>)
 8007ca8:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <SystemInit+0x68>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cb0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007cb2:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <SystemInit+0x68>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007cb8:	4b04      	ldr	r3, [pc, #16]	; (8007ccc <SystemInit+0x64>)
 8007cba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007cbe:	609a      	str	r2, [r3, #8]
#endif
}
 8007cc0:	bf00      	nop
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	e000ed00 	.word	0xe000ed00
 8007cd0:	40021000 	.word	0x40021000

08007cd4 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
	int div = 1;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8007ce4:	e004      	b.n	8007cf0 <ts_itoa+0x1c>
		div *= base;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	fb02 f303 	mul.w	r3, r2, r3
 8007cee:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d2f3      	bcs.n	8007ce6 <ts_itoa+0x12>

	while (div != 0)
 8007cfe:	e029      	b.n	8007d54 <ts_itoa+0x80>
	{
		int num = d/div;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d08:	613b      	str	r3, [r7, #16]
		d = d%div;
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d12:	fb02 f201 	mul.w	r2, r2, r1
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	60bb      	str	r3, [r7, #8]
		div /= base;
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8007d22:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	2b09      	cmp	r3, #9
 8007d28:	dd0a      	ble.n	8007d40 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	1c59      	adds	r1, r3, #1
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	6011      	str	r1, [r2, #0]
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	3237      	adds	r2, #55	; 0x37
 8007d3a:	b2d2      	uxtb	r2, r2
 8007d3c:	701a      	strb	r2, [r3, #0]
 8007d3e:	e009      	b.n	8007d54 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	1c59      	adds	r1, r3, #1
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	6011      	str	r1, [r2, #0]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	b2d2      	uxtb	r2, r2
 8007d4e:	3230      	adds	r2, #48	; 0x30
 8007d50:	b2d2      	uxtb	r2, r2
 8007d52:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1d2      	bne.n	8007d00 <ts_itoa+0x2c>
	}
}
 8007d5a:	bf00      	nop
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b088      	sub	sp, #32
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	60f8      	str	r0, [r7, #12]
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8007d76:	e07d      	b.n	8007e74 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b25      	cmp	r3, #37	; 0x25
 8007d7e:	d171      	bne.n	8007e64 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	3301      	adds	r3, #1
 8007d84:	60bb      	str	r3, [r7, #8]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b64      	cmp	r3, #100	; 0x64
 8007d8c:	d01e      	beq.n	8007dcc <ts_formatstring+0x66>
 8007d8e:	2b64      	cmp	r3, #100	; 0x64
 8007d90:	dc06      	bgt.n	8007da0 <ts_formatstring+0x3a>
 8007d92:	2b58      	cmp	r3, #88	; 0x58
 8007d94:	d050      	beq.n	8007e38 <ts_formatstring+0xd2>
 8007d96:	2b63      	cmp	r3, #99	; 0x63
 8007d98:	d00e      	beq.n	8007db8 <ts_formatstring+0x52>
 8007d9a:	2b25      	cmp	r3, #37	; 0x25
 8007d9c:	d058      	beq.n	8007e50 <ts_formatstring+0xea>
 8007d9e:	e05d      	b.n	8007e5c <ts_formatstring+0xf6>
 8007da0:	2b73      	cmp	r3, #115	; 0x73
 8007da2:	d02b      	beq.n	8007dfc <ts_formatstring+0x96>
 8007da4:	2b73      	cmp	r3, #115	; 0x73
 8007da6:	dc02      	bgt.n	8007dae <ts_formatstring+0x48>
 8007da8:	2b69      	cmp	r3, #105	; 0x69
 8007daa:	d00f      	beq.n	8007dcc <ts_formatstring+0x66>
 8007dac:	e056      	b.n	8007e5c <ts_formatstring+0xf6>
 8007dae:	2b75      	cmp	r3, #117	; 0x75
 8007db0:	d037      	beq.n	8007e22 <ts_formatstring+0xbc>
 8007db2:	2b78      	cmp	r3, #120	; 0x78
 8007db4:	d040      	beq.n	8007e38 <ts_formatstring+0xd2>
 8007db6:	e051      	b.n	8007e5c <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	60fa      	str	r2, [r7, #12]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	1d11      	adds	r1, r2, #4
 8007dc2:	6079      	str	r1, [r7, #4]
 8007dc4:	6812      	ldr	r2, [r2, #0]
 8007dc6:	b2d2      	uxtb	r2, r2
 8007dc8:	701a      	strb	r2, [r3, #0]
				break;
 8007dca:	e047      	b.n	8007e5c <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	1d1a      	adds	r2, r3, #4
 8007dd0:	607a      	str	r2, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	da07      	bge.n	8007dec <ts_formatstring+0x86>
					{
						val *= -1;
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	425b      	negs	r3, r3
 8007de0:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	60fa      	str	r2, [r7, #12]
 8007de8:	222d      	movs	r2, #45	; 0x2d
 8007dea:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8007dec:	69f9      	ldr	r1, [r7, #28]
 8007dee:	f107 030c 	add.w	r3, r7, #12
 8007df2:	220a      	movs	r2, #10
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff ff6d 	bl	8007cd4 <ts_itoa>
				}
				break;
 8007dfa:	e02f      	b.n	8007e5c <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	1d1a      	adds	r2, r3, #4
 8007e00:	607a      	str	r2, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8007e06:	e007      	b.n	8007e18 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	1c5a      	adds	r2, r3, #1
 8007e0c:	60fa      	str	r2, [r7, #12]
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	1c51      	adds	r1, r2, #1
 8007e12:	61b9      	str	r1, [r7, #24]
 8007e14:	7812      	ldrb	r2, [r2, #0]
 8007e16:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1f3      	bne.n	8007e08 <ts_formatstring+0xa2>
					}
				}
				break;
 8007e20:	e01c      	b.n	8007e5c <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	1d1a      	adds	r2, r3, #4
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	6819      	ldr	r1, [r3, #0]
 8007e2a:	f107 030c 	add.w	r3, r7, #12
 8007e2e:	220a      	movs	r2, #10
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7ff ff4f 	bl	8007cd4 <ts_itoa>
				break;
 8007e36:	e011      	b.n	8007e5c <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	1d1a      	adds	r2, r3, #4
 8007e3c:	607a      	str	r2, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4619      	mov	r1, r3
 8007e42:	f107 030c 	add.w	r3, r7, #12
 8007e46:	2210      	movs	r2, #16
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7ff ff43 	bl	8007cd4 <ts_itoa>
				break;
 8007e4e:	e005      	b.n	8007e5c <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	60fa      	str	r2, [r7, #12]
 8007e56:	2225      	movs	r2, #37	; 0x25
 8007e58:	701a      	strb	r2, [r3, #0]
				  break;
 8007e5a:	bf00      	nop
			}
			fmt++;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	60bb      	str	r3, [r7, #8]
 8007e62:	e007      	b.n	8007e74 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	1c5a      	adds	r2, r3, #1
 8007e68:	60fa      	str	r2, [r7, #12]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	1c51      	adds	r1, r2, #1
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	7812      	ldrb	r2, [r2, #0]
 8007e72:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f47f af7d 	bne.w	8007d78 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	461a      	mov	r2, r3
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	1ad3      	subs	r3, r2, r3
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3720      	adds	r7, #32
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8007e94:	b40e      	push	{r1, r2, r3}
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b085      	sub	sp, #20
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8007e9e:	f107 0320 	add.w	r3, r7, #32
 8007ea2:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	69f9      	ldr	r1, [r7, #28]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff ff5c 	bl	8007d66 <ts_formatstring>
 8007eae:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ebc:	b003      	add	sp, #12
 8007ebe:	4770      	bx	lr

08007ec0 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7f8 f981 	bl	80001d0 <strlen>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	2001      	movs	r0, #1
 8007edc:	f7ff fea5 	bl	8007c2a <_write>
 8007ee0:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	490b      	ldr	r1, [pc, #44]	; (8007f14 <puts+0x54>)
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	f7ff fe9f 	bl	8007c2a <_write>
 8007eec:	4602      	mov	r2, r0
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d102      	bne.n	8007f04 <puts+0x44>
	{
		res = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	e002      	b.n	8007f0a <puts+0x4a>
	}
	else
	{
		res = EOF;
 8007f04:	f04f 33ff 	mov.w	r3, #4294967295
 8007f08:	617b      	str	r3, [r7, #20]
	}

	return res;
 8007f0a:	697b      	ldr	r3, [r7, #20]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	08008250 	.word	0x08008250

08007f18 <__libc_init_array>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	4e0d      	ldr	r6, [pc, #52]	; (8007f50 <__libc_init_array+0x38>)
 8007f1c:	4c0d      	ldr	r4, [pc, #52]	; (8007f54 <__libc_init_array+0x3c>)
 8007f1e:	1ba4      	subs	r4, r4, r6
 8007f20:	10a4      	asrs	r4, r4, #2
 8007f22:	2500      	movs	r5, #0
 8007f24:	42a5      	cmp	r5, r4
 8007f26:	d109      	bne.n	8007f3c <__libc_init_array+0x24>
 8007f28:	4e0b      	ldr	r6, [pc, #44]	; (8007f58 <__libc_init_array+0x40>)
 8007f2a:	4c0c      	ldr	r4, [pc, #48]	; (8007f5c <__libc_init_array+0x44>)
 8007f2c:	f000 f820 	bl	8007f70 <_init>
 8007f30:	1ba4      	subs	r4, r4, r6
 8007f32:	10a4      	asrs	r4, r4, #2
 8007f34:	2500      	movs	r5, #0
 8007f36:	42a5      	cmp	r5, r4
 8007f38:	d105      	bne.n	8007f46 <__libc_init_array+0x2e>
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f40:	4798      	blx	r3
 8007f42:	3501      	adds	r5, #1
 8007f44:	e7ee      	b.n	8007f24 <__libc_init_array+0xc>
 8007f46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f4a:	4798      	blx	r3
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	e7f2      	b.n	8007f36 <__libc_init_array+0x1e>
 8007f50:	08008470 	.word	0x08008470
 8007f54:	08008470 	.word	0x08008470
 8007f58:	08008470 	.word	0x08008470
 8007f5c:	08008474 	.word	0x08008474

08007f60 <memset>:
 8007f60:	4402      	add	r2, r0
 8007f62:	4603      	mov	r3, r0
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d100      	bne.n	8007f6a <memset+0xa>
 8007f68:	4770      	bx	lr
 8007f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f6e:	e7f9      	b.n	8007f64 <memset+0x4>

08007f70 <_init>:
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	bf00      	nop
 8007f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f76:	bc08      	pop	{r3}
 8007f78:	469e      	mov	lr, r3
 8007f7a:	4770      	bx	lr

08007f7c <_fini>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	bf00      	nop
 8007f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f82:	bc08      	pop	{r3}
 8007f84:	469e      	mov	lr, r3
 8007f86:	4770      	bx	lr
