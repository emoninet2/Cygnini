
Cygnini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005628  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  080057b8  080057b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b60  08005b60  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08005b60  08005b60  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b60  08005b60  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005b60  08005b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005b68  08005b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08005b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200000a8  08005c18  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08005c18  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e21b  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e1c  00000000  00000000  0003e2f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  00042110  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001130  00000000  00000000  000433e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008e67  00000000  00000000  00044510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006f12  00000000  00000000  0004d377  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00054289  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004f4c  00000000  00000000  00054308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800579c 	.word	0x0800579c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800579c 	.word	0x0800579c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <c12832_hal_spi_init>:
#include "C12832Port.h"

SPI_HandleTypeDef hspi2;


void c12832_hal_spi_init(){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b088      	sub	sp, #32
 80001e4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e6:	f107 030c 	add.w	r3, r7, #12
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]


    /* USER CODE END SPI2_MspInit 0 */
	/* Peripheral clock enable */
	__HAL_RCC_SPI2_CLK_ENABLE();
 80001f6:	4a31      	ldr	r2, [pc, #196]	; (80002bc <c12832_hal_spi_init+0xdc>)
 80001f8:	4b30      	ldr	r3, [pc, #192]	; (80002bc <c12832_hal_spi_init+0xdc>)
 80001fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80001fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000200:	6593      	str	r3, [r2, #88]	; 0x58
 8000202:	4b2e      	ldr	r3, [pc, #184]	; (80002bc <c12832_hal_spi_init+0xdc>)
 8000204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800020a:	60bb      	str	r3, [r7, #8]
 800020c:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800020e:	4a2b      	ldr	r2, [pc, #172]	; (80002bc <c12832_hal_spi_init+0xdc>)
 8000210:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <c12832_hal_spi_init+0xdc>)
 8000212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000214:	f043 0302 	orr.w	r3, r3, #2
 8000218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800021a:	4b28      	ldr	r3, [pc, #160]	; (80002bc <c12832_hal_spi_init+0xdc>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021e:	f003 0302 	and.w	r3, r3, #2
 8000222:	607b      	str	r3, [r7, #4]
 8000224:	687b      	ldr	r3, [r7, #4]
	/**SPI2 GPIO Configuration
	PB13     ------> SPI2_SCK
	PB14     ------> SPI2_MISO
	PB15     ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000226:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800022a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800022c:	2302      	movs	r3, #2
 800022e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000234:	2303      	movs	r3, #3
 8000236:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000238:	2305      	movs	r3, #5
 800023a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023c:	f107 030c 	add.w	r3, r7, #12
 8000240:	4619      	mov	r1, r3
 8000242:	481f      	ldr	r0, [pc, #124]	; (80002c0 <c12832_hal_spi_init+0xe0>)
 8000244:	f001 faca 	bl	80017dc <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */


	  hspi2.Instance = SPI2;
 8000248:	4b1e      	ldr	r3, [pc, #120]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 800024a:	4a1f      	ldr	r2, [pc, #124]	; (80002c8 <c12832_hal_spi_init+0xe8>)
 800024c:	601a      	str	r2, [r3, #0]
	  hspi2.Init.Mode = SPI_MODE_MASTER;
 800024e:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 8000250:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000254:	605a      	str	r2, [r3, #4]
	  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000256:	4b1b      	ldr	r3, [pc, #108]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
	  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800025c:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 800025e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000262:	60da      	str	r2, [r3, #12]
	  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]
	  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 800026c:	2200      	movs	r2, #0
 800026e:	615a      	str	r2, [r3, #20]
	  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 8000272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000276:	619a      	str	r2, [r3, #24]
	  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000278:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	61da      	str	r2, [r3, #28]
	  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 8000280:	2200      	movs	r2, #0
 8000282:	621a      	str	r2, [r3, #32]
	  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 8000286:	2200      	movs	r2, #0
 8000288:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 800028c:	2200      	movs	r2, #0
 800028e:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi2.Init.CRCPolynomial = 7;
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 8000292:	2207      	movs	r2, #7
 8000294:	62da      	str	r2, [r3, #44]	; 0x2c
	  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 8000298:	2200      	movs	r2, #0
 800029a:	631a      	str	r2, [r3, #48]	; 0x30
	  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 800029e:	2200      	movs	r2, #0
 80002a0:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002a2:	4808      	ldr	r0, [pc, #32]	; (80002c4 <c12832_hal_spi_init+0xe4>)
 80002a4:	f002 fea6 	bl	8002ff4 <HAL_SPI_Init>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <c12832_hal_spi_init+0xd2>
	  {
	    Error_Handler();
 80002ae:	f004 faa9 	bl	8004804 <Error_Handler>
	  }

}
 80002b2:	bf00      	nop
 80002b4:	3720      	adds	r7, #32
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40021000 	.word	0x40021000
 80002c0:	48000400 	.word	0x48000400
 80002c4:	20000204 	.word	0x20000204
 80002c8:	40003800 	.word	0x40003800

080002cc <c12832_hal_gpio_init>:


void c12832_hal_gpio_init(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b08a      	sub	sp, #40	; 0x28
 80002d0:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d2:	4a43      	ldr	r2, [pc, #268]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 80002d4:	4b42      	ldr	r3, [pc, #264]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 80002d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d8:	f043 0304 	orr.w	r3, r3, #4
 80002dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002de:	4b40      	ldr	r3, [pc, #256]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 80002e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e2:	f003 0304 	and.w	r3, r3, #4
 80002e6:	613b      	str	r3, [r7, #16]
 80002e8:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002ea:	4a3d      	ldr	r2, [pc, #244]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 80002ec:	4b3c      	ldr	r3, [pc, #240]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 80002ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002f6:	4b3a      	ldr	r3, [pc, #232]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 80002f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	4a37      	ldr	r2, [pc, #220]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 8000306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800030e:	4b34      	ldr	r3, [pc, #208]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 8000310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4a31      	ldr	r2, [pc, #196]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 800031c:	4b30      	ldr	r3, [pc, #192]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 800031e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000320:	f043 0302 	orr.w	r3, r3, #2
 8000324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000326:	4b2e      	ldr	r3, [pc, #184]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032a:	f003 0302 	and.w	r3, r3, #2
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000332:	4a2b      	ldr	r2, [pc, #172]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 8000334:	4b2a      	ldr	r3, [pc, #168]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 8000336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000338:	f043 0308 	orr.w	r3, r3, #8
 800033c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <c12832_hal_gpio_init+0x114>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	f003 0308 	and.w	r3, r3, #8
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	683b      	ldr	r3, [r7, #0]


	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0314 	add.w	r3, r7, #20
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, DISPLAY_NRESET_Pin|DISPLAY_A0_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2160      	movs	r1, #96	; 0x60
 800035e:	4821      	ldr	r0, [pc, #132]	; (80003e4 <c12832_hal_gpio_init+0x118>)
 8000360:	f001 fbd2 	bl	8001b08 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DISPLAY_NSEL_GPIO_Port, DISPLAY_NSEL_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800036a:	481f      	ldr	r0, [pc, #124]	; (80003e8 <c12832_hal_gpio_init+0x11c>)
 800036c:	f001 fbcc 	bl	8001b08 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DISPLAY_BACKLIGHT_GPIO_Port, DISPLAY_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037a:	f001 fbc5 	bl	8001b08 <HAL_GPIO_WritePin>


	  /*Configure GPIO pins : DISPLAY_NRESET_Pin DISPLAY_A0_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_NRESET_Pin|DISPLAY_A0_Pin;
 800037e:	2360      	movs	r3, #96	; 0x60
 8000380:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000382:	2301      	movs	r3, #1
 8000384:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038a:	2300      	movs	r3, #0
 800038c:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800038e:	f107 0314 	add.w	r3, r7, #20
 8000392:	4619      	mov	r1, r3
 8000394:	4813      	ldr	r0, [pc, #76]	; (80003e4 <c12832_hal_gpio_init+0x118>)
 8000396:	f001 fa21 	bl	80017dc <HAL_GPIO_Init>

	  /*Configure GPIO pin : DISPLAY_NSEL_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_NSEL_Pin;
 800039a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800039e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a0:	2301      	movs	r3, #1
 80003a2:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a8:	2300      	movs	r3, #0
 80003aa:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(DISPLAY_NSEL_GPIO_Port, &GPIO_InitStruct);
 80003ac:	f107 0314 	add.w	r3, r7, #20
 80003b0:	4619      	mov	r1, r3
 80003b2:	480d      	ldr	r0, [pc, #52]	; (80003e8 <c12832_hal_gpio_init+0x11c>)
 80003b4:	f001 fa12 	bl	80017dc <HAL_GPIO_Init>

	  /*Configure GPIO pin : DISPLAY_BACKLIGHT_Pin */
	  GPIO_InitStruct.Pin = DISPLAY_BACKLIGHT_Pin;
 80003b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003bc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003be:	2301      	movs	r3, #1
 80003c0:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c6:	2300      	movs	r3, #0
 80003c8:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(DISPLAY_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	4619      	mov	r1, r3
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d4:	f001 fa02 	bl	80017dc <HAL_GPIO_Init>



}
 80003d8:	bf00      	nop
 80003da:	3728      	adds	r7, #40	; 0x28
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40021000 	.word	0x40021000
 80003e4:	48000800 	.word	0x48000800
 80003e8:	48000400 	.word	0x48000400

080003ec <c12832_hal_spi_write_read>:


int c12832_hal_spi_write_read (uint8_t *tx_data, uint8_t *rx_data, uint16_t lenght) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	4613      	mov	r3, r2
 80003f8:	80fb      	strh	r3, [r7, #6]

	HAL_SPI_Transmit (&hspi2, tx_data, 1, 200);
 80003fa:	23c8      	movs	r3, #200	; 0xc8
 80003fc:	2201      	movs	r2, #1
 80003fe:	68f9      	ldr	r1, [r7, #12]
 8000400:	4803      	ldr	r0, [pc, #12]	; (8000410 <c12832_hal_spi_write_read+0x24>)
 8000402:	f002 fe7f 	bl	8003104 <HAL_SPI_Transmit>
		//DEBUG_MESSAGE_AND_EXIT_FAILURE

	return EXIT_SUCCESS;
 8000406:	2300      	movs	r3, #0

}
 8000408:	4618      	mov	r0, r3
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000204 	.word	0x20000204

08000414 <graphic_lcd_clear_screen>:

#include "graphic_lcd.h"
#include "st7565r.h"
#include "font.h"

int graphic_lcd_clear_screen(void) {
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
	
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
 800041e:	e019      	b.n	8000454 <graphic_lcd_clear_screen+0x40>
		st7565r_set_page_address(i);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	b2db      	uxtb	r3, r3
 8000424:	4618      	mov	r0, r3
 8000426:	f000 f8cd 	bl	80005c4 <st7565r_set_page_address>
		st7565r_set_column_address(0);
 800042a:	2000      	movs	r0, #0
 800042c:	f000 f8de 	bl	80005ec <st7565r_set_column_address>
		st7565r_set_display_start_line_address(0);
 8000430:	2000      	movs	r0, #0
 8000432:	f000 f8f8 	bl	8000626 <st7565r_set_display_start_line_address>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 8000436:	2300      	movs	r3, #0
 8000438:	603b      	str	r3, [r7, #0]
 800043a:	e005      	b.n	8000448 <graphic_lcd_clear_screen+0x34>
			st7565r_write_data(0);
 800043c:	2000      	movs	r0, #0
 800043e:	f000 f881 	bl	8000544 <st7565r_write_data>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	2b84      	cmp	r3, #132	; 0x84
 800044c:	ddf6      	ble.n	800043c <graphic_lcd_clear_screen+0x28>
	for (i=0; i<LINE_COUNT; i++) {
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3301      	adds	r3, #1
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2b03      	cmp	r3, #3
 8000458:	dde2      	ble.n	8000420 <graphic_lcd_clear_screen+0xc>
	}
	
	return EXIT_SUCCESS;
 800045a:	2300      	movs	r3, #0
}
 800045c:	4618      	mov	r0, r3
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <graphic_lcd_write>:

int graphic_lcd_write(int line, int offset, char *text) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]

	int i, j;
	
	st7565r_set_page_address(line);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f8a5 	bl	80005c4 <st7565r_set_page_address>
	st7565r_set_column_address(offset + FONT_SIZE);
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	b2db      	uxtb	r3, r3
 800047e:	3305      	adds	r3, #5
 8000480:	b2db      	uxtb	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f000 f8b2 	bl	80005ec <st7565r_set_column_address>
	
	for (i=0; i<strlen(text); i++) {
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
 800048c:	e01e      	b.n	80004cc <graphic_lcd_write+0x68>
	
		for (j=0; j<FONT_SIZE; j++) {
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
 8000492:	e012      	b.n	80004ba <graphic_lcd_write+0x56>
			st7565r_write_data(font_5x8_table[(((text[i] - ASCII_FONT_FIRST) * FONT_SIZE) + j)]);
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	4413      	add	r3, r2
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	f1a3 0220 	sub.w	r2, r3, #32
 80004a0:	4613      	mov	r3, r2
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	441a      	add	r2, r3
 80004a6:	693b      	ldr	r3, [r7, #16]
 80004a8:	4413      	add	r3, r2
 80004aa:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <graphic_lcd_write+0x80>)
 80004ac:	5cd3      	ldrb	r3, [r2, r3]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 f848 	bl	8000544 <st7565r_write_data>
		for (j=0; j<FONT_SIZE; j++) {
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	3301      	adds	r3, #1
 80004b8:	613b      	str	r3, [r7, #16]
 80004ba:	693b      	ldr	r3, [r7, #16]
 80004bc:	2b04      	cmp	r3, #4
 80004be:	dde9      	ble.n	8000494 <graphic_lcd_write+0x30>
		}
		st7565r_write_data(0);
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 f83f 	bl	8000544 <st7565r_write_data>
	for (i=0; i<strlen(text); i++) {
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	3301      	adds	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f7ff fe7f 	bl	80001d0 <strlen>
 80004d2:	4602      	mov	r2, r0
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d8d9      	bhi.n	800048e <graphic_lcd_write+0x2a>
	}
		
	return EXIT_SUCCESS;
 80004da:	2300      	movs	r3, #0
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3718      	adds	r7, #24
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	080058f0 	.word	0x080058f0

080004e8 <graphic_lcd_initialize>:

int graphic_lcd_initialize (void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	
	return st7565r_init ();
 80004ec:	f000 f8de 	bl	80006ac <st7565r_init>
 80004f0:	4603      	mov	r3, r0
	
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <st7565r_write_command>:
#include "C12832Port.h"


#define HUNDRED_MILLISECONDS  	(10 / portTICK_PERIOD_MS)

void st7565r_write_command(uint8_t command) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <st7565r_write_command+0x44>)
 800050a:	f001 fafd 	bl	8001b08 <HAL_GPIO_WritePin>
        DISPLAY_A0_LOW;
 800050e:	2200      	movs	r2, #0
 8000510:	2140      	movs	r1, #64	; 0x40
 8000512:	480b      	ldr	r0, [pc, #44]	; (8000540 <st7565r_write_command+0x48>)
 8000514:	f001 faf8 	bl	8001b08 <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&command, &tmp, 1);
 8000518:	f107 010f 	add.w	r1, r7, #15
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	2201      	movs	r2, #1
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ff63 	bl	80003ec <c12832_hal_spi_write_read>
        DISPLAY_CHIP_SELECT_HIGH;
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <st7565r_write_command+0x44>)
 800052e:	f001 faeb 	bl	8001b08 <HAL_GPIO_WritePin>
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	48000400 	.word	0x48000400
 8000540:	48000800 	.word	0x48000800

08000544 <st7565r_write_data>:

void st7565r_write_data(uint8_t data) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000554:	480e      	ldr	r0, [pc, #56]	; (8000590 <st7565r_write_data+0x4c>)
 8000556:	f001 fad7 	bl	8001b08 <HAL_GPIO_WritePin>
        DISPLAY_A0_HIGH;
 800055a:	2201      	movs	r2, #1
 800055c:	2140      	movs	r1, #64	; 0x40
 800055e:	480d      	ldr	r0, [pc, #52]	; (8000594 <st7565r_write_data+0x50>)
 8000560:	f001 fad2 	bl	8001b08 <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&data, &tmp, 1);
 8000564:	f107 010f 	add.w	r1, r7, #15
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	2201      	movs	r2, #1
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff3d 	bl	80003ec <c12832_hal_spi_write_read>
        DISPLAY_A0_LOW;
 8000572:	2200      	movs	r2, #0
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <st7565r_write_data+0x50>)
 8000578:	f001 fac6 	bl	8001b08 <HAL_GPIO_WritePin>
        DISPLAY_CHIP_SELECT_HIGH;
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000582:	4803      	ldr	r0, [pc, #12]	; (8000590 <st7565r_write_data+0x4c>)
 8000584:	f001 fac0 	bl	8001b08 <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	48000400 	.word	0x48000400
 8000594:	48000800 	.word	0x48000800

08000598 <st7565r_hard_reset>:
 *
 * This functions will reset the LCD controller by setting the reset pin low.
 * \note this funtions should not be confused with the \ref st7565r_soft_reset()
 * function, this command will control the RST pin.
 */
void st7565r_hard_reset(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	
        DISPLAY_RESET_LOW;
 800059c:	2200      	movs	r2, #0
 800059e:	2120      	movs	r1, #32
 80005a0:	4807      	ldr	r0, [pc, #28]	; (80005c0 <st7565r_hard_reset+0x28>)
 80005a2:	f001 fab1 	bl	8001b08 <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 80005a6:	200a      	movs	r0, #10
 80005a8:	f003 fb5e 	bl	8003c68 <vTaskDelay>
        DISPLAY_RESET_HIGH;
 80005ac:	2201      	movs	r2, #1
 80005ae:	2120      	movs	r1, #32
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <st7565r_hard_reset+0x28>)
 80005b2:	f001 faa9 	bl	8001b08 <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 80005b6:	200a      	movs	r0, #10
 80005b8:	f003 fb56 	bl	8003c68 <vTaskDelay>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	48000800 	.word	0x48000800

080005c4 <st7565r_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
void st7565r_set_page_address(uint8_t address)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
        // Make sure that the address is 4 bits (only 8 pages)
        address &= 0x0F;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	f003 030f 	and.w	r3, r3, #15
 80005d4:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ff8a 	bl	80004f8 <st7565r_write_command>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <st7565r_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void st7565r_set_column_address(uint8_t address)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
        // Make sure the address is 7 bits
        address &= 0x7F;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005fc:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	091b      	lsrs	r3, r3, #4
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f043 0310 	orr.w	r3, r3, #16
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff74 	bl	80004f8 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	f003 030f 	and.w	r3, r3, #15
 8000616:	b2db      	uxtb	r3, r3
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ff6d 	bl	80004f8 <st7565r_write_command>
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <st7565r_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the LCD.
 */
void st7565r_set_display_start_line_address(uint8_t address)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	4603      	mov	r3, r0
 800062e:	71fb      	strb	r3, [r7, #7]
        // Make sure address is 6 bits
        address &= 0x3F;
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000636:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800063e:	b2db      	uxtb	r3, r3
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff59 	bl	80004f8 <st7565r_write_command>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <st7565r_display_on>:
 * \brief Turn the LCD display on
 *
 * This function will turn on the LCD.
 */
void st7565r_display_on(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_ON);
 8000652:	20af      	movs	r0, #175	; 0xaf
 8000654:	f7ff ff50 	bl	80004f8 <st7565r_write_command>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <st7565r_set_contrast>:
 *                 the LCD.
 *
 * \retval contrast the contrast value written to the LCD controller
 */
uint8_t st7565r_set_contrast(uint8_t contrast)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
        if (contrast < ST7565R_DISPLAY_CONTRAST_MIN) {
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b1d      	cmp	r3, #29
 800066a:	d801      	bhi.n	8000670 <st7565r_set_contrast+0x14>
                contrast = ST7565R_DISPLAY_CONTRAST_MIN;
 800066c:	231e      	movs	r3, #30
 800066e:	71fb      	strb	r3, [r7, #7]
        }
        if (contrast > ST7565R_DISPLAY_CONTRAST_MAX) {
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	2b28      	cmp	r3, #40	; 0x28
 8000674:	d901      	bls.n	800067a <st7565r_set_contrast+0x1e>
                contrast = ST7565R_DISPLAY_CONTRAST_MAX;
 8000676:	2328      	movs	r3, #40	; 0x28
 8000678:	71fb      	strb	r3, [r7, #7]
        }
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME_MODE_SET);
 800067a:	2081      	movs	r0, #129	; 0x81
 800067c:	f7ff ff3c 	bl	80004f8 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME(contrast));
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	43db      	mvns	r3, r3
 8000684:	b2db      	uxtb	r3, r3
 8000686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff33 	bl	80004f8 <st7565r_write_command>
        return contrast;
 8000692:	79fb      	ldrb	r3, [r7, #7]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <st7565r_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the LCD
 *
 */
void st7565r_display_invert_disable(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_NORMAL);
 80006a0:	20a6      	movs	r0, #166	; 0xa6
 80006a2:	f7ff ff29 	bl	80004f8 <st7565r_write_command>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <st7565r_init>:

int st7565r_init(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	
        // Do a hard reset of the LCD display controller
        st7565r_hard_reset();
 80006b0:	f7ff ff72 	bl	8000598 <st7565r_hard_reset>

        // Set the A0 pin to the default state (command)
        DISPLAY_A0_LOW;
 80006b4:	2200      	movs	r2, #0
 80006b6:	2140      	movs	r1, #64	; 0x40
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <st7565r_init+0x50>)
 80006ba:	f001 fa25 	bl	8001b08 <HAL_GPIO_WritePin>

        // The column address
        st7565r_write_command(ST7565R_CMD_ADC_NORMAL);
 80006be:	20a0      	movs	r0, #160	; 0xa0
 80006c0:	f7ff ff1a 	bl	80004f8 <st7565r_write_command>

        // Non-inverted display
        st7565r_display_invert_disable();
 80006c4:	f7ff ffea 	bl	800069c <st7565r_display_invert_disable>

        // The common mode scan direction
        st7565r_write_command(ST7565R_CMD_REVERSE_SCAN_DIRECTION);
 80006c8:	20c8      	movs	r0, #200	; 0xc8
 80006ca:	f7ff ff15 	bl	80004f8 <st7565r_write_command>

        // Set the voltage bias ratio to 1/6
        st7565r_write_command(ST7565R_CMD_LCD_BIAS_1_DIV_6_DUTY33);
 80006ce:	20a2      	movs	r0, #162	; 0xa2
 80006d0:	f7ff ff12 	bl	80004f8 <st7565r_write_command>

        // Set booster circuit, voltage regulator and voltage follower all to on
        st7565r_write_command(ST7565R_CMD_POWER_CTRL_ALL_ON);
 80006d4:	202f      	movs	r0, #47	; 0x2f
 80006d6:	f7ff ff0f 	bl	80004f8 <st7565r_write_command>

        // Set the booster ratio to 2X,3X,4X
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_SET);
 80006da:	20f8      	movs	r0, #248	; 0xf8
 80006dc:	f7ff ff0c 	bl	80004f8 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_2X_3X_4X);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff ff09 	bl	80004f8 <st7565r_write_command>

        // Set voltage resistor ratio to 1
        st7565r_write_command(ST7565R_CMD_VOLTAGE_RESISTOR_RATIO_1);
 80006e6:	2021      	movs	r0, #33	; 0x21
 80006e8:	f7ff ff06 	bl	80004f8 <st7565r_write_command>

        /* Set contrast to min value, no need to check return value as the contrast
        is set to the defined min*/
        st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);
 80006ec:	201e      	movs	r0, #30
 80006ee:	f7ff ffb5 	bl	800065c <st7565r_set_contrast>

        // Turn on the display
        st7565r_display_on();
 80006f2:	f7ff ffac 	bl	800064e <st7565r_display_on>
		
		return EXIT_SUCCESS;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	48000800 	.word	0x48000800

08000700 <NRF24L01p_Initialize>:

#include "NRF24L01p.h"
#include "NRF24L01pDriver.h"
#include "port/NRF24L01pPort.h"

void NRF24L01p_Initialize(){
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0


	RadioState = NRF24L01P_MODE_UNKNOWN;
 8000706:	4b7a      	ldr	r3, [pc, #488]	; (80008f0 <NRF24L01p_Initialize+0x1f0>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]


	RadioConfig.DataReadyInterruptEnabled = 1;
 800070c:	4b79      	ldr	r3, [pc, #484]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
	RadioConfig.DataSentInterruptEnabled = 1;
 8000712:	4b78      	ldr	r3, [pc, #480]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 8000714:	2201      	movs	r2, #1
 8000716:	705a      	strb	r2, [r3, #1]
	RadioConfig.MaxRetryInterruptEnabled = 1;
 8000718:	4b76      	ldr	r3, [pc, #472]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 800071a:	2201      	movs	r2, #1
 800071c:	709a      	strb	r2, [r3, #2]
	RadioConfig.Crc = NRF24L01P_CONFIG_CRC_16BIT;
 800071e:	4b75      	ldr	r3, [pc, #468]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 8000720:	220c      	movs	r2, #12
 8000722:	70da      	strb	r2, [r3, #3]
	RadioConfig.AutoReTransmissionCount = 15;
 8000724:	4b73      	ldr	r3, [pc, #460]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 8000726:	220f      	movs	r2, #15
 8000728:	715a      	strb	r2, [r3, #5]
	RadioConfig.AutoReTransmitDelayX250us = 15;
 800072a:	4b72      	ldr	r3, [pc, #456]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 800072c:	220f      	movs	r2, #15
 800072e:	719a      	strb	r2, [r3, #6]
	RadioConfig.frequencyOffset = 2;
 8000730:	4b70      	ldr	r3, [pc, #448]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 8000732:	2202      	movs	r2, #2
 8000734:	71da      	strb	r2, [r3, #7]
	RadioConfig.datarate = NRF24L01P_RF_SETUP_RF_DR_2MBPS;
 8000736:	4b6f      	ldr	r3, [pc, #444]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 8000738:	2208      	movs	r2, #8
 800073a:	721a      	strb	r2, [r3, #8]
	RadioConfig.RfPowerDb = NRF24L01P_RF_SETUP_RF_PWR_0DBM;
 800073c:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 800073e:	2206      	movs	r2, #6
 8000740:	725a      	strb	r2, [r3, #9]
	RadioConfig.PllLock = 0;
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 8000744:	2200      	movs	r2, #0
 8000746:	729a      	strb	r2, [r3, #10]
	RadioConfig.ContWaveEnabled = 0;
 8000748:	4b6a      	ldr	r3, [pc, #424]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 800074a:	2200      	movs	r2, #0
 800074c:	72da      	strb	r2, [r3, #11]
	RadioConfig.FeatureDynamicPayloadEnabled = 1;
 800074e:	4b69      	ldr	r3, [pc, #420]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 8000750:	2201      	movs	r2, #1
 8000752:	731a      	strb	r2, [r3, #12]
	RadioConfig.FeaturePayloadWithAckEnabled = 1;
 8000754:	4b67      	ldr	r3, [pc, #412]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 8000756:	2201      	movs	r2, #1
 8000758:	735a      	strb	r2, [r3, #13]
	RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
 800075a:	4b66      	ldr	r3, [pc, #408]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 800075c:	2201      	movs	r2, #1
 800075e:	739a      	strb	r2, [r3, #14]

	RxPipeConfig[0].address = 0xe7e7e7e7e7;
 8000760:	4a65      	ldr	r2, [pc, #404]	; (80008f8 <NRF24L01p_Initialize+0x1f8>)
 8000762:	f04f 33e7 	mov.w	r3, #3890735079	; 0xe7e7e7e7
 8000766:	f04f 04e7 	mov.w	r4, #231	; 0xe7
 800076a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	RxPipeConfig[1].address = 0xc2c2c2c2c2;
 800076e:	4a62      	ldr	r2, [pc, #392]	; (80008f8 <NRF24L01p_Initialize+0x1f8>)
 8000770:	f04f 33c2 	mov.w	r3, #3267543746	; 0xc2c2c2c2
 8000774:	f04f 04c2 	mov.w	r4, #194	; 0xc2
 8000778:	e9c2 3408 	strd	r3, r4, [r2, #32]
	RxPipeConfig[2].address = 0xc2c2c2c2c3;
 800077c:	4a5e      	ldr	r2, [pc, #376]	; (80008f8 <NRF24L01p_Initialize+0x1f8>)
 800077e:	4b5f      	ldr	r3, [pc, #380]	; (80008fc <NRF24L01p_Initialize+0x1fc>)
 8000780:	f04f 04c2 	mov.w	r4, #194	; 0xc2
 8000784:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	RxPipeConfig[3].address = 0xc2c2c2c2c4;
 8000788:	4a5b      	ldr	r2, [pc, #364]	; (80008f8 <NRF24L01p_Initialize+0x1f8>)
 800078a:	a455      	add	r4, pc, #340	; (adr r4, 80008e0 <NRF24L01p_Initialize+0x1e0>)
 800078c:	cc18      	ldmia	r4, {r3, r4}
 800078e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	RxPipeConfig[4].address = 0xc2c2c2c2c5;
 8000792:	4a59      	ldr	r2, [pc, #356]	; (80008f8 <NRF24L01p_Initialize+0x1f8>)
 8000794:	a454      	add	r4, pc, #336	; (adr r4, 80008e8 <NRF24L01p_Initialize+0x1e8>)
 8000796:	cc18      	ldmia	r4, {r3, r4}
 8000798:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	RxPipeConfig[5].address = 0xc2c2c2c2c6;
 800079c:	4a56      	ldr	r2, [pc, #344]	; (80008f8 <NRF24L01p_Initialize+0x1f8>)
 800079e:	4b58      	ldr	r3, [pc, #352]	; (8000900 <NRF24L01p_Initialize+0x200>)
 80007a0:	f04f 04c2 	mov.w	r4, #194	; 0xc2
 80007a4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80


	NRF24L01p_port_Initialize();
 80007a8:	f000 fd96 	bl	80012d8 <NRF24L01p_port_Initialize>

	NRF24L01p_port_write_Pin_CE(0);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 fdeb 	bl	8001388 <NRF24L01p_port_write_Pin_CE>
	NRF24L01p_port_write_Pin_CSN(0);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 fdfa 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>

	NRF24L01p_port_DelayMs(_NRF24L01P_TIMING_PowerOnReset_ms);
 80007b8:	2064      	movs	r0, #100	; 0x64
 80007ba:	f000 feaf 	bl	800151c <NRF24L01p_port_DelayMs>

	NRF24L01p_write_RadioMode(NRF24L01P_MODE_POWER_DOWN);
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 f8dc 	bl	800097c <NRF24L01p_write_RadioMode>
	NRF24L01p_write_RadioMode(NRF24L01P_MODE_RX);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f8d9 	bl	800097c <NRF24L01p_write_RadioMode>



	NRF24L01p_clear_DataReadyFlag();
 80007ca:	f000 fc68 	bl	800109e <NRF24L01p_clear_DataReadyFlag>
	NRF24L01p_flush_rx();
 80007ce:	f000 fa72 	bl	8000cb6 <NRF24L01p_flush_rx>
	NRF24L01p_flush_tx();
 80007d2:	f000 fa5b 	bl	8000c8c <NRF24L01p_flush_tx>

	uint8_t status_rst_val = 0x70;//reset status
 80007d6:	2370      	movs	r3, #112	; 0x70
 80007d8:	70fb      	strb	r3, [r7, #3]
	NRF24L01p_write_register(_NRF24L01P_REG_STATUS, status_rst_val);
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	4619      	mov	r1, r3
 80007de:	2007      	movs	r0, #7
 80007e0:	f000 f9b9 	bl	8000b56 <NRF24L01p_write_register>
	uint8_t config_rst_val = 0x0b;//reset config
 80007e4:	230b      	movs	r3, #11
 80007e6:	70bb      	strb	r3, [r7, #2]
	NRF24L01p_write_register(_NRF24L01P_REG_CONFIG, config_rst_val);
 80007e8:	78bb      	ldrb	r3, [r7, #2]
 80007ea:	4619      	mov	r1, r3
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 f9b2 	bl	8000b56 <NRF24L01p_write_register>


	NRF24L01p_write_dataReadyInterruptMask(RadioConfig.DataReadyInterruptEnabled);
 80007f2:	4b40      	ldr	r3, [pc, #256]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fb17 	bl	8000e2a <NRF24L01p_write_dataReadyInterruptMask>
	NRF24L01p_write_dataSentInterruptMask(RadioConfig.DataSentInterruptEnabled);
 80007fc:	4b3d      	ldr	r3, [pc, #244]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 80007fe:	785b      	ldrb	r3, [r3, #1]
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fb35 	bl	8000e70 <NRF24L01p_write_dataSentInterruptMask>
	NRF24L01p_write_maxRetryInterruptMask(RadioConfig.MaxRetryInterruptEnabled);
 8000806:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 8000808:	789b      	ldrb	r3, [r3, #2]
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fb53 	bl	8000eb6 <NRF24L01p_write_maxRetryInterruptMask>
	NRF24L01p_write_dynamicPayloadFeature(RadioConfig.FeatureDynamicPayloadEnabled);
 8000810:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 8000812:	7b1b      	ldrb	r3, [r3, #12]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fcf6 	bl	8001206 <NRF24L01p_write_dynamicPayloadFeature>
	NRF24L01p_write_payloadWithAckFeature(RadioConfig.FeaturePayloadWithAckEnabled);
 800081a:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 800081c:	7b5b      	ldrb	r3, [r3, #13]
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fd14 	bl	800124c <NRF24L01p_write_payloadWithAckFeature>
	NRF24L01p_write_dynamicPayloadWithNoAck(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled);
 8000824:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 8000826:	7b9b      	ldrb	r3, [r3, #14]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fd32 	bl	8001292 <NRF24L01p_write_dynamicPayloadWithNoAck>
	NRF24L01p_write_maxAutoRetransmissionCount(RadioConfig.AutoReTransmissionCount);
 800082e:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 8000830:	795b      	ldrb	r3, [r3, #5]
 8000832:	4618      	mov	r0, r3
 8000834:	f000 fbca 	bl	8000fcc <NRF24L01p_write_maxAutoRetransmissionCount>
	NRF24L01p_write_autoRetransmissionDelay(RadioConfig.AutoReTransmitDelayX250us);
 8000838:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 800083a:	799b      	ldrb	r3, [r3, #6]
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fbdf 	bl	8001000 <NRF24L01p_write_autoRetransmissionDelay>
	NRF24L01p_write_DataRate(RadioConfig.datarate);
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 8000844:	7a1b      	ldrb	r3, [r3, #8]
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fbf5 	bl	8001036 <NRF24L01p_write_DataRate>
	NRF24L01p_write_RfPower( RadioConfig.RfPowerDb);
 800084c:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <NRF24L01p_Initialize+0x1f4>)
 800084e:	7a5b      	ldrb	r3, [r3, #9]
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fc0a 	bl	800106a <NRF24L01p_write_RfPower>

	int i;
	for(i=0;i<6;i++){
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	e03a      	b.n	80008d2 <NRF24L01p_Initialize+0x1d2>
		NRF24L01p_write_RxOnPipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].PipeEnabled );
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	b2d8      	uxtb	r0, r3
 8000860:	4925      	ldr	r1, [pc, #148]	; (80008f8 <NRF24L01p_Initialize+0x1f8>)
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4613      	mov	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	440b      	add	r3, r1
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	f000 fb77 	bl	8000f64 <NRF24L01p_write_RxOnPipe>
		NRF24L01p_write_autoAckOnPipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].autoAckEnabled );
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	b2d8      	uxtb	r0, r3
 800087a:	491f      	ldr	r1, [pc, #124]	; (80008f8 <NRF24L01p_Initialize+0x1f8>)
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	4613      	mov	r3, r2
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	440b      	add	r3, r1
 8000888:	3301      	adds	r3, #1
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	f000 fb35 	bl	8000efc <NRF24L01p_write_autoAckOnPipe>
		NRF24L01p_write_dynamicPayloadOnPipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	b2d8      	uxtb	r0, r3
 8000896:	4918      	ldr	r1, [pc, #96]	; (80008f8 <NRF24L01p_Initialize+0x1f8>)
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	4613      	mov	r3, r2
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	4413      	add	r3, r2
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	440b      	add	r3, r1
 80008a4:	3311      	adds	r3, #17
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f000 fc78 	bl	800119e <NRF24L01p_write_dynamicPayloadOnPipe>
		NRF24L01p_write_rxPipeAddress((NRF24L01p_pipe_t)i,RxPipeConfig[i].address);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	b2d8      	uxtb	r0, r3
 80008b2:	4911      	ldr	r1, [pc, #68]	; (80008f8 <NRF24L01p_Initialize+0x1f8>)
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	4613      	mov	r3, r2
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	440b      	add	r3, r1
 80008c0:	3308      	adds	r3, #8
 80008c2:	cb18      	ldmia	r3, {r3, r4}
 80008c4:	461a      	mov	r2, r3
 80008c6:	4623      	mov	r3, r4
 80008c8:	f000 fbfc 	bl	80010c4 <NRF24L01p_write_rxPipeAddress>
	for(i=0;i<6;i++){
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3301      	adds	r3, #1
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	ddc1      	ble.n	800085c <NRF24L01p_Initialize+0x15c>
	}


}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	c2c2c2c4 	.word	0xc2c2c2c4
 80008e4:	000000c2 	.word	0x000000c2
 80008e8:	c2c2c2c5 	.word	0xc2c2c2c5
 80008ec:	000000c2 	.word	0x000000c2
 80008f0:	20000268 	.word	0x20000268
 80008f4:	2000026c 	.word	0x2000026c
 80008f8:	20000290 	.word	0x20000290
 80008fc:	c2c2c2c3 	.word	0xc2c2c2c3
 8000900:	c2c2c2c6 	.word	0xc2c2c2c6

08000904 <NRF24L01p_read_RadioMode>:
			NRF24L01p_write_dynamicPayloadOnPipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
			NRF24L01p_write_rxPipeAddress((NRF24L01p_pipe_t)i,RxPipeConfig[i].address);
		}
}

NRF24L01p_RadioState_t NRF24L01p_read_RadioMode(){
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
	bool _ce = NRF24L01p_port_read_Pin_CE();
 800090a:	f000 fd2b 	bl	8001364 <NRF24L01p_port_read_Pin_CE>
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	uint8_t _config = NRF24L01p_read_register(_NRF24L01P_REG_CONFIG)  ;
 8000912:	2000      	movs	r0, #0
 8000914:	f000 f902 	bl	8000b1c <NRF24L01p_read_register>
 8000918:	4603      	mov	r3, r0
 800091a:	71bb      	strb	r3, [r7, #6]
	bool _pwr = (_config>>1)&0x01;
 800091c:	79bb      	ldrb	r3, [r7, #6]
 800091e:	085b      	lsrs	r3, r3, #1
 8000920:	b2db      	uxtb	r3, r3
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	2b00      	cmp	r3, #0
 8000928:	bf14      	ite	ne
 800092a:	2301      	movne	r3, #1
 800092c:	2300      	moveq	r3, #0
 800092e:	717b      	strb	r3, [r7, #5]
	bool _txrx = (_config>>0)&0x01;
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf14      	ite	ne
 800093a:	2301      	movne	r3, #1
 800093c:	2300      	moveq	r3, #0
 800093e:	713b      	strb	r3, [r7, #4]


	if(_pwr == 0){
 8000940:	797b      	ldrb	r3, [r7, #5]
 8000942:	f083 0301 	eor.w	r3, r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <NRF24L01p_read_RadioMode+0x4c>
		return NRF24L01P_MODE_POWER_DOWN;
 800094c:	2301      	movs	r3, #1
 800094e:	e010      	b.n	8000972 <NRF24L01p_read_RadioMode+0x6e>
	}
	else{
		if(_ce == 0){
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f083 0301 	eor.w	r3, r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <NRF24L01p_read_RadioMode+0x5c>
			return NRF24L01P_MODE_STANDBY;
 800095c:	2302      	movs	r3, #2
 800095e:	e008      	b.n	8000972 <NRF24L01p_read_RadioMode+0x6e>
		}
		else{
			if(_txrx==0){
 8000960:	793b      	ldrb	r3, [r7, #4]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <NRF24L01p_read_RadioMode+0x6c>
				return NRF24L01P_MODE_TX;
 800096c:	2304      	movs	r3, #4
 800096e:	e000      	b.n	8000972 <NRF24L01p_read_RadioMode+0x6e>
			}else{
				return NRF24L01P_MODE_RX;
 8000970:	2303      	movs	r3, #3
			}
		}
	}
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <NRF24L01p_write_RadioMode>:

void NRF24L01p_write_RadioMode(NRF24L01p_RadioState_t mode){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	RadioState = NRF24L01p_read_RadioMode();
 8000986:	f7ff ffbd 	bl	8000904 <NRF24L01p_read_RadioMode>
 800098a:	4603      	mov	r3, r0
 800098c:	461a      	mov	r2, r3
 800098e:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <NRF24L01p_write_RadioMode+0xd4>)
 8000990:	701a      	strb	r2, [r3, #0]

	switch(mode){
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b04      	cmp	r3, #4
 8000996:	d857      	bhi.n	8000a48 <NRF24L01p_write_RadioMode+0xcc>
 8000998:	a201      	add	r2, pc, #4	; (adr r2, 80009a0 <NRF24L01p_write_RadioMode+0x24>)
 800099a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099e:	bf00      	nop
 80009a0:	08000a3f 	.word	0x08000a3f
 80009a4:	080009b5 	.word	0x080009b5
 80009a8:	080009c9 	.word	0x080009c9
 80009ac:	080009ef 	.word	0x080009ef
 80009b0:	08000a17 	.word	0x08000a17
		case NRF24L01P_MODE_POWER_DOWN: {
			NRF24L01p_write_powerUp(0);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 f9f2 	bl	8000d9e <NRF24L01p_write_powerUp>
			NRF24L01p_port_write_Pin_CE(0);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 fce4 	bl	8001388 <NRF24L01p_port_write_Pin_CE>
			RadioState = NRF24L01P_MODE_POWER_DOWN;
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <NRF24L01p_write_RadioMode+0xd4>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	701a      	strb	r2, [r3, #0]
			break;
 80009c6:	e03f      	b.n	8000a48 <NRF24L01p_write_RadioMode+0xcc>
		}
		case NRF24L01P_MODE_STANDBY: {
			if(RadioState == NRF24L01P_MODE_POWER_DOWN){
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <NRF24L01p_write_RadioMode+0xd4>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d107      	bne.n	80009e0 <NRF24L01p_write_RadioMode+0x64>
				NRF24L01p_write_powerUp(1);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f000 f9e4 	bl	8000d9e <NRF24L01p_write_powerUp>
				NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tpd2stby_us);
 80009d6:	f241 1094 	movw	r0, #4500	; 0x1194
 80009da:	f000 fdab 	bl	8001534 <NRF24L01p_port_DelayUs>
 80009de:	e002      	b.n	80009e6 <NRF24L01p_write_RadioMode+0x6a>
			}
			else{
				NRF24L01p_port_write_Pin_CE(0);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 fcd1 	bl	8001388 <NRF24L01p_port_write_Pin_CE>
			}
			RadioState = NRF24L01P_MODE_STANDBY;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <NRF24L01p_write_RadioMode+0xd4>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	701a      	strb	r2, [r3, #0]
			break;
 80009ec:	e02c      	b.n	8000a48 <NRF24L01p_write_RadioMode+0xcc>
		}
		case NRF24L01P_MODE_RX: {
			if(RadioState != NRF24L01P_MODE_RX){
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <NRF24L01p_write_RadioMode+0xd4>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d025      	beq.n	8000a42 <NRF24L01p_write_RadioMode+0xc6>
				NRF24L01p_port_write_Pin_CE(0);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 fcc6 	bl	8001388 <NRF24L01p_port_write_Pin_CE>
				NRF24L01p_write_RxTxMode(1);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f000 f9f1 	bl	8000de4 <NRF24L01p_write_RxTxMode>
				NRF24L01p_port_write_Pin_CE(1);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f000 fcc0 	bl	8001388 <NRF24L01p_port_write_Pin_CE>
				NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 8000a08:	2082      	movs	r0, #130	; 0x82
 8000a0a:	f000 fd93 	bl	8001534 <NRF24L01p_port_DelayUs>
				RadioState = NRF24L01P_MODE_RX;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <NRF24L01p_write_RadioMode+0xd4>)
 8000a10:	2203      	movs	r2, #3
 8000a12:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000a14:	e015      	b.n	8000a42 <NRF24L01p_write_RadioMode+0xc6>
		}
		case NRF24L01P_MODE_TX: {
			if(RadioState != NRF24L01P_MODE_TX){
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <NRF24L01p_write_RadioMode+0xd4>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d013      	beq.n	8000a46 <NRF24L01p_write_RadioMode+0xca>
				NRF24L01p_port_write_Pin_CE(0);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 fcb2 	bl	8001388 <NRF24L01p_port_write_Pin_CE>
				NRF24L01p_write_RxTxMode(0);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 f9dd 	bl	8000de4 <NRF24L01p_write_RxTxMode>
				NRF24L01p_port_write_Pin_CE(1);
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f000 fcac 	bl	8001388 <NRF24L01p_port_write_Pin_CE>
				NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 8000a30:	2082      	movs	r0, #130	; 0x82
 8000a32:	f000 fd7f 	bl	8001534 <NRF24L01p_port_DelayUs>
				RadioState = NRF24L01P_MODE_TX;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <NRF24L01p_write_RadioMode+0xd4>)
 8000a38:	2204      	movs	r2, #4
 8000a3a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000a3c:	e003      	b.n	8000a46 <NRF24L01p_write_RadioMode+0xca>
		}
		case NRF24L01P_MODE_UNKNOWN: {
			//RadioState = NRF24L01P_MODE_UNKNOWN;
			break;
 8000a3e:	bf00      	nop
 8000a40:	e002      	b.n	8000a48 <NRF24L01p_write_RadioMode+0xcc>
			break;
 8000a42:	bf00      	nop
 8000a44:	e000      	b.n	8000a48 <NRF24L01p_write_RadioMode+0xcc>
			break;
 8000a46:	bf00      	nop
		}
	}
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000268 	.word	0x20000268

08000a54 <NRF24L01p_readable>:

bool NRF24L01p_readable(){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	return (!NRF24L01p_read_FifoRxEmptyFlag()) ;
 8000a58:	f000 fb92 	bl	8001180 <NRF24L01p_read_FifoRxEmptyFlag>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	bf14      	ite	ne
 8000a62:	2301      	movne	r3, #1
 8000a64:	2300      	moveq	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f083 0301 	eor.w	r3, r3, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	b2db      	uxtb	r3, r3
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <NRF24L01p_writeAckPayload>:
        }
    }
    return error;
}

NRF24L01p_ErrorStatus_t NRF24L01p_writeAckPayload(NRF24L01p_Payload_t *payload){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	NRF24L01p_write_ack_payload(payload->pipe, payload->Data, payload->length);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7818      	ldrb	r0, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	1c59      	adds	r1, r3, #1
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f000 f943 	bl	8000d18 <NRF24L01p_write_ack_payload>
	return NRF24L01P_SUCCESS;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <NRF24L01p_readPayload>:

NRF24L01p_ErrorStatus_t NRF24L01p_readPayload(NRF24L01p_Payload_t *payload){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    NRF24L01p_ErrorStatus_t error = NRF24L01P_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	73fb      	strb	r3, [r7, #15]
    payload->RxPipe = NRF24L01p_read_rxPayloadOnPipe();
 8000aa8:	f000 fb01 	bl	80010ae <NRF24L01p_read_rxPayloadOnPipe>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    if(payload->RxPipe>=0 && payload->RxPipe<=5){
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000abc:	2b05      	cmp	r3, #5
 8000abe:	d825      	bhi.n	8000b0c <NRF24L01p_readPayload+0x70>
        if(RadioConfig.FeatureDynamicPayloadEnabled == 1){
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <NRF24L01p_readPayload+0x7c>)
 8000ac2:	7b1b      	ldrb	r3, [r3, #12]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <NRF24L01p_readPayload+0x3a>
            payload->length = NRF24L01p_read_rx_payload_width();
 8000ac8:	f000 f90a 	bl	8000ce0 <NRF24L01p_read_rx_payload_width>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ad4:	e009      	b.n	8000aea <NRF24L01p_readPayload+0x4e>
        }else{
            payload->length = NRF24L01p_read_rxPipeWidth(payload->RxPipe);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fb39 	bl	8001154 <NRF24L01p_read_rxPipeWidth>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        if(payload->length <= 32){
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	2b20      	cmp	r3, #32
 8000af0:	d80a      	bhi.n	8000b08 <NRF24L01p_readPayload+0x6c>
        	NRF24L01p_read_rx_payload(payload->Data,payload->length);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	1c5a      	adds	r2, r3, #1
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	4610      	mov	r0, r2
 8000afe:	f000 f89d 	bl	8000c3c <NRF24L01p_read_rx_payload>
            error = NRF24L01P_SUCCESS;
 8000b02:	2300      	movs	r3, #0
 8000b04:	73fb      	strb	r3, [r7, #15]
 8000b06:	e001      	b.n	8000b0c <NRF24L01p_readPayload+0x70>
        }
        else{
            error = NRF24L01P_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
        }
    }
    return error;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000026c 	.word	0x2000026c

08000b1c <NRF24L01p_read_register>:
#include <stdint.h>

#include "port/NRF24L01pPort.h"
#include "NRF24L01pDriver.h"

uint8_t NRF24L01p_read_register(uint8_t address){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_write_Pin_CSN(0);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 fc40 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp[2];
    temp[0] = address&_NRF24L01P_REG_ADDRESS_MASK;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 031f 	and.w	r3, r3, #31
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	733b      	strb	r3, [r7, #12]
    NRF24L01p_port_SPI_Transcieve(temp,temp,2);
 8000b36:	f107 010c 	add.w	r1, r7, #12
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2202      	movs	r2, #2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fcd3 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_write_Pin_CSN(1);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f000 fc30 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
    return temp[1];
 8000b4c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <NRF24L01p_write_register>:
void NRF24L01p_write_register(uint8_t address, uint8_t data){
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b084      	sub	sp, #16
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	460a      	mov	r2, r1
 8000b60:	71fb      	strb	r3, [r7, #7]
 8000b62:	4613      	mov	r3, r2
 8000b64:	71bb      	strb	r3, [r7, #6]
	NRF24L01p_port_write_Pin_CSN(0);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 fc20 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
	uint8_t temp[2];
    temp[0] = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	f003 031f 	and.w	r3, r3, #31
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	f043 0320 	orr.w	r3, r3, #32
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	733b      	strb	r3, [r7, #12]
    temp[1] = data;
 8000b80:	79bb      	ldrb	r3, [r7, #6]
 8000b82:	737b      	strb	r3, [r7, #13]
    //NRF24L01p_port_SPI_Transmit(temp,2);
    NRF24L01p_port_SPI_Transcieve(temp,temp,2);
 8000b84:	f107 010c 	add.w	r1, r7, #12
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fcac 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_write_Pin_CSN(1);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f000 fc09 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <NRF24L01p_read_registers>:


void NRF24L01p_read_registers(uint8_t address, uint8_t *data, int len){
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_write_Pin_CSN(0);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f000 fbfb 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	f003 031f 	and.w	r3, r3, #31
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	75fb      	strb	r3, [r7, #23]


    NRF24L01p_port_SPI_Transcieve(&temp,&temp,1);
 8000bc0:	f107 0117 	add.w	r1, r7, #23
 8000bc4:	f107 0317 	add.w	r3, r7, #23
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fc8e 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(data,data,len);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	68b8      	ldr	r0, [r7, #8]
 8000bd8:	f000 fc88 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_write_Pin_CSN(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f000 fbe5 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <NRF24L01p_write_registers>:
void NRF24L01p_write_registers(uint8_t address, uint8_t *data, int len){
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	73fb      	strb	r3, [r7, #15]
	NRF24L01p_port_write_Pin_CSN(0);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f000 fbd7 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	f003 031f 	and.w	r3, r3, #31
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	f043 0320 	orr.w	r3, r3, #32
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	75fb      	strb	r3, [r7, #23]
    NRF24L01p_port_SPI_Transcieve(&temp,&temp, 1);
 8000c12:	f107 0117 	add.w	r1, r7, #23
 8000c16:	f107 0317 	add.w	r3, r7, #23
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fc65 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(data, data, len);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	461a      	mov	r2, r3
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	68b8      	ldr	r0, [r7, #8]
 8000c2a:	f000 fc5f 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_write_Pin_CSN(1);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f000 fbbc 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <NRF24L01p_read_rx_payload>:
void NRF24L01p_read_rx_payload(uint8_t *data, int pay_len){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
	NRF24L01p_port_write_Pin_CSN(0);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 fbb0 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_RD_RX_PAYLOAD);
 8000c4c:	2361      	movs	r3, #97	; 0x61
 8000c4e:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_SPI_Transcieve(&temp,&temp,1);
 8000c50:	f107 010f 	add.w	r1, r7, #15
 8000c54:	f107 030f 	add.w	r3, r7, #15
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fc46 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    if(pay_len<=32){
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b20      	cmp	r3, #32
 8000c64:	dc06      	bgt.n	8000c74 <NRF24L01p_read_rx_payload+0x38>
    	NRF24L01p_port_SPI_Transcieve(data,data,pay_len);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f000 fc3d 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
 8000c72:	e004      	b.n	8000c7e <NRF24L01p_read_rx_payload+0x42>
    }else{
    	NRF24L01p_port_SPI_Transcieve(data,data,32);
 8000c74:	2220      	movs	r2, #32
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 fc37 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    }
    NRF24L01p_port_write_Pin_CSN(1);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f000 fb94 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <NRF24L01p_flush_tx>:
    	NRF24L01p_port_SPI_Transcieve(data,data,32);
    }

    NRF24L01p_port_write_Pin_CSN(1);
}
void NRF24L01p_flush_tx(){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
	NRF24L01p_port_write_Pin_CSN(0);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 fb8a 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_TX);
 8000c98:	23e1      	movs	r3, #225	; 0xe1
 8000c9a:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp,&temp,1);
 8000c9c:	1df9      	adds	r1, r7, #7
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fc22 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_write_Pin_CSN(1);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f000 fb7f 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <NRF24L01p_flush_rx>:
void NRF24L01p_flush_rx(){
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
	NRF24L01p_port_write_Pin_CSN(0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 fb75 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_RX);
 8000cc2:	23e2      	movs	r3, #226	; 0xe2
 8000cc4:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp,&temp,1);
 8000cc6:	1df9      	adds	r1, r7, #7
 8000cc8:	1dfb      	adds	r3, r7, #7
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 fc0d 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_write_Pin_CSN(1);
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f000 fb6a 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <NRF24L01p_read_rx_payload_width>:
	NRF24L01p_port_write_Pin_CSN(0);
    uint8_t temp = (_NRF24L01P_SPI_CMD_REUSE_TX_PL);
    NRF24L01p_port_SPI_Transcieve(&temp,&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
}
int NRF24L01p_read_rx_payload_width(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	NRF24L01p_port_write_Pin_CSN(0);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 fb60 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_R_RX_PL_WID);
 8000cec:	2360      	movs	r3, #96	; 0x60
 8000cee:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp,&temp,1);
 8000cf0:	1df9      	adds	r1, r7, #7
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fbf8 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&temp,&temp,1); //the second time to send dummy byte to get the width
 8000cfc:	1df9      	adds	r1, r7, #7
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	2201      	movs	r2, #1
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fbf2 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_write_Pin_CSN(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 fb4f 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
    return temp;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <NRF24L01p_write_ack_payload>:
void NRF24L01p_write_ack_payload(NRF24L01p_pipe_t pipe, uint8_t *data, int pay_len){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	73fb      	strb	r3, [r7, #15]
	NRF24L01p_port_write_Pin_CSN(0);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 fb40 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_W_ACK_PAYLOAD | pipe);
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	f063 0357 	orn	r3, r3, #87	; 0x57
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	75fb      	strb	r3, [r7, #23]
    NRF24L01p_port_SPI_Transcieve(&temp,&temp,1);
 8000d36:	f107 0117 	add.w	r1, r7, #23
 8000d3a:	f107 0317 	add.w	r3, r7, #23
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fbd3 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    if(pay_len<=32){
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b20      	cmp	r3, #32
 8000d4a:	dc06      	bgt.n	8000d5a <NRF24L01p_write_ack_payload+0x42>
    	NRF24L01p_port_SPI_Transcieve(data,data,pay_len);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	68b8      	ldr	r0, [r7, #8]
 8000d54:	f000 fbca 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
 8000d58:	e004      	b.n	8000d64 <NRF24L01p_write_ack_payload+0x4c>
    }else{
    	NRF24L01p_port_SPI_Transcieve(data,data,32);
 8000d5a:	2220      	movs	r2, #32
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	68b8      	ldr	r0, [r7, #8]
 8000d60:	f000 fbc4 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    }
    NRF24L01p_port_write_Pin_CSN(1);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f000 fb21 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <NRF24L01p_get_status>:
    }else{
    	NRF24L01p_port_SPI_Transcieve(data,data,32);
    }
    NRF24L01p_port_write_Pin_CSN(1);
}
int NRF24L01p_get_status(){
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
	NRF24L01p_port_write_Pin_CSN(0);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 fb17 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_NOP );
 8000d7e:	23ff      	movs	r3, #255	; 0xff
 8000d80:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp,&temp,1);
 8000d82:	1df9      	adds	r1, r7, #7
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	2201      	movs	r2, #1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fbaf 	bl	80014ec <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_write_Pin_CSN(1);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f000 fb0c 	bl	80013ac <NRF24L01p_port_write_Pin_CSN>
    return temp;
 8000d94:	79fb      	ldrb	r3, [r7, #7]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <NRF24L01p_write_powerUp>:





void NRF24L01p_write_powerUp(bool sel){
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_PWR_UP);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d00b      	beq.n	8000dc6 <NRF24L01p_write_powerUp+0x28>
 8000dae:	2000      	movs	r0, #0
 8000db0:	f7ff feb4 	bl	8000b1c <NRF24L01p_read_register>
 8000db4:	4603      	mov	r3, r0
 8000db6:	f043 0302 	orr.w	r3, r3, #2
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fec9 	bl	8000b56 <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_PWR_UP);
}
 8000dc4:	e00a      	b.n	8000ddc <NRF24L01p_write_powerUp+0x3e>
    else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_PWR_UP);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff fea8 	bl	8000b1c <NRF24L01p_read_register>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f023 0302 	bic.w	r3, r3, #2
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f7ff febd 	bl	8000b56 <NRF24L01p_write_register>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <NRF24L01p_write_RxTxMode>:

bool NRF24L01p_read_powerUp(){
    return NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & _NRF24L01P_CONFIG_PWR_UP;
}

void NRF24L01p_write_RxTxMode(bool sel){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_PRIM_RX);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00b      	beq.n	8000e0c <NRF24L01p_write_RxTxMode+0x28>
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff fe91 	bl	8000b1c <NRF24L01p_read_register>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4619      	mov	r1, r3
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff fea6 	bl	8000b56 <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_PRIM_RX);
}
 8000e0a:	e00a      	b.n	8000e22 <NRF24L01p_write_RxTxMode+0x3e>
    else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_PRIM_RX);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff fe85 	bl	8000b1c <NRF24L01p_read_register>
 8000e12:	4603      	mov	r3, r0
 8000e14:	f023 0301 	bic.w	r3, r3, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff fe9a 	bl	8000b56 <NRF24L01p_write_register>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <NRF24L01p_write_dataReadyInterruptMask>:
    NRF24L01p_write_register(_NRF24L01P_REG_CONFIG, (NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~ _NRF24L01P_CONFIG_CRC_MASK) | opt);
}
NRF24L01p_crc_t NRF24L01p_read_CrcBytes(){
    return (NRF24L01p_crc_t) (NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) &  _NRF24L01P_CONFIG_CRC_MASK);
}
void NRF24L01p_write_dataReadyInterruptMask(bool sel){
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	71fb      	strb	r3, [r7, #7]
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_MASK_RX_DR);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00b      	beq.n	8000e52 <NRF24L01p_write_dataReadyInterruptMask+0x28>
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fe6e 	bl	8000b1c <NRF24L01p_read_register>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff fe83 	bl	8000b56 <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_MASK_RX_DR);
}
 8000e50:	e00a      	b.n	8000e68 <NRF24L01p_write_dataReadyInterruptMask+0x3e>
    else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_MASK_RX_DR);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff fe62 	bl	8000b1c <NRF24L01p_read_register>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4619      	mov	r1, r3
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fe77 	bl	8000b56 <NRF24L01p_write_register>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <NRF24L01p_write_dataSentInterruptMask>:
bool NRF24L01p_read_dataReadyInterruptMask(){
    return NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & _NRF24L01P_CONFIG_MASK_RX_DR;
}
void NRF24L01p_write_dataSentInterruptMask(bool sel){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
        if(sel) NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_MASK_TX_DS);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00b      	beq.n	8000e98 <NRF24L01p_write_dataSentInterruptMask+0x28>
 8000e80:	2000      	movs	r0, #0
 8000e82:	f7ff fe4b 	bl	8000b1c <NRF24L01p_read_register>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4619      	mov	r1, r3
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff fe60 	bl	8000b56 <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_MASK_TX_DS);
}
 8000e96:	e00a      	b.n	8000eae <NRF24L01p_write_dataSentInterruptMask+0x3e>
    else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_MASK_TX_DS);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fe3f 	bl	8000b1c <NRF24L01p_read_register>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f023 0320 	bic.w	r3, r3, #32
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fe54 	bl	8000b56 <NRF24L01p_write_register>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <NRF24L01p_write_maxRetryInterruptMask>:
bool NRF24L01p_read_dataSentInterruptMask(){
	return NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & _NRF24L01P_CONFIG_MASK_TX_DS;
}
void NRF24L01p_write_maxRetryInterruptMask(bool sel){
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
        if(sel) NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_MASK_MAX_RT);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00b      	beq.n	8000ede <NRF24L01p_write_maxRetryInterruptMask+0x28>
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff fe28 	bl	8000b1c <NRF24L01p_read_register>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f043 0310 	orr.w	r3, r3, #16
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff fe3d 	bl	8000b56 <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_MASK_MAX_RT);
}
 8000edc:	e00a      	b.n	8000ef4 <NRF24L01p_write_maxRetryInterruptMask+0x3e>
    else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_MASK_MAX_RT);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff fe1c 	bl	8000b1c <NRF24L01p_read_register>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f023 0310 	bic.w	r3, r3, #16
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4619      	mov	r1, r3
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f7ff fe31 	bl	8000b56 <NRF24L01p_write_register>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <NRF24L01p_write_autoAckOnPipe>:
bool NRF24L01p_read_maxRetryInterruptMask(){
	return NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & _NRF24L01P_CONFIG_MASK_MAX_RT;
}
void NRF24L01p_write_autoAckOnPipe(NRF24L01p_pipe_t pipe, bool sel){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	460a      	mov	r2, r1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	71bb      	strb	r3, [r7, #6]
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,NRF24L01p_read_register(_NRF24L01P_REG_EN_AA) | (1<< (int)pipe));
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d011      	beq.n	8000f36 <NRF24L01p_write_autoAckOnPipe+0x3a>
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff fe02 	bl	8000b1c <NRF24L01p_read_register>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b25a      	sxtb	r2, r3
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f7ff fe11 	bl	8000b56 <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,NRF24L01p_read_register(_NRF24L01P_REG_EN_AA) & ~(1<<(int)pipe));
}
 8000f34:	e012      	b.n	8000f5c <NRF24L01p_write_autoAckOnPipe+0x60>
    else NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,NRF24L01p_read_register(_NRF24L01P_REG_EN_AA) & ~(1<<(int)pipe));
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff fdf0 	bl	8000b1c <NRF24L01p_read_register>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	b25a      	sxtb	r2, r3
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2101      	movs	r1, #1
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	4013      	ands	r3, r2
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4619      	mov	r1, r3
 8000f56:	2001      	movs	r0, #1
 8000f58:	f7ff fdfd 	bl	8000b56 <NRF24L01p_write_register>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <NRF24L01p_write_RxOnPipe>:
bool NRF24L01p_read_autoAckOnPipe(NRF24L01p_pipe_t pipe){
    return NRF24L01p_read_register(_NRF24L01P_REG_EN_AA) & (1<<(int)pipe);
}
void NRF24L01p_write_RxOnPipe(NRF24L01p_pipe_t pipe, bool sel){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	71bb      	strb	r3, [r7, #6]
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR) | (1<< (int)pipe));
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d011      	beq.n	8000f9e <NRF24L01p_write_RxOnPipe+0x3a>
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f7ff fdce 	bl	8000b1c <NRF24L01p_read_register>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b25a      	sxtb	r2, r3
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2101      	movs	r1, #1
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4619      	mov	r1, r3
 8000f96:	2002      	movs	r0, #2
 8000f98:	f7ff fddd 	bl	8000b56 <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR) & ~(1<<(int)pipe));
}
 8000f9c:	e012      	b.n	8000fc4 <NRF24L01p_write_RxOnPipe+0x60>
    else NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR) & ~(1<<(int)pipe));
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f7ff fdbc 	bl	8000b1c <NRF24L01p_read_register>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f7ff fdc9 	bl	8000b56 <NRF24L01p_write_register>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <NRF24L01p_write_maxAutoRetransmissionCount>:
    NRF24L01p_write_register(_NRF24L01P_REG_SETUP_AW,(uint8_t) width);
}
NRF24L01p_aw_t NRF24L01p_read_addressWidth(){
    return (NRF24L01p_aw_t) NRF24L01p_read_register(_NRF24L01P_REG_SETUP_AW);
}
void NRF24L01p_write_maxAutoRetransmissionCount(uint8_t count){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,
            (NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR)& ~_NRF24L01P_OBSERVE_TX_ARC_CNT_MASK)
 8000fd6:	2004      	movs	r0, #4
 8000fd8:	f7ff fda0 	bl	8000b1c <NRF24L01p_read_register>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	f023 030f 	bic.w	r3, r3, #15
 8000fe4:	b25a      	sxtb	r2, r3
            | (count<<_NRF24L01P_OBSERVE_TX_ARC_CNT_BP)   );
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b25b      	sxtb	r3, r3
    NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	2004      	movs	r0, #4
 8000ff4:	f7ff fdaf 	bl	8000b56 <NRF24L01p_write_register>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <NRF24L01p_write_autoRetransmissionDelay>:
uint8_t NRF24L01p_read_maxAutoRetransmissionCount(){
    return NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR) & _NRF24L01P_OBSERVE_TX_ARC_CNT_MASK;
}
void NRF24L01p_write_autoRetransmissionDelay(uint8_t times250us){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
        NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,
            (NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR)& ~_NRF24L01P_OBSERVE_TX_PLOS_CNT_MASK)
 800100a:	2004      	movs	r0, #4
 800100c:	f7ff fd86 	bl	8000b1c <NRF24L01p_read_register>
 8001010:	4603      	mov	r3, r0
 8001012:	b25b      	sxtb	r3, r3
 8001014:	f003 030f 	and.w	r3, r3, #15
 8001018:	b25a      	sxtb	r2, r3
            | (times250us<<_NRF24L01P_OBSERVE_TX_PLOS_CNT_BP)   );
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	b25b      	sxtb	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b25b      	sxtb	r3, r3
        NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4619      	mov	r1, r3
 8001028:	2004      	movs	r0, #4
 800102a:	f7ff fd94 	bl	8000b56 <NRF24L01p_write_register>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <NRF24L01p_write_DataRate>:
    }
}
uint8_t NRF24L01p_read_freqOffset(){
    return NRF24L01p_read_register(_NRF24L01P_REG_RF_CH);
}
void NRF24L01p_write_DataRate(NRF24L01p_datarate_t DataRate){
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_RF_SETUP,(   NRF24L01p_read_register(_NRF24L01P_REG_RF_SETUP) & ~_NRF24L01P_RF_SETUP_RF_DR_MASK ) | DataRate);
 8001040:	2006      	movs	r0, #6
 8001042:	f7ff fd6b 	bl	8000b1c <NRF24L01p_read_register>
 8001046:	4603      	mov	r3, r0
 8001048:	b25b      	sxtb	r3, r3
 800104a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800104e:	b25a      	sxtb	r2, r3
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	4313      	orrs	r3, r2
 8001056:	b25b      	sxtb	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	4619      	mov	r1, r3
 800105c:	2006      	movs	r0, #6
 800105e:	f7ff fd7a 	bl	8000b56 <NRF24L01p_write_register>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <NRF24L01p_write_RfPower>:
NRF24L01p_datarate_t NRF24L01p_read_DataRate(){
    return (NRF24L01p_datarate_t) (NRF24L01p_read_register(_NRF24L01P_REG_RF_SETUP) & _NRF24L01P_RF_SETUP_RF_DR_MASK);

}
void NRF24L01p_write_RfPower(NRF24L01p_RFpower_t RFpower){
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register(_NRF24L01P_REG_RF_SETUP,(   NRF24L01p_read_register(_NRF24L01P_REG_RF_SETUP) & ~_NRF24L01P_RF_SETUP_RF_PWR_MASK ) | RFpower);
 8001074:	2006      	movs	r0, #6
 8001076:	f7ff fd51 	bl	8000b1c <NRF24L01p_read_register>
 800107a:	4603      	mov	r3, r0
 800107c:	b25b      	sxtb	r3, r3
 800107e:	f023 0306 	bic.w	r3, r3, #6
 8001082:	b25a      	sxtb	r2, r3
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	4313      	orrs	r3, r2
 800108a:	b25b      	sxtb	r3, r3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4619      	mov	r1, r3
 8001090:	2006      	movs	r0, #6
 8001092:	f7ff fd60 	bl	8000b56 <NRF24L01p_write_register>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <NRF24L01p_clear_DataReadyFlag>:
    NRF24L01p_write_register(_NRF24L01P_REG_STATUS,_NRF24L01P_STATUS_TX_DS);
}
bool NRF24L01p_read_DataReadyFlag(){
        return NRF24L01p_get_status()&_NRF24L01P_STATUS_RX_DR;
}
void NRF24L01p_clear_DataReadyFlag(){
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
    NRF24L01p_write_register(_NRF24L01P_REG_STATUS,_NRF24L01P_STATUS_RX_DR);
 80010a2:	2140      	movs	r1, #64	; 0x40
 80010a4:	2007      	movs	r0, #7
 80010a6:	f7ff fd56 	bl	8000b56 <NRF24L01p_write_register>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}

080010ae <NRF24L01p_read_rxPayloadOnPipe>:
NRF24L01p_pipe_t NRF24L01p_read_rxPayloadOnPipe(){
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
    return (NRF24L01p_pipe_t) ((NRF24L01p_get_status()&_NRF24L01P_STATUS_RX_P_NO_BM)>>_NRF24L01P_STATUS_RX_P_NO_BP);
 80010b2:	f7ff fe5e 	bl	8000d72 <NRF24L01p_get_status>
 80010b6:	4603      	mov	r3, r0
 80010b8:	105b      	asrs	r3, r3, #1
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	b2db      	uxtb	r3, r3
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <NRF24L01p_write_rxPipeAddress>:
    NRF24L01p_write_freqOffset(NRF24L01p_read_freqOffset());
}
bool NRF24L01p_read_rpd(){
    return NRF24L01p_read_register(_NRF24L01P_REG_RPD) &0x01;
}
void NRF24L01p_write_rxPipeAddress(NRF24L01p_pipe_t pipe,NRF24L01p_PipeAddr_t address){
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4601      	mov	r1, r0
 80010cc:	e9c7 2300 	strd	r2, r3, [r7]
 80010d0:	460b      	mov	r3, r1
 80010d2:	73fb      	strb	r3, [r7, #15]
    int max_pipe_addr_width = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    if((pipe>=0) && (pipe<=1)   ){max_pipe_addr_width = 5;}
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d802      	bhi.n	80010e4 <NRF24L01p_write_rxPipeAddress+0x20>
 80010de:	2305      	movs	r3, #5
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e007      	b.n	80010f4 <NRF24L01p_write_rxPipeAddress+0x30>
    else if ((pipe>=2) && (pipe<=5)   ){max_pipe_addr_width = 1;}
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d904      	bls.n	80010f4 <NRF24L01p_write_rxPipeAddress+0x30>
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	d801      	bhi.n	80010f4 <NRF24L01p_write_rxPipeAddress+0x30>
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
    uint8_t temp[5];
    int i;
    for(i=0;i<max_pipe_addr_width;i++){
 80010f4:	2300      	movs	r3, #0
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	e01b      	b.n	8001132 <NRF24L01p_write_rxPipeAddress+0x6e>
            temp[i] = (address>>(8*i))&0xFF;
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	00d9      	lsls	r1, r3, #3
 80010fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001102:	f1c1 0620 	rsb	r6, r1, #32
 8001106:	f1a1 0020 	sub.w	r0, r1, #32
 800110a:	fa22 f401 	lsr.w	r4, r2, r1
 800110e:	fa03 f606 	lsl.w	r6, r3, r6
 8001112:	4334      	orrs	r4, r6
 8001114:	fa23 f000 	lsr.w	r0, r3, r0
 8001118:	4304      	orrs	r4, r0
 800111a:	fa23 f501 	lsr.w	r5, r3, r1
 800111e:	b2e1      	uxtb	r1, r4
 8001120:	f107 0210 	add.w	r2, r7, #16
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	4413      	add	r3, r2
 8001128:	460a      	mov	r2, r1
 800112a:	701a      	strb	r2, [r3, #0]
    for(i=0;i<max_pipe_addr_width;i++){
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	3301      	adds	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	429a      	cmp	r2, r3
 8001138:	dbdf      	blt.n	80010fa <NRF24L01p_write_rxPipeAddress+0x36>
    }
    NRF24L01p_write_registers(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	330a      	adds	r3, #10
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f107 0110 	add.w	r1, r7, #16
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd4f 	bl	8000bea <NRF24L01p_write_registers>

}
 800114c:	bf00      	nop
 800114e:	3724      	adds	r7, #36	; 0x24
 8001150:	46bd      	mov	sp, r7
 8001152:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001154 <NRF24L01p_read_rxPipeWidth>:
}
void NRF24L01p_write_rxPipeWidth(NRF24L01p_pipe_t pipe, uint8_t width){
    uint8_t temp = width*0x3F;
    NRF24L01p_write_registers((_NRF24L01P_REG_RX_PW_P0+pipe),&temp,sizeof(temp));
}
uint8_t NRF24L01p_read_rxPipeWidth(NRF24L01p_pipe_t pipe){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
    uint8_t temp;
    NRF24L01p_read_registers((_NRF24L01P_REG_RX_PW_P0+pipe),&temp,sizeof(temp));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	3311      	adds	r3, #17
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f107 010f 	add.w	r1, r7, #15
 8001168:	2201      	movs	r2, #1
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fd19 	bl	8000ba2 <NRF24L01p_read_registers>
    return (temp&(0x3F));
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001176:	b2db      	uxtb	r3, r3
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <NRF24L01p_read_FifoRxEmptyFlag>:
bool NRF24L01p_read_FifoRxEmptyFlag(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    return (NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_EMPTY) ;
 8001184:	2017      	movs	r0, #23
 8001186:	f7ff fcc9 	bl	8000b1c <NRF24L01p_read_register>
 800118a:	4603      	mov	r3, r0
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf14      	ite	ne
 8001194:	2301      	movne	r3, #1
 8001196:	2300      	moveq	r3, #0
 8001198:	b2db      	uxtb	r3, r3
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}

0800119e <NRF24L01p_write_dynamicPayloadOnPipe>:
    return (NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_TX_FULL );
}
bool NRF24L01p_read_FifoTxReuseFlag(){
    return (NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_REUSE );
}
void NRF24L01p_write_dynamicPayloadOnPipe(NRF24L01p_pipe_t pipe, bool sel){
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	460a      	mov	r2, r1
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	4613      	mov	r3, r2
 80011ac:	71bb      	strb	r3, [r7, #6]
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,NRF24L01p_read_register(_NRF24L01P_REG_DYNPD) | (1<<pipe));
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d011      	beq.n	80011d8 <NRF24L01p_write_dynamicPayloadOnPipe+0x3a>
 80011b4:	201c      	movs	r0, #28
 80011b6:	f7ff fcb1 	bl	8000b1c <NRF24L01p_read_register>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b25a      	sxtb	r2, r3
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2101      	movs	r1, #1
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	b25b      	sxtb	r3, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	201c      	movs	r0, #28
 80011d2:	f7ff fcc0 	bl	8000b56 <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,NRF24L01p_read_register(_NRF24L01P_REG_DYNPD) & ~(1<<pipe));
}
 80011d6:	e012      	b.n	80011fe <NRF24L01p_write_dynamicPayloadOnPipe+0x60>
    else NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,NRF24L01p_read_register(_NRF24L01P_REG_DYNPD) & ~(1<<pipe));
 80011d8:	201c      	movs	r0, #28
 80011da:	f7ff fc9f 	bl	8000b1c <NRF24L01p_read_register>
 80011de:	4603      	mov	r3, r0
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2101      	movs	r1, #1
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	4013      	ands	r3, r2
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4619      	mov	r1, r3
 80011f8:	201c      	movs	r0, #28
 80011fa:	f7ff fcac 	bl	8000b56 <NRF24L01p_write_register>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <NRF24L01p_write_dynamicPayloadFeature>:
bool NRF24L01p_read_dynamicPayloadOnPipe(NRF24L01p_pipe_t pipe){
    return (NRF24L01p_read_register(_NRF24L01P_REG_DYNPD) & (1<<pipe));
}
void NRF24L01p_write_dynamicPayloadFeature(bool sel){
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) | (_NRF24L01_FEATURE_EN_DPL));
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <NRF24L01p_write_dynamicPayloadFeature+0x28>
 8001216:	201d      	movs	r0, #29
 8001218:	f7ff fc80 	bl	8000b1c <NRF24L01p_read_register>
 800121c:	4603      	mov	r3, r0
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	201d      	movs	r0, #29
 8001228:	f7ff fc95 	bl	8000b56 <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_DPL);
}
 800122c:	e00a      	b.n	8001244 <NRF24L01p_write_dynamicPayloadFeature+0x3e>
    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_DPL);
 800122e:	201d      	movs	r0, #29
 8001230:	f7ff fc74 	bl	8000b1c <NRF24L01p_read_register>
 8001234:	4603      	mov	r3, r0
 8001236:	f023 0304 	bic.w	r3, r3, #4
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4619      	mov	r1, r3
 800123e:	201d      	movs	r0, #29
 8001240:	f7ff fc89 	bl	8000b56 <NRF24L01p_write_register>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <NRF24L01p_write_payloadWithAckFeature>:
bool NRF24L01p_read_dynamicPayloadFeature( ){
    return (NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & _NRF24L01_FEATURE_EN_DPL);
}
void NRF24L01p_write_payloadWithAckFeature(bool sel){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
        if(sel) NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) | (_NRF24L01_FEATURE_EN_ACK_PAY));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00b      	beq.n	8001274 <NRF24L01p_write_payloadWithAckFeature+0x28>
 800125c:	201d      	movs	r0, #29
 800125e:	f7ff fc5d 	bl	8000b1c <NRF24L01p_read_register>
 8001262:	4603      	mov	r3, r0
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4619      	mov	r1, r3
 800126c:	201d      	movs	r0, #29
 800126e:	f7ff fc72 	bl	8000b56 <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_ACK_PAY);
}
 8001272:	e00a      	b.n	800128a <NRF24L01p_write_payloadWithAckFeature+0x3e>
    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_ACK_PAY);
 8001274:	201d      	movs	r0, #29
 8001276:	f7ff fc51 	bl	8000b1c <NRF24L01p_read_register>
 800127a:	4603      	mov	r3, r0
 800127c:	f023 0302 	bic.w	r3, r3, #2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	201d      	movs	r0, #29
 8001286:	f7ff fc66 	bl	8000b56 <NRF24L01p_write_register>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <NRF24L01p_write_dynamicPayloadWithNoAck>:
bool NRF24L01p_read_payloadWithAckFeature(){
    return (NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & _NRF24L01_FEATURE_EN_ACK_PAY);
}
void NRF24L01p_write_dynamicPayloadWithNoAck(bool sel){
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
        if(sel) NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) | (_NRF24L01_FEATURE_EN_DYN_ACK));
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <NRF24L01p_write_dynamicPayloadWithNoAck+0x28>
 80012a2:	201d      	movs	r0, #29
 80012a4:	f7ff fc3a 	bl	8000b1c <NRF24L01p_read_register>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4619      	mov	r1, r3
 80012b2:	201d      	movs	r0, #29
 80012b4:	f7ff fc4f 	bl	8000b56 <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_DYN_ACK);
}
 80012b8:	e00a      	b.n	80012d0 <NRF24L01p_write_dynamicPayloadWithNoAck+0x3e>
    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_DYN_ACK);
 80012ba:	201d      	movs	r0, #29
 80012bc:	f7ff fc2e 	bl	8000b1c <NRF24L01p_read_register>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4619      	mov	r1, r3
 80012ca:	201d      	movs	r0, #29
 80012cc:	f7ff fc43 	bl	8000b56 <NRF24L01p_write_register>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <NRF24L01p_port_Initialize>:
static GPIO_InitTypeDef nrf24l01p_CSN_pin_Struct = {NRF24L01P_CSN_PIN,GPIO_MODE_OUTPUT_PP,GPIO_NOPULL,GPIO_SPEED_FREQ_LOW,};
static GPIO_InitTypeDef nrf24l01p_IRQ_pin_Struct = {NRF24L01P_IRQ_PIN,GPIO_MODE_IT_FALLING,GPIO_NOPULL,GPIO_SPEED_FREQ_LOW,};



void NRF24L01p_port_Initialize(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	NRF24L01p_port_SPI_initialize();
 80012de:	f000 f877 	bl	80013d0 <NRF24L01p_port_SPI_initialize>

	/* Enable GPIOA clock */
	//__HAL_RCC_GPIOA_CLK_ENABLE();
	//__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <NRF24L01p_port_Initialize+0x3c>)
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <NRF24L01p_port_Initialize+0x3c>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <NRF24L01p_port_Initialize+0x3c>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]


	HAL_SPI_Init(&nrf24l01p_SpiHandle);
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <NRF24L01p_port_Initialize+0x40>)
 80012fc:	f001 fe7a 	bl	8002ff4 <HAL_SPI_Init>

	NRF24L01p_port_Pin_CE_Initialize();
 8001300:	f000 f80c 	bl	800131c <NRF24L01p_port_Pin_CE_Initialize>
	NRF24L01p_port_Pin_CSN_Initialize();
 8001304:	f000 f816 	bl	8001334 <NRF24L01p_port_Pin_CSN_Initialize>
	NRF24L01p_port_Pin_IRQ_Initialize();
 8001308:	f000 f820 	bl	800134c <NRF24L01p_port_Pin_IRQ_Initialize>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	200000c4 	.word	0x200000c4

0800131c <NRF24L01p_port_Pin_CE_Initialize>:
void NRF24L01p_port_DeInitialize(){
	HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
}
void NRF24L01p_port_Pin_CE_Initialize(){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
 8001320:	4902      	ldr	r1, [pc, #8]	; (800132c <NRF24L01p_port_Pin_CE_Initialize+0x10>)
 8001322:	4803      	ldr	r0, [pc, #12]	; (8001330 <NRF24L01p_port_Pin_CE_Initialize+0x14>)
 8001324:	f000 fa5a 	bl	80017dc <HAL_GPIO_Init>
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000000 	.word	0x20000000
 8001330:	48000800 	.word	0x48000800

08001334 <NRF24L01p_port_Pin_CSN_Initialize>:
void NRF24L01p_port_Pin_CSN_Initialize(){
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_CSN_PORT, &nrf24l01p_CSN_pin_Struct);
 8001338:	4902      	ldr	r1, [pc, #8]	; (8001344 <NRF24L01p_port_Pin_CSN_Initialize+0x10>)
 800133a:	4803      	ldr	r0, [pc, #12]	; (8001348 <NRF24L01p_port_Pin_CSN_Initialize+0x14>)
 800133c:	f000 fa4e 	bl	80017dc <HAL_GPIO_Init>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000014 	.word	0x20000014
 8001348:	48000800 	.word	0x48000800

0800134c <NRF24L01p_port_Pin_IRQ_Initialize>:
void NRF24L01p_port_Pin_IRQ_Initialize(){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_IRQ_PORT, &nrf24l01p_IRQ_pin_Struct);
 8001350:	4902      	ldr	r1, [pc, #8]	; (800135c <NRF24L01p_port_Pin_IRQ_Initialize+0x10>)
 8001352:	4803      	ldr	r0, [pc, #12]	; (8001360 <NRF24L01p_port_Pin_IRQ_Initialize+0x14>)
 8001354:	f000 fa42 	bl	80017dc <HAL_GPIO_Init>

	//HAL_NVIC_SetPriority(EXTI9_5_IRQn, 10, 0);//------------------------------------------------
	//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//---------------------------------------------------------
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000028 	.word	0x20000028
 8001360:	48000800 	.word	0x48000800

08001364 <NRF24L01p_port_read_Pin_CE>:
bool NRF24L01p_port_read_Pin_CE(){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN);
 8001368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <NRF24L01p_port_read_Pin_CE+0x20>)
 800136e:	f000 fbb3 	bl	8001ad8 <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf14      	ite	ne
 8001378:	2301      	movne	r3, #1
 800137a:	2300      	moveq	r3, #0
 800137c:	b2db      	uxtb	r3, r3
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	48000800 	.word	0x48000800

08001388 <NRF24L01p_port_write_Pin_CE>:
bool NRF24L01p_port_read_Pin_CSN(){
	return HAL_GPIO_ReadPin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN);
}
void NRF24L01p_port_write_Pin_CE(bool val){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN, (GPIO_PinState)val);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	461a      	mov	r2, r3
 8001396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800139a:	4803      	ldr	r0, [pc, #12]	; (80013a8 <NRF24L01p_port_write_Pin_CE+0x20>)
 800139c:	f000 fbb4 	bl	8001b08 <HAL_GPIO_WritePin>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	48000800 	.word	0x48000800

080013ac <NRF24L01p_port_write_Pin_CSN>:
void NRF24L01p_port_write_Pin_CSN(bool val){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN, (GPIO_PinState)val);
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	461a      	mov	r2, r3
 80013ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013be:	4803      	ldr	r0, [pc, #12]	; (80013cc <NRF24L01p_port_write_Pin_CSN+0x20>)
 80013c0:	f000 fba2 	bl	8001b08 <HAL_GPIO_WritePin>
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	48000800 	.word	0x48000800

080013d0 <NRF24L01p_port_SPI_initialize>:
void NRF24L01p_port_SPI_initialize(){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
	// TODO Auto-generated destructor stub
	/*##-1- Configure the SPI peripheral #######################################*/
	/* Set the SPI parameters */
	nrf24l01p_SpiHandle.Instance               = NRF24L01P_SPIx;
 80013d6:	4b41      	ldr	r3, [pc, #260]	; (80014dc <NRF24L01p_port_SPI_initialize+0x10c>)
 80013d8:	4a41      	ldr	r2, [pc, #260]	; (80014e0 <NRF24L01p_port_SPI_initialize+0x110>)
 80013da:	601a      	str	r2, [r3, #0]
	nrf24l01p_SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80013dc:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <NRF24L01p_port_SPI_initialize+0x10c>)
 80013de:	2238      	movs	r2, #56	; 0x38
 80013e0:	61da      	str	r2, [r3, #28]
	nrf24l01p_SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 80013e2:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <NRF24L01p_port_SPI_initialize+0x10c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
	nrf24l01p_SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80013e8:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <NRF24L01p_port_SPI_initialize+0x10c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	615a      	str	r2, [r3, #20]
	nrf24l01p_SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <NRF24L01p_port_SPI_initialize+0x10c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
	nrf24l01p_SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 80013f4:	4b39      	ldr	r3, [pc, #228]	; (80014dc <NRF24L01p_port_SPI_initialize+0x10c>)
 80013f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013fa:	60da      	str	r2, [r3, #12]
	nrf24l01p_SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80013fc:	4b37      	ldr	r3, [pc, #220]	; (80014dc <NRF24L01p_port_SPI_initialize+0x10c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
	nrf24l01p_SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001402:	4b36      	ldr	r3, [pc, #216]	; (80014dc <NRF24L01p_port_SPI_initialize+0x10c>)
 8001404:	2200      	movs	r2, #0
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
	nrf24l01p_SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001408:	4b34      	ldr	r3, [pc, #208]	; (80014dc <NRF24L01p_port_SPI_initialize+0x10c>)
 800140a:	2200      	movs	r2, #0
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
	nrf24l01p_SpiHandle.Init.CRCPolynomial     = 7;
 800140e:	4b33      	ldr	r3, [pc, #204]	; (80014dc <NRF24L01p_port_SPI_initialize+0x10c>)
 8001410:	2207      	movs	r2, #7
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
	//nrf24l01p_SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
	nrf24l01p_SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8001414:	4b31      	ldr	r3, [pc, #196]	; (80014dc <NRF24L01p_port_SPI_initialize+0x10c>)
 8001416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141a:	619a      	str	r2, [r3, #24]
	//nrf24l01p_SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

	nrf24l01p_SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800141c:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <NRF24L01p_port_SPI_initialize+0x10c>)
 800141e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001422:	605a      	str	r2, [r3, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	NRF24L01P_SPIx_SCK_GPIO_CLK_ENABLE();
 8001424:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <NRF24L01p_port_SPI_initialize+0x114>)
 8001426:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <NRF24L01p_port_SPI_initialize+0x114>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001430:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <NRF24L01p_port_SPI_initialize+0x114>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
	NRF24L01P_SPIx_MISO_GPIO_CLK_ENABLE();
 800143c:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <NRF24L01p_port_SPI_initialize+0x114>)
 800143e:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <NRF24L01p_port_SPI_initialize+0x114>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001448:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <NRF24L01p_port_SPI_initialize+0x114>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
	NRF24L01P_SPIx_MOSI_GPIO_CLK_ENABLE();
 8001454:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <NRF24L01p_port_SPI_initialize+0x114>)
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <NRF24L01p_port_SPI_initialize+0x114>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001460:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <NRF24L01p_port_SPI_initialize+0x114>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
	/* Enable SPI clock */
	NRF24L01P_SPIx_CLK_ENABLE();
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <NRF24L01p_port_SPI_initialize+0x114>)
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <NRF24L01p_port_SPI_initialize+0x114>)
 8001470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001476:	6593      	str	r3, [r2, #88]	; 0x58
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <NRF24L01p_port_SPI_initialize+0x114>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* SPI SCK GPIO pin configuration  */
	GPIO_InitStruct.Pin       = NRF24L01P_SPIx_SCK_PIN;
 8001484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001488:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 800148e:	2302      	movs	r3, #2
 8001490:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_SCK_AF;
 8001496:	2306      	movs	r3, #6
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	4811      	ldr	r0, [pc, #68]	; (80014e8 <NRF24L01p_port_SPI_initialize+0x118>)
 80014a2:	f000 f99b 	bl	80017dc <HAL_GPIO_Init>

	/* SPI MISO GPIO pin configuration  */
	GPIO_InitStruct.Pin = NRF24L01P_SPIx_MISO_PIN;
 80014a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_MISO_AF;
 80014ac:	2306      	movs	r3, #6
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	480c      	ldr	r0, [pc, #48]	; (80014e8 <NRF24L01p_port_SPI_initialize+0x118>)
 80014b8:	f000 f990 	bl	80017dc <HAL_GPIO_Init>

	/* SPI MOSI GPIO pin configuration  */
	GPIO_InitStruct.Pin = NRF24L01P_SPIx_MOSI_PIN;
 80014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_MOSI_AF;
 80014c2:	2306      	movs	r3, #6
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <NRF24L01p_port_SPI_initialize+0x118>)
 80014ce:	f000 f985 	bl	80017dc <HAL_GPIO_Init>
}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200000c4 	.word	0x200000c4
 80014e0:	40003c00 	.word	0x40003c00
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000800 	.word	0x48000800

080014ec <NRF24L01p_port_SPI_Transcieve>:
int NRF24L01p_port_SPI_Transcieve(uint8_t *dataOut, uint8_t *dataIn, unsigned int size){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	return HAL_SPI_TransmitReceive(&nrf24l01p_SpiHandle, dataOut, dataIn, size,1000);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	4613      	mov	r3, r2
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	68f9      	ldr	r1, [r7, #12]
 8001508:	4803      	ldr	r0, [pc, #12]	; (8001518 <NRF24L01p_port_SPI_Transcieve+0x2c>)
 800150a:	f001 ff51 	bl	80033b0 <HAL_SPI_TransmitReceive>
 800150e:	4603      	mov	r3, r0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200000c4 	.word	0x200000c4

0800151c <NRF24L01p_port_DelayMs>:
int NRF24L01p_port_SPI_Receive(uint8_t *data, unsigned int size){
	HAL_SPI_Receive(&nrf24l01p_SpiHandle, data, size, 1000);
}


void NRF24L01p_port_DelayMs(unsigned int ms){
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f85f 	bl	80015e8 <HAL_Delay>
	//vTaskDelay ((ms / portTICK_PERIOD_MS));

}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <NRF24L01p_port_DelayUs>:
void NRF24L01p_port_DelayUs(unsigned int us){
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	unsigned int ms = us/1000;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a07      	ldr	r2, [pc, #28]	; (800155c <NRF24L01p_port_DelayUs+0x28>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	099b      	lsrs	r3, r3, #6
 8001546:	60fb      	str	r3, [r7, #12]
	HAL_Delay(ms + 1);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3301      	adds	r3, #1
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f84b 	bl	80015e8 <HAL_Delay>
	//vTaskDelay (( ms / portTICK_PERIOD_MS));
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	10624dd3 	.word	0x10624dd3

08001560 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f905 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f806 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f003 f97a 	bl	8004868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_InitTick+0x30>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <HAL_InitTick+0x34>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	099b      	lsrs	r3, r3, #6
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f916 	bl	80017c2 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001596:	2200      	movs	r2, #0
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	f04f 30ff 	mov.w	r0, #4294967295
 800159e:	f000 f8f4 	bl	800178a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000040 	.word	0x20000040
 80015b0:	10624dd3 	.word	0x10624dd3

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick++;
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <HAL_IncTick+0x18>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a03      	ldr	r2, [pc, #12]	; (80015cc <HAL_IncTick+0x18>)
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	20000320 	.word	0x20000320

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000320 	.word	0x20000320

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80015f4:	f7ff ffec 	bl	80015d0 <HAL_GetTick>
 80015f8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80015fa:	bf00      	nop
 80015fc:	f7ff ffe8 	bl	80015d0 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad2      	subs	r2, r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	d3f7      	bcc.n	80015fc <HAL_Delay+0x14>
  {
  }
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <NVIC_SetPriorityGrouping+0x44>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001630:	4013      	ands	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800163c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <NVIC_SetPriorityGrouping+0x44>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	da0b      	bge.n	80016a4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	490d      	ldr	r1, [pc, #52]	; (80016c4 <NVIC_SetPriority+0x4c>)
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	3b04      	subs	r3, #4
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a2:	e009      	b.n	80016b8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	4908      	ldr	r1, [pc, #32]	; (80016c8 <NVIC_SetPriority+0x50>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00
 80016c8:	e000e100 	.word	0xe000e100

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	2201      	movs	r2, #1
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	1e5a      	subs	r2, r3, #1
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	401a      	ands	r2, r3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001712:	2101      	movs	r1, #1
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	1e59      	subs	r1, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
         );
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff90 	bl	8001678 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff49 	bl	8001614 <NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff5e 	bl	800165c <NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff90 	bl	80016cc <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5f 	bl	8001678 <NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffb0 	bl	8001730 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80017f2:	e154      	b.n	8001a9e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2101      	movs	r1, #1
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8146 	beq.w	8001a98 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x40>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d123      	bne.n	8001864 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	6939      	ldr	r1, [r7, #16]
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d00b      	beq.n	80018b8 <HAL_GPIO_Init+0xdc>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ac:	2b11      	cmp	r3, #17
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b12      	cmp	r3, #18
 80018b6:	d130      	bne.n	800191a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ee:	2201      	movs	r2, #1
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	f003 0201 	and.w	r2, r3, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80a0 	beq.w	8001a98 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001958:	4a58      	ldr	r2, [pc, #352]	; (8001abc <HAL_GPIO_Init+0x2e0>)
 800195a:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_GPIO_Init+0x2e0>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6613      	str	r3, [r2, #96]	; 0x60
 8001964:	4b55      	ldr	r3, [pc, #340]	; (8001abc <HAL_GPIO_Init+0x2e0>)
 8001966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001970:	4a53      	ldr	r2, [pc, #332]	; (8001ac0 <HAL_GPIO_Init+0x2e4>)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3302      	adds	r3, #2
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800199a:	d019      	beq.n	80019d0 <HAL_GPIO_Init+0x1f4>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <HAL_GPIO_Init+0x2e8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d013      	beq.n	80019cc <HAL_GPIO_Init+0x1f0>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a48      	ldr	r2, [pc, #288]	; (8001ac8 <HAL_GPIO_Init+0x2ec>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00d      	beq.n	80019c8 <HAL_GPIO_Init+0x1ec>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a47      	ldr	r2, [pc, #284]	; (8001acc <HAL_GPIO_Init+0x2f0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d007      	beq.n	80019c4 <HAL_GPIO_Init+0x1e8>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_GPIO_Init+0x2f4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d101      	bne.n	80019c0 <HAL_GPIO_Init+0x1e4>
 80019bc:	2304      	movs	r3, #4
 80019be:	e008      	b.n	80019d2 <HAL_GPIO_Init+0x1f6>
 80019c0:	2307      	movs	r3, #7
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x1f6>
 80019c4:	2303      	movs	r3, #3
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x1f6>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x1f6>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x1f6>
 80019d0:	2300      	movs	r3, #0
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019e2:	4937      	ldr	r1, [pc, #220]	; (8001ac0 <HAL_GPIO_Init+0x2e4>)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019f0:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <HAL_GPIO_Init+0x2f8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a14:	4a2f      	ldr	r2, [pc, #188]	; (8001ad4 <HAL_GPIO_Init+0x2f8>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <HAL_GPIO_Init+0x2f8>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a3e:	4a25      	ldr	r2, [pc, #148]	; (8001ad4 <HAL_GPIO_Init+0x2f8>)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_GPIO_Init+0x2f8>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a68:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <HAL_GPIO_Init+0x2f8>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_GPIO_Init+0x2f8>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_GPIO_Init+0x2f8>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f47f aea3 	bne.w	80017f4 <HAL_GPIO_Init+0x18>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	48000400 	.word	0x48000400
 8001ac8:	48000800 	.word	0x48000800
 8001acc:	48000c00 	.word	0x48000c00
 8001ad0:	48001000 	.word	0x48001000
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e001      	b.n	8001afa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
 8001b14:	4613      	mov	r3, r2
 8001b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b18:	787b      	ldrb	r3, [r7, #1]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8001b3c:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40007000 	.word	0x40007000

08001b58 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40007000 	.word	0x40007000

08001b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b86:	d12f      	bne.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b94:	d037      	beq.n	8001c06 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b96:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b98:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba4:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bac:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb0:	0c9b      	lsrs	r3, r3, #18
 8001bb2:	2232      	movs	r2, #50	; 0x32
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001bba:	e002      	b.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x62>
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd4:	d0f2      	beq.n	8001bbc <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be2:	d110      	bne.n	8001c06 <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e00f      	b.n	8001c08 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf4:	d007      	beq.n	8001c06 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bf6:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c04:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}  
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40007000 	.word	0x40007000
 8001c18:	20000040 	.word	0x20000040
 8001c1c:	431bde83 	.word	0x431bde83

08001c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08c      	sub	sp, #48	; 0x30
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80db 	beq.w	8001df0 <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001c3a:	4ba2      	ldr	r3, [pc, #648]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 8084 	bne.w	8001d50 <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c48:	4b9e      	ldr	r3, [pc, #632]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_OscConfig+0x40>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e39b      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1a      	ldr	r2, [r3, #32]
 8001c64:	4b97      	ldr	r3, [pc, #604]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d004      	beq.n	8001c7a <HAL_RCC_OscConfig+0x5a>
 8001c70:	4b94      	ldr	r3, [pc, #592]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c78:	e005      	b.n	8001c86 <HAL_RCC_OscConfig+0x66>
 8001c7a:	4b92      	ldr	r3, [pc, #584]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d923      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fda4 	bl	80027dc <RCC_SetFlashLatencyFromMSIRange>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e37c      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c9e:	4a89      	ldr	r2, [pc, #548]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001ca0:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f043 0308 	orr.w	r3, r3, #8
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4986      	ldr	r1, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001cac:	4b85      	ldr	r3, [pc, #532]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cbc:	4981      	ldr	r1, [pc, #516]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001cbe:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
 8001cd0:	e022      	b.n	8001d18 <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd2:	4a7c      	ldr	r2, [pc, #496]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001cd4:	4b7b      	ldr	r3, [pc, #492]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4979      	ldr	r1, [pc, #484]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001ce0:	4b78      	ldr	r3, [pc, #480]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf0:	4974      	ldr	r1, [pc, #464]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001cf2:	4b74      	ldr	r3, [pc, #464]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fd67 	bl	80027dc <RCC_SetFlashLatencyFromMSIRange>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e33f      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001d18:	f000 fc66 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8001d1c:	4601      	mov	r1, r0
 8001d1e:	4b69      	ldr	r3, [pc, #420]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d26:	23f0      	movs	r3, #240	; 0xf0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	4a62      	ldr	r2, [pc, #392]	; (8001ec8 <HAL_RCC_OscConfig+0x2a8>)
 8001d3e:	5cd3      	ldrb	r3, [r2, r3]
 8001d40:	fa21 f303 	lsr.w	r3, r1, r3
 8001d44:	4a61      	ldr	r2, [pc, #388]	; (8001ecc <HAL_RCC_OscConfig+0x2ac>)
 8001d46:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff fc17 	bl	800157c <HAL_InitTick>
 8001d4e:	e04f      	b.n	8001df0 <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d032      	beq.n	8001dbe <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d58:	4a5a      	ldr	r2, [pc, #360]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001d5a:	4b5a      	ldr	r3, [pc, #360]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fc34 	bl	80015d0 <HAL_GetTick>
 8001d68:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fc30 	bl	80015d0 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e30c      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001d7e:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d8a:	4a4e      	ldr	r2, [pc, #312]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001d8c:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f043 0308 	orr.w	r3, r3, #8
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	494b      	ldr	r1, [pc, #300]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001d98:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da8:	4946      	ldr	r1, [pc, #280]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001daa:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
 8001dbc:	e018      	b.n	8001df0 <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dbe:	4a41      	ldr	r2, [pc, #260]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001dc0:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dca:	f7ff fc01 	bl	80015d0 <HAL_GetTick>
 8001dce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dd2:	f7ff fbfd 	bl	80015d0 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e2d9      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001de4:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d07a      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001dfc:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d00b      	beq.n	8001e20 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e08:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001e10:	2b0c      	cmp	r3, #12
 8001e12:	d111      	bne.n	8001e38 <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d10b      	bne.n	8001e38 <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d061      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x2d0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d15d      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2d0>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e2af      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e40:	d106      	bne.n	8001e50 <HAL_RCC_OscConfig+0x230>
 8001e42:	4a20      	ldr	r2, [pc, #128]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001e44:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e01d      	b.n	8001e8c <HAL_RCC_OscConfig+0x26c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x254>
 8001e5a:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0x26c>
 8001e74:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <HAL_RCC_OscConfig+0x29c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff fb9c 	bl	80015d0 <HAL_GetTick>
 8001e98:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff fb98 	bl	80015d0 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e274      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x2a4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x27c>
 8001eba:	e01a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fb88 	bl	80015d0 <HAL_GetTick>
 8001ec0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x2c2>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08005ab8 	.word	0x08005ab8
 8001ecc:	20000040 	.word	0x20000040
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fb7e 	bl	80015d0 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e25a      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001ee2:	4bb0      	ldr	r3, [pc, #704]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2b0>
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d07f      	beq.n	8001ffe <HAL_RCC_OscConfig+0x3de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001efe:	4ba9      	ldr	r3, [pc, #676]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d00b      	beq.n	8001f22 <HAL_RCC_OscConfig+0x302>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f0a:	4ba6      	ldr	r3, [pc, #664]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001f12:	2b0c      	cmp	r3, #12
 8001f14:	d127      	bne.n	8001f66 <HAL_RCC_OscConfig+0x346>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f16:	4ba3      	ldr	r3, [pc, #652]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d121      	bne.n	8001f66 <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f22:	4ba0      	ldr	r3, [pc, #640]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_RCC_OscConfig+0x31a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e22e      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3a:	489a      	ldr	r0, [pc, #616]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001f3c:	4b99      	ldr	r3, [pc, #612]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6919      	ldr	r1, [r3, #16]
 8001f48:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8001f4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	61bb      	str	r3, [r7, #24]
  return(result);
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	4313      	orrs	r3, r2
 8001f62:	6043      	str	r3, [r0, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f64:	e04b      	b.n	8001ffe <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d02e      	beq.n	8001fcc <HAL_RCC_OscConfig+0x3ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6e:	4a8d      	ldr	r2, [pc, #564]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001f70:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fb29 	bl	80015d0 <HAL_GetTick>
 8001f7e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f82:	f7ff fb25 	bl	80015d0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e201      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001f94:	4b83      	ldr	r3, [pc, #524]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4880      	ldr	r0, [pc, #512]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001fa2:	4b80      	ldr	r3, [pc, #512]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6919      	ldr	r1, [r3, #16]
 8001fae:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8001fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	613b      	str	r3, [r7, #16]
  return(result);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	6043      	str	r3, [r0, #4]
 8001fca:	e018      	b.n	8001ffe <HAL_RCC_OscConfig+0x3de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fcc:	4a75      	ldr	r2, [pc, #468]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001fce:	4b75      	ldr	r3, [pc, #468]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fafa 	bl	80015d0 <HAL_GetTick>
 8001fdc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7ff faf6 	bl	80015d0 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e1d2      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001ff2:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03c      	beq.n	8002084 <HAL_RCC_OscConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01c      	beq.n	800204c <HAL_RCC_OscConfig+0x42c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002012:	4a64      	ldr	r2, [pc, #400]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8002014:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8002016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002022:	f7ff fad5 	bl	80015d0 <HAL_GetTick>
 8002026:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202a:	f7ff fad1 	bl	80015d0 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e1ad      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800203c:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 800203e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ef      	beq.n	800202a <HAL_RCC_OscConfig+0x40a>
 800204a:	e01b      	b.n	8002084 <HAL_RCC_OscConfig+0x464>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204c:	4a55      	ldr	r2, [pc, #340]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 800204e:	4b55      	ldr	r3, [pc, #340]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8002050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7ff fab8 	bl	80015d0 <HAL_GetTick>
 8002060:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002064:	f7ff fab4 	bl	80015d0 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e190      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8002076:	4b4b      	ldr	r3, [pc, #300]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8002078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ef      	bne.n	8002064 <HAL_RCC_OscConfig+0x444>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a9 	beq.w	80021e4 <HAL_RCC_OscConfig+0x5c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002098:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10e      	bne.n	80020c2 <HAL_RCC_OscConfig+0x4a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	4a3f      	ldr	r2, [pc, #252]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 80020a6:	4b3f      	ldr	r3, [pc, #252]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ae:	6593      	str	r3, [r2, #88]	; 0x58
 80020b0:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020bc:	2301      	movs	r3, #1
 80020be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c2:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <HAL_RCC_OscConfig+0x588>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d118      	bne.n	8002100 <HAL_RCC_OscConfig+0x4e0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ce:	4a36      	ldr	r2, [pc, #216]	; (80021a8 <HAL_RCC_OscConfig+0x588>)
 80020d0:	4b35      	ldr	r3, [pc, #212]	; (80021a8 <HAL_RCC_OscConfig+0x588>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020da:	f7ff fa79 	bl	80015d0 <HAL_GetTick>
 80020de:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e2:	f7ff fa75 	bl	80015d0 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e151      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f4:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <HAL_RCC_OscConfig+0x588>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x4c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d108      	bne.n	800211a <HAL_RCC_OscConfig+0x4fa>
 8002108:	4a26      	ldr	r2, [pc, #152]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 800210a:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002118:	e024      	b.n	8002164 <HAL_RCC_OscConfig+0x544>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d110      	bne.n	8002144 <HAL_RCC_OscConfig+0x524>
 8002122:	4a20      	ldr	r2, [pc, #128]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002132:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002142:	e00f      	b.n	8002164 <HAL_RCC_OscConfig+0x544>
 8002144:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8002146:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002154:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d016      	beq.n	800219a <HAL_RCC_OscConfig+0x57a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7ff fa30 	bl	80015d0 <HAL_GetTick>
 8002170:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002172:	e00a      	b.n	800218a <HAL_RCC_OscConfig+0x56a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002174:	f7ff fa2c 	bl	80015d0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x56a>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e106      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_OscConfig+0x584>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ed      	beq.n	8002174 <HAL_RCC_OscConfig+0x554>
 8002198:	e01a      	b.n	80021d0 <HAL_RCC_OscConfig+0x5b0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7ff fa19 	bl	80015d0 <HAL_GetTick>
 800219e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80021a0:	e00f      	b.n	80021c2 <HAL_RCC_OscConfig+0x5a2>
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7ff fa10 	bl	80015d0 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x5a2>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0ea      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80021c2:	4b77      	ldr	r3, [pc, #476]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ed      	bne.n	80021ac <HAL_RCC_OscConfig+0x58c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d105      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d8:	4a71      	ldr	r2, [pc, #452]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80021da:	4b71      	ldr	r3, [pc, #452]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d03c      	beq.n	800226a <HAL_RCC_OscConfig+0x64a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01c      	beq.n	8002232 <HAL_RCC_OscConfig+0x612>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021f8:	4a69      	ldr	r2, [pc, #420]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80021fa:	4b69      	ldr	r3, [pc, #420]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80021fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7ff f9e2 	bl	80015d0 <HAL_GetTick>
 800220c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x602>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002210:	f7ff f9de 	bl	80015d0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x602>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e0ba      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8002222:	4b5f      	ldr	r3, [pc, #380]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002224:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0ef      	beq.n	8002210 <HAL_RCC_OscConfig+0x5f0>
 8002230:	e01b      	b.n	800226a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002232:	4a5b      	ldr	r2, [pc, #364]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002234:	4b5a      	ldr	r3, [pc, #360]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002236:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002242:	f7ff f9c5 	bl	80015d0 <HAL_GetTick>
 8002246:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x63c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800224a:	f7ff f9c1 	bl	80015d0 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e09d      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 800225c:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800225e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1ef      	bne.n	800224a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8091 	beq.w	8002396 <HAL_RCC_OscConfig+0x776>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002274:	4b4a      	ldr	r3, [pc, #296]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b0c      	cmp	r3, #12
 800227e:	f000 8088 	beq.w	8002392 <HAL_RCC_OscConfig+0x772>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	2b02      	cmp	r3, #2
 8002288:	d155      	bne.n	8002336 <HAL_RCC_OscConfig+0x716>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4a45      	ldr	r2, [pc, #276]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800228c:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7ff f99b 	bl	80015d0 <HAL_GetTick>
 800229a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229e:	f7ff f997 	bl	80015d0 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e073      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80022b0:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022bc:	4938      	ldr	r1, [pc, #224]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	3b01      	subs	r3, #1
 80022c4:	011a      	lsls	r2, r3, #4
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	3b01      	subs	r3, #1
 80022dc:	055b      	lsls	r3, r3, #21
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	3b01      	subs	r3, #1
 80022e8:	065b      	lsls	r3, r3, #25
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	06db      	lsls	r3, r3, #27
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f6:	4a2a      	ldr	r2, [pc, #168]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002300:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002302:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002304:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7ff f95f 	bl	80015d0 <HAL_GetTick>
 8002312:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x708>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff f95b 	bl	80015d0 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x708>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e037      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x6f6>
 8002334:	e02f      	b.n	8002396 <HAL_RCC_OscConfig+0x776>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4a1a      	ldr	r2, [pc, #104]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002340:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <HAL_RCC_OscConfig+0x73a>
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800234e:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f023 0303 	bic.w	r3, r3, #3
 8002358:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800235a:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002368:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7ff f931 	bl	80015d0 <HAL_GetTick>
 800236e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x764>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002372:	f7ff f92d 	bl	80015d0 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x764>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e009      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_RCC_OscConfig+0x780>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x752>
 8002390:	e001      	b.n	8002396 <HAL_RCC_OscConfig+0x776>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_RCC_OscConfig+0x778>
    }
  }
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3730      	adds	r7, #48	; 0x30
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80023b2:	4b89      	ldr	r3, [pc, #548]	; (80025d8 <HAL_RCC_ClockConfig+0x234>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0207 	and.w	r2, r3, #7
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d210      	bcs.n	80023e2 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c0:	4985      	ldr	r1, [pc, #532]	; (80025d8 <HAL_RCC_ClockConfig+0x234>)
 80023c2:	4b85      	ldr	r3, [pc, #532]	; (80025d8 <HAL_RCC_ClockConfig+0x234>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 0207 	bic.w	r2, r3, #7
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023d0:	4b81      	ldr	r3, [pc, #516]	; (80025d8 <HAL_RCC_ClockConfig+0x234>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0207 	and.w	r2, r3, #7
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0f6      	b.n	80025d0 <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ee:	497b      	ldr	r1, [pc, #492]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 80023f0:	4b7a      	ldr	r3, [pc, #488]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 808e 	beq.w	800252a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002416:	4b71      	ldr	r3, [pc, #452]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d121      	bne.n	8002466 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0d4      	b.n	80025d0 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800242e:	4b6b      	ldr	r3, [pc, #428]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d115      	bne.n	8002466 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0c8      	b.n	80025d0 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002446:	4b65      	ldr	r3, [pc, #404]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0bc      	b.n	80025d0 <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002456:	4b61      	ldr	r3, [pc, #388]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0b4      	b.n	80025d0 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002466:	495d      	ldr	r1, [pc, #372]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 8002468:	4b5c      	ldr	r3, [pc, #368]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 0203 	bic.w	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002478:	f7ff f8aa 	bl	80015d0 <HAL_GetTick>
 800247c:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d112      	bne.n	80024ac <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7ff f8a2 	bl	80015d0 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e098      	b.n	80025d0 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800249e:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d1ee      	bne.n	8002488 <HAL_RCC_ClockConfig+0xe4>
 80024aa:	e03e      	b.n	800252a <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d112      	bne.n	80024da <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b6:	f7ff f88b 	bl	80015d0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e081      	b.n	80025d0 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024cc:	4b43      	ldr	r3, [pc, #268]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b0c      	cmp	r3, #12
 80024d6:	d1ee      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x112>
 80024d8:	e027      	b.n	800252a <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d11d      	bne.n	800251e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e4:	f7ff f874 	bl	80015d0 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e06a      	b.n	80025d0 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ee      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x140>
 8002506:	e010      	b.n	800252a <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002508:	f7ff f862 	bl	80015d0 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e058      	b.n	80025d0 <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800251e:	4b2f      	ldr	r3, [pc, #188]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d1ee      	bne.n	8002508 <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800252a:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_ClockConfig+0x234>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0207 	and.w	r2, r3, #7
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d910      	bls.n	800255a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002538:	4927      	ldr	r1, [pc, #156]	; (80025d8 <HAL_RCC_ClockConfig+0x234>)
 800253a:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_RCC_ClockConfig+0x234>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 0207 	bic.w	r2, r3, #7
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002548:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <HAL_RCC_ClockConfig+0x234>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0207 	and.w	r2, r3, #7
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e03a      	b.n	80025d0 <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002566:	491d      	ldr	r1, [pc, #116]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 8002568:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d009      	beq.n	8002598 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002584:	4915      	ldr	r1, [pc, #84]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4313      	orrs	r3, r2
 8002596:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002598:	f000 f826 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 800259c:	4601      	mov	r1, r0
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <HAL_RCC_ClockConfig+0x238>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025a6:	23f0      	movs	r3, #240	; 0xf0
 80025a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	4a08      	ldr	r2, [pc, #32]	; (80025e0 <HAL_RCC_ClockConfig+0x23c>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	fa21 f303 	lsr.w	r3, r1, r3
 80025c4:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <HAL_RCC_ClockConfig+0x240>)
 80025c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7fe ffd7 	bl	800157c <HAL_InitTick>

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08005ab8 	.word	0x08005ab8
 80025e4:	20000040 	.word	0x20000040

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b095      	sub	sp, #84	; 0x54
 80025ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f2:	2300      	movs	r3, #0
 80025f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80025f6:	2300      	movs	r3, #0
 80025f8:	643b      	str	r3, [r7, #64]	; 0x40
 80025fa:	2302      	movs	r3, #2
 80025fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fe:	2302      	movs	r3, #2
 8002600:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8002606:	4b71      	ldr	r3, [pc, #452]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00b      	beq.n	800262a <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8002612:	4b6e      	ldr	r3, [pc, #440]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d13c      	bne.n	8002698 <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800261e:	4b6b      	ldr	r3, [pc, #428]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d136      	bne.n	8002698 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800262a:	4b68      	ldr	r3, [pc, #416]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d112      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8002636:	4b65      	ldr	r3, [pc, #404]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002640:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
 8002658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800265a:	e00f      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 800265c:	4b5b      	ldr	r3, [pc, #364]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002664:	23f0      	movs	r3, #240	; 0xf0
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	fa22 f303 	lsr.w	r3, r2, r3
 800267a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800267c:	4a54      	ldr	r2, [pc, #336]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x1e8>)
 800267e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002684:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8002686:	4b51      	ldr	r3, [pc, #324]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b00      	cmp	r3, #0
 8002690:	d113      	bne.n	80026ba <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8002696:	e010      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d102      	bne.n	80026aa <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026a4:	4b4b      	ldr	r3, [pc, #300]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1ec>)
 80026a6:	647b      	str	r3, [r7, #68]	; 0x44
 80026a8:	e007      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026aa:	4b48      	ldr	r3, [pc, #288]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026b6:	4b48      	ldr	r3, [pc, #288]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80026b8:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80026ba:	4b44      	ldr	r3, [pc, #272]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d17b      	bne.n	80027be <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 80026d0:	4b3e      	ldr	r3, [pc, #248]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026d8:	2370      	movs	r3, #112	; 0x70
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	623b      	str	r3, [r7, #32]
  return(result);
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	fa22 f303 	lsr.w	r3, r2, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 80026f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d002      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x116>
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d018      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x146>
 80026fc:	e02f      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80026fe:	4a35      	ldr	r2, [pc, #212]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	4a31      	ldr	r2, [pc, #196]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002708:	68d2      	ldr	r2, [r2, #12]
 800270a:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 800270e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002712:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	fa92 f2a2 	rbit	r2, r2
 800271a:	61ba      	str	r2, [r7, #24]
  return(result);
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	fab2 f282 	clz	r2, r2
 8002722:	fa21 f202 	lsr.w	r2, r1, r2
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800272c:	e02f      	b.n	800278e <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800272e:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002732:	fbb2 f3f3 	udiv	r3, r2, r3
 8002736:	4a25      	ldr	r2, [pc, #148]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002738:	68d2      	ldr	r2, [r2, #12]
 800273a:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 800273e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002742:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	fa92 f2a2 	rbit	r2, r2
 800274a:	613a      	str	r2, [r7, #16]
  return(result);
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	fab2 f282 	clz	r2, r2
 8002752:	fa21 f202 	lsr.w	r2, r1, r2
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800275c:	e017      	b.n	800278e <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800275e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002762:	fbb2 f3f3 	udiv	r3, r2, r3
 8002766:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002768:	68d2      	ldr	r2, [r2, #12]
 800276a:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 800276e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002772:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	fa92 f2a2 	rbit	r2, r2
 800277a:	60ba      	str	r2, [r7, #8]
  return(result);
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	fab2 f282 	clz	r2, r2
 8002782:	fa21 f202 	lsr.w	r2, r1, r2
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800278c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002796:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800279a:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	603b      	str	r3, [r7, #0]
  return(result);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 80027b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 80027be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3754      	adds	r7, #84	; 0x54
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40021000 	.word	0x40021000
 80027d0:	08005ac8 	.word	0x08005ac8
 80027d4:	00f42400 	.word	0x00f42400
 80027d8:	007a1200 	.word	0x007a1200

080027dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027f8:	f7ff f9ae 	bl	8001b58 <HAL_PWREx_GetVoltageRange>
 80027fc:	6178      	str	r0, [r7, #20]
 80027fe:	e014      	b.n	800282a <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002800:	4a25      	ldr	r2, [pc, #148]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002802:	4b25      	ldr	r3, [pc, #148]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280a:	6593      	str	r3, [r2, #88]	; 0x58
 800280c:	4b22      	ldr	r3, [pc, #136]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002818:	f7ff f99e 	bl	8001b58 <HAL_PWREx_GetVoltageRange>
 800281c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800281e:	4a1e      	ldr	r2, [pc, #120]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002828:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002830:	d10b      	bne.n	800284a <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b80      	cmp	r3, #128	; 0x80
 8002836:	d919      	bls.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2ba0      	cmp	r3, #160	; 0xa0
 800283c:	d902      	bls.n	8002844 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800283e:	2302      	movs	r3, #2
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	e013      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002844:	2301      	movs	r3, #1
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	e010      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d902      	bls.n	8002856 <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002850:	2303      	movs	r3, #3
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	e00a      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b80      	cmp	r3, #128	; 0x80
 800285a:	d102      	bne.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800285c:	2302      	movs	r3, #2
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	e004      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b70      	cmp	r3, #112	; 0x70
 8002866:	d101      	bne.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002868:	2301      	movs	r3, #1
 800286a:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 800286c:	490b      	ldr	r1, [pc, #44]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 0207 	bic.w	r2, r3, #7
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800287c:	4b07      	ldr	r3, [pc, #28]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0207 	and.w	r2, r3, #7
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	429a      	cmp	r2, r3
 8002888:	d001      	beq.n	800288e <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	40022000 	.word	0x40022000

080028a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028b0:	2300      	movs	r3, #0
 80028b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028b4:	2300      	movs	r3, #0
 80028b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d02f      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028cc:	d005      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80028ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028d2:	d015      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80028d8:	e00f      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80028da:	4a5a      	ldr	r2, [pc, #360]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028dc:	4b59      	ldr	r3, [pc, #356]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028e6:	e00c      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x62>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fa2c 	bl	8002d4c <RCCEx_PLLSAI1_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028f8:	e003      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x62>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	74fb      	strb	r3, [r7, #19]
      break;
 80028fe:	e000      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x62>
      break;
 8002900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002902:	7cfb      	ldrb	r3, [r7, #19]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10b      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002908:	494e      	ldr	r1, [pc, #312]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800290a:	4b4e      	ldr	r3, [pc, #312]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002910:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800291e:	e001      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002920:	7cfb      	ldrb	r3, [r7, #19]
 8002922:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8098 	beq.w	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002936:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10d      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	4a40      	ldr	r2, [pc, #256]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002944:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294c:	6593      	str	r3, [r2, #88]	; 0x58
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295a:	2301      	movs	r3, #1
 800295c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800295e:	4a3a      	ldr	r2, [pc, #232]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002960:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002968:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800296a:	f7fe fe31 	bl	80015d0 <HAL_GetTick>
 800296e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002970:	e009      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002972:	f7fe fe2d 	bl	80015d0 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d902      	bls.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      {
        ret = HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	74fb      	strb	r3, [r7, #19]
        break;
 8002984:	e005      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0ef      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }

    if(ret == HAL_OK)
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d159      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002998:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d01e      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d019      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029c0:	4a20      	ldr	r2, [pc, #128]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029d0:	4a1c      	ldr	r2, [pc, #112]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029d2:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029e0:	4a18      	ldr	r2, [pc, #96]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d016      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x180>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7fe fded 	bl	80015d0 <HAL_GetTick>
 80029f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80029f8:	e00b      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x172>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe fde9 	bl	80015d0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d902      	bls.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x172>
          {
            ret = HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	74fb      	strb	r3, [r7, #19]
            break;
 8002a10:	e006      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x180>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ec      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10b      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a26:	4907      	ldr	r1, [pc, #28]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a3c:	e008      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a3e:	7cfb      	ldrb	r3, [r7, #19]
 8002a40:	74bb      	strb	r3, [r7, #18]
 8002a42:	e005      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a50:	7c7b      	ldrb	r3, [r7, #17]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d105      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a56:	4a8d      	ldr	r2, [pc, #564]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002a58:	4b8c      	ldr	r3, [pc, #560]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a6e:	4987      	ldr	r1, [pc, #540]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002a70:	4b86      	ldr	r3, [pc, #536]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a90:	497e      	ldr	r1, [pc, #504]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002a92:	4b7e      	ldr	r3, [pc, #504]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a98:	f023 020c 	bic.w	r2, r3, #12
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ab2:	4976      	ldr	r1, [pc, #472]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002ab4:	4b75      	ldr	r3, [pc, #468]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ad4:	496d      	ldr	r1, [pc, #436]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002ad6:	4b6d      	ldr	r3, [pc, #436]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002af6:	4965      	ldr	r1, [pc, #404]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002af8:	4b64      	ldr	r3, [pc, #400]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b18:	495c      	ldr	r1, [pc, #368]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002b1a:	4b5c      	ldr	r3, [pc, #368]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b3a:	4954      	ldr	r1, [pc, #336]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)  

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b5c:	494b      	ldr	r1, [pc, #300]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002b5e:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b7e:	4943      	ldr	r1, [pc, #268]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002b80:	4b42      	ldr	r3, [pc, #264]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d028      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ba0:	493a      	ldr	r1, [pc, #232]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002ba2:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bbe:	d106      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc0:	4a32      	ldr	r2, [pc, #200]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002bc2:	4b32      	ldr	r3, [pc, #200]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bca:	60d3      	str	r3, [r2, #12]
 8002bcc:	e011      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x352>
    }
    else if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x352>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	2101      	movs	r1, #1
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f8b4 	bl	8002d4c <RCCEx_PLLSAI1_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x352>
      {
        /* set overall return value */
        status = ret;
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d028      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bfe:	4923      	ldr	r1, [pc, #140]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c1c:	d106      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c1e:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c28:	60d3      	str	r3, [r2, #12]
 8002c2a:	e011      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f885 	bl	8002d4c <RCCEx_PLLSAI1_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      {
        /* set overall return value */
        status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d02b      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x414>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c5c:	490b      	ldr	r1, [pc, #44]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c7a:	d109      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c7c:	4a03      	ldr	r2, [pc, #12]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002c7e:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c86:	60d3      	str	r3, [r2, #12]
 8002c88:	e014      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 f853 	bl	8002d4c <RCCEx_PLLSAI1_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x414>
      {
        /* set overall return value */
        status = ret;
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01c      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cc0:	4919      	ldr	r1, [pc, #100]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc2:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cde:	d10c      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x45a>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f830 	bl	8002d4c <RCCEx_PLLSAI1_Config>
 8002cec:	4603      	mov	r3, r0
 8002cee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x45a>
      {
        /* set overall return value */
        status = ret;
 8002cf6:	7cfb      	ldrb	r3, [r7, #19]
 8002cf8:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8002d1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000

08002d2c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002d30:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	6013      	str	r3, [r2, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000

08002d4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b095      	sub	sp, #84	; 0x54
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d60:	4ba3      	ldr	r3, [pc, #652]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d023      	beq.n	8002db4 <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d6c:	4ba0      	ldr	r3, [pc, #640]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0203 	and.w	r2, r3, #3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d117      	bne.n	8002dac <RCCEx_PLLSAI1_Config+0x60>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
       || 
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d013      	beq.n	8002dac <RCCEx_PLLSAI1_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 8002d84:	4b9a      	ldr	r3, [pc, #616]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d8c:	2370      	movs	r3, #112	; 0x70
 8002d8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8002d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
       || 
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d054      	beq.n	8002e56 <RCCEx_PLLSAI1_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002db2:	e050      	b.n	8002e56 <RCCEx_PLLSAI1_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d00d      	beq.n	8002dd8 <RCCEx_PLLSAI1_Config+0x8c>
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d015      	beq.n	8002dec <RCCEx_PLLSAI1_Config+0xa0>
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d123      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dc4:	4b8a      	ldr	r3, [pc, #552]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d121      	bne.n	8002e14 <RCCEx_PLLSAI1_Config+0xc8>
      {
        status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8002dd6:	e01d      	b.n	8002e14 <RCCEx_PLLSAI1_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dd8:	4b85      	ldr	r3, [pc, #532]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d119      	bne.n	8002e18 <RCCEx_PLLSAI1_Config+0xcc>
      {
        status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8002dea:	e015      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dec:	4b80      	ldr	r3, [pc, #512]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d111      	bne.n	8002e1c <RCCEx_PLLSAI1_Config+0xd0>
 8002df8:	4b7d      	ldr	r3, [pc, #500]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10b      	bne.n	8002e1c <RCCEx_PLLSAI1_Config+0xd0>
      {
        status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8002e0a:	e007      	b.n	8002e1c <RCCEx_PLLSAI1_Config+0xd0>
    default:
      status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      break;
 8002e12:	e004      	b.n	8002e1e <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8002e14:	bf00      	nop
 8002e16:	e002      	b.n	8002e1e <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8002e18:	bf00      	nop
 8002e1a:	e000      	b.n	8002e1e <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8002e1c:	bf00      	nop
    }
    
    if(status == HAL_OK)
 8002e1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d117      	bne.n	8002e56 <RCCEx_PLLSAI1_Config+0x10a>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8002e26:	4c72      	ldr	r4, [pc, #456]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002e28:	4b71      	ldr	r3, [pc, #452]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6819      	ldr	r1, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	1e58      	subs	r0, r3, #1
 8002e3a:	2370      	movs	r3, #112	; 0x70
 8002e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8002e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	fa00 f303 	lsl.w	r3, r0, r3
 8002e50:	430b      	orrs	r3, r1
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 8002e56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 80c1 	bne.w	8002fe2 <RCCEx_PLLSAI1_Config+0x296>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e60:	4a63      	ldr	r2, [pc, #396]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fbb0 	bl	80015d0 <HAL_GetTick>
 8002e70:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8002e72:	e00a      	b.n	8002e8a <RCCEx_PLLSAI1_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e74:	f7fe fbac 	bl	80015d0 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d903      	bls.n	8002e8a <RCCEx_PLLSAI1_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        break;
 8002e88:	e005      	b.n	8002e96 <RCCEx_PLLSAI1_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8002e8a:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1ee      	bne.n	8002e74 <RCCEx_PLLSAI1_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 8002e96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 80a1 	bne.w	8002fe2 <RCCEx_PLLSAI1_Config+0x296>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d125      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8002ea6:	4c52      	ldr	r4, [pc, #328]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002ea8:	4b51      	ldr	r3, [pc, #324]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002eb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6891      	ldr	r1, [r2, #8]
 8002eb8:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec0:	fa92 f2a2 	rbit	r2, r2
 8002ec4:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 8002ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec8:	fab2 f282 	clz	r2, r2
 8002ecc:	4091      	lsls	r1, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68d0      	ldr	r0, [r2, #12]
 8002ed2:	f04f 4278 	mov.w	r2, #4160749568	; 0xf8000000
 8002ed6:	637a      	str	r2, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eda:	fa92 f2a2 	rbit	r2, r2
 8002ede:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8002ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee2:	fab2 f282 	clz	r2, r2
 8002ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eea:	430a      	orrs	r2, r1
 8002eec:	4313      	orrs	r3, r2
 8002eee:	6123      	str	r3, [r4, #16]
 8002ef0:	e051      	b.n	8002f96 <RCCEx_PLLSAI1_Config+0x24a>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d127      	bne.n	8002f48 <RCCEx_PLLSAI1_Config+0x1fc>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8002ef8:	4c3d      	ldr	r4, [pc, #244]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6891      	ldr	r1, [r2, #8]
 8002f0a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002f0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	fa92 f2a2 	rbit	r2, r2
 8002f16:	61ba      	str	r2, [r7, #24]
  return(result);
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	fab2 f282 	clz	r2, r2
 8002f1e:	4091      	lsls	r1, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6912      	ldr	r2, [r2, #16]
 8002f24:	0852      	lsrs	r2, r2, #1
 8002f26:	1e50      	subs	r0, r2, #1
 8002f28:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8002f2c:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f30:	fa92 f2a2 	rbit	r2, r2
 8002f34:	623a      	str	r2, [r7, #32]
  return(result);
 8002f36:	6a3a      	ldr	r2, [r7, #32]
 8002f38:	fab2 f282 	clz	r2, r2
 8002f3c:	fa00 f202 	lsl.w	r2, r0, r2
 8002f40:	430a      	orrs	r2, r1
 8002f42:	4313      	orrs	r3, r2
 8002f44:	6123      	str	r3, [r4, #16]
 8002f46:	e026      	b.n	8002f96 <RCCEx_PLLSAI1_Config+0x24a>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8002f48:	4c29      	ldr	r4, [pc, #164]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002f4a:	4b29      	ldr	r3, [pc, #164]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6891      	ldr	r1, [r2, #8]
 8002f5a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002f5e:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	fa92 f2a2 	rbit	r2, r2
 8002f66:	60ba      	str	r2, [r7, #8]
  return(result);
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	fab2 f282 	clz	r2, r2
 8002f6e:	4091      	lsls	r1, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6952      	ldr	r2, [r2, #20]
 8002f74:	0852      	lsrs	r2, r2, #1
 8002f76:	1e50      	subs	r0, r2, #1
 8002f78:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002f7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	fa92 f2a2 	rbit	r2, r2
 8002f84:	613a      	str	r2, [r7, #16]
  return(result);
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	fab2 f282 	clz	r2, r2
 8002f8c:	fa00 f202 	lsl.w	r2, r0, r2
 8002f90:	430a      	orrs	r2, r1
 8002f92:	4313      	orrs	r3, r2
 8002f94:	6123      	str	r3, [r4, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f96:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fa0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa2:	f7fe fb15 	bl	80015d0 <HAL_GetTick>
 8002fa6:	64b8      	str	r0, [r7, #72]	; 0x48

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002fa8:	e00a      	b.n	8002fc0 <RCCEx_PLLSAI1_Config+0x274>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002faa:	f7fe fb11 	bl	80015d0 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d903      	bls.n	8002fc0 <RCCEx_PLLSAI1_Config+0x274>
        {
          status = HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8002fbe:	e005      	b.n	8002fcc <RCCEx_PLLSAI1_Config+0x280>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0ee      	beq.n	8002faa <RCCEx_PLLSAI1_Config+0x25e>
        }
      }

      if(status == HAL_OK)    
 8002fcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <RCCEx_PLLSAI1_Config+0x296>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fd4:	4906      	ldr	r1, [pc, #24]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 8002fe2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3754      	adds	r7, #84	; 0x54
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd90      	pop	{r4, r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e07a      	b.n	80030fc <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d106      	bne.n	8003026 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f001 fc49 	bl	80048b8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800303c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003046:	d902      	bls.n	800304e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003048:	2300      	movs	r3, #0
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e002      	b.n	8003054 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800304e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003052:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800305c:	d007      	beq.n	800306e <HAL_SPI_Init+0x7a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003066:	d002      	beq.n	800306e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800307e:	d903      	bls.n	8003088 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
 8003086:	e002      	b.n	800308e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6851      	ldr	r1, [r2, #4]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6892      	ldr	r2, [r2, #8]
 800309a:	4311      	orrs	r1, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6912      	ldr	r2, [r2, #16]
 80030a0:	4311      	orrs	r1, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6952      	ldr	r2, [r2, #20]
 80030a6:	4311      	orrs	r1, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6992      	ldr	r2, [r2, #24]
 80030ac:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80030b0:	4311      	orrs	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	69d2      	ldr	r2, [r2, #28]
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6a12      	ldr	r2, [r2, #32]
 80030bc:	4311      	orrs	r1, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6992      	ldr	r2, [r2, #24]
 80030ce:	0c12      	lsrs	r2, r2, #16
 80030d0:	f002 0104 	and.w	r1, r2, #4
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d8:	4311      	orrs	r1, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030de:	4311      	orrs	r1, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68d2      	ldr	r2, [r2, #12]
 80030e4:	4311      	orrs	r1, r2
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_SPI_Transmit+0x26>
 8003126:	2302      	movs	r3, #2
 8003128:	e13e      	b.n	80033a8 <HAL_SPI_Transmit+0x2a4>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003132:	f7fe fa4d 	bl	80015d0 <HAL_GetTick>
 8003136:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d002      	beq.n	800314a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003144:	2302      	movs	r3, #2
 8003146:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003148:	e125      	b.n	8003396 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_SPI_Transmit+0x52>
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d102      	bne.n	800315c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	77fb      	strb	r3, [r7, #31]
    goto error;
 800315a:	e11c      	b.n	8003396 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2203      	movs	r2, #3
 8003160:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	88fa      	ldrh	r2, [r7, #6]
 800317a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a6:	d107      	bne.n	80031b8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d007      	beq.n	80031d6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031de:	d947      	bls.n	8003270 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_SPI_Transmit+0xee>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d138      	bne.n	8003264 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	8812      	ldrh	r2, [r2, #0]
 80031fa:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	3302      	adds	r3, #2
 8003200:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003210:	e028      	b.n	8003264 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b02      	cmp	r3, #2
 800321e:	d10f      	bne.n	8003240 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	8812      	ldrh	r2, [r2, #0]
 8003228:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	3302      	adds	r3, #2
 800322e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003234:	b29b      	uxth	r3, r3
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800323e:	e011      	b.n	8003264 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <HAL_SPI_Transmit+0x15a>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d00a      	beq.n	8003264 <HAL_SPI_Transmit+0x160>
 800324e:	f7fe f9bf 	bl	80015d0 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	1ad2      	subs	r2, r2, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003262:	e098      	b.n	8003396 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1d1      	bne.n	8003212 <HAL_SPI_Transmit+0x10e>
 800326e:	e072      	b.n	8003356 <HAL_SPI_Transmit+0x252>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d004      	beq.n	8003282 <HAL_SPI_Transmit+0x17e>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d164      	bne.n	800334c <HAL_SPI_Transmit+0x248>
    {
      if (hspi->TxXferCount > 1U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d90f      	bls.n	80032ac <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	8812      	ldrh	r2, [r2, #0]
 8003294:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	3302      	adds	r3, #2
 800329a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b02      	subs	r3, #2
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032aa:	e04f      	b.n	800334c <HAL_SPI_Transmit+0x248>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f103 020c 	add.w	r2, r3, #12
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	1c59      	adds	r1, r3, #1
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80032cc:	e03e      	b.n	800334c <HAL_SPI_Transmit+0x248>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d125      	bne.n	8003328 <HAL_SPI_Transmit+0x224>
      {
        if (hspi->TxXferCount > 1U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d90f      	bls.n	8003306 <HAL_SPI_Transmit+0x202>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	8812      	ldrh	r2, [r2, #0]
 80032ee:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	3302      	adds	r3, #2
 80032f4:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b02      	subs	r3, #2
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003304:	e022      	b.n	800334c <HAL_SPI_Transmit+0x248>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f103 020c 	add.w	r2, r3, #12
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	1c59      	adds	r1, r3, #1
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003326:	e011      	b.n	800334c <HAL_SPI_Transmit+0x248>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_SPI_Transmit+0x242>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d00a      	beq.n	800334c <HAL_SPI_Transmit+0x248>
 8003336:	f7fe f94b 	bl	80015d0 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1ad2      	subs	r2, r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <HAL_SPI_Transmit+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	77fb      	strb	r3, [r7, #31]
          goto error;
 800334a:	e024      	b.n	8003396 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1bb      	bne.n	80032ce <HAL_SPI_Transmit+0x1ca>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	6839      	ldr	r1, [r7, #0]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fb01 	bl	8003962 <SPI_EndRxTxTransaction>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_SPI_Transmit+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10a      	bne.n	800338a <HAL_SPI_Transmit+0x286>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_SPI_Transmit+0x292>
  {
    errorcode = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3720      	adds	r7, #32
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80033ca:	2301      	movs	r3, #1
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x32>
 80033de:	2302      	movs	r3, #2
 80033e0:	e1e1      	b.n	80037a6 <HAL_SPI_TransmitReceive+0x3f6>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033ea:	f7fe f8f1 	bl	80015d0 <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d00e      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x74>
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800340c:	d106      	bne.n	800341c <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_SPI_TransmitReceive+0x6c>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d003      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 800341c:	2302      	movs	r3, #2
 800341e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003422:	e1b6      	b.n	8003792 <HAL_SPI_TransmitReceive+0x3e2>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_SPI_TransmitReceive+0x86>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_SPI_TransmitReceive+0x86>
 8003430:	887b      	ldrh	r3, [r7, #2]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d103      	bne.n	800343e <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800343c:	e1a9      	b.n	8003792 <HAL_SPI_TransmitReceive+0x3e2>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b04      	cmp	r3, #4
 8003448:	d003      	beq.n	8003452 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2205      	movs	r2, #5
 800344e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	887a      	ldrh	r2, [r7, #2]
 8003462:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	887a      	ldrh	r2, [r7, #2]
 800346a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	887a      	ldrh	r2, [r7, #2]
 800347e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fido threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003494:	d805      	bhi.n	80034a2 <HAL_SPI_TransmitReceive+0xf2>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d908      	bls.n	80034b4 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	6852      	ldr	r2, [r2, #4]
 80034ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	e007      	b.n	80034c4 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	6852      	ldr	r2, [r2, #4]
 80034be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b40      	cmp	r3, #64	; 0x40
 80034d0:	d007      	beq.n	80034e2 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ea:	d975      	bls.n	80035d8 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d004      	beq.n	80034fe <HAL_SPI_TransmitReceive+0x14e>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d160      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	8812      	ldrh	r2, [r2, #0]
 8003506:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	3302      	adds	r3, #2
 800350c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800351c:	e050      	b.n	80035c0 <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01c      	beq.n	800355e <HAL_SPI_TransmitReceive+0x1ae>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d017      	beq.n	800355e <HAL_SPI_TransmitReceive+0x1ae>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b02      	cmp	r3, #2
 800353a:	d110      	bne.n	800355e <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	8812      	ldrh	r2, [r2, #0]
 8003544:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3302      	adds	r3, #2
 800354a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01a      	beq.n	80035a0 <HAL_SPI_TransmitReceive+0x1f0>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d113      	bne.n	80035a0 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3302      	adds	r3, #2
 8003588:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800359c:	2301      	movs	r3, #1
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d00b      	beq.n	80035c0 <HAL_SPI_TransmitReceive+0x210>
 80035a8:	f7fe f812 	bl	80015d0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	1ad2      	subs	r2, r2, r3
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d303      	bcc.n	80035c0 <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80035be:	e0e8      	b.n	8003792 <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1a9      	bne.n	800351e <HAL_SPI_TransmitReceive+0x16e>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1a3      	bne.n	800351e <HAL_SPI_TransmitReceive+0x16e>
 80035d6:	e0ca      	b.n	800376e <HAL_SPI_TransmitReceive+0x3be>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_SPI_TransmitReceive+0x23c>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	f040 80b4 	bne.w	8003754 <HAL_SPI_TransmitReceive+0x3a4>
    {
      if (hspi->TxXferCount > 1U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d90f      	bls.n	8003616 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	8812      	ldrh	r2, [r2, #0]
 80035fe:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	3302      	adds	r3, #2
 8003604:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b02      	subs	r3, #2
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003614:	e09e      	b.n	8003754 <HAL_SPI_TransmitReceive+0x3a4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f103 020c 	add.w	r2, r3, #12
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	1c59      	adds	r1, r3, #1
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003636:	e08d      	b.n	8003754 <HAL_SPI_TransmitReceive+0x3a4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	2b00      	cmp	r3, #0
 800363c:	d032      	beq.n	80036a4 <HAL_SPI_TransmitReceive+0x2f4>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02d      	beq.n	80036a4 <HAL_SPI_TransmitReceive+0x2f4>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d126      	bne.n	80036a4 <HAL_SPI_TransmitReceive+0x2f4>
      {
        if (hspi->TxXferCount > 1U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d90f      	bls.n	8003680 <HAL_SPI_TransmitReceive+0x2d0>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	8812      	ldrh	r2, [r2, #0]
 8003668:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3302      	adds	r3, #2
 800366e:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b02      	subs	r3, #2
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800367e:	e00f      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x2f0>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f103 020c 	add.w	r2, r3, #12
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	1c59      	adds	r1, r3, #1
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d041      	beq.n	8003734 <HAL_SPI_TransmitReceive+0x384>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d13a      	bne.n	8003734 <HAL_SPI_TransmitReceive+0x384>
      {
        if (hspi->RxXferCount > 1U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d920      	bls.n	800370c <HAL_SPI_TransmitReceive+0x35c>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3302      	adds	r3, #2
 80036da:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b02      	subs	r3, #2
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d81a      	bhi.n	8003730 <HAL_SPI_TransmitReceive+0x380>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	6852      	ldr	r2, [r2, #4]
 8003704:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	e011      	b.n	8003730 <HAL_SPI_TransmitReceive+0x380>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	320c      	adds	r2, #12
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003730:	2301      	movs	r3, #1
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d00b      	beq.n	8003754 <HAL_SPI_TransmitReceive+0x3a4>
 800373c:	f7fd ff48 	bl	80015d0 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	1ad2      	subs	r2, r2, r3
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	429a      	cmp	r2, r3
 800374a:	d303      	bcc.n	8003754 <HAL_SPI_TransmitReceive+0x3a4>
      {
        errorcode = HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003752:	e01e      	b.n	8003792 <HAL_SPI_TransmitReceive+0x3e2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	f47f af6c 	bne.w	8003638 <HAL_SPI_TransmitReceive+0x288>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	f47f af65 	bne.w	8003638 <HAL_SPI_TransmitReceive+0x288>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f8f5 	bl	8003962 <SPI_EndRxTxTransaction>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x3d4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80037a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3728      	adds	r7, #40	; 0x28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037bc:	e04d      	b.n	800385a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d049      	beq.n	800385a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <SPI_WaitFlagStateUntilTimeout+0x2e>
 80037cc:	f7fd ff00 	bl	80015d0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	1ad2      	subs	r2, r2, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d33e      	bcc.n	800385a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	6852      	ldr	r2, [r2, #4]
 80037e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037f4:	d111      	bne.n	800381a <SPI_WaitFlagStateUntilTimeout+0x6c>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037fe:	d004      	beq.n	800380a <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003808:	d107      	bne.n	800381a <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003818:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003822:	d110      	bne.n	8003846 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6819      	ldr	r1, [r3, #0]
 800382e:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003832:	400b      	ands	r3, r1
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003844:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e00e      	b.n	8003878 <SPI_WaitFlagStateUntilTimeout+0xca>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	401a      	ands	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	429a      	cmp	r2, r3
 8003868:	d101      	bne.n	800386e <SPI_WaitFlagStateUntilTimeout+0xc0>
 800386a:	2201      	movs	r2, #1
 800386c:	e000      	b.n	8003870 <SPI_WaitFlagStateUntilTimeout+0xc2>
 800386e:	2200      	movs	r2, #0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	429a      	cmp	r2, r3
 8003874:	d1a3      	bne.n	80037be <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800388e:	e05b      	b.n	8003948 <SPI_WaitFifoStateUntilTimeout+0xc8>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003896:	d109      	bne.n	80038ac <SPI_WaitFifoStateUntilTimeout+0x2c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b2:	d049      	beq.n	8003948 <SPI_WaitFifoStateUntilTimeout+0xc8>
    {
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <SPI_WaitFifoStateUntilTimeout+0x4a>
 80038ba:	f7fd fe89 	bl	80015d0 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	1ad2      	subs	r2, r2, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d33e      	bcc.n	8003948 <SPI_WaitFifoStateUntilTimeout+0xc8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	6852      	ldr	r2, [r2, #4]
 80038d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038e2:	d111      	bne.n	8003908 <SPI_WaitFifoStateUntilTimeout+0x88>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ec:	d004      	beq.n	80038f8 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f6:	d107      	bne.n	8003908 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003910:	d110      	bne.n	8003934 <SPI_WaitFifoStateUntilTimeout+0xb4>
        {
          SPI_RESET_CRC(hspi);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6819      	ldr	r1, [r3, #0]
 800391c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003920:	400b      	ands	r3, r1
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003932:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e008      	b.n	800395a <SPI_WaitFifoStateUntilTimeout+0xda>
  while ((hspi->Instance->SR & Fifo) != State)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	401a      	ands	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	d19b      	bne.n	8003890 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <SPI_EndRxTxTransaction>:
  * @param hspi: SPI handle
  * @param Timeout: Timeout duration
  * @param  Tickstart: tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af02      	add	r7, sp, #8
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2200      	movs	r2, #0
 8003976:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f7ff ff80 	bl	8003880 <SPI_WaitFifoStateUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398a:	f043 0220 	orr.w	r2, r3, #32
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e013      	b.n	80039be <SPI_EndRxTxTransaction+0x5c>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2200      	movs	r2, #0
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7ff ff04 	bl	80037ae <SPI_WaitFlagStateUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e000      	b.n	80039be <SPI_EndRxTxTransaction+0x5c>
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80039ca:	f000 fbb5 	bl	8004138 <xTaskGetSchedulerState>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d001      	beq.n	80039d8 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80039d4:	f000 f924 	bl	8003c20 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80039d8:	bf00      	nop
 80039da:	bd80      	pop	{r7, pc}

080039dc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	601a      	str	r2, [r3, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d103      	bne.n	8003a44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e00c      	b.n	8003a5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3308      	adds	r3, #8
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	e002      	b.n	8003a52 <vListInsert+0x2e>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d9f6      	bls.n	8003a4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	601a      	str	r2, [r3, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6892      	ldr	r2, [r2, #8]
 8003aac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6852      	ldr	r2, [r2, #4]
 8003ab6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d103      	bne.n	8003aca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	1e5a      	subs	r2, r3, #1
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <pxCurrentTCBConst2>)
 8003aee:	6819      	ldr	r1, [r3, #0]
 8003af0:	6808      	ldr	r0, [r1, #0]
 8003af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af6:	f380 8809 	msr	PSP, r0
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f04f 0000 	mov.w	r0, #0
 8003b02:	f380 8811 	msr	BASEPRI, r0
 8003b06:	4770      	bx	lr

08003b08 <pxCurrentTCBConst2>:
 8003b08:	20000128 	.word	0x20000128
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop

08003b10 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <vPortEnterCritical+0x54>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <vPortEnterCritical+0x54>)
 8003b30:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <vPortEnterCritical+0x54>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d10e      	bne.n	8003b58 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <vPortEnterCritical+0x58>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d009      	beq.n	8003b58 <vPortEnterCritical+0x48>
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	e7fe      	b.n	8003b56 <vPortEnterCritical+0x46>
	}
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	2000003c 	.word	0x2000003c
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b72:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <vPortExitCritical+0x4c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <vPortExitCritical+0x22>
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	e7fe      	b.n	8003b8c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <vPortExitCritical+0x4c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <vPortExitCritical+0x4c>)
 8003b96:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b98:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <vPortExitCritical+0x4c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <vPortExitCritical+0x3e>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	2000003c 	.word	0x2000003c

08003bbc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003bbc:	f3ef 8009 	mrs	r0, PSP
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <pxCurrentTCBConst>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	f01e 0f10 	tst.w	lr, #16
 8003bcc:	bf08      	it	eq
 8003bce:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003bd2:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd6:	6010      	str	r0, [r2, #0]
 8003bd8:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003bdc:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003be0:	f380 8811 	msr	BASEPRI, r0
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f000 f9ee 	bl	8003fcc <vTaskSwitchContext>
 8003bf0:	f04f 0000 	mov.w	r0, #0
 8003bf4:	f380 8811 	msr	BASEPRI, r0
 8003bf8:	bc08      	pop	{r3}
 8003bfa:	6819      	ldr	r1, [r3, #0]
 8003bfc:	6808      	ldr	r0, [r1, #0]
 8003bfe:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c02:	f01e 0f10 	tst.w	lr, #16
 8003c06:	bf08      	it	eq
 8003c08:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c0c:	f380 8809 	msr	PSP, r0
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop

08003c18 <pxCurrentTCBConst>:
 8003c18:	20000128 	.word	0x20000128
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop

08003c20 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
	__asm volatile
 8003c26:	f3ef 8211 	mrs	r2, BASEPRI
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	60fa      	str	r2, [r7, #12]
 8003c3c:	60bb      	str	r3, [r7, #8]
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c3e:	f000 f907 	bl	8003e50 <xTaskIncrementTick>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <xPortSysTickHandler+0x44>)
 8003c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	2300      	movs	r3, #0
 8003c52:	607b      	str	r3, [r7, #4]
	__asm volatile
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	e000ed04 	.word	0xe000ed04

08003c68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d02f      	beq.n	8003cda <vTaskDelay+0x72>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c7a:	4b1f      	ldr	r3, [pc, #124]	; (8003cf8 <vTaskDelay+0x90>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <vTaskDelay+0x2e>
	__asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e7fe      	b.n	8003c94 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003c96:	f000 f839 	bl	8003d0c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8003c9a:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <vTaskDelay+0x94>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8003ca4:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <vTaskDelay+0x98>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff fef3 	bl	8003a96 <uxListRemove>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10b      	bne.n	8003cce <vTaskDelay+0x66>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003cb6:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <vTaskDelay+0x98>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <vTaskDelay+0x9c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	4a0e      	ldr	r2, [pc, #56]	; (8003d04 <vTaskDelay+0x9c>)
 8003ccc:	6013      	str	r3, [r2, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003cce:	6938      	ldr	r0, [r7, #16]
 8003cd0:	f000 f9d6 	bl	8004080 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cd4:	f000 f828 	bl	8003d28 <xTaskResumeAll>
 8003cd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d107      	bne.n	8003cf0 <vTaskDelay+0x88>
		{
			portYIELD_WITHIN_API();
 8003ce0:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <vTaskDelay+0xa0>)
 8003ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cf0:	bf00      	nop
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	200001f4 	.word	0x200001f4
 8003cfc:	200001d8 	.word	0x200001d8
 8003d00:	20000128 	.word	0x20000128
 8003d04:	200001dc 	.word	0x200001dc
 8003d08:	e000ed04 	.word	0xe000ed04

08003d0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <vTaskSuspendAll+0x18>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3301      	adds	r3, #1
 8003d16:	4a03      	ldr	r2, [pc, #12]	; (8003d24 <vTaskSuspendAll+0x18>)
 8003d18:	6013      	str	r3, [r2, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	200001f4 	.word	0x200001f4

08003d28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d32:	4b3e      	ldr	r3, [pc, #248]	; (8003e2c <xTaskResumeAll+0x104>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <xTaskResumeAll+0x26>
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	e7fe      	b.n	8003d4c <xTaskResumeAll+0x24>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d4e:	f7ff fedf 	bl	8003b10 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d52:	4b36      	ldr	r3, [pc, #216]	; (8003e2c <xTaskResumeAll+0x104>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	4a34      	ldr	r2, [pc, #208]	; (8003e2c <xTaskResumeAll+0x104>)
 8003d5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d5c:	4b33      	ldr	r3, [pc, #204]	; (8003e2c <xTaskResumeAll+0x104>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d15b      	bne.n	8003e1c <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d64:	4b32      	ldr	r3, [pc, #200]	; (8003e30 <xTaskResumeAll+0x108>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d057      	beq.n	8003e1c <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d6c:	e02e      	b.n	8003dcc <xTaskResumeAll+0xa4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d6e:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <xTaskResumeAll+0x10c>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	60bb      	str	r3, [r7, #8]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3318      	adds	r3, #24
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fe8b 	bl	8003a96 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fe86 	bl	8003a96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	2201      	movs	r2, #1
 8003d90:	409a      	lsls	r2, r3
 8003d92:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <xTaskResumeAll+0x110>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	4a27      	ldr	r2, [pc, #156]	; (8003e38 <xTaskResumeAll+0x110>)
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4a24      	ldr	r2, [pc, #144]	; (8003e3c <xTaskResumeAll+0x114>)
 8003daa:	441a      	add	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f7ff fe12 	bl	80039dc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbc:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <xTaskResumeAll+0x118>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d302      	bcc.n	8003dcc <xTaskResumeAll+0xa4>
					{
						xYieldPending = pdTRUE;
 8003dc6:	4b1f      	ldr	r3, [pc, #124]	; (8003e44 <xTaskResumeAll+0x11c>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <xTaskResumeAll+0x10c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1cc      	bne.n	8003d6e <xTaskResumeAll+0x46>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8003dd4:	4b1c      	ldr	r3, [pc, #112]	; (8003e48 <xTaskResumeAll+0x120>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d011      	beq.n	8003e00 <xTaskResumeAll+0xd8>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8003ddc:	e00c      	b.n	8003df8 <xTaskResumeAll+0xd0>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8003dde:	f000 f837 	bl	8003e50 <xTaskIncrementTick>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <xTaskResumeAll+0xc6>
						{
							xYieldPending = pdTRUE;
 8003de8:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <xTaskResumeAll+0x11c>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <xTaskResumeAll+0x120>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <xTaskResumeAll+0x120>)
 8003df6:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8003df8:	4b13      	ldr	r3, [pc, #76]	; (8003e48 <xTaskResumeAll+0x120>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1ee      	bne.n	8003dde <xTaskResumeAll+0xb6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8003e00:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <xTaskResumeAll+0x11c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d109      	bne.n	8003e1c <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <xTaskResumeAll+0x124>)
 8003e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e1c:	f7ff fea6 	bl	8003b6c <vPortExitCritical>

	return xAlreadyYielded;
 8003e20:	68fb      	ldr	r3, [r7, #12]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200001f4 	.word	0x200001f4
 8003e30:	200001d4 	.word	0x200001d4
 8003e34:	200001c0 	.word	0x200001c0
 8003e38:	200001dc 	.word	0x200001dc
 8003e3c:	2000012c 	.word	0x2000012c
 8003e40:	20000128 	.word	0x20000128
 8003e44:	200001e8 	.word	0x200001e8
 8003e48:	200001e4 	.word	0x200001e4
 8003e4c:	e000ed04 	.word	0xe000ed04

08003e50 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e5a:	4b51      	ldr	r3, [pc, #324]	; (8003fa0 <xTaskIncrementTick+0x150>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 808d 	bne.w	8003f7e <xTaskIncrementTick+0x12e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8003e64:	4b4f      	ldr	r3, [pc, #316]	; (8003fa4 <xTaskIncrementTick+0x154>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	4a4e      	ldr	r2, [pc, #312]	; (8003fa4 <xTaskIncrementTick+0x154>)
 8003e6c:	6013      	str	r3, [r2, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003e6e:	4b4d      	ldr	r3, [pc, #308]	; (8003fa4 <xTaskIncrementTick+0x154>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d11f      	bne.n	8003eba <xTaskIncrementTick+0x6a>
			{
				taskSWITCH_DELAYED_LISTS();
 8003e7a:	4b4b      	ldr	r3, [pc, #300]	; (8003fa8 <xTaskIncrementTick+0x158>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d009      	beq.n	8003e98 <xTaskIncrementTick+0x48>
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	e7fe      	b.n	8003e96 <xTaskIncrementTick+0x46>
 8003e98:	4b43      	ldr	r3, [pc, #268]	; (8003fa8 <xTaskIncrementTick+0x158>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	4b43      	ldr	r3, [pc, #268]	; (8003fac <xTaskIncrementTick+0x15c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a41      	ldr	r2, [pc, #260]	; (8003fa8 <xTaskIncrementTick+0x158>)
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4a41      	ldr	r2, [pc, #260]	; (8003fac <xTaskIncrementTick+0x15c>)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b40      	ldr	r3, [pc, #256]	; (8003fb0 <xTaskIncrementTick+0x160>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	4a3f      	ldr	r2, [pc, #252]	; (8003fb0 <xTaskIncrementTick+0x160>)
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	f000 f919 	bl	80040ec <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8003eba:	4b3e      	ldr	r3, [pc, #248]	; (8003fb4 <xTaskIncrementTick+0x164>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d34d      	bcc.n	8003f60 <xTaskIncrementTick+0x110>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ec4:	4b38      	ldr	r3, [pc, #224]	; (8003fa8 <xTaskIncrementTick+0x158>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <xTaskIncrementTick+0x82>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <xTaskIncrementTick+0x84>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d004      	beq.n	8003ee2 <xTaskIncrementTick+0x92>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8003ed8:	4b36      	ldr	r3, [pc, #216]	; (8003fb4 <xTaskIncrementTick+0x164>)
 8003eda:	f04f 32ff 	mov.w	r2, #4294967295
 8003ede:	601a      	str	r2, [r3, #0]
						break;
 8003ee0:	e03e      	b.n	8003f60 <xTaskIncrementTick+0x110>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ee2:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <xTaskIncrementTick+0x158>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d203      	bcs.n	8003f02 <xTaskIncrementTick+0xb2>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8003efa:	4a2e      	ldr	r2, [pc, #184]	; (8003fb4 <xTaskIncrementTick+0x164>)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6013      	str	r3, [r2, #0]
							break;
 8003f00:	e02e      	b.n	8003f60 <xTaskIncrementTick+0x110>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff fdc5 	bl	8003a96 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d004      	beq.n	8003f1e <xTaskIncrementTick+0xce>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	3318      	adds	r3, #24
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fdbc 	bl	8003a96 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	2201      	movs	r2, #1
 8003f24:	409a      	lsls	r2, r3
 8003f26:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <xTaskIncrementTick+0x168>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <xTaskIncrementTick+0x168>)
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <xTaskIncrementTick+0x16c>)
 8003f3e:	441a      	add	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	3304      	adds	r3, #4
 8003f44:	4619      	mov	r1, r3
 8003f46:	4610      	mov	r0, r2
 8003f48:	f7ff fd48 	bl	80039dc <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f50:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <xTaskIncrementTick+0x170>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d3b4      	bcc.n	8003ec4 <xTaskIncrementTick+0x74>
							{
								xSwitchRequired = pdTRUE;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	617b      	str	r3, [r7, #20]
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f5e:	e7b1      	b.n	8003ec4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f60:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <xTaskIncrementTick+0x170>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f66:	4915      	ldr	r1, [pc, #84]	; (8003fbc <xTaskIncrementTick+0x16c>)
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d907      	bls.n	8003f88 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e004      	b.n	8003f88 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f7e:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <xTaskIncrementTick+0x174>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	4a0f      	ldr	r2, [pc, #60]	; (8003fc4 <xTaskIncrementTick+0x174>)
 8003f86:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <xTaskIncrementTick+0x178>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003f90:	2301      	movs	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f94:	697b      	ldr	r3, [r7, #20]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	200001f4 	.word	0x200001f4
 8003fa4:	200001d8 	.word	0x200001d8
 8003fa8:	200001b8 	.word	0x200001b8
 8003fac:	200001bc 	.word	0x200001bc
 8003fb0:	200001ec 	.word	0x200001ec
 8003fb4:	200001f0 	.word	0x200001f0
 8003fb8:	200001dc 	.word	0x200001dc
 8003fbc:	2000012c 	.word	0x2000012c
 8003fc0:	20000128 	.word	0x20000128
 8003fc4:	200001e4 	.word	0x200001e4
 8003fc8:	200001e8 	.word	0x200001e8

08003fcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fd2:	4b26      	ldr	r3, [pc, #152]	; (800406c <vTaskSwitchContext+0xa0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fda:	4b25      	ldr	r3, [pc, #148]	; (8004070 <vTaskSwitchContext+0xa4>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fe0:	e03e      	b.n	8004060 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003fe2:	4b23      	ldr	r3, [pc, #140]	; (8004070 <vTaskSwitchContext+0xa4>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003fe8:	4b22      	ldr	r3, [pc, #136]	; (8004074 <vTaskSwitchContext+0xa8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	fab3 f383 	clz	r3, r3
 8003ff4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
 8003ff8:	f1c3 031f 	rsb	r3, r3, #31
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	491e      	ldr	r1, [pc, #120]	; (8004078 <vTaskSwitchContext+0xac>)
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	e7fe      	b.n	8004024 <vTaskSwitchContext+0x58>
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4a11      	ldr	r2, [pc, #68]	; (8004078 <vTaskSwitchContext+0xac>)
 8004032:	4413      	add	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	3308      	adds	r3, #8
 8004048:	429a      	cmp	r2, r3
 800404a:	d104      	bne.n	8004056 <vTaskSwitchContext+0x8a>
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a07      	ldr	r2, [pc, #28]	; (800407c <vTaskSwitchContext+0xb0>)
 800405e:	6013      	str	r3, [r2, #0]
}
 8004060:	bf00      	nop
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	200001f4 	.word	0x200001f4
 8004070:	200001e8 	.word	0x200001e8
 8004074:	200001dc 	.word	0x200001dc
 8004078:	2000012c 	.word	0x2000012c
 800407c:	20000128 	.word	0x20000128

08004080 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8004088:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <prvAddCurrentTaskToDelayedList+0x58>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <prvAddCurrentTaskToDelayedList+0x5c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	429a      	cmp	r2, r3
 8004098:	d209      	bcs.n	80040ae <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <prvAddCurrentTaskToDelayedList+0x60>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <prvAddCurrentTaskToDelayedList+0x58>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f7ff fcbc 	bl	8003a24 <vListInsert>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040ac:	e010      	b.n	80040d0 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80040ae:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <prvAddCurrentTaskToDelayedList+0x64>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <prvAddCurrentTaskToDelayedList+0x58>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f7ff fcb2 	bl	8003a24 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 80040c0:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <prvAddCurrentTaskToDelayedList+0x68>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d202      	bcs.n	80040d0 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
 80040ca:	4a07      	ldr	r2, [pc, #28]	; (80040e8 <prvAddCurrentTaskToDelayedList+0x68>)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6013      	str	r3, [r2, #0]
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000128 	.word	0x20000128
 80040dc:	200001d8 	.word	0x200001d8
 80040e0:	200001bc 	.word	0x200001bc
 80040e4:	200001b8 	.word	0x200001b8
 80040e8:	200001f0 	.word	0x200001f0

080040ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040f2:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <prvResetNextTaskUnblockTime+0x44>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <prvResetNextTaskUnblockTime+0x14>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <prvResetNextTaskUnblockTime+0x16>
 8004100:	2300      	movs	r3, #0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d004      	beq.n	8004110 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <prvResetNextTaskUnblockTime+0x48>)
 8004108:	f04f 32ff 	mov.w	r2, #4294967295
 800410c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800410e:	e008      	b.n	8004122 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <prvResetNextTaskUnblockTime+0x44>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4a05      	ldr	r2, [pc, #20]	; (8004134 <prvResetNextTaskUnblockTime+0x48>)
 8004120:	6013      	str	r3, [r2, #0]
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	200001b8 	.word	0x200001b8
 8004134:	200001f0 	.word	0x200001f0

08004138 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800413e:	4b0b      	ldr	r3, [pc, #44]	; (800416c <xTaskGetSchedulerState+0x34>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d102      	bne.n	800414c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004146:	2301      	movs	r3, #1
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	e008      	b.n	800415e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800414c:	4b08      	ldr	r3, [pc, #32]	; (8004170 <xTaskGetSchedulerState+0x38>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004154:	2302      	movs	r3, #2
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	e001      	b.n	800415e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800415e:	687b      	ldr	r3, [r7, #4]
	}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	200001e0 	.word	0x200001e0
 8004170:	200001f4 	.word	0x200001f4

08004174 <__sputc_r>:
#else
#define __sgetc_r(__ptr, __p) __sgetc_raw_r(__ptr, __p)
#endif

#ifdef __GNUC__
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	1e5a      	subs	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	609a      	str	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	da09      	bge.n	80041a6 <__sputc_r+0x32>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	429a      	cmp	r2, r3
 800419c:	db0d      	blt.n	80041ba <__sputc_r+0x46>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b0a      	cmp	r3, #10
 80041a4:	d009      	beq.n	80041ba <__sputc_r+0x46>
		return (*_p->_p++ = _c);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	1c59      	adds	r1, r3, #1
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6011      	str	r1, [r2, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	e005      	b.n	80041c6 <__sputc_r+0x52>
	else
		return (__swbuf_r(_ptr, _c, _p));
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fee2 	bl	8004f88 <__swbuf_r>
 80041c4:	4603      	mov	r3, r0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <NRF24L01p_RadioReset>:
#define TX_UNIT 0
#define RX_UNIT 1



void NRF24L01p_RadioReset(){
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0


    RadioConfig.DataReadyInterruptEnabled = 0;
 80041d6:	4b48      	ldr	r3, [pc, #288]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
    RadioConfig.DataSentInterruptEnabled = 0;
 80041dc:	4b46      	ldr	r3, [pc, #280]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 80041de:	2200      	movs	r2, #0
 80041e0:	705a      	strb	r2, [r3, #1]
    RadioConfig.MaxRetryInterruptEnabled = 0;
 80041e2:	4b45      	ldr	r3, [pc, #276]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	709a      	strb	r2, [r3, #2]
    RadioConfig.Crc = NRF24L01P_CONFIG_CRC_16BIT;
 80041e8:	4b43      	ldr	r3, [pc, #268]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 80041ea:	220c      	movs	r2, #12
 80041ec:	70da      	strb	r2, [r3, #3]
    RadioConfig.AutoReTransmissionCount = 15;
 80041ee:	4b42      	ldr	r3, [pc, #264]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 80041f0:	220f      	movs	r2, #15
 80041f2:	715a      	strb	r2, [r3, #5]
    RadioConfig.AutoReTransmitDelayX250us = 15;
 80041f4:	4b40      	ldr	r3, [pc, #256]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 80041f6:	220f      	movs	r2, #15
 80041f8:	719a      	strb	r2, [r3, #6]
    RadioConfig.frequencyOffset = 2;
 80041fa:	4b3f      	ldr	r3, [pc, #252]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 80041fc:	2202      	movs	r2, #2
 80041fe:	71da      	strb	r2, [r3, #7]
    RadioConfig.datarate = NRF24L01P_RF_SETUP_RF_DR_2MBPS;
 8004200:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 8004202:	2208      	movs	r2, #8
 8004204:	721a      	strb	r2, [r3, #8]
    RadioConfig.RfPowerDb = NRF24L01P_RF_SETUP_RF_PWR_0DBM;
 8004206:	4b3c      	ldr	r3, [pc, #240]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 8004208:	2206      	movs	r2, #6
 800420a:	725a      	strb	r2, [r3, #9]
    RadioConfig.PllLock = 0;
 800420c:	4b3a      	ldr	r3, [pc, #232]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 800420e:	2200      	movs	r2, #0
 8004210:	729a      	strb	r2, [r3, #10]
    RadioConfig.ContWaveEnabled = 0;
 8004212:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 8004214:	2200      	movs	r2, #0
 8004216:	72da      	strb	r2, [r3, #11]
    RadioConfig.FeatureDynamicPayloadEnabled = 1;
 8004218:	4b37      	ldr	r3, [pc, #220]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 800421a:	2201      	movs	r2, #1
 800421c:	731a      	strb	r2, [r3, #12]
    RadioConfig.FeaturePayloadWithAckEnabled = 1;
 800421e:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 8004220:	2201      	movs	r2, #1
 8004222:	735a      	strb	r2, [r3, #13]
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
 8004224:	4b34      	ldr	r3, [pc, #208]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 8004226:	2201      	movs	r2, #1
 8004228:	739a      	strb	r2, [r3, #14]
    RadioConfig.RfPowerDb = NRF24L01P_RF_SETUP_RF_PWR_MINUS_18DBM;
 800422a:	4b33      	ldr	r3, [pc, #204]	; (80042f8 <NRF24L01p_RadioReset+0x128>)
 800422c:	2200      	movs	r2, #0
 800422e:	725a      	strb	r2, [r3, #9]

#endif

#if (RX_UNIT == 1)

    RxPipeConfig[0].address = 0x11223344EE;
 8004230:	4a32      	ldr	r2, [pc, #200]	; (80042fc <NRF24L01p_RadioReset+0x12c>)
 8004232:	a425      	add	r4, pc, #148	; (adr r4, 80042c8 <NRF24L01p_RadioReset+0xf8>)
 8004234:	cc18      	ldmia	r4, {r3, r4}
 8004236:	e9c2 3402 	strd	r3, r4, [r2, #8]
    RxPipeConfig[1].address = 0x9A4524CE01;
 800423a:	4a30      	ldr	r2, [pc, #192]	; (80042fc <NRF24L01p_RadioReset+0x12c>)
 800423c:	a424      	add	r4, pc, #144	; (adr r4, 80042d0 <NRF24L01p_RadioReset+0x100>)
 800423e:	cc18      	ldmia	r4, {r3, r4}
 8004240:	e9c2 3408 	strd	r3, r4, [r2, #32]
    RxPipeConfig[2].address = 0x9A4524CE02;
 8004244:	4a2d      	ldr	r2, [pc, #180]	; (80042fc <NRF24L01p_RadioReset+0x12c>)
 8004246:	a424      	add	r4, pc, #144	; (adr r4, 80042d8 <NRF24L01p_RadioReset+0x108>)
 8004248:	cc18      	ldmia	r4, {r3, r4}
 800424a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    RxPipeConfig[3].address = 0x9A4524CE03;
 800424e:	4a2b      	ldr	r2, [pc, #172]	; (80042fc <NRF24L01p_RadioReset+0x12c>)
 8004250:	a423      	add	r4, pc, #140	; (adr r4, 80042e0 <NRF24L01p_RadioReset+0x110>)
 8004252:	cc18      	ldmia	r4, {r3, r4}
 8004254:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    RxPipeConfig[4].address = 0x9A4524CE09;
 8004258:	4a28      	ldr	r2, [pc, #160]	; (80042fc <NRF24L01p_RadioReset+0x12c>)
 800425a:	a423      	add	r4, pc, #140	; (adr r4, 80042e8 <NRF24L01p_RadioReset+0x118>)
 800425c:	cc18      	ldmia	r4, {r3, r4}
 800425e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    RxPipeConfig[5].address = 0x9A4524CE05;
 8004262:	4a26      	ldr	r2, [pc, #152]	; (80042fc <NRF24L01p_RadioReset+0x12c>)
 8004264:	a422      	add	r4, pc, #136	; (adr r4, 80042f0 <NRF24L01p_RadioReset+0x120>)
 8004266:	cc18      	ldmia	r4, {r3, r4}
 8004268:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

#endif

    int i;
    for(i=0;i<6;i++){
 800426c:	2300      	movs	r3, #0
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	e01f      	b.n	80042b2 <NRF24L01p_RadioReset+0xe2>
        RxPipeConfig[i].PipeEnabled = 1;
 8004272:	4922      	ldr	r1, [pc, #136]	; (80042fc <NRF24L01p_RadioReset+0x12c>)
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	440b      	add	r3, r1
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]
        RxPipeConfig[i].autoAckEnabled = 1;
 8004284:	491d      	ldr	r1, [pc, #116]	; (80042fc <NRF24L01p_RadioReset+0x12c>)
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	440b      	add	r3, r1
 8004292:	3301      	adds	r3, #1
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
        RxPipeConfig[i].dynamicPayloadEnabled = 1;
 8004298:	4918      	ldr	r1, [pc, #96]	; (80042fc <NRF24L01p_RadioReset+0x12c>)
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	440b      	add	r3, r1
 80042a6:	3311      	adds	r3, #17
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]
    for(i=0;i<6;i++){
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3301      	adds	r3, #1
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	dddc      	ble.n	8004272 <NRF24L01p_RadioReset+0xa2>
    }

    //Radio.Initialize(&RadioConfig, RxPipeConfig);

    NRF24L01p_Initialize();
 80042b8:	f7fc fa22 	bl	8000700 <NRF24L01p_Initialize>
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd90      	pop	{r4, r7, pc}
 80042c4:	f3af 8000 	nop.w
 80042c8:	223344ee 	.word	0x223344ee
 80042cc:	00000011 	.word	0x00000011
 80042d0:	4524ce01 	.word	0x4524ce01
 80042d4:	0000009a 	.word	0x0000009a
 80042d8:	4524ce02 	.word	0x4524ce02
 80042dc:	0000009a 	.word	0x0000009a
 80042e0:	4524ce03 	.word	0x4524ce03
 80042e4:	0000009a 	.word	0x0000009a
 80042e8:	4524ce09 	.word	0x4524ce09
 80042ec:	0000009a 	.word	0x0000009a
 80042f0:	4524ce05 	.word	0x4524ce05
 80042f4:	0000009a 	.word	0x0000009a
 80042f8:	2000026c 	.word	0x2000026c
 80042fc:	20000290 	.word	0x20000290

08004300 <RX_MODULE>:

}



int RX_MODULE(void) {
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b0ad      	sub	sp, #180	; 0xb4
 8004304:	af00      	add	r7, sp, #0

    printf("RX NODE\r\n");
 8004306:	4878      	ldr	r0, [pc, #480]	; (80044e8 <RX_MODULE+0x1e8>)
 8004308:	f000 fde6 	bl	8004ed8 <puts>
    graphic_lcd_write(0, 0, "RX NODE");
 800430c:	4a77      	ldr	r2, [pc, #476]	; (80044ec <RX_MODULE+0x1ec>)
 800430e:	2100      	movs	r1, #0
 8004310:	2000      	movs	r0, #0
 8004312:	f7fc f8a7 	bl	8000464 <graphic_lcd_write>
    NRF24L01p_RadioReset();
 8004316:	f7ff ff5b 	bl	80041d0 <NRF24L01p_RadioReset>

    printf("DYNPD : %x\r\n", NRF24L01p_read_register(0x1c));
 800431a:	201c      	movs	r0, #28
 800431c:	f7fc fbfe 	bl	8000b1c <NRF24L01p_read_register>
 8004320:	4603      	mov	r3, r0
 8004322:	4619      	mov	r1, r3
 8004324:	4872      	ldr	r0, [pc, #456]	; (80044f0 <RX_MODULE+0x1f0>)
 8004326:	f000 fd8d 	bl	8004e44 <iprintf>
    printf("FEATURE : %x\r\n", NRF24L01p_read_register(0x1d));
 800432a:	201d      	movs	r0, #29
 800432c:	f7fc fbf6 	bl	8000b1c <NRF24L01p_read_register>
 8004330:	4603      	mov	r3, r0
 8004332:	4619      	mov	r1, r3
 8004334:	486f      	ldr	r0, [pc, #444]	; (80044f4 <RX_MODULE+0x1f4>)
 8004336:	f000 fd85 	bl	8004e44 <iprintf>
    printf("FIFO : %x\r\n",NRF24L01p_read_register(0x17));
 800433a:	2017      	movs	r0, #23
 800433c:	f7fc fbee 	bl	8000b1c <NRF24L01p_read_register>
 8004340:	4603      	mov	r3, r0
 8004342:	4619      	mov	r1, r3
 8004344:	486c      	ldr	r0, [pc, #432]	; (80044f8 <RX_MODULE+0x1f8>)
 8004346:	f000 fd7d 	bl	8004e44 <iprintf>
    printf("RF_SETUP : %x\r\n", NRF24L01p_read_register(0x06));
 800434a:	2006      	movs	r0, #6
 800434c:	f7fc fbe6 	bl	8000b1c <NRF24L01p_read_register>
 8004350:	4603      	mov	r3, r0
 8004352:	4619      	mov	r1, r3
 8004354:	4869      	ldr	r0, [pc, #420]	; (80044fc <RX_MODULE+0x1fc>)
 8004356:	f000 fd75 	bl	8004e44 <iprintf>

    NRF24L01p_Payload_t payload;

    payload.UseAck = 1;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
    payload.TxAddress = 0x9A4524CE01;
 8004360:	a45f      	add	r4, pc, #380	; (adr r4, 80044e0 <RX_MODULE+0x1e0>)
 8004362:	cc18      	ldmia	r4, {r3, r4}
 8004364:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
    //payload.retransmitCount = 15;
    payload.pipe = NRF24L01P_PIPE_P1;
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

    int i=0;
 800436e:	2300      	movs	r3, #0
 8004370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    sprintf((char*)payload.Data, "PONG -> %d", i++);
 8004374:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800437e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004382:	1c50      	adds	r0, r2, #1
 8004384:	461a      	mov	r2, r3
 8004386:	495e      	ldr	r1, [pc, #376]	; (8004500 <RX_MODULE+0x200>)
 8004388:	f000 fd46 	bl	8004e18 <siprintf>
    payload.length = strlen((char*)payload.Data);
 800438c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004390:	3301      	adds	r3, #1
 8004392:	4618      	mov	r0, r3
 8004394:	f7fb ff1c 	bl	80001d0 <strlen>
 8004398:	4603      	mov	r3, r0
 800439a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    NRF24L01p_writeAckPayload(&payload);
 800439e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fc fb68 	bl	8000a78 <NRF24L01p_writeAckPayload>
    //NRF24L01p_flush_tx();


	NRF24L01p_write_RadioMode(NRF24L01P_MODE_STANDBY);
 80043a8:	2002      	movs	r0, #2
 80043aa:	f7fc fae7 	bl	800097c <NRF24L01p_write_RadioMode>
	NRF24L01p_write_RadioMode(NRF24L01P_MODE_RX);
 80043ae:	2003      	movs	r0, #3
 80043b0:	f7fc fae4 	bl	800097c <NRF24L01p_write_RadioMode>

	NRF24L01p_writeAckPayload(&payload);
 80043b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fc fb5d 	bl	8000a78 <NRF24L01p_writeAckPayload>


	int receivedData = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    while(1){
        //Radio.port_DelayMs(1000);

    	HAL_Delay(200);
 80043c4:	20c8      	movs	r0, #200	; 0xc8
 80043c6:	f7fd f90f 	bl	80015e8 <HAL_Delay>

    	printf("\r\n\r\n");
 80043ca:	484e      	ldr	r0, [pc, #312]	; (8004504 <RX_MODULE+0x204>)
 80043cc:	f000 fd84 	bl	8004ed8 <puts>
		printf("CONFIG : %x\r\n", NRF24L01p_read_register(0x00));
 80043d0:	2000      	movs	r0, #0
 80043d2:	f7fc fba3 	bl	8000b1c <NRF24L01p_read_register>
 80043d6:	4603      	mov	r3, r0
 80043d8:	4619      	mov	r1, r3
 80043da:	484b      	ldr	r0, [pc, #300]	; (8004508 <RX_MODULE+0x208>)
 80043dc:	f000 fd32 	bl	8004e44 <iprintf>
		printf("EN_AA : %x\r\n", NRF24L01p_read_register(0x01));
 80043e0:	2001      	movs	r0, #1
 80043e2:	f7fc fb9b 	bl	8000b1c <NRF24L01p_read_register>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4619      	mov	r1, r3
 80043ea:	4848      	ldr	r0, [pc, #288]	; (800450c <RX_MODULE+0x20c>)
 80043ec:	f000 fd2a 	bl	8004e44 <iprintf>
		printf("RF_SETUP : %x\r\n", NRF24L01p_read_register(0x06));
 80043f0:	2006      	movs	r0, #6
 80043f2:	f7fc fb93 	bl	8000b1c <NRF24L01p_read_register>
 80043f6:	4603      	mov	r3, r0
 80043f8:	4619      	mov	r1, r3
 80043fa:	4840      	ldr	r0, [pc, #256]	; (80044fc <RX_MODULE+0x1fc>)
 80043fc:	f000 fd22 	bl	8004e44 <iprintf>
		printf("STATUS : %x\r\n", NRF24L01p_read_register(0x07));
 8004400:	2007      	movs	r0, #7
 8004402:	f7fc fb8b 	bl	8000b1c <NRF24L01p_read_register>
 8004406:	4603      	mov	r3, r0
 8004408:	4619      	mov	r1, r3
 800440a:	4841      	ldr	r0, [pc, #260]	; (8004510 <RX_MODULE+0x210>)
 800440c:	f000 fd1a 	bl	8004e44 <iprintf>
		printf("FIFO : %x\r\n",NRF24L01p_read_register(0x17));
 8004410:	2017      	movs	r0, #23
 8004412:	f7fc fb83 	bl	8000b1c <NRF24L01p_read_register>
 8004416:	4603      	mov	r3, r0
 8004418:	4619      	mov	r1, r3
 800441a:	4837      	ldr	r0, [pc, #220]	; (80044f8 <RX_MODULE+0x1f8>)
 800441c:	f000 fd12 	bl	8004e44 <iprintf>
		printf("DYNPD : %x\r\n", NRF24L01p_read_register(0x1c));
 8004420:	201c      	movs	r0, #28
 8004422:	f7fc fb7b 	bl	8000b1c <NRF24L01p_read_register>
 8004426:	4603      	mov	r3, r0
 8004428:	4619      	mov	r1, r3
 800442a:	4831      	ldr	r0, [pc, #196]	; (80044f0 <RX_MODULE+0x1f0>)
 800442c:	f000 fd0a 	bl	8004e44 <iprintf>
		printf("FEATURE : %x\r\n", NRF24L01p_read_register(0x1d));
 8004430:	201d      	movs	r0, #29
 8004432:	f7fc fb73 	bl	8000b1c <NRF24L01p_read_register>
 8004436:	4603      	mov	r3, r0
 8004438:	4619      	mov	r1, r3
 800443a:	482e      	ldr	r0, [pc, #184]	; (80044f4 <RX_MODULE+0x1f4>)
 800443c:	f000 fd02 	bl	8004e44 <iprintf>


		char dispData[30];
		sprintf(dispData,"received: %d", receivedData);
 8004440:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004444:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004448:	4932      	ldr	r1, [pc, #200]	; (8004514 <RX_MODULE+0x214>)
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fce4 	bl	8004e18 <siprintf>
		graphic_lcd_write(1, 0, dispData);
 8004450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004454:	461a      	mov	r2, r3
 8004456:	2100      	movs	r1, #0
 8004458:	2001      	movs	r0, #1
 800445a:	f7fc f803 	bl	8000464 <graphic_lcd_write>


        if(NRF24L01p_readable()){
 800445e:	f7fc faf9 	bl	8000a54 <NRF24L01p_readable>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ad      	beq.n	80043c4 <RX_MODULE+0xc4>
        	receivedData++;
 8004468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800446c:	3301      	adds	r3, #1
 800446e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

        	DISPLAY_BACKLIGHT_ON;
 8004472:	2201      	movs	r2, #1
 8004474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800447c:	f7fd fb44 	bl	8001b08 <HAL_GPIO_WritePin>
            NRF24L01p_Payload_t payload;

            NRF24L01p_clear_DataReadyFlag();
 8004480:	f7fc fe0d 	bl	800109e <NRF24L01p_clear_DataReadyFlag>
            NRF24L01p_readPayload(&payload);
 8004484:	463b      	mov	r3, r7
 8004486:	4618      	mov	r0, r3
 8004488:	f7fc fb08 	bl	8000a9c <NRF24L01p_readPayload>
            //payload.data[payload.length] = '\0';
            printf("DATA[%d] : ", payload.length);
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	4619      	mov	r1, r3
 8004490:	4821      	ldr	r0, [pc, #132]	; (8004518 <RX_MODULE+0x218>)
 8004492:	f000 fcd7 	bl	8004e44 <iprintf>
            int i;
            //putc('c', stdout);
            for(i=0;i<payload.length;i++){
 8004496:	2300      	movs	r3, #0
 8004498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800449c:	e012      	b.n	80044c4 <RX_MODULE+0x1c4>
                putc(payload.Data[i], stdout);
 800449e:	4b1f      	ldr	r3, [pc, #124]	; (800451c <RX_MODULE+0x21c>)
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	1c7a      	adds	r2, r7, #1
 80044a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044a8:	4413      	add	r3, r2
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	4619      	mov	r1, r3
 80044ae:	4b1b      	ldr	r3, [pc, #108]	; (800451c <RX_MODULE+0x21c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	461a      	mov	r2, r3
 80044b6:	f7ff fe5d 	bl	8004174 <__sputc_r>
            for(i=0;i<payload.length;i++){
 80044ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044be:	3301      	adds	r3, #1
 80044c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d8e7      	bhi.n	800449e <RX_MODULE+0x19e>
            }
            printf("\r\n");
 80044ce:	4814      	ldr	r0, [pc, #80]	; (8004520 <RX_MODULE+0x220>)
 80044d0:	f000 fd02 	bl	8004ed8 <puts>
            //printf("DATA P%d %d: %s\r\n", payload.pipe, payload.length, payload.data);
            NRF24L01p_flush_rx();
 80044d4:	f7fc fbef 	bl	8000cb6 <NRF24L01p_flush_rx>
    while(1){
 80044d8:	e774      	b.n	80043c4 <RX_MODULE+0xc4>
 80044da:	bf00      	nop
 80044dc:	f3af 8000 	nop.w
 80044e0:	4524ce01 	.word	0x4524ce01
 80044e4:	0000009a 	.word	0x0000009a
 80044e8:	080058a4 	.word	0x080058a4
 80044ec:	080058b0 	.word	0x080058b0
 80044f0:	0800581c 	.word	0x0800581c
 80044f4:	0800582c 	.word	0x0800582c
 80044f8:	08005810 	.word	0x08005810
 80044fc:	080057f0 	.word	0x080057f0
 8004500:	080058b8 	.word	0x080058b8
 8004504:	080057cc 	.word	0x080057cc
 8004508:	080057d0 	.word	0x080057d0
 800450c:	080057e0 	.word	0x080057e0
 8004510:	08005800 	.word	0x08005800
 8004514:	080058c4 	.word	0x080058c4
 8004518:	080058d4 	.word	0x080058d4
 800451c:	20000044 	.word	0x20000044
 8004520:	080058e0 	.word	0x080058e0

08004524 <initLEDs>:
    return 0;
}



void initLEDs(){
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800452a:	1d3b      	adds	r3, r7, #4
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8004538:	23f0      	movs	r3, #240	; 0xf0
 800453a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800453c:	2301      	movs	r3, #1
 800453e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004548:	1d3b      	adds	r3, r7, #4
 800454a:	4619      	mov	r1, r3
 800454c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004550:	f7fd f944 	bl	80017dc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8004554:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004558:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800455a:	2301      	movs	r3, #1
 800455c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004566:	1d3b      	adds	r3, r7, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4803      	ldr	r0, [pc, #12]	; (8004578 <initLEDs+0x54>)
 800456c:	f7fd f936 	bl	80017dc <HAL_GPIO_Init>

}
 8004570:	bf00      	nop
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	48000400 	.word	0x48000400

0800457c <initButtons>:


void initButtons(){
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004582:	1d3b      	adds	r3, r7, #4
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_2 | GPIO_PIN_1 | GPIO_PIN_0 ;
 8004590:	230f      	movs	r3, #15
 8004592:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004594:	2300      	movs	r3, #0
 8004596:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a0:	1d3b      	adds	r3, r7, #4
 80045a2:	4619      	mov	r1, r3
 80045a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045a8:	f7fd f918 	bl	80017dc <HAL_GPIO_Init>


}
 80045ac:	bf00      	nop
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af00      	add	r7, sp, #0

	HAL_Init();
 80045ba:	f7fc ffd1 	bl	8001560 <HAL_Init>
	SystemClock_Config();
 80045be:	f000 f895 	bl	80046ec <SystemClock_Config>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80045c2:	4a48      	ldr	r2, [pc, #288]	; (80046e4 <main+0x130>)
 80045c4:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <main+0x130>)
 80045c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c8:	f043 0304 	orr.w	r3, r3, #4
 80045cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045ce:	4b45      	ldr	r3, [pc, #276]	; (80046e4 <main+0x130>)
 80045d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	693b      	ldr	r3, [r7, #16]
	//__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80045da:	4a42      	ldr	r2, [pc, #264]	; (80046e4 <main+0x130>)
 80045dc:	4b41      	ldr	r3, [pc, #260]	; (80046e4 <main+0x130>)
 80045de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045e6:	4b3f      	ldr	r3, [pc, #252]	; (80046e4 <main+0x130>)
 80045e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80045f2:	4a3c      	ldr	r2, [pc, #240]	; (80046e4 <main+0x130>)
 80045f4:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <main+0x130>)
 80045f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f8:	f043 0302 	orr.w	r3, r3, #2
 80045fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045fe:	4b39      	ldr	r3, [pc, #228]	; (80046e4 <main+0x130>)
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800460a:	4a36      	ldr	r2, [pc, #216]	; (80046e4 <main+0x130>)
 800460c:	4b35      	ldr	r3, [pc, #212]	; (80046e4 <main+0x130>)
 800460e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004610:	f043 0308 	orr.w	r3, r3, #8
 8004614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004616:	4b33      	ldr	r3, [pc, #204]	; (80046e4 <main+0x130>)
 8004618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	687b      	ldr	r3, [r7, #4]

	c12832_hal_spi_init();
 8004622:	f7fb fddd 	bl	80001e0 <c12832_hal_spi_init>
	c12832_hal_gpio_init();
 8004626:	f7fb fe51 	bl	80002cc <c12832_hal_gpio_init>


	initLEDs();
 800462a:	f7ff ff7b 	bl	8004524 <initLEDs>
	initButtons();
 800462e:	f7ff ffa5 	bl	800457c <initButtons>

	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004632:	2201      	movs	r2, #1
 8004634:	2110      	movs	r1, #16
 8004636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800463a:	f7fd fa65 	bl	8001b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800463e:	2201      	movs	r2, #1
 8004640:	2120      	movs	r1, #32
 8004642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004646:	f7fd fa5f 	bl	8001b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800464a:	2201      	movs	r2, #1
 800464c:	2140      	movs	r1, #64	; 0x40
 800464e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004652:	f7fd fa59 	bl	8001b08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8004656:	2201      	movs	r2, #1
 8004658:	2180      	movs	r1, #128	; 0x80
 800465a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800465e:	f7fd fa53 	bl	8001b08 <HAL_GPIO_WritePin>




	HAL_GPIO_WritePin(DISPLAY_BACKLIGHT_GPIO_Port, DISPLAY_BACKLIGHT_Pin, GPIO_PIN_RESET);
 8004662:	2200      	movs	r2, #0
 8004664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800466c:	f7fd fa4c 	bl	8001b08 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004670:	f107 0314 	add.w	r3, r7, #20
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DISPLAY_BACKLIGHT_Pin;
 8004680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004684:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004686:	2301      	movs	r3, #1
 8004688:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800468e:	2300      	movs	r3, #0
 8004690:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DISPLAY_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8004692:	f107 0314 	add.w	r3, r7, #20
 8004696:	4619      	mov	r1, r3
 8004698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800469c:	f7fd f89e 	bl	80017dc <HAL_GPIO_Init>

	DISPLAY_BACKLIGHT_OFF;
 80046a0:	2200      	movs	r2, #0
 80046a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046aa:	f7fd fa2d 	bl	8001b08 <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 80046ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80046b2:	f7fc ff99 	bl	80015e8 <HAL_Delay>

	graphic_lcd_initialize ();
 80046b6:	f7fb ff17 	bl	80004e8 <graphic_lcd_initialize>
	graphic_lcd_clear_screen ();
 80046ba:	f7fb feab 	bl	8000414 <graphic_lcd_clear_screen>
	DISPLAY_BACKLIGHT_ON;
 80046be:	2201      	movs	r2, #1
 80046c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046c8:	f7fd fa1e 	bl	8001b08 <HAL_GPIO_WritePin>
	graphic_lcd_write(0, 0, "HELLO");
 80046cc:	4a06      	ldr	r2, [pc, #24]	; (80046e8 <main+0x134>)
 80046ce:	2100      	movs	r1, #0
 80046d0:	2000      	movs	r0, #0
 80046d2:	f7fb fec7 	bl	8000464 <graphic_lcd_write>
	HAL_Delay(1000);
 80046d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046da:	f7fc ff85 	bl	80015e8 <HAL_Delay>
	#if (TX_UNIT == 1)
			TX_MODULE();
	#endif

	#if (RX_UNIT == 1)
			RX_MODULE();
 80046de:	f7ff fe0f 	bl	8004300 <RX_MODULE>
	#endif

	/* Infinite loop */
	while (1)
 80046e2:	e7fe      	b.n	80046e2 <main+0x12e>
 80046e4:	40021000 	.word	0x40021000
 80046e8:	080058e4 	.word	0x080058e4

080046ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b0ae      	sub	sp, #184	; 0xb8
 80046f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80046f6:	2244      	movs	r2, #68	; 0x44
 80046f8:	2100      	movs	r1, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fc3c 	bl	8004f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004700:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004710:	463b      	mov	r3, r7
 8004712:	2260      	movs	r2, #96	; 0x60
 8004714:	2100      	movs	r1, #0
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fc2e 	bl	8004f78 <memset>

  /**Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800471c:	f7fd fa0c 	bl	8001b38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004720:	4a37      	ldr	r2, [pc, #220]	; (8004800 <SystemClock_Config+0x114>)
 8004722:	4b37      	ldr	r3, [pc, #220]	; (8004800 <SystemClock_Config+0x114>)
 8004724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004728:	f023 0318 	bic.w	r3, r3, #24
 800472c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI | RCC_OSCILLATORTYPE_HSI;
 8004730:	2316      	movs	r3, #22
 8004732:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 800473c:	2310      	movs	r3, #16
 800473e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004742:	2301      	movs	r3, #1
 8004744:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004746:	2301      	movs	r3, #1
 8004748:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8004752:	2370      	movs	r3, #112	; 0x70
 8004754:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004758:	2302      	movs	r3, #2
 800475a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800475e:	2302      	movs	r3, #2
 8004760:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004764:	2310      	movs	r3, #16
 8004766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 360;
 800476a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800476e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004772:	2307      	movs	r3, #7
 8004774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8004778:	2306      	movs	r3, #6
 800477a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800477e:	2302      	movs	r3, #2
 8004780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004784:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004788:	4618      	mov	r0, r3
 800478a:	f7fd fa49 	bl	8001c20 <HAL_RCC_OscConfig>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004794:	f000 f836 	bl	8004804 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004798:	230f      	movs	r3, #15
 800479a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800479c:	2303      	movs	r3, #3
 800479e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047a0:	2300      	movs	r3, #0
 80047a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80047a4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80047a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80047aa:	2300      	movs	r3, #0
 80047ac:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80047ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80047b2:	2104      	movs	r1, #4
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fd fdf5 	bl	80023a4 <HAL_RCC_ClockConfig>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80047c0:	f000 f820 	bl	8004804 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80047c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80047ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047d0:	463b      	mov	r3, r7
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe f864 	bl	80028a0 <HAL_RCCEx_PeriphCLKConfig>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80047de:	f000 f811 	bl	8004804 <Error_Handler>
  }
  /**Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80047e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80047e6:	f7fd f9c5 	bl	8001b74 <HAL_PWREx_ControlVoltageScaling>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80047f0:	f000 f808 	bl	8004804 <Error_Handler>
  }
  /**Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80047f4:	f7fe fa9a 	bl	8002d2c <HAL_RCCEx_EnableMSIPLLMode>
}
 80047f8:	bf00      	nop
 80047fa:	37b8      	adds	r7, #184	; 0xb8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40021000 	.word	0x40021000

08004804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004808:	bf00      	nop
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
	...

08004814 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800484c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004818:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800481a:	e003      	b.n	8004824 <LoopCopyDataInit>

0800481c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800481e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004820:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004822:	3104      	adds	r1, #4

08004824 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004824:	480b      	ldr	r0, [pc, #44]	; (8004854 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004826:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004828:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800482a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800482c:	d3f6      	bcc.n	800481c <CopyDataInit>
	ldr	r2, =_sbss
 800482e:	4a0b      	ldr	r2, [pc, #44]	; (800485c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004830:	e002      	b.n	8004838 <LoopFillZerobss>

08004832 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004832:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004834:	f842 3b04 	str.w	r3, [r2], #4

08004838 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004838:	4b09      	ldr	r3, [pc, #36]	; (8004860 <LoopForever+0x16>)
	cmp	r2, r3
 800483a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800483c:	d3f9      	bcc.n	8004832 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800483e:	f000 f93f 	bl	8004ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004842:	f000 fb75 	bl	8004f30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004846:	f7ff feb5 	bl	80045b4 <main>

0800484a <LoopForever>:

LoopForever:
    b LoopForever
 800484a:	e7fe      	b.n	800484a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800484c:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8004850:	08005b70 	.word	0x08005b70
	ldr	r0, =_sdata
 8004854:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004858:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 800485c:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 8004860:	20000328 	.word	0x20000328

08004864 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004864:	e7fe      	b.n	8004864 <ADC1_IRQHandler>
	...

08004868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800486e:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <HAL_MspInit+0x4c>)
 8004870:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <HAL_MspInit+0x4c>)
 8004872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	6613      	str	r3, [r2, #96]	; 0x60
 800487a:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <HAL_MspInit+0x4c>)
 800487c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	607b      	str	r3, [r7, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004886:	4a0b      	ldr	r2, [pc, #44]	; (80048b4 <HAL_MspInit+0x4c>)
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <HAL_MspInit+0x4c>)
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004890:	6593      	str	r3, [r2, #88]	; 0x58
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <HAL_MspInit+0x4c>)
 8004894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800489e:	2200      	movs	r2, #0
 80048a0:	210f      	movs	r1, #15
 80048a2:	f06f 0001 	mvn.w	r0, #1
 80048a6:	f7fc ff70 	bl	800178a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40021000 	.word	0x40021000

080048b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]



}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048d0:	bf00      	nop
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80048da:	b480      	push	{r7}
 80048dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048de:	e7fe      	b.n	80048de <HardFault_Handler+0x4>

080048e0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048e4:	e7fe      	b.n	80048e4 <MemManage_Handler+0x4>

080048e6 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80048e6:	b480      	push	{r7}
 80048e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048ea:	e7fe      	b.n	80048ea <BusFault_Handler+0x4>

080048ec <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048f0:	e7fe      	b.n	80048f0 <UsageFault_Handler+0x4>

080048f2 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80048f2:	b480      	push	{r7}
 80048f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048f6:	bf00      	nop
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8004904:	f7ff f85f 	bl	80039c6 <osSystickHandler>
  HAL_IncTick();
 8004908:	f7fc fe54 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800490c:	bf00      	nop
 800490e:	bd80      	pop	{r7, pc}

08004910 <TIM1_UP_TIM16_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
*/
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <DMA2_Channel1_IRQHandler>:

/**
* @brief This function handles DMA2 channel1 global interrupt.
*/
void DMA2_Channel1_IRQHandler(void)
{
 800491e:	b480      	push	{r7}
 8004920:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <DMA2_Channel2_IRQHandler>:

/**
* @brief This function handles DMA2 channel2 global interrupt.
*/
void DMA2_Channel2_IRQHandler(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8004930:	bf00      	nop
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <USB_IRQHandler>:

/**
* @brief This function handles USB event interrupt through EXTI line 17.
*/
void USB_IRQHandler(void)
{
 800493a:	b480      	push	{r7}
 800493c:	af00      	add	r7, sp, #0
  /* USER CODE END USB_IRQn 0 */

  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800493e:	bf00      	nop
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004950:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004954:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d013      	beq.n	8004988 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004960:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004964:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004968:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00b      	beq.n	8004988 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004970:	e000      	b.n	8004974 <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 8004972:	bf00      	nop
 8004974:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f9      	beq.n	8004972 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800497e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004988:	687b      	ldr	r3, [r7, #4]
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <_write>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b086      	sub	sp, #24
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	e009      	b.n	80049c0 <_write+0x2a>
	ITM_SendChar((*ptr++));
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	60ba      	str	r2, [r7, #8]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff ffc7 	bl	8004948 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	3301      	adds	r3, #1
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	dbf1      	blt.n	80049ac <_write+0x16>
	return len;
 80049c8:	687b      	ldr	r3, [r7, #4]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <_sbrk>:

caddr_t _sbrk(int32_t incr)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  extern uint32_t _Min_Heap_Size; /* _Min_Heap_Size symbol defined in the linker script. */
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 80049dc:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <_sbrk+0x58>)
 80049de:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <_sbrk+0x5c>)
 80049e0:	4413      	add	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 80049e4:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <_sbrk+0x60>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d102      	bne.n	80049f2 <_sbrk+0x1e>
    heap_end = &end;
 80049ec:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <_sbrk+0x60>)
 80049ee:	4a0f      	ldr	r2, [pc, #60]	; (8004a2c <_sbrk+0x58>)
 80049f0:	601a      	str	r2, [r3, #0]

  prev_heap_end = heap_end;
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <_sbrk+0x60>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60bb      	str	r3, [r7, #8]
  if (heap_end + incr > max_heap)
 80049f8:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <_sbrk+0x60>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	441a      	add	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d905      	bls.n	8004a12 <_sbrk+0x3e>
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 8004a06:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <_sbrk+0x64>)
 8004a08:	220c      	movs	r2, #12
 8004a0a:	601a      	str	r2, [r3, #0]
    return (caddr_t) -1;
 8004a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a10:	e006      	b.n	8004a20 <_sbrk+0x4c>
  }

  heap_end += incr;
 8004a12:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <_sbrk+0x60>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4413      	add	r3, r2
 8004a1a:	4a06      	ldr	r2, [pc, #24]	; (8004a34 <_sbrk+0x60>)
 8004a1c:	6013      	str	r3, [r2, #0]

  return (caddr_t) prev_heap_end;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	20000328 	.word	0x20000328
 8004a30:	00000200 	.word	0x00000200
 8004a34:	200001f8 	.word	0x200001f8
 8004a38:	20000324 	.word	0x20000324

08004a3c <_close>:

int _close(int32_t file)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  return -1;
 8004a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  st->st_mode = S_IFCHR;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a64:	605a      	str	r2, [r3, #4]
  return 0;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <_isatty>:

int _isatty(int32_t file)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  return 1;
 8004a7c:	2301      	movs	r3, #1
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
  return 0;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  return 0;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ac4:	4a17      	ldr	r2, [pc, #92]	; (8004b24 <SystemInit+0x64>)
 8004ac6:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <SystemInit+0x64>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004ad4:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <SystemInit+0x68>)
 8004ad6:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <SystemInit+0x68>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004ae0:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <SystemInit+0x68>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004ae6:	4a10      	ldr	r2, [pc, #64]	; (8004b28 <SystemInit+0x68>)
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <SystemInit+0x68>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004af0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004af4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <SystemInit+0x68>)
 8004af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004afc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004afe:	4a0a      	ldr	r2, [pc, #40]	; (8004b28 <SystemInit+0x68>)
 8004b00:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <SystemInit+0x68>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <SystemInit+0x68>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b10:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <SystemInit+0x64>)
 8004b12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b16:	609a      	str	r2, [r3, #8]
#endif
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	e000ed00 	.word	0xe000ed00
 8004b28:	40021000 	.word	0x40021000

08004b2c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
	int div = 1;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004b3c:	e004      	b.n	8004b48 <ts_itoa+0x1c>
		div *= base;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d2f3      	bcs.n	8004b3e <ts_itoa+0x12>

	while (div != 0)
 8004b56:	e029      	b.n	8004bac <ts_itoa+0x80>
	{
		int num = d/div;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	613b      	str	r3, [r7, #16]
		d = d%div;
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b6a:	fb02 f201 	mul.w	r2, r2, r1
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	60bb      	str	r3, [r7, #8]
		div /= base;
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b7a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b09      	cmp	r3, #9
 8004b80:	dd0a      	ble.n	8004b98 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	1c59      	adds	r1, r3, #1
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	6011      	str	r1, [r2, #0]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	3237      	adds	r2, #55	; 0x37
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e009      	b.n	8004bac <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	1c59      	adds	r1, r3, #1
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	6011      	str	r1, [r2, #0]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	3230      	adds	r2, #48	; 0x30
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1d2      	bne.n	8004b58 <ts_itoa+0x2c>
	}
}
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b088      	sub	sp, #32
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8004bce:	e07d      	b.n	8004ccc <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b25      	cmp	r3, #37	; 0x25
 8004bd6:	d171      	bne.n	8004cbc <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b64      	cmp	r3, #100	; 0x64
 8004be4:	d01e      	beq.n	8004c24 <ts_formatstring+0x66>
 8004be6:	2b64      	cmp	r3, #100	; 0x64
 8004be8:	dc06      	bgt.n	8004bf8 <ts_formatstring+0x3a>
 8004bea:	2b58      	cmp	r3, #88	; 0x58
 8004bec:	d050      	beq.n	8004c90 <ts_formatstring+0xd2>
 8004bee:	2b63      	cmp	r3, #99	; 0x63
 8004bf0:	d00e      	beq.n	8004c10 <ts_formatstring+0x52>
 8004bf2:	2b25      	cmp	r3, #37	; 0x25
 8004bf4:	d058      	beq.n	8004ca8 <ts_formatstring+0xea>
 8004bf6:	e05d      	b.n	8004cb4 <ts_formatstring+0xf6>
 8004bf8:	2b73      	cmp	r3, #115	; 0x73
 8004bfa:	d02b      	beq.n	8004c54 <ts_formatstring+0x96>
 8004bfc:	2b73      	cmp	r3, #115	; 0x73
 8004bfe:	dc02      	bgt.n	8004c06 <ts_formatstring+0x48>
 8004c00:	2b69      	cmp	r3, #105	; 0x69
 8004c02:	d00f      	beq.n	8004c24 <ts_formatstring+0x66>
 8004c04:	e056      	b.n	8004cb4 <ts_formatstring+0xf6>
 8004c06:	2b75      	cmp	r3, #117	; 0x75
 8004c08:	d037      	beq.n	8004c7a <ts_formatstring+0xbc>
 8004c0a:	2b78      	cmp	r3, #120	; 0x78
 8004c0c:	d040      	beq.n	8004c90 <ts_formatstring+0xd2>
 8004c0e:	e051      	b.n	8004cb4 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	60fa      	str	r2, [r7, #12]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	1d11      	adds	r1, r2, #4
 8004c1a:	6079      	str	r1, [r7, #4]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]
				break;
 8004c22:	e047      	b.n	8004cb4 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	1d1a      	adds	r2, r3, #4
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	da07      	bge.n	8004c44 <ts_formatstring+0x86>
					{
						val *= -1;
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	425b      	negs	r3, r3
 8004c38:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	60fa      	str	r2, [r7, #12]
 8004c40:	222d      	movs	r2, #45	; 0x2d
 8004c42:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004c44:	69f9      	ldr	r1, [r7, #28]
 8004c46:	f107 030c 	add.w	r3, r7, #12
 8004c4a:	220a      	movs	r2, #10
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff ff6d 	bl	8004b2c <ts_itoa>
				}
				break;
 8004c52:	e02f      	b.n	8004cb4 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	1d1a      	adds	r2, r3, #4
 8004c58:	607a      	str	r2, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004c5e:	e007      	b.n	8004c70 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	60fa      	str	r2, [r7, #12]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	1c51      	adds	r1, r2, #1
 8004c6a:	61b9      	str	r1, [r7, #24]
 8004c6c:	7812      	ldrb	r2, [r2, #0]
 8004c6e:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f3      	bne.n	8004c60 <ts_formatstring+0xa2>
					}
				}
				break;
 8004c78:	e01c      	b.n	8004cb4 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	1d1a      	adds	r2, r3, #4
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	6819      	ldr	r1, [r3, #0]
 8004c82:	f107 030c 	add.w	r3, r7, #12
 8004c86:	220a      	movs	r2, #10
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff ff4f 	bl	8004b2c <ts_itoa>
				break;
 8004c8e:	e011      	b.n	8004cb4 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	1d1a      	adds	r2, r3, #4
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	f107 030c 	add.w	r3, r7, #12
 8004c9e:	2210      	movs	r2, #16
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff ff43 	bl	8004b2c <ts_itoa>
				break;
 8004ca6:	e005      	b.n	8004cb4 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	60fa      	str	r2, [r7, #12]
 8004cae:	2225      	movs	r2, #37	; 0x25
 8004cb0:	701a      	strb	r2, [r3, #0]
				  break;
 8004cb2:	bf00      	nop
			}
			fmt++;
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	e007      	b.n	8004ccc <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	60fa      	str	r2, [r7, #12]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	1c51      	adds	r1, r2, #1
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	7812      	ldrb	r2, [r2, #0]
 8004cca:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f47f af7d 	bne.w	8004bd0 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1ad3      	subs	r3, r2, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3720      	adds	r7, #32
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
	int length = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8004cfa:	e081      	b.n	8004e00 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b25      	cmp	r3, #37	; 0x25
 8004d02:	d177      	bne.n	8004df4 <ts_formatlength+0x108>
		{
			++fmt;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3301      	adds	r3, #1
 8004d08:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	3b58      	subs	r3, #88	; 0x58
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d86a      	bhi.n	8004dea <ts_formatlength+0xfe>
 8004d14:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <ts_formatlength+0x30>)
 8004d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1a:	bf00      	nop
 8004d1c:	08004ddd 	.word	0x08004ddd
 8004d20:	08004deb 	.word	0x08004deb
 8004d24:	08004deb 	.word	0x08004deb
 8004d28:	08004deb 	.word	0x08004deb
 8004d2c:	08004deb 	.word	0x08004deb
 8004d30:	08004deb 	.word	0x08004deb
 8004d34:	08004deb 	.word	0x08004deb
 8004d38:	08004deb 	.word	0x08004deb
 8004d3c:	08004deb 	.word	0x08004deb
 8004d40:	08004deb 	.word	0x08004deb
 8004d44:	08004deb 	.word	0x08004deb
 8004d48:	08004da1 	.word	0x08004da1
 8004d4c:	08004daf 	.word	0x08004daf
 8004d50:	08004deb 	.word	0x08004deb
 8004d54:	08004deb 	.word	0x08004deb
 8004d58:	08004deb 	.word	0x08004deb
 8004d5c:	08004deb 	.word	0x08004deb
 8004d60:	08004daf 	.word	0x08004daf
 8004d64:	08004deb 	.word	0x08004deb
 8004d68:	08004deb 	.word	0x08004deb
 8004d6c:	08004deb 	.word	0x08004deb
 8004d70:	08004deb 	.word	0x08004deb
 8004d74:	08004deb 	.word	0x08004deb
 8004d78:	08004deb 	.word	0x08004deb
 8004d7c:	08004deb 	.word	0x08004deb
 8004d80:	08004deb 	.word	0x08004deb
 8004d84:	08004deb 	.word	0x08004deb
 8004d88:	08004dbd 	.word	0x08004dbd
 8004d8c:	08004deb 	.word	0x08004deb
 8004d90:	08004daf 	.word	0x08004daf
 8004d94:	08004deb 	.word	0x08004deb
 8004d98:	08004deb 	.word	0x08004deb
 8004d9c:	08004ddd 	.word	0x08004ddd
			{
			  case 'c':
		  		  va_arg(va, int);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	3304      	adds	r3, #4
 8004da4:	603b      	str	r3, [r7, #0]
				  ++length;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3301      	adds	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
				  break;
 8004dac:	e025      	b.n	8004dfa <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	330b      	adds	r3, #11
 8004db2:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	3304      	adds	r3, #4
 8004db8:	603b      	str	r3, [r7, #0]
				  break;
 8004dba:	e01e      	b.n	8004dfa <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	1d1a      	adds	r2, r3, #4
 8004dc0:	603a      	str	r2, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8004dc6:	e002      	b.n	8004dce <ts_formatlength+0xe2>
			  			  ++length;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	60ba      	str	r2, [r7, #8]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f6      	bne.n	8004dc8 <ts_formatlength+0xdc>
			  	  }
				  break;
 8004dda:	e00e      	b.n	8004dfa <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3308      	adds	r3, #8
 8004de0:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	3304      	adds	r3, #4
 8004de6:	603b      	str	r3, [r7, #0]
				  break;
 8004de8:	e007      	b.n	8004dfa <ts_formatlength+0x10e>
			  default:
				  ++length;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3301      	adds	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
				  break;
 8004df0:	bf00      	nop
 8004df2:	e002      	b.n	8004dfa <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f47f af79 	bne.w	8004cfc <ts_formatlength+0x10>
	}
	return length;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8004e18:	b40e      	push	{r1, r2, r3}
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8004e22:	f107 0320 	add.w	r3, r7, #32
 8004e26:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	69f9      	ldr	r1, [r7, #28]
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff fec6 	bl	8004bbe <ts_formatstring>
 8004e32:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8004e34:	68fb      	ldr	r3, [r7, #12]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e40:	b003      	add	sp, #12
 8004e42:	4770      	bx	lr

08004e44 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8004e44:	b40f      	push	{r0, r1, r2, r3}
 8004e46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
	int length = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8004e52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e56:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e5c:	f7ff ff46 	bl	8004cec <ts_formatlength>
 8004e60:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8004e62:	466b      	mov	r3, sp
 8004e64:	461e      	mov	r6, r3
		char buf[length];
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	1e4b      	subs	r3, r1, #1
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8004e78:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8004e7c:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8004e80:	460b      	mov	r3, r1
 8004e82:	461a      	mov	r2, r3
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	00dd      	lsls	r5, r3, #3
 8004e8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e8e:	00d4      	lsls	r4, r2, #3
 8004e90:	460b      	mov	r3, r1
 8004e92:	3307      	adds	r3, #7
 8004e94:	08db      	lsrs	r3, r3, #3
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	ebad 0d03 	sub.w	sp, sp, r3
 8004e9c:	466b      	mov	r3, sp
 8004e9e:	3300      	adds	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8004ea2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ea6:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff fe85 	bl	8004bbe <ts_formatstring>
 8004eb4:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	f7ff fd6a 	bl	8004996 <_write>
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ed2:	b004      	add	sp, #16
 8004ed4:	4770      	bx	lr
	...

08004ed8 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fb f975 	bl	80001d0 <strlen>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	f7ff fd4f 	bl	8004996 <_write>
 8004ef8:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8004efa:	2201      	movs	r2, #1
 8004efc:	490b      	ldr	r1, [pc, #44]	; (8004f2c <puts+0x54>)
 8004efe:	2001      	movs	r0, #1
 8004f00:	f7ff fd49 	bl	8004996 <_write>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4413      	add	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d102      	bne.n	8004f1c <puts+0x44>
	{
		res = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e002      	b.n	8004f22 <puts+0x4a>
	}
	else
	{
		res = EOF;
 8004f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f20:	617b      	str	r3, [r7, #20]
	}

	return res;
 8004f22:	697b      	ldr	r3, [r7, #20]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	080058ec 	.word	0x080058ec

08004f30 <__libc_init_array>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	4e0d      	ldr	r6, [pc, #52]	; (8004f68 <__libc_init_array+0x38>)
 8004f34:	4c0d      	ldr	r4, [pc, #52]	; (8004f6c <__libc_init_array+0x3c>)
 8004f36:	1ba4      	subs	r4, r4, r6
 8004f38:	10a4      	asrs	r4, r4, #2
 8004f3a:	2500      	movs	r5, #0
 8004f3c:	42a5      	cmp	r5, r4
 8004f3e:	d109      	bne.n	8004f54 <__libc_init_array+0x24>
 8004f40:	4e0b      	ldr	r6, [pc, #44]	; (8004f70 <__libc_init_array+0x40>)
 8004f42:	4c0c      	ldr	r4, [pc, #48]	; (8004f74 <__libc_init_array+0x44>)
 8004f44:	f000 fc2a 	bl	800579c <_init>
 8004f48:	1ba4      	subs	r4, r4, r6
 8004f4a:	10a4      	asrs	r4, r4, #2
 8004f4c:	2500      	movs	r5, #0
 8004f4e:	42a5      	cmp	r5, r4
 8004f50:	d105      	bne.n	8004f5e <__libc_init_array+0x2e>
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f58:	4798      	blx	r3
 8004f5a:	3501      	adds	r5, #1
 8004f5c:	e7ee      	b.n	8004f3c <__libc_init_array+0xc>
 8004f5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f62:	4798      	blx	r3
 8004f64:	3501      	adds	r5, #1
 8004f66:	e7f2      	b.n	8004f4e <__libc_init_array+0x1e>
 8004f68:	08005b60 	.word	0x08005b60
 8004f6c:	08005b60 	.word	0x08005b60
 8004f70:	08005b60 	.word	0x08005b60
 8004f74:	08005b64 	.word	0x08005b64

08004f78 <memset>:
 8004f78:	4402      	add	r2, r0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d100      	bne.n	8004f82 <memset+0xa>
 8004f80:	4770      	bx	lr
 8004f82:	f803 1b01 	strb.w	r1, [r3], #1
 8004f86:	e7f9      	b.n	8004f7c <memset+0x4>

08004f88 <__swbuf_r>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	460e      	mov	r6, r1
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	4605      	mov	r5, r0
 8004f90:	b118      	cbz	r0, 8004f9a <__swbuf_r+0x12>
 8004f92:	6983      	ldr	r3, [r0, #24]
 8004f94:	b90b      	cbnz	r3, 8004f9a <__swbuf_r+0x12>
 8004f96:	f000 f9a9 	bl	80052ec <__sinit>
 8004f9a:	4b21      	ldr	r3, [pc, #132]	; (8005020 <__swbuf_r+0x98>)
 8004f9c:	429c      	cmp	r4, r3
 8004f9e:	d12a      	bne.n	8004ff6 <__swbuf_r+0x6e>
 8004fa0:	686c      	ldr	r4, [r5, #4]
 8004fa2:	69a3      	ldr	r3, [r4, #24]
 8004fa4:	60a3      	str	r3, [r4, #8]
 8004fa6:	89a3      	ldrh	r3, [r4, #12]
 8004fa8:	071a      	lsls	r2, r3, #28
 8004faa:	d52e      	bpl.n	800500a <__swbuf_r+0x82>
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	b363      	cbz	r3, 800500a <__swbuf_r+0x82>
 8004fb0:	6923      	ldr	r3, [r4, #16]
 8004fb2:	6820      	ldr	r0, [r4, #0]
 8004fb4:	1ac0      	subs	r0, r0, r3
 8004fb6:	6963      	ldr	r3, [r4, #20]
 8004fb8:	b2f6      	uxtb	r6, r6
 8004fba:	4298      	cmp	r0, r3
 8004fbc:	4637      	mov	r7, r6
 8004fbe:	db04      	blt.n	8004fca <__swbuf_r+0x42>
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f000 f928 	bl	8005218 <_fflush_r>
 8004fc8:	bb28      	cbnz	r0, 8005016 <__swbuf_r+0x8e>
 8004fca:	68a3      	ldr	r3, [r4, #8]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	60a3      	str	r3, [r4, #8]
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	6022      	str	r2, [r4, #0]
 8004fd6:	701e      	strb	r6, [r3, #0]
 8004fd8:	6963      	ldr	r3, [r4, #20]
 8004fda:	3001      	adds	r0, #1
 8004fdc:	4298      	cmp	r0, r3
 8004fde:	d004      	beq.n	8004fea <__swbuf_r+0x62>
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	07db      	lsls	r3, r3, #31
 8004fe4:	d519      	bpl.n	800501a <__swbuf_r+0x92>
 8004fe6:	2e0a      	cmp	r6, #10
 8004fe8:	d117      	bne.n	800501a <__swbuf_r+0x92>
 8004fea:	4621      	mov	r1, r4
 8004fec:	4628      	mov	r0, r5
 8004fee:	f000 f913 	bl	8005218 <_fflush_r>
 8004ff2:	b190      	cbz	r0, 800501a <__swbuf_r+0x92>
 8004ff4:	e00f      	b.n	8005016 <__swbuf_r+0x8e>
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <__swbuf_r+0x9c>)
 8004ff8:	429c      	cmp	r4, r3
 8004ffa:	d101      	bne.n	8005000 <__swbuf_r+0x78>
 8004ffc:	68ac      	ldr	r4, [r5, #8]
 8004ffe:	e7d0      	b.n	8004fa2 <__swbuf_r+0x1a>
 8005000:	4b09      	ldr	r3, [pc, #36]	; (8005028 <__swbuf_r+0xa0>)
 8005002:	429c      	cmp	r4, r3
 8005004:	bf08      	it	eq
 8005006:	68ec      	ldreq	r4, [r5, #12]
 8005008:	e7cb      	b.n	8004fa2 <__swbuf_r+0x1a>
 800500a:	4621      	mov	r1, r4
 800500c:	4628      	mov	r0, r5
 800500e:	f000 f80d 	bl	800502c <__swsetup_r>
 8005012:	2800      	cmp	r0, #0
 8005014:	d0cc      	beq.n	8004fb0 <__swbuf_r+0x28>
 8005016:	f04f 37ff 	mov.w	r7, #4294967295
 800501a:	4638      	mov	r0, r7
 800501c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800501e:	bf00      	nop
 8005020:	08005b1c 	.word	0x08005b1c
 8005024:	08005b3c 	.word	0x08005b3c
 8005028:	08005afc 	.word	0x08005afc

0800502c <__swsetup_r>:
 800502c:	4b32      	ldr	r3, [pc, #200]	; (80050f8 <__swsetup_r+0xcc>)
 800502e:	b570      	push	{r4, r5, r6, lr}
 8005030:	681d      	ldr	r5, [r3, #0]
 8005032:	4606      	mov	r6, r0
 8005034:	460c      	mov	r4, r1
 8005036:	b125      	cbz	r5, 8005042 <__swsetup_r+0x16>
 8005038:	69ab      	ldr	r3, [r5, #24]
 800503a:	b913      	cbnz	r3, 8005042 <__swsetup_r+0x16>
 800503c:	4628      	mov	r0, r5
 800503e:	f000 f955 	bl	80052ec <__sinit>
 8005042:	4b2e      	ldr	r3, [pc, #184]	; (80050fc <__swsetup_r+0xd0>)
 8005044:	429c      	cmp	r4, r3
 8005046:	d10f      	bne.n	8005068 <__swsetup_r+0x3c>
 8005048:	686c      	ldr	r4, [r5, #4]
 800504a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800504e:	b29a      	uxth	r2, r3
 8005050:	0715      	lsls	r5, r2, #28
 8005052:	d42c      	bmi.n	80050ae <__swsetup_r+0x82>
 8005054:	06d0      	lsls	r0, r2, #27
 8005056:	d411      	bmi.n	800507c <__swsetup_r+0x50>
 8005058:	2209      	movs	r2, #9
 800505a:	6032      	str	r2, [r6, #0]
 800505c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005060:	81a3      	strh	r3, [r4, #12]
 8005062:	f04f 30ff 	mov.w	r0, #4294967295
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	4b25      	ldr	r3, [pc, #148]	; (8005100 <__swsetup_r+0xd4>)
 800506a:	429c      	cmp	r4, r3
 800506c:	d101      	bne.n	8005072 <__swsetup_r+0x46>
 800506e:	68ac      	ldr	r4, [r5, #8]
 8005070:	e7eb      	b.n	800504a <__swsetup_r+0x1e>
 8005072:	4b24      	ldr	r3, [pc, #144]	; (8005104 <__swsetup_r+0xd8>)
 8005074:	429c      	cmp	r4, r3
 8005076:	bf08      	it	eq
 8005078:	68ec      	ldreq	r4, [r5, #12]
 800507a:	e7e6      	b.n	800504a <__swsetup_r+0x1e>
 800507c:	0751      	lsls	r1, r2, #29
 800507e:	d512      	bpl.n	80050a6 <__swsetup_r+0x7a>
 8005080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005082:	b141      	cbz	r1, 8005096 <__swsetup_r+0x6a>
 8005084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005088:	4299      	cmp	r1, r3
 800508a:	d002      	beq.n	8005092 <__swsetup_r+0x66>
 800508c:	4630      	mov	r0, r6
 800508e:	f000 fa1b 	bl	80054c8 <_free_r>
 8005092:	2300      	movs	r3, #0
 8005094:	6363      	str	r3, [r4, #52]	; 0x34
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800509c:	81a3      	strh	r3, [r4, #12]
 800509e:	2300      	movs	r3, #0
 80050a0:	6063      	str	r3, [r4, #4]
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	89a3      	ldrh	r3, [r4, #12]
 80050a8:	f043 0308 	orr.w	r3, r3, #8
 80050ac:	81a3      	strh	r3, [r4, #12]
 80050ae:	6923      	ldr	r3, [r4, #16]
 80050b0:	b94b      	cbnz	r3, 80050c6 <__swsetup_r+0x9a>
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050bc:	d003      	beq.n	80050c6 <__swsetup_r+0x9a>
 80050be:	4621      	mov	r1, r4
 80050c0:	4630      	mov	r0, r6
 80050c2:	f000 f9c1 	bl	8005448 <__smakebuf_r>
 80050c6:	89a2      	ldrh	r2, [r4, #12]
 80050c8:	f012 0301 	ands.w	r3, r2, #1
 80050cc:	d00c      	beq.n	80050e8 <__swsetup_r+0xbc>
 80050ce:	2300      	movs	r3, #0
 80050d0:	60a3      	str	r3, [r4, #8]
 80050d2:	6963      	ldr	r3, [r4, #20]
 80050d4:	425b      	negs	r3, r3
 80050d6:	61a3      	str	r3, [r4, #24]
 80050d8:	6923      	ldr	r3, [r4, #16]
 80050da:	b953      	cbnz	r3, 80050f2 <__swsetup_r+0xc6>
 80050dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80050e4:	d1ba      	bne.n	800505c <__swsetup_r+0x30>
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	0792      	lsls	r2, r2, #30
 80050ea:	bf58      	it	pl
 80050ec:	6963      	ldrpl	r3, [r4, #20]
 80050ee:	60a3      	str	r3, [r4, #8]
 80050f0:	e7f2      	b.n	80050d8 <__swsetup_r+0xac>
 80050f2:	2000      	movs	r0, #0
 80050f4:	e7f7      	b.n	80050e6 <__swsetup_r+0xba>
 80050f6:	bf00      	nop
 80050f8:	20000044 	.word	0x20000044
 80050fc:	08005b1c 	.word	0x08005b1c
 8005100:	08005b3c 	.word	0x08005b3c
 8005104:	08005afc 	.word	0x08005afc

08005108 <__sflush_r>:
 8005108:	898a      	ldrh	r2, [r1, #12]
 800510a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800510e:	4605      	mov	r5, r0
 8005110:	0710      	lsls	r0, r2, #28
 8005112:	460c      	mov	r4, r1
 8005114:	d45a      	bmi.n	80051cc <__sflush_r+0xc4>
 8005116:	684b      	ldr	r3, [r1, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	dc05      	bgt.n	8005128 <__sflush_r+0x20>
 800511c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	dc02      	bgt.n	8005128 <__sflush_r+0x20>
 8005122:	2000      	movs	r0, #0
 8005124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800512a:	2e00      	cmp	r6, #0
 800512c:	d0f9      	beq.n	8005122 <__sflush_r+0x1a>
 800512e:	2300      	movs	r3, #0
 8005130:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005134:	682f      	ldr	r7, [r5, #0]
 8005136:	602b      	str	r3, [r5, #0]
 8005138:	d033      	beq.n	80051a2 <__sflush_r+0x9a>
 800513a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	075a      	lsls	r2, r3, #29
 8005140:	d505      	bpl.n	800514e <__sflush_r+0x46>
 8005142:	6863      	ldr	r3, [r4, #4]
 8005144:	1ac0      	subs	r0, r0, r3
 8005146:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005148:	b10b      	cbz	r3, 800514e <__sflush_r+0x46>
 800514a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800514c:	1ac0      	subs	r0, r0, r3
 800514e:	2300      	movs	r3, #0
 8005150:	4602      	mov	r2, r0
 8005152:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005154:	6a21      	ldr	r1, [r4, #32]
 8005156:	4628      	mov	r0, r5
 8005158:	47b0      	blx	r6
 800515a:	1c43      	adds	r3, r0, #1
 800515c:	89a3      	ldrh	r3, [r4, #12]
 800515e:	d106      	bne.n	800516e <__sflush_r+0x66>
 8005160:	6829      	ldr	r1, [r5, #0]
 8005162:	291d      	cmp	r1, #29
 8005164:	d84b      	bhi.n	80051fe <__sflush_r+0xf6>
 8005166:	4a2b      	ldr	r2, [pc, #172]	; (8005214 <__sflush_r+0x10c>)
 8005168:	40ca      	lsrs	r2, r1
 800516a:	07d6      	lsls	r6, r2, #31
 800516c:	d547      	bpl.n	80051fe <__sflush_r+0xf6>
 800516e:	2200      	movs	r2, #0
 8005170:	6062      	str	r2, [r4, #4]
 8005172:	04d9      	lsls	r1, r3, #19
 8005174:	6922      	ldr	r2, [r4, #16]
 8005176:	6022      	str	r2, [r4, #0]
 8005178:	d504      	bpl.n	8005184 <__sflush_r+0x7c>
 800517a:	1c42      	adds	r2, r0, #1
 800517c:	d101      	bne.n	8005182 <__sflush_r+0x7a>
 800517e:	682b      	ldr	r3, [r5, #0]
 8005180:	b903      	cbnz	r3, 8005184 <__sflush_r+0x7c>
 8005182:	6560      	str	r0, [r4, #84]	; 0x54
 8005184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005186:	602f      	str	r7, [r5, #0]
 8005188:	2900      	cmp	r1, #0
 800518a:	d0ca      	beq.n	8005122 <__sflush_r+0x1a>
 800518c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005190:	4299      	cmp	r1, r3
 8005192:	d002      	beq.n	800519a <__sflush_r+0x92>
 8005194:	4628      	mov	r0, r5
 8005196:	f000 f997 	bl	80054c8 <_free_r>
 800519a:	2000      	movs	r0, #0
 800519c:	6360      	str	r0, [r4, #52]	; 0x34
 800519e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a2:	6a21      	ldr	r1, [r4, #32]
 80051a4:	2301      	movs	r3, #1
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b0      	blx	r6
 80051aa:	1c41      	adds	r1, r0, #1
 80051ac:	d1c6      	bne.n	800513c <__sflush_r+0x34>
 80051ae:	682b      	ldr	r3, [r5, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0c3      	beq.n	800513c <__sflush_r+0x34>
 80051b4:	2b1d      	cmp	r3, #29
 80051b6:	d001      	beq.n	80051bc <__sflush_r+0xb4>
 80051b8:	2b16      	cmp	r3, #22
 80051ba:	d101      	bne.n	80051c0 <__sflush_r+0xb8>
 80051bc:	602f      	str	r7, [r5, #0]
 80051be:	e7b0      	b.n	8005122 <__sflush_r+0x1a>
 80051c0:	89a3      	ldrh	r3, [r4, #12]
 80051c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051c6:	81a3      	strh	r3, [r4, #12]
 80051c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051cc:	690f      	ldr	r7, [r1, #16]
 80051ce:	2f00      	cmp	r7, #0
 80051d0:	d0a7      	beq.n	8005122 <__sflush_r+0x1a>
 80051d2:	0793      	lsls	r3, r2, #30
 80051d4:	680e      	ldr	r6, [r1, #0]
 80051d6:	bf08      	it	eq
 80051d8:	694b      	ldreq	r3, [r1, #20]
 80051da:	600f      	str	r7, [r1, #0]
 80051dc:	bf18      	it	ne
 80051de:	2300      	movne	r3, #0
 80051e0:	eba6 0807 	sub.w	r8, r6, r7
 80051e4:	608b      	str	r3, [r1, #8]
 80051e6:	f1b8 0f00 	cmp.w	r8, #0
 80051ea:	dd9a      	ble.n	8005122 <__sflush_r+0x1a>
 80051ec:	4643      	mov	r3, r8
 80051ee:	463a      	mov	r2, r7
 80051f0:	6a21      	ldr	r1, [r4, #32]
 80051f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051f4:	4628      	mov	r0, r5
 80051f6:	47b0      	blx	r6
 80051f8:	2800      	cmp	r0, #0
 80051fa:	dc07      	bgt.n	800520c <__sflush_r+0x104>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005202:	81a3      	strh	r3, [r4, #12]
 8005204:	f04f 30ff 	mov.w	r0, #4294967295
 8005208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800520c:	4407      	add	r7, r0
 800520e:	eba8 0800 	sub.w	r8, r8, r0
 8005212:	e7e8      	b.n	80051e6 <__sflush_r+0xde>
 8005214:	20400001 	.word	0x20400001

08005218 <_fflush_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	690b      	ldr	r3, [r1, #16]
 800521c:	4605      	mov	r5, r0
 800521e:	460c      	mov	r4, r1
 8005220:	b1db      	cbz	r3, 800525a <_fflush_r+0x42>
 8005222:	b118      	cbz	r0, 800522c <_fflush_r+0x14>
 8005224:	6983      	ldr	r3, [r0, #24]
 8005226:	b90b      	cbnz	r3, 800522c <_fflush_r+0x14>
 8005228:	f000 f860 	bl	80052ec <__sinit>
 800522c:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <_fflush_r+0x48>)
 800522e:	429c      	cmp	r4, r3
 8005230:	d109      	bne.n	8005246 <_fflush_r+0x2e>
 8005232:	686c      	ldr	r4, [r5, #4]
 8005234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005238:	b17b      	cbz	r3, 800525a <_fflush_r+0x42>
 800523a:	4621      	mov	r1, r4
 800523c:	4628      	mov	r0, r5
 800523e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005242:	f7ff bf61 	b.w	8005108 <__sflush_r>
 8005246:	4b07      	ldr	r3, [pc, #28]	; (8005264 <_fflush_r+0x4c>)
 8005248:	429c      	cmp	r4, r3
 800524a:	d101      	bne.n	8005250 <_fflush_r+0x38>
 800524c:	68ac      	ldr	r4, [r5, #8]
 800524e:	e7f1      	b.n	8005234 <_fflush_r+0x1c>
 8005250:	4b05      	ldr	r3, [pc, #20]	; (8005268 <_fflush_r+0x50>)
 8005252:	429c      	cmp	r4, r3
 8005254:	bf08      	it	eq
 8005256:	68ec      	ldreq	r4, [r5, #12]
 8005258:	e7ec      	b.n	8005234 <_fflush_r+0x1c>
 800525a:	2000      	movs	r0, #0
 800525c:	bd38      	pop	{r3, r4, r5, pc}
 800525e:	bf00      	nop
 8005260:	08005b1c 	.word	0x08005b1c
 8005264:	08005b3c 	.word	0x08005b3c
 8005268:	08005afc 	.word	0x08005afc

0800526c <_cleanup_r>:
 800526c:	4901      	ldr	r1, [pc, #4]	; (8005274 <_cleanup_r+0x8>)
 800526e:	f000 b8a9 	b.w	80053c4 <_fwalk_reent>
 8005272:	bf00      	nop
 8005274:	08005219 	.word	0x08005219

08005278 <std.isra.0>:
 8005278:	2300      	movs	r3, #0
 800527a:	b510      	push	{r4, lr}
 800527c:	4604      	mov	r4, r0
 800527e:	6003      	str	r3, [r0, #0]
 8005280:	6043      	str	r3, [r0, #4]
 8005282:	6083      	str	r3, [r0, #8]
 8005284:	8181      	strh	r1, [r0, #12]
 8005286:	6643      	str	r3, [r0, #100]	; 0x64
 8005288:	81c2      	strh	r2, [r0, #14]
 800528a:	6103      	str	r3, [r0, #16]
 800528c:	6143      	str	r3, [r0, #20]
 800528e:	6183      	str	r3, [r0, #24]
 8005290:	4619      	mov	r1, r3
 8005292:	2208      	movs	r2, #8
 8005294:	305c      	adds	r0, #92	; 0x5c
 8005296:	f7ff fe6f 	bl	8004f78 <memset>
 800529a:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <std.isra.0+0x38>)
 800529c:	6263      	str	r3, [r4, #36]	; 0x24
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <std.isra.0+0x3c>)
 80052a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <std.isra.0+0x40>)
 80052a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <std.isra.0+0x44>)
 80052a8:	6224      	str	r4, [r4, #32]
 80052aa:	6323      	str	r3, [r4, #48]	; 0x30
 80052ac:	bd10      	pop	{r4, pc}
 80052ae:	bf00      	nop
 80052b0:	08005641 	.word	0x08005641
 80052b4:	08005663 	.word	0x08005663
 80052b8:	0800569b 	.word	0x0800569b
 80052bc:	080056bf 	.word	0x080056bf

080052c0 <__sfmoreglue>:
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	1e4a      	subs	r2, r1, #1
 80052c4:	2568      	movs	r5, #104	; 0x68
 80052c6:	4355      	muls	r5, r2
 80052c8:	460e      	mov	r6, r1
 80052ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80052ce:	f000 f949 	bl	8005564 <_malloc_r>
 80052d2:	4604      	mov	r4, r0
 80052d4:	b140      	cbz	r0, 80052e8 <__sfmoreglue+0x28>
 80052d6:	2100      	movs	r1, #0
 80052d8:	e880 0042 	stmia.w	r0, {r1, r6}
 80052dc:	300c      	adds	r0, #12
 80052de:	60a0      	str	r0, [r4, #8]
 80052e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052e4:	f7ff fe48 	bl	8004f78 <memset>
 80052e8:	4620      	mov	r0, r4
 80052ea:	bd70      	pop	{r4, r5, r6, pc}

080052ec <__sinit>:
 80052ec:	6983      	ldr	r3, [r0, #24]
 80052ee:	b510      	push	{r4, lr}
 80052f0:	4604      	mov	r4, r0
 80052f2:	bb33      	cbnz	r3, 8005342 <__sinit+0x56>
 80052f4:	6483      	str	r3, [r0, #72]	; 0x48
 80052f6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80052f8:	6503      	str	r3, [r0, #80]	; 0x50
 80052fa:	4b12      	ldr	r3, [pc, #72]	; (8005344 <__sinit+0x58>)
 80052fc:	4a12      	ldr	r2, [pc, #72]	; (8005348 <__sinit+0x5c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6282      	str	r2, [r0, #40]	; 0x28
 8005302:	4298      	cmp	r0, r3
 8005304:	bf04      	itt	eq
 8005306:	2301      	moveq	r3, #1
 8005308:	6183      	streq	r3, [r0, #24]
 800530a:	f000 f81f 	bl	800534c <__sfp>
 800530e:	6060      	str	r0, [r4, #4]
 8005310:	4620      	mov	r0, r4
 8005312:	f000 f81b 	bl	800534c <__sfp>
 8005316:	60a0      	str	r0, [r4, #8]
 8005318:	4620      	mov	r0, r4
 800531a:	f000 f817 	bl	800534c <__sfp>
 800531e:	2200      	movs	r2, #0
 8005320:	60e0      	str	r0, [r4, #12]
 8005322:	2104      	movs	r1, #4
 8005324:	6860      	ldr	r0, [r4, #4]
 8005326:	f7ff ffa7 	bl	8005278 <std.isra.0>
 800532a:	2201      	movs	r2, #1
 800532c:	2109      	movs	r1, #9
 800532e:	68a0      	ldr	r0, [r4, #8]
 8005330:	f7ff ffa2 	bl	8005278 <std.isra.0>
 8005334:	2202      	movs	r2, #2
 8005336:	2112      	movs	r1, #18
 8005338:	68e0      	ldr	r0, [r4, #12]
 800533a:	f7ff ff9d 	bl	8005278 <std.isra.0>
 800533e:	2301      	movs	r3, #1
 8005340:	61a3      	str	r3, [r4, #24]
 8005342:	bd10      	pop	{r4, pc}
 8005344:	08005af8 	.word	0x08005af8
 8005348:	0800526d 	.word	0x0800526d

0800534c <__sfp>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <__sfp+0x74>)
 8005350:	681e      	ldr	r6, [r3, #0]
 8005352:	69b3      	ldr	r3, [r6, #24]
 8005354:	4607      	mov	r7, r0
 8005356:	b913      	cbnz	r3, 800535e <__sfp+0x12>
 8005358:	4630      	mov	r0, r6
 800535a:	f7ff ffc7 	bl	80052ec <__sinit>
 800535e:	3648      	adds	r6, #72	; 0x48
 8005360:	68b4      	ldr	r4, [r6, #8]
 8005362:	6873      	ldr	r3, [r6, #4]
 8005364:	3b01      	subs	r3, #1
 8005366:	d503      	bpl.n	8005370 <__sfp+0x24>
 8005368:	6833      	ldr	r3, [r6, #0]
 800536a:	b133      	cbz	r3, 800537a <__sfp+0x2e>
 800536c:	6836      	ldr	r6, [r6, #0]
 800536e:	e7f7      	b.n	8005360 <__sfp+0x14>
 8005370:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005374:	b16d      	cbz	r5, 8005392 <__sfp+0x46>
 8005376:	3468      	adds	r4, #104	; 0x68
 8005378:	e7f4      	b.n	8005364 <__sfp+0x18>
 800537a:	2104      	movs	r1, #4
 800537c:	4638      	mov	r0, r7
 800537e:	f7ff ff9f 	bl	80052c0 <__sfmoreglue>
 8005382:	6030      	str	r0, [r6, #0]
 8005384:	2800      	cmp	r0, #0
 8005386:	d1f1      	bne.n	800536c <__sfp+0x20>
 8005388:	230c      	movs	r3, #12
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	4604      	mov	r4, r0
 800538e:	4620      	mov	r0, r4
 8005390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005396:	81e3      	strh	r3, [r4, #14]
 8005398:	2301      	movs	r3, #1
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	6665      	str	r5, [r4, #100]	; 0x64
 800539e:	6025      	str	r5, [r4, #0]
 80053a0:	60a5      	str	r5, [r4, #8]
 80053a2:	6065      	str	r5, [r4, #4]
 80053a4:	6125      	str	r5, [r4, #16]
 80053a6:	6165      	str	r5, [r4, #20]
 80053a8:	61a5      	str	r5, [r4, #24]
 80053aa:	2208      	movs	r2, #8
 80053ac:	4629      	mov	r1, r5
 80053ae:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053b2:	f7ff fde1 	bl	8004f78 <memset>
 80053b6:	6365      	str	r5, [r4, #52]	; 0x34
 80053b8:	63a5      	str	r5, [r4, #56]	; 0x38
 80053ba:	64a5      	str	r5, [r4, #72]	; 0x48
 80053bc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80053be:	e7e6      	b.n	800538e <__sfp+0x42>
 80053c0:	08005af8 	.word	0x08005af8

080053c4 <_fwalk_reent>:
 80053c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c8:	4680      	mov	r8, r0
 80053ca:	4689      	mov	r9, r1
 80053cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80053d0:	2600      	movs	r6, #0
 80053d2:	b914      	cbnz	r4, 80053da <_fwalk_reent+0x16>
 80053d4:	4630      	mov	r0, r6
 80053d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053da:	68a5      	ldr	r5, [r4, #8]
 80053dc:	6867      	ldr	r7, [r4, #4]
 80053de:	3f01      	subs	r7, #1
 80053e0:	d501      	bpl.n	80053e6 <_fwalk_reent+0x22>
 80053e2:	6824      	ldr	r4, [r4, #0]
 80053e4:	e7f5      	b.n	80053d2 <_fwalk_reent+0xe>
 80053e6:	89ab      	ldrh	r3, [r5, #12]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d907      	bls.n	80053fc <_fwalk_reent+0x38>
 80053ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053f0:	3301      	adds	r3, #1
 80053f2:	d003      	beq.n	80053fc <_fwalk_reent+0x38>
 80053f4:	4629      	mov	r1, r5
 80053f6:	4640      	mov	r0, r8
 80053f8:	47c8      	blx	r9
 80053fa:	4306      	orrs	r6, r0
 80053fc:	3568      	adds	r5, #104	; 0x68
 80053fe:	e7ee      	b.n	80053de <_fwalk_reent+0x1a>

08005400 <__swhatbuf_r>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	460e      	mov	r6, r1
 8005404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005408:	2900      	cmp	r1, #0
 800540a:	b090      	sub	sp, #64	; 0x40
 800540c:	4614      	mov	r4, r2
 800540e:	461d      	mov	r5, r3
 8005410:	da07      	bge.n	8005422 <__swhatbuf_r+0x22>
 8005412:	2300      	movs	r3, #0
 8005414:	602b      	str	r3, [r5, #0]
 8005416:	89b3      	ldrh	r3, [r6, #12]
 8005418:	061a      	lsls	r2, r3, #24
 800541a:	d410      	bmi.n	800543e <__swhatbuf_r+0x3e>
 800541c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005420:	e00e      	b.n	8005440 <__swhatbuf_r+0x40>
 8005422:	aa01      	add	r2, sp, #4
 8005424:	f000 f972 	bl	800570c <_fstat_r>
 8005428:	2800      	cmp	r0, #0
 800542a:	dbf2      	blt.n	8005412 <__swhatbuf_r+0x12>
 800542c:	9a02      	ldr	r2, [sp, #8]
 800542e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005432:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005436:	425a      	negs	r2, r3
 8005438:	415a      	adcs	r2, r3
 800543a:	602a      	str	r2, [r5, #0]
 800543c:	e7ee      	b.n	800541c <__swhatbuf_r+0x1c>
 800543e:	2340      	movs	r3, #64	; 0x40
 8005440:	2000      	movs	r0, #0
 8005442:	6023      	str	r3, [r4, #0]
 8005444:	b010      	add	sp, #64	; 0x40
 8005446:	bd70      	pop	{r4, r5, r6, pc}

08005448 <__smakebuf_r>:
 8005448:	898b      	ldrh	r3, [r1, #12]
 800544a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800544c:	079d      	lsls	r5, r3, #30
 800544e:	4606      	mov	r6, r0
 8005450:	460c      	mov	r4, r1
 8005452:	d507      	bpl.n	8005464 <__smakebuf_r+0x1c>
 8005454:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	6123      	str	r3, [r4, #16]
 800545c:	2301      	movs	r3, #1
 800545e:	6163      	str	r3, [r4, #20]
 8005460:	b002      	add	sp, #8
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	ab01      	add	r3, sp, #4
 8005466:	466a      	mov	r2, sp
 8005468:	f7ff ffca 	bl	8005400 <__swhatbuf_r>
 800546c:	9900      	ldr	r1, [sp, #0]
 800546e:	4605      	mov	r5, r0
 8005470:	4630      	mov	r0, r6
 8005472:	f000 f877 	bl	8005564 <_malloc_r>
 8005476:	b948      	cbnz	r0, 800548c <__smakebuf_r+0x44>
 8005478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800547c:	059a      	lsls	r2, r3, #22
 800547e:	d4ef      	bmi.n	8005460 <__smakebuf_r+0x18>
 8005480:	f023 0303 	bic.w	r3, r3, #3
 8005484:	f043 0302 	orr.w	r3, r3, #2
 8005488:	81a3      	strh	r3, [r4, #12]
 800548a:	e7e3      	b.n	8005454 <__smakebuf_r+0xc>
 800548c:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <__smakebuf_r+0x7c>)
 800548e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	6020      	str	r0, [r4, #0]
 8005494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005498:	81a3      	strh	r3, [r4, #12]
 800549a:	9b00      	ldr	r3, [sp, #0]
 800549c:	6163      	str	r3, [r4, #20]
 800549e:	9b01      	ldr	r3, [sp, #4]
 80054a0:	6120      	str	r0, [r4, #16]
 80054a2:	b15b      	cbz	r3, 80054bc <__smakebuf_r+0x74>
 80054a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054a8:	4630      	mov	r0, r6
 80054aa:	f000 f941 	bl	8005730 <_isatty_r>
 80054ae:	b128      	cbz	r0, 80054bc <__smakebuf_r+0x74>
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	f023 0303 	bic.w	r3, r3, #3
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	81a3      	strh	r3, [r4, #12]
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	431d      	orrs	r5, r3
 80054c0:	81a5      	strh	r5, [r4, #12]
 80054c2:	e7cd      	b.n	8005460 <__smakebuf_r+0x18>
 80054c4:	0800526d 	.word	0x0800526d

080054c8 <_free_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4605      	mov	r5, r0
 80054cc:	2900      	cmp	r1, #0
 80054ce:	d045      	beq.n	800555c <_free_r+0x94>
 80054d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d4:	1f0c      	subs	r4, r1, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bfb8      	it	lt
 80054da:	18e4      	addlt	r4, r4, r3
 80054dc:	f000 f94a 	bl	8005774 <__malloc_lock>
 80054e0:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <_free_r+0x98>)
 80054e2:	6813      	ldr	r3, [r2, #0]
 80054e4:	4610      	mov	r0, r2
 80054e6:	b933      	cbnz	r3, 80054f6 <_free_r+0x2e>
 80054e8:	6063      	str	r3, [r4, #4]
 80054ea:	6014      	str	r4, [r2, #0]
 80054ec:	4628      	mov	r0, r5
 80054ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054f2:	f000 b940 	b.w	8005776 <__malloc_unlock>
 80054f6:	42a3      	cmp	r3, r4
 80054f8:	d90c      	bls.n	8005514 <_free_r+0x4c>
 80054fa:	6821      	ldr	r1, [r4, #0]
 80054fc:	1862      	adds	r2, r4, r1
 80054fe:	4293      	cmp	r3, r2
 8005500:	bf04      	itt	eq
 8005502:	681a      	ldreq	r2, [r3, #0]
 8005504:	685b      	ldreq	r3, [r3, #4]
 8005506:	6063      	str	r3, [r4, #4]
 8005508:	bf04      	itt	eq
 800550a:	1852      	addeq	r2, r2, r1
 800550c:	6022      	streq	r2, [r4, #0]
 800550e:	6004      	str	r4, [r0, #0]
 8005510:	e7ec      	b.n	80054ec <_free_r+0x24>
 8005512:	4613      	mov	r3, r2
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	b10a      	cbz	r2, 800551c <_free_r+0x54>
 8005518:	42a2      	cmp	r2, r4
 800551a:	d9fa      	bls.n	8005512 <_free_r+0x4a>
 800551c:	6819      	ldr	r1, [r3, #0]
 800551e:	1858      	adds	r0, r3, r1
 8005520:	42a0      	cmp	r0, r4
 8005522:	d10b      	bne.n	800553c <_free_r+0x74>
 8005524:	6820      	ldr	r0, [r4, #0]
 8005526:	4401      	add	r1, r0
 8005528:	1858      	adds	r0, r3, r1
 800552a:	4282      	cmp	r2, r0
 800552c:	6019      	str	r1, [r3, #0]
 800552e:	d1dd      	bne.n	80054ec <_free_r+0x24>
 8005530:	6810      	ldr	r0, [r2, #0]
 8005532:	6852      	ldr	r2, [r2, #4]
 8005534:	605a      	str	r2, [r3, #4]
 8005536:	4401      	add	r1, r0
 8005538:	6019      	str	r1, [r3, #0]
 800553a:	e7d7      	b.n	80054ec <_free_r+0x24>
 800553c:	d902      	bls.n	8005544 <_free_r+0x7c>
 800553e:	230c      	movs	r3, #12
 8005540:	602b      	str	r3, [r5, #0]
 8005542:	e7d3      	b.n	80054ec <_free_r+0x24>
 8005544:	6820      	ldr	r0, [r4, #0]
 8005546:	1821      	adds	r1, r4, r0
 8005548:	428a      	cmp	r2, r1
 800554a:	bf04      	itt	eq
 800554c:	6811      	ldreq	r1, [r2, #0]
 800554e:	6852      	ldreq	r2, [r2, #4]
 8005550:	6062      	str	r2, [r4, #4]
 8005552:	bf04      	itt	eq
 8005554:	1809      	addeq	r1, r1, r0
 8005556:	6021      	streq	r1, [r4, #0]
 8005558:	605c      	str	r4, [r3, #4]
 800555a:	e7c7      	b.n	80054ec <_free_r+0x24>
 800555c:	bd38      	pop	{r3, r4, r5, pc}
 800555e:	bf00      	nop
 8005560:	200001fc 	.word	0x200001fc

08005564 <_malloc_r>:
 8005564:	b570      	push	{r4, r5, r6, lr}
 8005566:	1ccd      	adds	r5, r1, #3
 8005568:	f025 0503 	bic.w	r5, r5, #3
 800556c:	3508      	adds	r5, #8
 800556e:	2d0c      	cmp	r5, #12
 8005570:	bf38      	it	cc
 8005572:	250c      	movcc	r5, #12
 8005574:	2d00      	cmp	r5, #0
 8005576:	4606      	mov	r6, r0
 8005578:	db01      	blt.n	800557e <_malloc_r+0x1a>
 800557a:	42a9      	cmp	r1, r5
 800557c:	d903      	bls.n	8005586 <_malloc_r+0x22>
 800557e:	230c      	movs	r3, #12
 8005580:	6033      	str	r3, [r6, #0]
 8005582:	2000      	movs	r0, #0
 8005584:	bd70      	pop	{r4, r5, r6, pc}
 8005586:	f000 f8f5 	bl	8005774 <__malloc_lock>
 800558a:	4a23      	ldr	r2, [pc, #140]	; (8005618 <_malloc_r+0xb4>)
 800558c:	6814      	ldr	r4, [r2, #0]
 800558e:	4621      	mov	r1, r4
 8005590:	b991      	cbnz	r1, 80055b8 <_malloc_r+0x54>
 8005592:	4c22      	ldr	r4, [pc, #136]	; (800561c <_malloc_r+0xb8>)
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	b91b      	cbnz	r3, 80055a0 <_malloc_r+0x3c>
 8005598:	4630      	mov	r0, r6
 800559a:	f000 f841 	bl	8005620 <_sbrk_r>
 800559e:	6020      	str	r0, [r4, #0]
 80055a0:	4629      	mov	r1, r5
 80055a2:	4630      	mov	r0, r6
 80055a4:	f000 f83c 	bl	8005620 <_sbrk_r>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d126      	bne.n	80055fa <_malloc_r+0x96>
 80055ac:	230c      	movs	r3, #12
 80055ae:	6033      	str	r3, [r6, #0]
 80055b0:	4630      	mov	r0, r6
 80055b2:	f000 f8e0 	bl	8005776 <__malloc_unlock>
 80055b6:	e7e4      	b.n	8005582 <_malloc_r+0x1e>
 80055b8:	680b      	ldr	r3, [r1, #0]
 80055ba:	1b5b      	subs	r3, r3, r5
 80055bc:	d41a      	bmi.n	80055f4 <_malloc_r+0x90>
 80055be:	2b0b      	cmp	r3, #11
 80055c0:	d90f      	bls.n	80055e2 <_malloc_r+0x7e>
 80055c2:	600b      	str	r3, [r1, #0]
 80055c4:	50cd      	str	r5, [r1, r3]
 80055c6:	18cc      	adds	r4, r1, r3
 80055c8:	4630      	mov	r0, r6
 80055ca:	f000 f8d4 	bl	8005776 <__malloc_unlock>
 80055ce:	f104 000b 	add.w	r0, r4, #11
 80055d2:	1d23      	adds	r3, r4, #4
 80055d4:	f020 0007 	bic.w	r0, r0, #7
 80055d8:	1ac3      	subs	r3, r0, r3
 80055da:	d01b      	beq.n	8005614 <_malloc_r+0xb0>
 80055dc:	425a      	negs	r2, r3
 80055de:	50e2      	str	r2, [r4, r3]
 80055e0:	bd70      	pop	{r4, r5, r6, pc}
 80055e2:	428c      	cmp	r4, r1
 80055e4:	bf0d      	iteet	eq
 80055e6:	6863      	ldreq	r3, [r4, #4]
 80055e8:	684b      	ldrne	r3, [r1, #4]
 80055ea:	6063      	strne	r3, [r4, #4]
 80055ec:	6013      	streq	r3, [r2, #0]
 80055ee:	bf18      	it	ne
 80055f0:	460c      	movne	r4, r1
 80055f2:	e7e9      	b.n	80055c8 <_malloc_r+0x64>
 80055f4:	460c      	mov	r4, r1
 80055f6:	6849      	ldr	r1, [r1, #4]
 80055f8:	e7ca      	b.n	8005590 <_malloc_r+0x2c>
 80055fa:	1cc4      	adds	r4, r0, #3
 80055fc:	f024 0403 	bic.w	r4, r4, #3
 8005600:	42a0      	cmp	r0, r4
 8005602:	d005      	beq.n	8005610 <_malloc_r+0xac>
 8005604:	1a21      	subs	r1, r4, r0
 8005606:	4630      	mov	r0, r6
 8005608:	f000 f80a 	bl	8005620 <_sbrk_r>
 800560c:	3001      	adds	r0, #1
 800560e:	d0cd      	beq.n	80055ac <_malloc_r+0x48>
 8005610:	6025      	str	r5, [r4, #0]
 8005612:	e7d9      	b.n	80055c8 <_malloc_r+0x64>
 8005614:	bd70      	pop	{r4, r5, r6, pc}
 8005616:	bf00      	nop
 8005618:	200001fc 	.word	0x200001fc
 800561c:	20000200 	.word	0x20000200

08005620 <_sbrk_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4c06      	ldr	r4, [pc, #24]	; (800563c <_sbrk_r+0x1c>)
 8005624:	2300      	movs	r3, #0
 8005626:	4605      	mov	r5, r0
 8005628:	4608      	mov	r0, r1
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	f7ff f9d2 	bl	80049d4 <_sbrk>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	d102      	bne.n	800563a <_sbrk_r+0x1a>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	b103      	cbz	r3, 800563a <_sbrk_r+0x1a>
 8005638:	602b      	str	r3, [r5, #0]
 800563a:	bd38      	pop	{r3, r4, r5, pc}
 800563c:	20000324 	.word	0x20000324

08005640 <__sread>:
 8005640:	b510      	push	{r4, lr}
 8005642:	460c      	mov	r4, r1
 8005644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005648:	f000 f896 	bl	8005778 <_read_r>
 800564c:	2800      	cmp	r0, #0
 800564e:	bfab      	itete	ge
 8005650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005652:	89a3      	ldrhlt	r3, [r4, #12]
 8005654:	181b      	addge	r3, r3, r0
 8005656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800565a:	bfac      	ite	ge
 800565c:	6563      	strge	r3, [r4, #84]	; 0x54
 800565e:	81a3      	strhlt	r3, [r4, #12]
 8005660:	bd10      	pop	{r4, pc}

08005662 <__swrite>:
 8005662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005666:	461f      	mov	r7, r3
 8005668:	898b      	ldrh	r3, [r1, #12]
 800566a:	05db      	lsls	r3, r3, #23
 800566c:	4605      	mov	r5, r0
 800566e:	460c      	mov	r4, r1
 8005670:	4616      	mov	r6, r2
 8005672:	d505      	bpl.n	8005680 <__swrite+0x1e>
 8005674:	2302      	movs	r3, #2
 8005676:	2200      	movs	r2, #0
 8005678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800567c:	f000 f868 	bl	8005750 <_lseek_r>
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800568a:	81a3      	strh	r3, [r4, #12]
 800568c:	4632      	mov	r2, r6
 800568e:	463b      	mov	r3, r7
 8005690:	4628      	mov	r0, r5
 8005692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005696:	f000 b817 	b.w	80056c8 <_write_r>

0800569a <__sseek>:
 800569a:	b510      	push	{r4, lr}
 800569c:	460c      	mov	r4, r1
 800569e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a2:	f000 f855 	bl	8005750 <_lseek_r>
 80056a6:	1c43      	adds	r3, r0, #1
 80056a8:	89a3      	ldrh	r3, [r4, #12]
 80056aa:	bf15      	itete	ne
 80056ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80056ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056b6:	81a3      	strheq	r3, [r4, #12]
 80056b8:	bf18      	it	ne
 80056ba:	81a3      	strhne	r3, [r4, #12]
 80056bc:	bd10      	pop	{r4, pc}

080056be <__sclose>:
 80056be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c2:	f000 b813 	b.w	80056ec <_close_r>
	...

080056c8 <_write_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4c07      	ldr	r4, [pc, #28]	; (80056e8 <_write_r+0x20>)
 80056cc:	4605      	mov	r5, r0
 80056ce:	4608      	mov	r0, r1
 80056d0:	4611      	mov	r1, r2
 80056d2:	2200      	movs	r2, #0
 80056d4:	6022      	str	r2, [r4, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	f7ff f95d 	bl	8004996 <_write>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d102      	bne.n	80056e6 <_write_r+0x1e>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	b103      	cbz	r3, 80056e6 <_write_r+0x1e>
 80056e4:	602b      	str	r3, [r5, #0]
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	20000324 	.word	0x20000324

080056ec <_close_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4c06      	ldr	r4, [pc, #24]	; (8005708 <_close_r+0x1c>)
 80056f0:	2300      	movs	r3, #0
 80056f2:	4605      	mov	r5, r0
 80056f4:	4608      	mov	r0, r1
 80056f6:	6023      	str	r3, [r4, #0]
 80056f8:	f7ff f9a0 	bl	8004a3c <_close>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d102      	bne.n	8005706 <_close_r+0x1a>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	b103      	cbz	r3, 8005706 <_close_r+0x1a>
 8005704:	602b      	str	r3, [r5, #0]
 8005706:	bd38      	pop	{r3, r4, r5, pc}
 8005708:	20000324 	.word	0x20000324

0800570c <_fstat_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4c07      	ldr	r4, [pc, #28]	; (800572c <_fstat_r+0x20>)
 8005710:	2300      	movs	r3, #0
 8005712:	4605      	mov	r5, r0
 8005714:	4608      	mov	r0, r1
 8005716:	4611      	mov	r1, r2
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	f7ff f99b 	bl	8004a54 <_fstat>
 800571e:	1c43      	adds	r3, r0, #1
 8005720:	d102      	bne.n	8005728 <_fstat_r+0x1c>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	b103      	cbz	r3, 8005728 <_fstat_r+0x1c>
 8005726:	602b      	str	r3, [r5, #0]
 8005728:	bd38      	pop	{r3, r4, r5, pc}
 800572a:	bf00      	nop
 800572c:	20000324 	.word	0x20000324

08005730 <_isatty_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4c06      	ldr	r4, [pc, #24]	; (800574c <_isatty_r+0x1c>)
 8005734:	2300      	movs	r3, #0
 8005736:	4605      	mov	r5, r0
 8005738:	4608      	mov	r0, r1
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	f7ff f99a 	bl	8004a74 <_isatty>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_isatty_r+0x1a>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	b103      	cbz	r3, 800574a <_isatty_r+0x1a>
 8005748:	602b      	str	r3, [r5, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	20000324 	.word	0x20000324

08005750 <_lseek_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	4c07      	ldr	r4, [pc, #28]	; (8005770 <_lseek_r+0x20>)
 8005754:	4605      	mov	r5, r0
 8005756:	4608      	mov	r0, r1
 8005758:	4611      	mov	r1, r2
 800575a:	2200      	movs	r2, #0
 800575c:	6022      	str	r2, [r4, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	f7ff f993 	bl	8004a8a <_lseek>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d102      	bne.n	800576e <_lseek_r+0x1e>
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	b103      	cbz	r3, 800576e <_lseek_r+0x1e>
 800576c:	602b      	str	r3, [r5, #0]
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	20000324 	.word	0x20000324

08005774 <__malloc_lock>:
 8005774:	4770      	bx	lr

08005776 <__malloc_unlock>:
 8005776:	4770      	bx	lr

08005778 <_read_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4c07      	ldr	r4, [pc, #28]	; (8005798 <_read_r+0x20>)
 800577c:	4605      	mov	r5, r0
 800577e:	4608      	mov	r0, r1
 8005780:	4611      	mov	r1, r2
 8005782:	2200      	movs	r2, #0
 8005784:	6022      	str	r2, [r4, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	f7ff f98c 	bl	8004aa4 <_read>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d102      	bne.n	8005796 <_read_r+0x1e>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	b103      	cbz	r3, 8005796 <_read_r+0x1e>
 8005794:	602b      	str	r3, [r5, #0]
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	20000324 	.word	0x20000324

0800579c <_init>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr

080057a8 <_fini>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	bf00      	nop
 80057ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ae:	bc08      	pop	{r3}
 80057b0:	469e      	mov	lr, r3
 80057b2:	4770      	bx	lr
 80057b4:	0000      	movs	r0, r0
	...
