
Cygnini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800cca8  0800cca8  0001cca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0e0  0800d0e0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0e0  0800d0e0  0001d0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0e8  0800d0e8  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0e8  0800d0e8  0001d0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0ec  0800d0ec  0001d0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800d0f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b00c  200000b8  0800d1a4  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b0c4  0800d1a4  0002b0c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032eeb  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005fb9  00000000  00000000  00052fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025b0  00000000  00000000  00058f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022f0  00000000  00000000  0005b538  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002afb0  00000000  00000000  0005d828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000208c2  00000000  00000000  000887d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec968  00000000  00000000  000a909a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00195a02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a414  00000000  00000000  00195a80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc90 	.word	0x0800cc90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	0800cc90 	.word	0x0800cc90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800058c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d013      	beq.n	80005c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800059c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	e000      	b.n	80005ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80005aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f9      	beq.n	80005aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <cygnini>:
#define TX_NODE 0
#define RX_NODE 1



int cygnini(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af02      	add	r7, sp, #8

	HAL_Delay(500);
 80005d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005da:	f001 ffb7 	bl	800254c <HAL_Delay>
	printf("starting CYGNINI\r\n");
 80005de:	481f      	ldr	r0, [pc, #124]	; (800065c <cygnini+0x8c>)
 80005e0:	f00b fc08 	bl	800bdf4 <puts>
	initialize_board();
 80005e4:	f000 f868 	bl	80006b8 <initialize_board>
#if TX_NODE == 1
	xTaskCreate(ButtonsTask,(signed portCHAR *) "t4", 1024, NULL, tskIDLE_PRIORITY, &ButtonsHandle );
#endif

#if RX_NODE == 1
	xTaskCreate(RadioTask,(signed portCHAR *) "t4", 1024, NULL, tskIDLE_PRIORITY, &RadioHandle );
 80005e8:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <cygnini+0x90>)
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	2300      	movs	r3, #0
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2300      	movs	r3, #0
 80005f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005f6:	491b      	ldr	r1, [pc, #108]	; (8000664 <cygnini+0x94>)
 80005f8:	481b      	ldr	r0, [pc, #108]	; (8000668 <cygnini+0x98>)
 80005fa:	f009 fa0f 	bl	8009a1c <xTaskCreate>

#endif

	xTaskCreate(LEDsTask,(signed portCHAR *) "t4", 1024, NULL, tskIDLE_PRIORITY, &LEDsHandle );
 80005fe:	4b1b      	ldr	r3, [pc, #108]	; (800066c <cygnini+0x9c>)
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2300      	movs	r3, #0
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060c:	4915      	ldr	r1, [pc, #84]	; (8000664 <cygnini+0x94>)
 800060e:	4818      	ldr	r0, [pc, #96]	; (8000670 <cygnini+0xa0>)
 8000610:	f009 fa04 	bl	8009a1c <xTaskCreate>

	xTaskCreate(SensorsTask,(signed portCHAR *) "t4", 1024, NULL, tskIDLE_PRIORITY, &SensorsHandle );
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <cygnini+0xa4>)
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	2300      	movs	r3, #0
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2300      	movs	r3, #0
 800061e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000622:	4910      	ldr	r1, [pc, #64]	; (8000664 <cygnini+0x94>)
 8000624:	4814      	ldr	r0, [pc, #80]	; (8000678 <cygnini+0xa8>)
 8000626:	f009 f9f9 	bl	8009a1c <xTaskCreate>
	xTaskCreate(LCDTask,(signed portCHAR *) "t4", 1024, NULL, tskIDLE_PRIORITY, &LCDHandle );
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <cygnini+0xac>)
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2300      	movs	r3, #0
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000638:	490a      	ldr	r1, [pc, #40]	; (8000664 <cygnini+0x94>)
 800063a:	4811      	ldr	r0, [pc, #68]	; (8000680 <cygnini+0xb0>)
 800063c:	f009 f9ee 	bl	8009a1c <xTaskCreate>
	xTaskCreate(NotificationsTask,(signed portCHAR *) "t4", 1024, NULL, tskIDLE_PRIORITY, &NotificationsHandle );
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <cygnini+0xb4>)
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	2300      	movs	r3, #0
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800064e:	4905      	ldr	r1, [pc, #20]	; (8000664 <cygnini+0x94>)
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <cygnini+0xb8>)
 8000652:	f009 f9e3 	bl	8009a1c <xTaskCreate>

	vTaskStartScheduler();
 8000656:	f009 fb59 	bl	8009d0c <vTaskStartScheduler>

	while(1);
 800065a:	e7fe      	b.n	800065a <cygnini+0x8a>
 800065c:	0800cca8 	.word	0x0800cca8
 8000660:	200000d8 	.word	0x200000d8
 8000664:	0800ccbc 	.word	0x0800ccbc
 8000668:	080008a1 	.word	0x080008a1
 800066c:	200000d4 	.word	0x200000d4
 8000670:	08000891 	.word	0x08000891
 8000674:	200000dc 	.word	0x200000dc
 8000678:	0800097d 	.word	0x0800097d
 800067c:	200000e0 	.word	0x200000e0
 8000680:	080009b1 	.word	0x080009b1
 8000684:	200000e4 	.word	0x200000e4
 8000688:	08000a09 	.word	0x08000a09

0800068c <__io_putchar>:
/**
  * @brief  This function sends character for standard io
  * @param ch character to send
  * @retval None
  */
int __io_putchar(int ch){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff72 	bl	8000580 <ITM_SendChar>
	return 0;
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <__io_getchar>:
/**
  * @brief  This function receives character from standard io
  * @retval None
  */
int __io_getchar(void){
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

	return 0;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <initialize_board>:


int initialize_board(){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	  graphic_lcd_initialize ();
 80006be:	f000 fa47 	bl	8000b50 <graphic_lcd_initialize>
	  graphic_lcd_clear_screen ();
 80006c2:	f000 f9db 	bl	8000a7c <graphic_lcd_clear_screen>
	  DISPLAY_BACKLIGHT_ON;
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f002 f9ba 	bl	8002a48 <HAL_GPIO_WritePin>
	  Si7006_port_init();
 80006d4:	f001 f9dc 	bl	8001a90 <Si7006_port_init>


	  if(Si7006.check_hardware() == SI7006_ERROR){
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <initialize_board+0x80>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	4798      	blx	r3
 80006de:	4603      	mov	r3, r0
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d105      	bne.n	80006f0 <initialize_board+0x38>
		  graphic_lcd_write(0, 0, "Si7006 NOT READY");
 80006e4:	4a15      	ldr	r2, [pc, #84]	; (800073c <initialize_board+0x84>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 f9ef 	bl	8000acc <graphic_lcd_write>
 80006ee:	e004      	b.n	80006fa <initialize_board+0x42>
	  }else{
		  graphic_lcd_write(0, 0, "Si7006 READY");
 80006f0:	4a13      	ldr	r2, [pc, #76]	; (8000740 <initialize_board+0x88>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 f9e9 	bl	8000acc <graphic_lcd_write>
	  }


	  int x = HAL_I2C_IsDeviceReady(&hi2c1,Si1133DevAddr, 1000, 1000);
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <initialize_board+0x8c>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b299      	uxth	r1, r3
 8000700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000708:	480f      	ldr	r0, [pc, #60]	; (8000748 <initialize_board+0x90>)
 800070a:	f002 fc2f 	bl	8002f6c <HAL_I2C_IsDeviceReady>
 800070e:	4603      	mov	r3, r0
 8000710:	607b      	str	r3, [r7, #4]
	  if(x == HAL_OK) graphic_lcd_write(1, 0, "Si1133 READY");
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d105      	bne.n	8000724 <initialize_board+0x6c>
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <initialize_board+0x94>)
 800071a:	2100      	movs	r1, #0
 800071c:	2001      	movs	r0, #1
 800071e:	f000 f9d5 	bl	8000acc <graphic_lcd_write>
 8000722:	e004      	b.n	800072e <initialize_board+0x76>
	  else graphic_lcd_write(1, 0, "Si1133 NOT READY");
 8000724:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <initialize_board+0x98>)
 8000726:	2100      	movs	r1, #0
 8000728:	2001      	movs	r0, #1
 800072a:	f000 f9cf 	bl	8000acc <graphic_lcd_write>



}
 800072e:	bf00      	nop
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000aabc 	.word	0x2000aabc
 800073c:	0800ccc0 	.word	0x0800ccc0
 8000740:	0800ccd4 	.word	0x0800ccd4
 8000744:	20000000 	.word	0x20000000
 8000748:	2000ac98 	.word	0x2000ac98
 800074c:	0800cce4 	.word	0x0800cce4
 8000750:	0800ccf4 	.word	0x0800ccf4
 8000754:	00000000 	.word	0x00000000

08000758 <RadioReset>:





void RadioReset(){
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0

	NRF24L01p_RadioConfig.DataReadyInterruptEnabled = 0;
 800075e:	4b4a      	ldr	r3, [pc, #296]	; (8000888 <RadioReset+0x130>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	NRF24L01p_RadioConfig.DataSentInterruptFlagEnabled = 0;
 8000764:	4b48      	ldr	r3, [pc, #288]	; (8000888 <RadioReset+0x130>)
 8000766:	2200      	movs	r2, #0
 8000768:	705a      	strb	r2, [r3, #1]
	NRF24L01p_RadioConfig.MaxRetryInterruptFlagEnabled = 0;
 800076a:	4b47      	ldr	r3, [pc, #284]	; (8000888 <RadioReset+0x130>)
 800076c:	2200      	movs	r2, #0
 800076e:	709a      	strb	r2, [r3, #2]
	NRF24L01p_RadioConfig.Crc = CONFIG_CRC_16BIT;
 8000770:	4b45      	ldr	r3, [pc, #276]	; (8000888 <RadioReset+0x130>)
 8000772:	220c      	movs	r2, #12
 8000774:	70da      	strb	r2, [r3, #3]
	NRF24L01p_RadioConfig.AutoReTransmissionCount = 15;
 8000776:	4b44      	ldr	r3, [pc, #272]	; (8000888 <RadioReset+0x130>)
 8000778:	220f      	movs	r2, #15
 800077a:	711a      	strb	r2, [r3, #4]
	NRF24L01p_RadioConfig.AutoReTransmitDelayX250us = 15;
 800077c:	4b42      	ldr	r3, [pc, #264]	; (8000888 <RadioReset+0x130>)
 800077e:	220f      	movs	r2, #15
 8000780:	715a      	strb	r2, [r3, #5]
	NRF24L01p_RadioConfig.frequencyOffset = 2;
 8000782:	4b41      	ldr	r3, [pc, #260]	; (8000888 <RadioReset+0x130>)
 8000784:	2202      	movs	r2, #2
 8000786:	719a      	strb	r2, [r3, #6]
	NRF24L01p_RadioConfig.datarate = RF_SETUP_RF_DR_2MBPS;
 8000788:	4b3f      	ldr	r3, [pc, #252]	; (8000888 <RadioReset+0x130>)
 800078a:	2208      	movs	r2, #8
 800078c:	71da      	strb	r2, [r3, #7]
	NRF24L01p_RadioConfig.RfPower = RF_SETUP_RF_PWR_0DBM;
 800078e:	4b3e      	ldr	r3, [pc, #248]	; (8000888 <RadioReset+0x130>)
 8000790:	2206      	movs	r2, #6
 8000792:	721a      	strb	r2, [r3, #8]
	NRF24L01p_RadioConfig.PllLock = 0;
 8000794:	4b3c      	ldr	r3, [pc, #240]	; (8000888 <RadioReset+0x130>)
 8000796:	2200      	movs	r2, #0
 8000798:	725a      	strb	r2, [r3, #9]
	NRF24L01p_RadioConfig.ContWaveEnabled = 0;
 800079a:	4b3b      	ldr	r3, [pc, #236]	; (8000888 <RadioReset+0x130>)
 800079c:	2200      	movs	r2, #0
 800079e:	729a      	strb	r2, [r3, #10]
	NRF24L01p_RadioConfig.FeatureDynamicPayloadEnabled = 1;
 80007a0:	4b39      	ldr	r3, [pc, #228]	; (8000888 <RadioReset+0x130>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	72da      	strb	r2, [r3, #11]
	NRF24L01p_RadioConfig.FeaturePayloadWithAckEnabled = 1;
 80007a6:	4b38      	ldr	r3, [pc, #224]	; (8000888 <RadioReset+0x130>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	731a      	strb	r2, [r3, #12]
	NRF24L01p_RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
 80007ac:	4b36      	ldr	r3, [pc, #216]	; (8000888 <RadioReset+0x130>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	735a      	strb	r2, [r3, #13]

    RxPipeConfig[0].address = 0x11223344EE;
 80007b2:	4a36      	ldr	r2, [pc, #216]	; (800088c <RadioReset+0x134>)
 80007b4:	a428      	add	r4, pc, #160	; (adr r4, 8000858 <RadioReset+0x100>)
 80007b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80007ba:	e9c2 3402 	strd	r3, r4, [r2, #8]
    RxPipeConfig[1].address = 0x9A4524CE01;
 80007be:	4a33      	ldr	r2, [pc, #204]	; (800088c <RadioReset+0x134>)
 80007c0:	a427      	add	r4, pc, #156	; (adr r4, 8000860 <RadioReset+0x108>)
 80007c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80007c6:	e9c2 3408 	strd	r3, r4, [r2, #32]
    RxPipeConfig[2].address = 0x9A4524CE02;
 80007ca:	4a30      	ldr	r2, [pc, #192]	; (800088c <RadioReset+0x134>)
 80007cc:	a426      	add	r4, pc, #152	; (adr r4, 8000868 <RadioReset+0x110>)
 80007ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80007d2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    RxPipeConfig[3].address = 0x9A4524CE03;
 80007d6:	4a2d      	ldr	r2, [pc, #180]	; (800088c <RadioReset+0x134>)
 80007d8:	a425      	add	r4, pc, #148	; (adr r4, 8000870 <RadioReset+0x118>)
 80007da:	e9d4 3400 	ldrd	r3, r4, [r4]
 80007de:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    RxPipeConfig[4].address = 0x9A4524CE04;
 80007e2:	4a2a      	ldr	r2, [pc, #168]	; (800088c <RadioReset+0x134>)
 80007e4:	a424      	add	r4, pc, #144	; (adr r4, 8000878 <RadioReset+0x120>)
 80007e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80007ea:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    RxPipeConfig[5].address = 0x9A4524CE05;
 80007ee:	4a27      	ldr	r2, [pc, #156]	; (800088c <RadioReset+0x134>)
 80007f0:	a423      	add	r4, pc, #140	; (adr r4, 8000880 <RadioReset+0x128>)
 80007f2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80007f6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80


	int i;
	for(i=0;i<6;i++){
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	e01f      	b.n	8000840 <RadioReset+0xe8>
		RxPipeConfig[i].PipeEnabled = 1;
 8000800:	4922      	ldr	r1, [pc, #136]	; (800088c <RadioReset+0x134>)
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4613      	mov	r3, r2
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	440b      	add	r3, r1
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
		RxPipeConfig[i].autoAckEnabled = 1;
 8000812:	491e      	ldr	r1, [pc, #120]	; (800088c <RadioReset+0x134>)
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	440b      	add	r3, r1
 8000820:	3301      	adds	r3, #1
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
		RxPipeConfig[i].dynamicPayloadEnabled = 1;
 8000826:	4919      	ldr	r1, [pc, #100]	; (800088c <RadioReset+0x134>)
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	3311      	adds	r3, #17
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
	for(i=0;i<6;i++){
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3301      	adds	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b05      	cmp	r3, #5
 8000844:	dddc      	ble.n	8000800 <RadioReset+0xa8>
	}


	NRF24L01p_ResetConfigValues(&NRF24L01p_RadioConfig, RxPipeConfig);
 8000846:	4911      	ldr	r1, [pc, #68]	; (800088c <RadioReset+0x134>)
 8000848:	480f      	ldr	r0, [pc, #60]	; (8000888 <RadioReset+0x130>)
 800084a:	f000 faad 	bl	8000da8 <NRF24L01p_ResetConfigValues>
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bd90      	pop	{r4, r7, pc}
 8000856:	bf00      	nop
 8000858:	223344ee 	.word	0x223344ee
 800085c:	00000011 	.word	0x00000011
 8000860:	4524ce01 	.word	0x4524ce01
 8000864:	0000009a 	.word	0x0000009a
 8000868:	4524ce02 	.word	0x4524ce02
 800086c:	0000009a 	.word	0x0000009a
 8000870:	4524ce03 	.word	0x4524ce03
 8000874:	0000009a 	.word	0x0000009a
 8000878:	4524ce04 	.word	0x4524ce04
 800087c:	0000009a 	.word	0x0000009a
 8000880:	4524ce05 	.word	0x4524ce05
 8000884:	0000009a 	.word	0x0000009a
 8000888:	2000ab50 	.word	0x2000ab50
 800088c:	2000aba0 	.word	0x2000aba0

08000890 <LEDsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDsTask */
void LEDsTask(void *argument)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDsTask */
  /* Infinite loop */
  for(;;)
 8000898:	e7fe      	b.n	8000898 <LEDsTask+0x8>
 800089a:	0000      	movs	r0, r0
 800089c:	0000      	movs	r0, r0
	...

080008a0 <RadioTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RadioTask */
void RadioTask(void *argument)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b08f      	sub	sp, #60	; 0x3c
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RadioTask */
	RadioReset();
 80008a8:	f7ff ff56 	bl	8000758 <RadioReset>

	char myMesg[32];

	Rxpayload.UseAck = 1;
 80008ac:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <RadioTask+0xc8>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	755a      	strb	r2, [r3, #21]


	Rxpayload.address = 0x11223344EE;
 80008b2:	4a2d      	ldr	r2, [pc, #180]	; (8000968 <RadioTask+0xc8>)
 80008b4:	a42a      	add	r4, pc, #168	; (adr r4, 8000960 <RadioTask+0xc0>)
 80008b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80008ba:	e9c2 3400 	strd	r3, r4, [r2]
	Rxpayload.data = (uint8_t*)myMesg;
 80008be:	4a2a      	ldr	r2, [pc, #168]	; (8000968 <RadioTask+0xc8>)
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	60d3      	str	r3, [r2, #12]
	Rxpayload.length = strlen(myMesg);
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fc80 	bl	80001d0 <strlen>
 80008d0:	4602      	mov	r2, r0
 80008d2:	4b25      	ldr	r3, [pc, #148]	; (8000968 <RadioTask+0xc8>)
 80008d4:	611a      	str	r2, [r3, #16]
	Rxpayload.retransmitCount = 15;
 80008d6:	4b24      	ldr	r3, [pc, #144]	; (8000968 <RadioTask+0xc8>)
 80008d8:	220f      	movs	r2, #15
 80008da:	751a      	strb	r2, [r3, #20]
  /* Infinite loop */
  for(;;)
  {
	  int i = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
	  		char c;
	  		while(1){
	  			//c = pc_getc();
	  			HAL_StatusTypeDef rxerr = HAL_UART_Receive(&huart1, &c, 1, 0);
 80008e0:	f107 010f 	add.w	r1, r7, #15
 80008e4:	2300      	movs	r3, #0
 80008e6:	2201      	movs	r2, #1
 80008e8:	4820      	ldr	r0, [pc, #128]	; (800096c <RadioTask+0xcc>)
 80008ea:	f005 fddf 	bl	80064ac <HAL_UART_Receive>
 80008ee:	4603      	mov	r3, r0
 80008f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



	  			if(NRF24L01p_readable()){
 80008f4:	f000 fba4 	bl	8001040 <NRF24L01p_readable>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0f0      	beq.n	80008e0 <RadioTask+0x40>
	  				xTaskNotify ( NotificationsHandle, (1<<0), eSetBits);
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <RadioTask+0xd0>)
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	2300      	movs	r3, #0
 8000904:	2201      	movs	r2, #1
 8000906:	2101      	movs	r1, #1
 8000908:	f009 ff1c 	bl	800a744 <xTaskGenericNotify>
	  				//custom_print("message received\r\n");

	  				Rxpayload.data = RxData;
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <RadioTask+0xc8>)
 800090e:	4a19      	ldr	r2, [pc, #100]	; (8000974 <RadioTask+0xd4>)
 8000910:	60da      	str	r2, [r3, #12]

	  				NRF24L01p_clear_data_ready_flag();
 8000912:	f000 fdfd 	bl	8001510 <NRF24L01p_clear_data_ready_flag>
	  				NRF24L01p_readPayload(&Rxpayload);
 8000916:	4814      	ldr	r0, [pc, #80]	; (8000968 <RadioTask+0xc8>)
 8000918:	f000 fba4 	bl	8001064 <NRF24L01p_readPayload>
	  				Rxpayload.data[Rxpayload.length] = '\0';
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <RadioTask+0xc8>)
 800091e:	68da      	ldr	r2, [r3, #12]
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <RadioTask+0xc8>)
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	4413      	add	r3, r2
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]

	  				graphics_lcd_clear_line(0);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f917 	bl	8000b5e <graphics_lcd_clear_line>
	  				graphics_lcd_clear_line(1);
 8000930:	2001      	movs	r0, #1
 8000932:	f000 f914 	bl	8000b5e <graphics_lcd_clear_line>
	  				graphics_lcd_clear_line(2);
 8000936:	2002      	movs	r0, #2
 8000938:	f000 f911 	bl	8000b5e <graphics_lcd_clear_line>
	  				graphic_lcd_write(1, 0, "RECEIVED DATA");
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <RadioTask+0xd8>)
 800093e:	2100      	movs	r1, #0
 8000940:	2001      	movs	r0, #1
 8000942:	f000 f8c3 	bl	8000acc <graphic_lcd_write>
	  				graphic_lcd_write(2, 0, Rxpayload.data);
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <RadioTask+0xc8>)
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	461a      	mov	r2, r3
 800094c:	2100      	movs	r1, #0
 800094e:	2002      	movs	r0, #2
 8000950:	f000 f8bc 	bl	8000acc <graphic_lcd_write>
	  				//custom_print("\r\n\r\n");
	  				//custom_print(Rxpayload.data);
	  				//custom_print("\r\n\r\n");

	  				//xTaskNotify ( xGLCDHandle, (1<<0), eSetBits);
	  				NRF24L01p_flush_rx();
 8000954:	f000 fc90 	bl	8001278 <NRF24L01p_flush_rx>
	  		while(1){
 8000958:	e7c2      	b.n	80008e0 <RadioTask+0x40>
 800095a:	bf00      	nop
 800095c:	f3af 8000 	nop.w
 8000960:	223344ee 	.word	0x223344ee
 8000964:	00000011 	.word	0x00000011
 8000968:	2000aae0 	.word	0x2000aae0
 800096c:	2000ad48 	.word	0x2000ad48
 8000970:	200000e4 	.word	0x200000e4
 8000974:	2000ab80 	.word	0x2000ab80
 8000978:	0800cdfc 	.word	0x0800cdfc

0800097c <SensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorsTask */
void SensorsTask(void *argument)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SensorsTask */
  /* Infinite loop */
  for(;;)
  {
	    osDelay(800);
 8000984:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000988:	f008 fa04 	bl	8008d94 <osDelay>
	    HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f002 f858 	bl	8002a48 <HAL_GPIO_WritePin>
	    osDelay(800);
 8000998:	f44f 7048 	mov.w	r0, #800	; 0x320
 800099c:	f008 f9fa 	bl	8008d94 <osDelay>
	    HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2180      	movs	r1, #128	; 0x80
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f002 f84e 	bl	8002a48 <HAL_GPIO_WritePin>
	    osDelay(800);
 80009ac:	e7ea      	b.n	8000984 <SensorsTask+0x8>
	...

080009b0 <LCDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCDTask */
void LCDTask(void *argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	; 0x30
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN LCDTask */
	uint32_t ulNotifiedValue;

	int dataCount = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	char msg[30];
  /* Infinite loop */
  for(;;)
  {
		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 80009bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	2000      	movs	r0, #0
 80009ca:	f009 fe61 	bl	800a690 <xTaskNotifyWait>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d112      	bne.n	80009fa <LCDTask+0x4a>
			dataCount++;
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	3301      	adds	r3, #1
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
			sprintf(msg, "total messages: %d", dataCount);
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009e0:	4908      	ldr	r1, [pc, #32]	; (8000a04 <LCDTask+0x54>)
 80009e2:	4618      	mov	r0, r3
 80009e4:	f00b fa0e 	bl	800be04 <siprintf>
			graphic_lcd_clear_screen ();
 80009e8:	f000 f848 	bl	8000a7c <graphic_lcd_clear_screen>
			graphic_lcd_write(1, 0, msg);
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	461a      	mov	r2, r3
 80009f2:	2100      	movs	r1, #0
 80009f4:	2001      	movs	r0, #1
 80009f6:	f000 f869 	bl	8000acc <graphic_lcd_write>
			//graphic_lcd_write(3, 0, cmdMsg);
						//DigitalPin_SetValue(&led1);
		}

		osDelay(100);
 80009fa:	2064      	movs	r0, #100	; 0x64
 80009fc:	f008 f9ca 	bl	8008d94 <osDelay>
		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 8000a00:	e7dc      	b.n	80009bc <LCDTask+0xc>
 8000a02:	bf00      	nop
 8000a04:	0800ce0c 	.word	0x0800ce0c

08000a08 <NotificationsTask>:
}




void NotificationsTask( void *pvParameters ){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	uint32_t ulNotifiedValue;
	while(1){

		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 8000a10:	f107 020c 	add.w	r2, r7, #12
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
 8000a18:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f009 fe37 	bl	800a690 <xTaskNotifyWait>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d10e      	bne.n	8000a46 <NotificationsTask+0x3e>
			//DigitalPin_ClearValue(&led1);
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2e:	4808      	ldr	r0, [pc, #32]	; (8000a50 <NotificationsTask+0x48>)
 8000a30:	f002 f80a 	bl	8002a48 <HAL_GPIO_WritePin>
			vTaskDelay(200);
 8000a34:	20c8      	movs	r0, #200	; 0xc8
 8000a36:	f009 f935 	bl	8009ca4 <vTaskDelay>
			HAL_GPIO_WritePin (GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <NotificationsTask+0x48>)
 8000a42:	f002 f801 	bl	8002a48 <HAL_GPIO_WritePin>

						//DigitalPin_SetValue(&led1);
		}

		vTaskDelay(100);
 8000a46:	2064      	movs	r0, #100	; 0x64
 8000a48:	f009 f92c 	bl	8009ca4 <vTaskDelay>
		if(xTaskNotifyWait (0 , 0xFFFFFFFF, &ulNotifiedValue, portMAX_DELAY) == pdTRUE){
 8000a4c:	e7e0      	b.n	8000a10 <NotificationsTask+0x8>
 8000a4e:	bf00      	nop
 8000a50:	48000400 	.word	0x48000400

08000a54 <c12832_hal_spi_write_read>:


}


int c12832_hal_spi_write_read (uint8_t *tx_data, uint8_t *rx_data, uint16_t lenght) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	80fb      	strh	r3, [r7, #6]

	HAL_SPI_Transmit (&hspi2, tx_data, 1, 200);
 8000a62:	23c8      	movs	r3, #200	; 0xc8
 8000a64:	2201      	movs	r2, #1
 8000a66:	68f9      	ldr	r1, [r7, #12]
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <c12832_hal_spi_write_read+0x24>)
 8000a6a:	f004 fe11 	bl	8005690 <HAL_SPI_Transmit>
		//DEBUG_MESSAGE_AND_EXIT_FAILURE

	return EXIT_SUCCESS;
 8000a6e:	2300      	movs	r3, #0

}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000ac30 	.word	0x2000ac30

08000a7c <graphic_lcd_clear_screen>:

#include "graphic_lcd.h"
#include "st7565r.h"
#include "font.h"

int graphic_lcd_clear_screen(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
	
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	e019      	b.n	8000abc <graphic_lcd_clear_screen+0x40>
		st7565r_set_page_address(i);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f8ed 	bl	8000c6c <st7565r_set_page_address>
		st7565r_set_column_address(0);
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 f8fe 	bl	8000c94 <st7565r_set_column_address>
		st7565r_set_display_start_line_address(0);
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f000 f918 	bl	8000cce <st7565r_set_display_start_line_address>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	e005      	b.n	8000ab0 <graphic_lcd_clear_screen+0x34>
			st7565r_write_data(0);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 f8a1 	bl	8000bec <st7565r_write_data>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2b84      	cmp	r3, #132	; 0x84
 8000ab4:	ddf6      	ble.n	8000aa4 <graphic_lcd_clear_screen+0x28>
	for (i=0; i<LINE_COUNT; i++) {
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	dde2      	ble.n	8000a88 <graphic_lcd_clear_screen+0xc>
	}
	
	return EXIT_SUCCESS;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <graphic_lcd_write>:

int graphic_lcd_write(int line, int offset, char *text) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]

	int i, j;
	
	st7565r_set_page_address(line);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f8c5 	bl	8000c6c <st7565r_set_page_address>
	st7565r_set_column_address(offset + FONT_SIZE);
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	3305      	adds	r3, #5
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f8d2 	bl	8000c94 <st7565r_set_column_address>
	
	for (i=0; i<strlen(text); i++) {
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e01e      	b.n	8000b34 <graphic_lcd_write+0x68>
	
		for (j=0; j<FONT_SIZE; j++) {
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	e012      	b.n	8000b22 <graphic_lcd_write+0x56>
			st7565r_write_data(font_5x8_table[(((text[i] - ASCII_FONT_FIRST) * FONT_SIZE) + j)]);
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f1a3 0220 	sub.w	r2, r3, #32
 8000b08:	4613      	mov	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	441a      	add	r2, r3
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <graphic_lcd_write+0x80>)
 8000b14:	5cd3      	ldrb	r3, [r2, r3]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f868 	bl	8000bec <st7565r_write_data>
		for (j=0; j<FONT_SIZE; j++) {
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	dde9      	ble.n	8000afc <graphic_lcd_write+0x30>
		}
		st7565r_write_data(0);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 f85f 	bl	8000bec <st7565r_write_data>
	for (i=0; i<strlen(text); i++) {
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff fb4b 	bl	80001d0 <strlen>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d8d9      	bhi.n	8000af6 <graphic_lcd_write+0x2a>
	}
		
	return EXIT_SUCCESS;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	0800ce38 	.word	0x0800ce38

08000b50 <graphic_lcd_initialize>:

int graphic_lcd_initialize (void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	
	return st7565r_init ();
 8000b54:	f000 f8fe 	bl	8000d54 <st7565r_init>
 8000b58:	4603      	mov	r3, r0
	
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <graphics_lcd_clear_line>:

	return EXIT_SUCCESS;
}
	

int graphics_lcd_clear_line(int line) {
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b084      	sub	sp, #16
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]

	int i, j;

	//for (i=0; i<LINE_COUNT; i++) {
	st7565r_set_page_address(line);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f87e 	bl	8000c6c <st7565r_set_page_address>
	st7565r_set_column_address(0);
 8000b70:	2000      	movs	r0, #0
 8000b72:	f000 f88f 	bl	8000c94 <st7565r_set_column_address>
	st7565r_set_display_start_line_address(0);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f8a9 	bl	8000cce <st7565r_set_display_start_line_address>
	for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++){
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	e005      	b.n	8000b8e <graphics_lcd_clear_line+0x30>
		st7565r_write_data(0);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 f832 	bl	8000bec <st7565r_write_data>
	for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++){
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b84      	cmp	r3, #132	; 0x84
 8000b92:	ddf6      	ble.n	8000b82 <graphics_lcd_clear_line+0x24>
		}
	//}



	return EXIT_SUCCESS;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <st7565r_write_command>:
#include "C12832Port.h"


#define HUNDRED_MILLISECONDS  	(10 / portTICK_PERIOD_MS)

void st7565r_write_command(uint8_t command) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <st7565r_write_command+0x44>)
 8000bb2:	f001 ff49 	bl	8002a48 <HAL_GPIO_WritePin>
        DISPLAY_A0_LOW;
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	480b      	ldr	r0, [pc, #44]	; (8000be8 <st7565r_write_command+0x48>)
 8000bbc:	f001 ff44 	bl	8002a48 <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&command, &tmp, 1);
 8000bc0:	f107 010f 	add.w	r1, r7, #15
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff43 	bl	8000a54 <c12832_hal_spi_write_read>
        DISPLAY_CHIP_SELECT_HIGH;
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <st7565r_write_command+0x44>)
 8000bd6:	f001 ff37 	bl	8002a48 <HAL_GPIO_WritePin>
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48000800 	.word	0x48000800

08000bec <st7565r_write_data>:

void st7565r_write_data(uint8_t data) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfc:	480e      	ldr	r0, [pc, #56]	; (8000c38 <st7565r_write_data+0x4c>)
 8000bfe:	f001 ff23 	bl	8002a48 <HAL_GPIO_WritePin>
        DISPLAY_A0_HIGH;
 8000c02:	2201      	movs	r2, #1
 8000c04:	2140      	movs	r1, #64	; 0x40
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <st7565r_write_data+0x50>)
 8000c08:	f001 ff1e 	bl	8002a48 <HAL_GPIO_WritePin>
        c12832_hal_spi_write_read (&data, &tmp, 1);
 8000c0c:	f107 010f 	add.w	r1, r7, #15
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	2201      	movs	r2, #1
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff1d 	bl	8000a54 <c12832_hal_spi_write_read>
        DISPLAY_A0_LOW;
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2140      	movs	r1, #64	; 0x40
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <st7565r_write_data+0x50>)
 8000c20:	f001 ff12 	bl	8002a48 <HAL_GPIO_WritePin>
        DISPLAY_CHIP_SELECT_HIGH;
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2a:	4803      	ldr	r0, [pc, #12]	; (8000c38 <st7565r_write_data+0x4c>)
 8000c2c:	f001 ff0c 	bl	8002a48 <HAL_GPIO_WritePin>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	48000800 	.word	0x48000800

08000c40 <st7565r_hard_reset>:
 *
 * This functions will reset the LCD controller by setting the reset pin low.
 * \note this funtions should not be confused with the \ref st7565r_soft_reset()
 * function, this command will control the RST pin.
 */
void st7565r_hard_reset(void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	
        DISPLAY_RESET_LOW;
 8000c44:	2200      	movs	r2, #0
 8000c46:	2120      	movs	r1, #32
 8000c48:	4807      	ldr	r0, [pc, #28]	; (8000c68 <st7565r_hard_reset+0x28>)
 8000c4a:	f001 fefd 	bl	8002a48 <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f009 f828 	bl	8009ca4 <vTaskDelay>
        DISPLAY_RESET_HIGH;
 8000c54:	2201      	movs	r2, #1
 8000c56:	2120      	movs	r1, #32
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <st7565r_hard_reset+0x28>)
 8000c5a:	f001 fef5 	bl	8002a48 <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f009 f820 	bl	8009ca4 <vTaskDelay>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	48000800 	.word	0x48000800

08000c6c <st7565r_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
void st7565r_set_page_address(uint8_t address)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
        // Make sure that the address is 4 bits (only 8 pages)
        address &= 0x0F;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 030f 	and.w	r3, r3, #15
 8000c7c:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff8a 	bl	8000ba0 <st7565r_write_command>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <st7565r_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void st7565r_set_column_address(uint8_t address)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
        // Make sure the address is 7 bits
        address &= 0x7F;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ca4:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	091b      	lsrs	r3, r3, #4
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff74 	bl	8000ba0 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff6d 	bl	8000ba0 <st7565r_write_command>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <st7565r_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the LCD.
 */
void st7565r_set_display_start_line_address(uint8_t address)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
        // Make sure address is 6 bits
        address &= 0x3F;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000cde:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff59 	bl	8000ba0 <st7565r_write_command>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <st7565r_display_on>:
 * \brief Turn the LCD display on
 *
 * This function will turn on the LCD.
 */
void st7565r_display_on(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_ON);
 8000cfa:	20af      	movs	r0, #175	; 0xaf
 8000cfc:	f7ff ff50 	bl	8000ba0 <st7565r_write_command>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <st7565r_set_contrast>:
 *                 the LCD.
 *
 * \retval contrast the contrast value written to the LCD controller
 */
uint8_t st7565r_set_contrast(uint8_t contrast)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
        if (contrast < ST7565R_DISPLAY_CONTRAST_MIN) {
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b1d      	cmp	r3, #29
 8000d12:	d801      	bhi.n	8000d18 <st7565r_set_contrast+0x14>
                contrast = ST7565R_DISPLAY_CONTRAST_MIN;
 8000d14:	231e      	movs	r3, #30
 8000d16:	71fb      	strb	r3, [r7, #7]
        }
        if (contrast > ST7565R_DISPLAY_CONTRAST_MAX) {
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2b28      	cmp	r3, #40	; 0x28
 8000d1c:	d901      	bls.n	8000d22 <st7565r_set_contrast+0x1e>
                contrast = ST7565R_DISPLAY_CONTRAST_MAX;
 8000d1e:	2328      	movs	r3, #40	; 0x28
 8000d20:	71fb      	strb	r3, [r7, #7]
        }
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME_MODE_SET);
 8000d22:	2081      	movs	r0, #129	; 0x81
 8000d24:	f7ff ff3c 	bl	8000ba0 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME(contrast));
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff33 	bl	8000ba0 <st7565r_write_command>
        return contrast;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <st7565r_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the LCD
 *
 */
void st7565r_display_invert_disable(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_NORMAL);
 8000d48:	20a6      	movs	r0, #166	; 0xa6
 8000d4a:	f7ff ff29 	bl	8000ba0 <st7565r_write_command>
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <st7565r_init>:

int st7565r_init(void) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	
        // Do a hard reset of the LCD display controller
        st7565r_hard_reset();
 8000d58:	f7ff ff72 	bl	8000c40 <st7565r_hard_reset>

        // Set the A0 pin to the default state (command)
        DISPLAY_A0_LOW;
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2140      	movs	r1, #64	; 0x40
 8000d60:	4810      	ldr	r0, [pc, #64]	; (8000da4 <st7565r_init+0x50>)
 8000d62:	f001 fe71 	bl	8002a48 <HAL_GPIO_WritePin>

        // The column address
        st7565r_write_command(ST7565R_CMD_ADC_NORMAL);
 8000d66:	20a0      	movs	r0, #160	; 0xa0
 8000d68:	f7ff ff1a 	bl	8000ba0 <st7565r_write_command>

        // Non-inverted display
        st7565r_display_invert_disable();
 8000d6c:	f7ff ffea 	bl	8000d44 <st7565r_display_invert_disable>

        // The common mode scan direction
        st7565r_write_command(ST7565R_CMD_REVERSE_SCAN_DIRECTION);
 8000d70:	20c8      	movs	r0, #200	; 0xc8
 8000d72:	f7ff ff15 	bl	8000ba0 <st7565r_write_command>

        // Set the voltage bias ratio to 1/6
        st7565r_write_command(ST7565R_CMD_LCD_BIAS_1_DIV_6_DUTY33);
 8000d76:	20a2      	movs	r0, #162	; 0xa2
 8000d78:	f7ff ff12 	bl	8000ba0 <st7565r_write_command>

        // Set booster circuit, voltage regulator and voltage follower all to on
        st7565r_write_command(ST7565R_CMD_POWER_CTRL_ALL_ON);
 8000d7c:	202f      	movs	r0, #47	; 0x2f
 8000d7e:	f7ff ff0f 	bl	8000ba0 <st7565r_write_command>

        // Set the booster ratio to 2X,3X,4X
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_SET);
 8000d82:	20f8      	movs	r0, #248	; 0xf8
 8000d84:	f7ff ff0c 	bl	8000ba0 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_2X_3X_4X);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff ff09 	bl	8000ba0 <st7565r_write_command>

        // Set voltage resistor ratio to 1
        st7565r_write_command(ST7565R_CMD_VOLTAGE_RESISTOR_RATIO_1);
 8000d8e:	2021      	movs	r0, #33	; 0x21
 8000d90:	f7ff ff06 	bl	8000ba0 <st7565r_write_command>

        /* Set contrast to min value, no need to check return value as the contrast
        is set to the defined min*/
        st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);
 8000d94:	201e      	movs	r0, #30
 8000d96:	f7ff ffb5 	bl	8000d04 <st7565r_set_contrast>

        // Turn on the display
        st7565r_display_on();
 8000d9a:	f7ff ffac 	bl	8000cf6 <st7565r_display_on>
		
		return EXIT_SUCCESS;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	48000800 	.word	0x48000800

08000da8 <NRF24L01p_ResetConfigValues>:

bool NRF24L01p_drFlag, NRF24L01p_dsFlag, NRF24L01p_mrFlag;



void NRF24L01p_ResetConfigValues(NRF24L01p_RadioConfig_t *_RadioConfig, NRF24L01p_RxPipeConfig_t *_RxPipeConfig){
 8000da8:	b5b0      	push	{r4, r5, r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_Initialize();
 8000db2:	f000 fcd1 	bl	8001758 <NRF24L01p_port_Initialize>
    //ResetConfigValues(_RadioConfig, _RxPipeConfig);


    NRF24L01p_port_write_Pin_CE(0);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 fd14 	bl	80017e4 <NRF24L01p_port_write_Pin_CE>
    NRF24L01p_port_write_Pin_CSN(0);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 fd23 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>

    NRF24L01p_port_DelayMs(_NRF24L01P_TIMING_PowerOnReset_ms);
 8000dc2:	2064      	movs	r0, #100	; 0x64
 8000dc4:	f000 fdd8 	bl	8001978 <NRF24L01p_port_DelayMs>

    NRF24L01p_RadioMode(NRF24L01P_MODE_POWER_DOWN);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f000 f8db 	bl	8000f84 <NRF24L01p_RadioMode>
    NRF24L01p_RadioMode(NRF24L01P_MODE_RX);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 f8d8 	bl	8000f84 <NRF24L01p_RadioMode>

    NRF24L01p_clear_data_ready_flag();
 8000dd4:	f000 fb9c 	bl	8001510 <NRF24L01p_clear_data_ready_flag>
    NRF24L01p_flush_rx();
 8000dd8:	f000 fa4e 	bl	8001278 <NRF24L01p_flush_rx>
    NRF24L01p_flush_tx();
 8000ddc:	f000 fa37 	bl	800124e <NRF24L01p_flush_tx>

    uint8_t status_rst_val = 0x70;//reset status
 8000de0:	2370      	movs	r3, #112	; 0x70
 8000de2:	72fb      	strb	r3, [r7, #11]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS, &status_rst_val,1);
 8000de4:	f107 030b 	add.w	r3, r7, #11
 8000de8:	2201      	movs	r2, #1
 8000dea:	4619      	mov	r1, r3
 8000dec:	2007      	movs	r0, #7
 8000dee:	f000 f9e6 	bl	80011be <NRF24L01p_write_register_buffer>
    uint8_t config_rst_val = 0x0b;//reset config
 8000df2:	230b      	movs	r3, #11
 8000df4:	72bb      	strb	r3, [r7, #10]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_CONFIG, &config_rst_val,1);
 8000df6:	f107 030a 	add.w	r3, r7, #10
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f9dd 	bl	80011be <NRF24L01p_write_register_buffer>


    RadioConfig.DataReadyInterruptEnabled = _RadioConfig->DataReadyInterruptEnabled;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	781a      	ldrb	r2, [r3, #0]
 8000e08:	4b5c      	ldr	r3, [pc, #368]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e0a:	701a      	strb	r2, [r3, #0]
    RadioConfig.DataSentInterruptFlagEnabled = _RadioConfig->DataSentInterruptFlagEnabled;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	785a      	ldrb	r2, [r3, #1]
 8000e10:	4b5a      	ldr	r3, [pc, #360]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e12:	705a      	strb	r2, [r3, #1]
    RadioConfig.MaxRetryInterruptFlagEnabled = _RadioConfig->MaxRetryInterruptFlagEnabled;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	789a      	ldrb	r2, [r3, #2]
 8000e18:	4b58      	ldr	r3, [pc, #352]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e1a:	709a      	strb	r2, [r3, #2]
    RadioConfig.Crc = _RadioConfig->Crc;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	78da      	ldrb	r2, [r3, #3]
 8000e20:	4b56      	ldr	r3, [pc, #344]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e22:	70da      	strb	r2, [r3, #3]
    RadioConfig.AutoReTransmissionCount = _RadioConfig->AutoReTransmissionCount;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	791a      	ldrb	r2, [r3, #4]
 8000e28:	4b54      	ldr	r3, [pc, #336]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e2a:	711a      	strb	r2, [r3, #4]
    RadioConfig.AutoReTransmitDelayX250us = _RadioConfig->AutoReTransmitDelayX250us;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	795a      	ldrb	r2, [r3, #5]
 8000e30:	4b52      	ldr	r3, [pc, #328]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e32:	715a      	strb	r2, [r3, #5]
    RadioConfig.frequencyOffset = _RadioConfig->frequencyOffset;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	799a      	ldrb	r2, [r3, #6]
 8000e38:	4b50      	ldr	r3, [pc, #320]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e3a:	719a      	strb	r2, [r3, #6]
    RadioConfig.datarate = _RadioConfig->datarate;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	79da      	ldrb	r2, [r3, #7]
 8000e40:	4b4e      	ldr	r3, [pc, #312]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e42:	71da      	strb	r2, [r3, #7]
    RadioConfig.RfPower = _RadioConfig->RfPower;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7a1a      	ldrb	r2, [r3, #8]
 8000e48:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e4a:	721a      	strb	r2, [r3, #8]
    RadioConfig.PllLock = _RadioConfig->PllLock;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7a5a      	ldrb	r2, [r3, #9]
 8000e50:	4b4a      	ldr	r3, [pc, #296]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e52:	725a      	strb	r2, [r3, #9]
    RadioConfig.ContWaveEnabled = _RadioConfig->ContWaveEnabled;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7a9a      	ldrb	r2, [r3, #10]
 8000e58:	4b48      	ldr	r3, [pc, #288]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e5a:	729a      	strb	r2, [r3, #10]
    RadioConfig.FeatureDynamicPayloadEnabled = _RadioConfig->FeatureDynamicPayloadEnabled;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7ada      	ldrb	r2, [r3, #11]
 8000e60:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e62:	72da      	strb	r2, [r3, #11]
    RadioConfig.FeaturePayloadWithAckEnabled = _RadioConfig->FeaturePayloadWithAckEnabled;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7b1a      	ldrb	r2, [r3, #12]
 8000e68:	4b44      	ldr	r3, [pc, #272]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e6a:	731a      	strb	r2, [r3, #12]
    RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = _RadioConfig->FeatureDynamicPayloadWithNoAckEnabled;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7b5a      	ldrb	r2, [r3, #13]
 8000e70:	4b42      	ldr	r3, [pc, #264]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000e72:	735a      	strb	r2, [r3, #13]

	int i;
    for(i=0;i<6;i++){
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	e019      	b.n	8000eae <NRF24L01p_ResetConfigValues+0x106>
        RxPipeConfig[i] = _RxPipeConfig[i];
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	461a      	mov	r2, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	1898      	adds	r0, r3, r2
 8000e8a:	493d      	ldr	r1, [pc, #244]	; (8000f80 <NRF24L01p_ResetConfigValues+0x1d8>)
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	440b      	add	r3, r1
 8000e98:	461c      	mov	r4, r3
 8000e9a:	4605      	mov	r5, r0
 8000e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ea4:	e884 0003 	stmia.w	r4, {r0, r1}
    for(i=0;i<6;i++){
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2b05      	cmp	r3, #5
 8000eb2:	dde2      	ble.n	8000e7a <NRF24L01p_ResetConfigValues+0xd2>
    }


    NRF24L01p_enable_dynamic_payload(RadioConfig.FeatureDynamicPayloadEnabled);
 8000eb4:	4b31      	ldr	r3, [pc, #196]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000eb6:	7adb      	ldrb	r3, [r3, #11]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fbe4 	bl	8001686 <NRF24L01p_enable_dynamic_payload>
    NRF24L01p_enable_payload_with_ack(RadioConfig.FeaturePayloadWithAckEnabled);
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000ec0:	7b1b      	ldrb	r3, [r3, #12]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fc02 	bl	80016cc <NRF24L01p_enable_payload_with_ack>
    NRF24L01p_enable_dynamic_payload_with_no_ack(RadioConfig.FeatureDynamicPayloadWithNoAckEnabled);
 8000ec8:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000eca:	7b5b      	ldrb	r3, [r3, #13]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fc20 	bl	8001712 <NRF24L01p_enable_dynamic_payload_with_no_ack>
    NRF24L01p_set_auto_retransmission_count(RadioConfig.AutoReTransmissionCount);
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000ed4:	791b      	ldrb	r3, [r3, #4]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fac5 	bl	8001466 <NRF24L01p_set_auto_retransmission_count>
    NRF24L01p_set_auto_retransmission_delay(RadioConfig.AutoReTransmitDelayX250us);
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000ede:	795b      	ldrb	r3, [r3, #5]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fadb 	bl	800149c <NRF24L01p_set_auto_retransmission_delay>
    NRF24L01p_set_DataRate(RadioConfig.datarate);
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <NRF24L01p_ResetConfigValues+0x1d4>)
 8000ee8:	79db      	ldrb	r3, [r3, #7]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 faf5 	bl	80014da <NRF24L01p_set_DataRate>

    for(i=0;i<6;i++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e03b      	b.n	8000f6e <NRF24L01p_ResetConfigValues+0x1c6>
    	NRF24L01p_enable_rx_on_pipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].PipeEnabled );
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	b2d8      	uxtb	r0, r3
 8000efa:	4921      	ldr	r1, [pc, #132]	; (8000f80 <NRF24L01p_ResetConfigValues+0x1d8>)
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	440b      	add	r3, r1
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f000 fa71 	bl	80013f2 <NRF24L01p_enable_rx_on_pipe>
    	NRF24L01p_enable_auto_ack((NRF24L01p_pipe_t)i,RxPipeConfig[i].autoAckEnabled );
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	b2d8      	uxtb	r0, r3
 8000f14:	491a      	ldr	r1, [pc, #104]	; (8000f80 <NRF24L01p_ResetConfigValues+0x1d8>)
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	440b      	add	r3, r1
 8000f22:	3301      	adds	r3, #1
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	f000 fa29 	bl	800137e <NRF24L01p_enable_auto_ack>
    	NRF24L01p_enable_dynamic_payload_pipe((NRF24L01p_pipe_t)i,RxPipeConfig[i].dynamicPayloadEnabled);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	b2d8      	uxtb	r0, r3
 8000f30:	4913      	ldr	r1, [pc, #76]	; (8000f80 <NRF24L01p_ResetConfigValues+0x1d8>)
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3311      	adds	r3, #17
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	4619      	mov	r1, r3
 8000f44:	f000 fb6b 	bl	800161e <NRF24L01p_enable_dynamic_payload_pipe>
    	NRF24L01p_set_RX_pipe_address((NRF24L01p_pipe_t)i,RxPipeConfig[i].address);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	b2d8      	uxtb	r0, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <NRF24L01p_ResetConfigValues+0x1d8>)
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	440b      	add	r3, r1
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4623      	mov	r3, r4
 8000f64:	f000 faee 	bl	8001544 <NRF24L01p_set_RX_pipe_address>
    for(i=0;i<6;i++){
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	ddc0      	ble.n	8000ef6 <NRF24L01p_ResetConfigValues+0x14e>
    }
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f7c:	2000aaac 	.word	0x2000aaac
 8000f80:	2000aba0 	.word	0x2000aba0

08000f84 <NRF24L01p_RadioMode>:

void NRF24L01p_RadioMode(NRF24L01p_RadioState_t mode){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
    switch(mode){
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d84e      	bhi.n	8001034 <NRF24L01p_RadioMode+0xb0>
 8000f96:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <NRF24L01p_RadioMode+0x18>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08000fad 	.word	0x08000fad
 8000fa0:	08000fbf 	.word	0x08000fbf
 8000fa4:	08000fe3 	.word	0x08000fe3
 8000fa8:	08001009 	.word	0x08001009
        case NRF24L01P_MODE_POWER_DOWN: {
        	NRF24L01p_power_down();
 8000fac:	f000 f9ba 	bl	8001324 <NRF24L01p_power_down>
            NRF24L01p_port_write_Pin_CE(0);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 fc17 	bl	80017e4 <NRF24L01p_port_write_Pin_CE>
            RadioState = NRF24L01P_MODE_POWER_DOWN;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <NRF24L01p_RadioMode+0xb8>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
            break;
 8000fbc:	e03a      	b.n	8001034 <NRF24L01p_RadioMode+0xb0>
        }
        case NRF24L01P_MODE_STANDBY: {
            if(RadioState == NRF24L01P_MODE_POWER_DOWN){
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <NRF24L01p_RadioMode+0xb8>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d106      	bne.n	8000fd4 <NRF24L01p_RadioMode+0x50>
            	NRF24L01p_power_up();
 8000fc6:	f000 f99e 	bl	8001306 <NRF24L01p_power_up>
                    NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tpd2stby_us);
 8000fca:	f241 1094 	movw	r0, #4500	; 0x1194
 8000fce:	f000 fcdf 	bl	8001990 <NRF24L01p_port_DelayUs>
 8000fd2:	e002      	b.n	8000fda <NRF24L01p_RadioMode+0x56>
            }
            else{
                    NRF24L01p_port_write_Pin_CE(0);
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f000 fc05 	bl	80017e4 <NRF24L01p_port_write_Pin_CE>
            }
            RadioState = NRF24L01P_MODE_STANDBY;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <NRF24L01p_RadioMode+0xb8>)
 8000fdc:	2202      	movs	r2, #2
 8000fde:	701a      	strb	r2, [r3, #0]
            break;
 8000fe0:	e028      	b.n	8001034 <NRF24L01p_RadioMode+0xb0>
        }
        case NRF24L01P_MODE_RX: {
            if(RadioState != NRF24L01P_MODE_RX){
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <NRF24L01p_RadioMode+0xb8>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d021      	beq.n	800102e <NRF24L01p_RadioMode+0xaa>
                NRF24L01p_port_write_Pin_CE(0);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 fbfa 	bl	80017e4 <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_rx_mode();
 8000ff0:	f000 f9a7 	bl	8001342 <NRF24L01p_rx_mode>
                NRF24L01p_port_write_Pin_CE(1);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f000 fbf5 	bl	80017e4 <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 8000ffa:	2082      	movs	r0, #130	; 0x82
 8000ffc:	f000 fcc8 	bl	8001990 <NRF24L01p_port_DelayUs>
                RadioState = NRF24L01P_MODE_RX;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <NRF24L01p_RadioMode+0xb8>)
 8001002:	2203      	movs	r2, #3
 8001004:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001006:	e012      	b.n	800102e <NRF24L01p_RadioMode+0xaa>
        }
        case NRF24L01P_MODE_TX: {
            if(RadioState != NRF24L01P_MODE_TX){
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <NRF24L01p_RadioMode+0xb8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b04      	cmp	r3, #4
 800100e:	d010      	beq.n	8001032 <NRF24L01p_RadioMode+0xae>
                NRF24L01p_port_write_Pin_CE(0);
 8001010:	2000      	movs	r0, #0
 8001012:	f000 fbe7 	bl	80017e4 <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_tx_mode();
 8001016:	f000 f9a3 	bl	8001360 <NRF24L01p_tx_mode>
                NRF24L01p_port_write_Pin_CE(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 fbe2 	bl	80017e4 <NRF24L01p_port_write_Pin_CE>
                NRF24L01p_port_DelayUs(_NRF24L01P_TIMING_Tstby2a_us);
 8001020:	2082      	movs	r0, #130	; 0x82
 8001022:	f000 fcb5 	bl	8001990 <NRF24L01p_port_DelayUs>
                RadioState = NRF24L01P_MODE_TX;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <NRF24L01p_RadioMode+0xb8>)
 8001028:	2204      	movs	r2, #4
 800102a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800102c:	e001      	b.n	8001032 <NRF24L01p_RadioMode+0xae>
            break;
 800102e:	bf00      	nop
 8001030:	e000      	b.n	8001034 <NRF24L01p_RadioMode+0xb0>
            break;
 8001032:	bf00      	nop
        }
    }
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000aaa8 	.word	0x2000aaa8

08001040 <NRF24L01p_readable>:


bool NRF24L01p_readable(){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
    //return (NRF24L01p_get_data_ready_flag() || !NRF24L01p_get_fifo_flag_rx_empty())&& (NRF24L01p_get_rx_payload_pipe() != 7)  ;
	return (!NRF24L01p_get_fifo_flag_rx_empty()) ;
 8001044:	f000 fadc 	bl	8001600 <NRF24L01p_get_fifo_flag_rx_empty>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	bf14      	ite	ne
 800104e:	2301      	movne	r3, #1
 8001050:	2300      	moveq	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f083 0301 	eor.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3

}
 8001060:	4618      	mov	r0, r3
 8001062:	bd80      	pop	{r7, pc}

08001064 <NRF24L01p_readPayload>:

NRF24L01p_ErrorStatus_t NRF24L01p_writeAckPayload(NRF24L01p_Payload_t *payload){
	NRF24L01p_write_ack_payload(payload->pipe, payload->data, payload->length);
	return NRF24L01P_SUCCESS;
}
NRF24L01p_ErrorStatus_t NRF24L01p_readPayload(NRF24L01p_Payload_t *payload){
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    NRF24L01p_ErrorStatus_t error;
    payload->pipe = NRF24L01p_get_rx_payload_pipe();
 800106c:	f000 fa5f 	bl	800152e <NRF24L01p_get_rx_payload_pipe>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	721a      	strb	r2, [r3, #8]

    if(payload->pipe>=0 && payload->pipe<=5){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7a1b      	ldrb	r3, [r3, #8]
 800107c:	2b05      	cmp	r3, #5
 800107e:	d824      	bhi.n	80010ca <NRF24L01p_readPayload+0x66>
        if(RadioConfig.FeatureDynamicPayloadEnabled == 1){
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <NRF24L01p_readPayload+0x70>)
 8001082:	7adb      	ldrb	r3, [r3, #11]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d006      	beq.n	8001096 <NRF24L01p_readPayload+0x32>
            payload->length = NRF24L01p_read_rx_payload_width();
 8001088:	f000 f90b 	bl	80012a2 <NRF24L01p_read_rx_payload_width>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	611a      	str	r2, [r3, #16]
 8001094:	e008      	b.n	80010a8 <NRF24L01p_readPayload+0x44>
        }else{
            payload->length = NRF24L01p_get_RX_pipe_width(payload->pipe);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7a1b      	ldrb	r3, [r3, #8]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fa9a 	bl	80015d4 <NRF24L01p_get_RX_pipe_width>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	611a      	str	r2, [r3, #16]
        }


        if(payload->length <= 32){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	2b20      	cmp	r3, #32
 80010ae:	d80a      	bhi.n	80010c6 <NRF24L01p_readPayload+0x62>
        	NRF24L01p_read_rx_payload(payload->data,payload->length);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4610      	mov	r0, r2
 80010bc:	f000 f8a8 	bl	8001210 <NRF24L01p_read_rx_payload>
            error = NRF24L01P_SUCCESS;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e001      	b.n	80010ca <NRF24L01p_readPayload+0x66>
        }
        else{
            error = NRF24L01P_ERROR;
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]
        }

    }
    return error;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000aaac 	.word	0x2000aaac

080010d8 <NRF24L01p_read_register>:

#include "NRF24L01pDriver.h"



uint8_t NRF24L01p_read_register(uint8_t address){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_write_Pin_CSN(0);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 fb90 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	73fb      	strb	r3, [r7, #15]


    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80010f2:	f107 010f 	add.w	r1, r7, #15
 80010f6:	f107 030f 	add.w	r3, r7, #15
 80010fa:	2201      	movs	r2, #1
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fc23 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001102:	f107 010f 	add.w	r1, r7, #15
 8001106:	f107 030f 	add.w	r3, r7, #15
 800110a:	2201      	movs	r2, #1
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fc1b 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(&temp, 1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001112:	2001      	movs	r0, #1
 8001114:	f000 fb78 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 8001118:	7bfb      	ldrb	r3, [r7, #15]

}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <NRF24L01p_read_register_buffer>:
void NRF24L01p_read_register_buffer(uint8_t address, uint8_t *dataout, int len){
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_write_Pin_CSN(0);
 8001130:	2000      	movs	r0, #0
 8001132:	f000 fb69 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = address&_NRF24L01P_REG_ADDRESS_MASK;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	f003 031f 	and.w	r3, r3, #31
 800113c:	b2db      	uxtb	r3, r3
 800113e:	75fb      	strb	r3, [r7, #23]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001140:	f107 0117 	add.w	r1, r7, #23
 8001144:	f107 0317 	add.w	r3, r7, #23
 8001148:	2201      	movs	r2, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fbfc 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(dataout, dataout,len);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	461a      	mov	r2, r3
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68b8      	ldr	r0, [r7, #8]
 8001158:	f000 fbf6 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(dataout, len);
    NRF24L01p_port_write_Pin_CSN(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f000 fb53 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <NRF24L01p_write_register>:
void NRF24L01p_write_register(uint8_t address, uint8_t datain){
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	460a      	mov	r2, r1
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	4613      	mov	r3, r2
 8001178:	71bb      	strb	r3, [r7, #6]
    NRF24L01p_port_write_Pin_CSN(0);
 800117a:	2000      	movs	r0, #0
 800117c:	f000 fb44 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	f003 031f 	and.w	r3, r3, #31
 8001188:	b25b      	sxtb	r3, r3
 800118a:	f043 0320 	orr.w	r3, r3, #32
 800118e:	b25b      	sxtb	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001194:	f107 010f 	add.w	r1, r7, #15
 8001198:	f107 030f 	add.w	r3, r7, #15
 800119c:	2201      	movs	r2, #1
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fbd2 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&datain, &datain,1);
 80011a4:	1db9      	adds	r1, r7, #6
 80011a6:	1dbb      	adds	r3, r7, #6
 80011a8:	2201      	movs	r2, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fbcc 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(&datain, 1);
    NRF24L01p_port_write_Pin_CSN(1);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f000 fb29 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <NRF24L01p_write_register_buffer>:
void NRF24L01p_write_register_buffer(uint8_t address, uint8_t *datain, int len){
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_port_write_Pin_CSN(0);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f000 fb1b 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	f003 031f 	and.w	r3, r3, #31
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	f043 0320 	orr.w	r3, r3, #32
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	75fb      	strb	r3, [r7, #23]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80011e6:	f107 0117 	add.w	r1, r7, #23
 80011ea:	f107 0317 	add.w	r3, r7, #23
 80011ee:	2201      	movs	r2, #1
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fba9 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(datain, datain,len);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	461a      	mov	r2, r3
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	68b8      	ldr	r0, [r7, #8]
 80011fe:	f000 fba3 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp, 1);
    //port_SPI_Transcieve(datain, len);
    NRF24L01p_port_write_Pin_CSN(1);
 8001202:	2001      	movs	r0, #1
 8001204:	f000 fb00 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <NRF24L01p_read_rx_payload>:
void NRF24L01p_read_rx_payload(uint8_t *dataout, int pay_len){
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    NRF24L01p_port_write_Pin_CSN(0);
 800121a:	2000      	movs	r0, #0
 800121c:	f000 faf4 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_RD_RX_PAYLOAD);
 8001220:	2361      	movs	r3, #97	; 0x61
 8001222:	73fb      	strb	r3, [r7, #15]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001224:	f107 010f 	add.w	r1, r7, #15
 8001228:	f107 030f 	add.w	r3, r7, #15
 800122c:	2201      	movs	r2, #1
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fb8a 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(dataout,dataout,pay_len);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 fb84 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(dataout,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f000 fae1 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <NRF24L01p_flush_tx>:

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
}
void NRF24L01p_flush_tx(){
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 8001254:	2000      	movs	r0, #0
 8001256:	f000 fad7 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_TX);
 800125a:	23e1      	movs	r3, #225	; 0xe1
 800125c:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 800125e:	1df9      	adds	r1, r7, #7
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	2201      	movs	r2, #1
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fb6f 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 800126a:	2001      	movs	r0, #1
 800126c:	f000 facc 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <NRF24L01p_flush_rx>:
void NRF24L01p_flush_rx(){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 800127e:	2000      	movs	r0, #0
 8001280:	f000 fac2 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_FLUSH_RX);
 8001284:	23e2      	movs	r3, #226	; 0xe2
 8001286:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 8001288:	1df9      	adds	r1, r7, #7
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	2201      	movs	r2, #1
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fb5a 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 8001294:	2001      	movs	r0, #1
 8001296:	f000 fab7 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <NRF24L01p_read_rx_payload_width>:
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
    //port_SPI_Transcieve(&temp,1);

    NRF24L01p_port_write_Pin_CSN(1);
}
int NRF24L01p_read_rx_payload_width(){
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 faad 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_R_RX_PL_WID);
 80012ae:	2360      	movs	r3, #96	; 0x60
 80012b0:	71fb      	strb	r3, [r7, #7]

    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80012b2:	1df9      	adds	r1, r7, #7
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	2201      	movs	r2, #1
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fb45 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>
    NRF24L01p_port_SPI_Transcieve(&temp, &temp,1);
 80012be:	1df9      	adds	r1, r7, #7
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	2201      	movs	r2, #1
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fb3f 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f000 fa9c 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 80012d0:	79fb      	ldrb	r3, [r7, #7]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <NRF24L01p_get_status>:

    //port_SPI_Transcieve(&temp,1);
    //port_SPI_Transcieve(datain,pay_len);
    NRF24L01p_port_write_Pin_CSN(1);
}
uint8_t NRF24L01p_get_status(){
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
    NRF24L01p_port_write_Pin_CSN(0);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f000 fa91 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
    uint8_t temp = (_NRF24L01P_SPI_CMD_NOP );
 80012e6:	23ff      	movs	r3, #255	; 0xff
 80012e8:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_port_SPI_Transcieve(&temp, &temp, 1);
 80012ea:	1df9      	adds	r1, r7, #7
 80012ec:	1dfb      	adds	r3, r7, #7
 80012ee:	2201      	movs	r2, #1
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fb29 	bl	8001948 <NRF24L01p_port_SPI_Transcieve>
    //port_SPI_Transcieve(&temp,1);
    NRF24L01p_port_write_Pin_CSN(1);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f000 fa86 	bl	8001808 <NRF24L01p_port_write_Pin_CSN>
    return temp;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <NRF24L01p_power_up>:





void NRF24L01p_power_up(){
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
	NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_PWR_UP);
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff fee4 	bl	80010d8 <NRF24L01p_read_register>
 8001310:	4603      	mov	r3, r0
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4619      	mov	r1, r3
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff ff25 	bl	800116a <NRF24L01p_write_register>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}

08001324 <NRF24L01p_power_down>:
void NRF24L01p_power_down(){
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_PWR_UP);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fed5 	bl	80010d8 <NRF24L01p_read_register>
 800132e:	4603      	mov	r3, r0
 8001330:	f023 0302 	bic.w	r3, r3, #2
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4619      	mov	r1, r3
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ff16 	bl	800116a <NRF24L01p_write_register>
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}

08001342 <NRF24L01p_rx_mode>:
void NRF24L01p_rx_mode(){
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
	NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_PRIM_RX);
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff fec6 	bl	80010d8 <NRF24L01p_read_register>
 800134c:	4603      	mov	r3, r0
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	4619      	mov	r1, r3
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff ff07 	bl	800116a <NRF24L01p_write_register>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <NRF24L01p_tx_mode>:
void NRF24L01p_tx_mode(){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_PRIM_RX);
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff feb7 	bl	80010d8 <NRF24L01p_read_register>
 800136a:	4603      	mov	r3, r0
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4619      	mov	r1, r3
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff fef8 	bl	800116a <NRF24L01p_write_register>
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}

0800137e <NRF24L01p_enable_auto_ack>:
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) | _NRF24L01P_CONFIG_MASK_MAX_RT);
else NRF24L01p_write_register(_NRF24L01P_REG_CONFIG,NRF24L01p_read_register(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_MASK_MAX_RT);
}


void NRF24L01p_enable_auto_ack(NRF24L01p_pipe_t pipe, bool sel){
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	460a      	mov	r2, r1
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	4613      	mov	r3, r2
 800138c:	71bb      	strb	r3, [r7, #6]
    if (sel){
 800138e:	79bb      	ldrb	r3, [r7, #6]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d014      	beq.n	80013be <NRF24L01p_enable_auto_ack+0x40>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fe9f 	bl	80010d8 <NRF24L01p_read_register>
 800139a:	4603      	mov	r3, r0
 800139c:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_set_bit(temp,pipe);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2201      	movs	r2, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	b25a      	sxtb	r2, r3
 80013a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
 80013b2:	7bbb      	ldrb	r3, [r7, #14]
 80013b4:	4619      	mov	r1, r3
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff fed7 	bl	800116a <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
        _nrf24l01p_clr_bit(temp,pipe);
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
    }

}
 80013bc:	e015      	b.n	80013ea <NRF24L01p_enable_auto_ack+0x6c>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_AA);
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff fe8a 	bl	80010d8 <NRF24L01p_read_register>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_clr_bit(temp,pipe);
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	2201      	movs	r2, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	b25a      	sxtb	r2, r3
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4013      	ands	r3, r2
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_AA,temp);
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	4619      	mov	r1, r3
 80013e4:	2001      	movs	r0, #1
 80013e6:	f7ff fec0 	bl	800116a <NRF24L01p_write_register>
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <NRF24L01p_enable_rx_on_pipe>:



void NRF24L01p_enable_rx_on_pipe(NRF24L01p_pipe_t pipe, bool sel){
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	460a      	mov	r2, r1
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	4613      	mov	r3, r2
 8001400:	71bb      	strb	r3, [r7, #6]
    if(sel){
 8001402:	79bb      	ldrb	r3, [r7, #6]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d014      	beq.n	8001432 <NRF24L01p_enable_rx_on_pipe+0x40>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
 8001408:	2002      	movs	r0, #2
 800140a:	f7ff fe65 	bl	80010d8 <NRF24L01p_read_register>
 800140e:	4603      	mov	r3, r0
 8001410:	73bb      	strb	r3, [r7, #14]
        _nrf24l01p_set_bit(temp,pipe);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2201      	movs	r2, #1
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	b25a      	sxtb	r2, r3
 800141c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001420:	4313      	orrs	r3, r2
 8001422:	b25b      	sxtb	r3, r3
 8001424:	73bb      	strb	r3, [r7, #14]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 8001426:	7bbb      	ldrb	r3, [r7, #14]
 8001428:	4619      	mov	r1, r3
 800142a:	2002      	movs	r0, #2
 800142c:	f7ff fe9d 	bl	800116a <NRF24L01p_write_register>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
        _nrf24l01p_clr_bit(temp,pipe);
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
    }

}
 8001430:	e015      	b.n	800145e <NRF24L01p_enable_rx_on_pipe+0x6c>
        uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_EN_RXADDR);
 8001432:	2002      	movs	r0, #2
 8001434:	f7ff fe50 	bl	80010d8 <NRF24L01p_read_register>
 8001438:	4603      	mov	r3, r0
 800143a:	73fb      	strb	r3, [r7, #15]
        _nrf24l01p_clr_bit(temp,pipe);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2201      	movs	r2, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	b25b      	sxtb	r3, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	b25a      	sxtb	r2, r3
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4013      	ands	r3, r2
 8001450:	b25b      	sxtb	r3, r3
 8001452:	73fb      	strb	r3, [r7, #15]
        NRF24L01p_write_register(_NRF24L01P_REG_EN_RXADDR,temp);
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	4619      	mov	r1, r3
 8001458:	2002      	movs	r0, #2
 800145a:	f7ff fe86 	bl	800116a <NRF24L01p_write_register>
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <NRF24L01p_set_auto_retransmission_count>:
}
NRF24L01p_aw_t NRF24L01p_get_address_width(){
    return (NRF24L01p_aw_t) NRF24L01p_read_register(_NRF24L01P_REG_SETUP_AW);
}

void NRF24L01p_set_auto_retransmission_count(uint8_t count){
 8001466:	b580      	push	{r7, lr}
 8001468:	b084      	sub	sp, #16
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
 8001470:	2004      	movs	r0, #4
 8001472:	f7ff fe31 	bl	80010d8 <NRF24L01p_read_register>
 8001476:	4603      	mov	r3, r0
 8001478:	73fb      	strb	r3, [r7, #15]
    temp &= ~ 0x0F;
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	f023 030f 	bic.w	r3, r3, #15
 8001480:	73fb      	strb	r3, [r7, #15]
    temp |= (count<<0);
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4313      	orrs	r3, r2
 8001488:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	4619      	mov	r1, r3
 800148e:	2004      	movs	r0, #4
 8001490:	f7ff fe6b 	bl	800116a <NRF24L01p_write_register>
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <NRF24L01p_set_auto_retransmission_delay>:
uint8_t NRF24L01p_read_auto_retransmission_count(){
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
    return temp & 0x0F;
}

void NRF24L01p_set_auto_retransmission_delay(uint8_t times250us){
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_SETUP_RETR);
 80014a6:	2004      	movs	r0, #4
 80014a8:	f7ff fe16 	bl	80010d8 <NRF24L01p_read_register>
 80014ac:	4603      	mov	r3, r0
 80014ae:	73fb      	strb	r3, [r7, #15]
    temp &= ~(0xF0);
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	73fb      	strb	r3, [r7, #15]
    temp |= (times250us<<4);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	b25a      	sxtb	r2, r3
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_SETUP_RETR,temp);
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	4619      	mov	r1, r3
 80014cc:	2004      	movs	r0, #4
 80014ce:	f7ff fe4c 	bl	800116a <NRF24L01p_write_register>
}
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <NRF24L01p_set_DataRate>:
}
uint8_t NRF24L01p_get_frequency_offset(){
    return NRF24L01p_read_register(_NRF24L01P_REG_RF_CH);
}

void NRF24L01p_set_DataRate(NRF24L01p_datarate_t DataRate){
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = NRF24L01p_read_register(_NRF24L01P_REG_RF_SETUP);
 80014e4:	2006      	movs	r0, #6
 80014e6:	f7ff fdf7 	bl	80010d8 <NRF24L01p_read_register>
 80014ea:	4603      	mov	r3, r0
 80014ec:	73fb      	strb	r3, [r7, #15]
    temp &= ~_NRF24L01P_RF_SETUP_RF_DR_MASK;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80014f4:	73fb      	strb	r3, [r7, #15]
    temp |= DataRate;
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	73fb      	strb	r3, [r7, #15]
    NRF24L01p_write_register(_NRF24L01P_REG_RF_SETUP,temp);
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	4619      	mov	r1, r3
 8001502:	2006      	movs	r0, #6
 8001504:	f7ff fe31 	bl	800116a <NRF24L01p_write_register>
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <NRF24L01p_clear_data_ready_flag>:
}
bool NRF24L01p_get_data_ready_flag(){
    if(NRF24L01p_get_status()&_NRF24L01P_STATUS_RX_DR) return 1;
    else return 0;
}
void NRF24L01p_clear_data_ready_flag(){
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
    uint8_t temp = _NRF24L01P_STATUS_RX_DR;
 8001516:	2340      	movs	r3, #64	; 0x40
 8001518:	71fb      	strb	r3, [r7, #7]
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	2201      	movs	r2, #1
 800151e:	4619      	mov	r1, r3
 8001520:	2007      	movs	r0, #7
 8001522:	f7ff fe4c 	bl	80011be <NRF24L01p_write_register_buffer>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <NRF24L01p_get_rx_payload_pipe>:
NRF24L01p_pipe_t NRF24L01p_get_rx_payload_pipe(){
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
    return (NRF24L01p_pipe_t) ((NRF24L01p_get_status()&_NRF24L01P_STATUS_RX_P_NO)>>1);
 8001532:	f7ff fed2 	bl	80012da <NRF24L01p_get_status>
 8001536:	4603      	mov	r3, r0
 8001538:	105b      	asrs	r3, r3, #1
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	b2db      	uxtb	r3, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	bd80      	pop	{r7, pc}

08001544 <NRF24L01p_set_RX_pipe_address>:
bool NRF24L01p_get_rpd(){
    if(NRF24L01p_read_register(_NRF24L01P_REG_RPD)) return 1;
    else return 0;
}

void NRF24L01p_set_RX_pipe_address(NRF24L01p_pipe_t pipe,NRF24L01p_PipeAddr_t address){
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	4601      	mov	r1, r0
 800154c:	e9c7 2300 	strd	r2, r3, [r7]
 8001550:	460b      	mov	r3, r1
 8001552:	73fb      	strb	r3, [r7, #15]
    int max_pipe_addr_width = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
    if((pipe>=0) && (pipe<=1)   ){max_pipe_addr_width = 5;}
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d802      	bhi.n	8001564 <NRF24L01p_set_RX_pipe_address+0x20>
 800155e:	2305      	movs	r3, #5
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	e007      	b.n	8001574 <NRF24L01p_set_RX_pipe_address+0x30>
    else if ((pipe>=2) && (pipe<=5)   ){max_pipe_addr_width = 1;}
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d904      	bls.n	8001574 <NRF24L01p_set_RX_pipe_address+0x30>
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d801      	bhi.n	8001574 <NRF24L01p_set_RX_pipe_address+0x30>
 8001570:	2301      	movs	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
    uint8_t temp[5];
    int i;
    for(i=0;i<max_pipe_addr_width;i++){
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	e01b      	b.n	80015b2 <NRF24L01p_set_RX_pipe_address+0x6e>
            temp[i] = (address>>(8*i))&0xFF;
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	00d9      	lsls	r1, r3, #3
 800157e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001582:	f1c1 0620 	rsb	r6, r1, #32
 8001586:	f1a1 0020 	sub.w	r0, r1, #32
 800158a:	fa22 f401 	lsr.w	r4, r2, r1
 800158e:	fa03 f606 	lsl.w	r6, r3, r6
 8001592:	4334      	orrs	r4, r6
 8001594:	fa23 f000 	lsr.w	r0, r3, r0
 8001598:	4304      	orrs	r4, r0
 800159a:	fa23 f501 	lsr.w	r5, r3, r1
 800159e:	b2e1      	uxtb	r1, r4
 80015a0:	f107 0210 	add.w	r2, r7, #16
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	4413      	add	r3, r2
 80015a8:	460a      	mov	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
    for(i=0;i<max_pipe_addr_width;i++){
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	3301      	adds	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	dbdf      	blt.n	800157a <NRF24L01p_set_RX_pipe_address+0x36>
    }
    NRF24L01p_write_register_buffer(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	330a      	adds	r3, #10
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f107 0110 	add.w	r1, r7, #16
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fdf9 	bl	80011be <NRF24L01p_write_register_buffer>
}
 80015cc:	bf00      	nop
 80015ce:	3724      	adds	r7, #36	; 0x24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015d4 <NRF24L01p_get_RX_pipe_width>:
            *(temp_addr_ptr+i)|= (temp[i]);
    }
    return temp_addr;
}

uint8_t NRF24L01p_get_RX_pipe_width(NRF24L01p_pipe_t pipe){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
    uint8_t temp;
    NRF24L01p_read_register_buffer((_NRF24L01P_REG_RX_PW_P0+pipe),&temp,sizeof(temp));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	3311      	adds	r3, #17
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f107 010f 	add.w	r1, r7, #15
 80015e8:	2201      	movs	r2, #1
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fd99 	bl	8001122 <NRF24L01p_read_register_buffer>
    return (temp&(0x3F));
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015f6:	b2db      	uxtb	r3, r3
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <NRF24L01p_get_fifo_flag_rx_empty>:

bool NRF24L01p_get_fifo_flag_rx_empty(){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_EMPTY ) return 1;
 8001604:	2017      	movs	r0, #23
 8001606:	f7ff fd67 	bl	80010d8 <NRF24L01p_read_register>
 800160a:	4603      	mov	r3, r0
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <NRF24L01p_get_fifo_flag_rx_empty+0x18>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <NRF24L01p_get_fifo_flag_rx_empty+0x1a>
    else return 0;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}

0800161e <NRF24L01p_enable_dynamic_payload_pipe>:
bool NRF24L01p_get_fifo_flag_tx_reuse(){
    if(NRF24L01p_read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_REUSE ) return 1;
    else return 0;
}

void NRF24L01p_enable_dynamic_payload_pipe(NRF24L01p_pipe_t pipe, bool sel){
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	460a      	mov	r2, r1
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	4613      	mov	r3, r2
 800162c:	71bb      	strb	r3, [r7, #6]
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,NRF24L01p_read_register(_NRF24L01P_REG_DYNPD) | (1<<pipe));
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d011      	beq.n	8001658 <NRF24L01p_enable_dynamic_payload_pipe+0x3a>
 8001634:	201c      	movs	r0, #28
 8001636:	f7ff fd4f 	bl	80010d8 <NRF24L01p_read_register>
 800163a:	4603      	mov	r3, r0
 800163c:	b25a      	sxtb	r2, r3
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2101      	movs	r1, #1
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	b25b      	sxtb	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b25b      	sxtb	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4619      	mov	r1, r3
 8001650:	201c      	movs	r0, #28
 8001652:	f7ff fd8a 	bl	800116a <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,NRF24L01p_read_register(_NRF24L01P_REG_DYNPD) & ~(1<<pipe));

}
 8001656:	e012      	b.n	800167e <NRF24L01p_enable_dynamic_payload_pipe+0x60>
    else NRF24L01p_write_register(_NRF24L01P_REG_DYNPD,NRF24L01p_read_register(_NRF24L01P_REG_DYNPD) & ~(1<<pipe));
 8001658:	201c      	movs	r0, #28
 800165a:	f7ff fd3d 	bl	80010d8 <NRF24L01p_read_register>
 800165e:	4603      	mov	r3, r0
 8001660:	b25a      	sxtb	r2, r3
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2101      	movs	r1, #1
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	b25b      	sxtb	r3, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	b25b      	sxtb	r3, r3
 8001670:	4013      	ands	r3, r2
 8001672:	b25b      	sxtb	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4619      	mov	r1, r3
 8001678:	201c      	movs	r0, #28
 800167a:	f7ff fd76 	bl	800116a <NRF24L01p_write_register>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <NRF24L01p_enable_dynamic_payload>:



void NRF24L01p_enable_dynamic_payload(bool sel){
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
    if(sel) NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) | (_NRF24L01_FEATURE_EN_DPL));
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00b      	beq.n	80016ae <NRF24L01p_enable_dynamic_payload+0x28>
 8001696:	201d      	movs	r0, #29
 8001698:	f7ff fd1e 	bl	80010d8 <NRF24L01p_read_register>
 800169c:	4603      	mov	r3, r0
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	4619      	mov	r1, r3
 80016a6:	201d      	movs	r0, #29
 80016a8:	f7ff fd5f 	bl	800116a <NRF24L01p_write_register>
    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_DPL);

}
 80016ac:	e00a      	b.n	80016c4 <NRF24L01p_enable_dynamic_payload+0x3e>
    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_DPL);
 80016ae:	201d      	movs	r0, #29
 80016b0:	f7ff fd12 	bl	80010d8 <NRF24L01p_read_register>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f023 0304 	bic.w	r3, r3, #4
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	4619      	mov	r1, r3
 80016be:	201d      	movs	r0, #29
 80016c0:	f7ff fd53 	bl	800116a <NRF24L01p_write_register>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <NRF24L01p_enable_payload_with_ack>:



void NRF24L01p_enable_payload_with_ack(bool sel){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	if(sel) NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) | (_NRF24L01_FEATURE_EN_ACK_PAY));
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00b      	beq.n	80016f4 <NRF24L01p_enable_payload_with_ack+0x28>
 80016dc:	201d      	movs	r0, #29
 80016de:	f7ff fcfb 	bl	80010d8 <NRF24L01p_read_register>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	4619      	mov	r1, r3
 80016ec:	201d      	movs	r0, #29
 80016ee:	f7ff fd3c 	bl	800116a <NRF24L01p_write_register>
	    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_ACK_PAY);

}
 80016f2:	e00a      	b.n	800170a <NRF24L01p_enable_payload_with_ack+0x3e>
	    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_ACK_PAY);
 80016f4:	201d      	movs	r0, #29
 80016f6:	f7ff fcef 	bl	80010d8 <NRF24L01p_read_register>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f023 0302 	bic.w	r3, r3, #2
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4619      	mov	r1, r3
 8001704:	201d      	movs	r0, #29
 8001706:	f7ff fd30 	bl	800116a <NRF24L01p_write_register>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <NRF24L01p_enable_dynamic_payload_with_no_ack>:



void NRF24L01p_enable_dynamic_payload_with_no_ack(bool sel){
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
	if(sel) NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) | (_NRF24L01_FEATURE_EN_DYN_ACK));
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00b      	beq.n	800173a <NRF24L01p_enable_dynamic_payload_with_no_ack+0x28>
 8001722:	201d      	movs	r0, #29
 8001724:	f7ff fcd8 	bl	80010d8 <NRF24L01p_read_register>
 8001728:	4603      	mov	r3, r0
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4619      	mov	r1, r3
 8001732:	201d      	movs	r0, #29
 8001734:	f7ff fd19 	bl	800116a <NRF24L01p_write_register>
	    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_DYN_ACK);

}
 8001738:	e00a      	b.n	8001750 <NRF24L01p_enable_dynamic_payload_with_no_ack+0x3e>
	    else NRF24L01p_write_register(_NRF24L01P_REG_FEATURE,NRF24L01p_read_register(_NRF24L01P_REG_FEATURE) & ~_NRF24L01_FEATURE_EN_DYN_ACK);
 800173a:	201d      	movs	r0, #29
 800173c:	f7ff fccc 	bl	80010d8 <NRF24L01p_read_register>
 8001740:	4603      	mov	r3, r0
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	b2db      	uxtb	r3, r3
 8001748:	4619      	mov	r1, r3
 800174a:	201d      	movs	r0, #29
 800174c:	f7ff fd0d 	bl	800116a <NRF24L01p_write_register>
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <NRF24L01p_port_Initialize>:
static GPIO_InitTypeDef nrf24l01p_CSN_pin_Struct = {NRF24L01P_CSN_PIN,GPIO_MODE_OUTPUT_PP,GPIO_NOPULL,GPIO_SPEED_FREQ_LOW,};
static GPIO_InitTypeDef nrf24l01p_IRQ_pin_Struct = {NRF24L01P_IRQ_PIN,GPIO_MODE_IT_FALLING,GPIO_NOPULL,GPIO_SPEED_FREQ_LOW,};



void NRF24L01p_port_Initialize(){
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
	NRF24L01p_port_SPI_initialize();
 800175e:	f000 f865 	bl	800182c <NRF24L01p_port_SPI_initialize>

	/* Enable GPIOA clock */
	//__HAL_RCC_GPIOA_CLK_ENABLE();
	//__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <NRF24L01p_port_Initialize+0x3c>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <NRF24L01p_port_Initialize+0x3c>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <NRF24L01p_port_Initialize+0x3c>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]


	HAL_SPI_Init(&nrf24l01p_SpiHandle);
 800177a:	4807      	ldr	r0, [pc, #28]	; (8001798 <NRF24L01p_port_Initialize+0x40>)
 800177c:	f003 fefe 	bl	800557c <HAL_SPI_Init>

	NRF24L01p_port_Pin_CE_Initialize();
 8001780:	f000 f80c 	bl	800179c <NRF24L01p_port_Pin_CE_Initialize>
	NRF24L01p_port_Pin_CSN_Initialize();
 8001784:	f000 f816 	bl	80017b4 <NRF24L01p_port_Pin_CSN_Initialize>
	NRF24L01p_port_Pin_IRQ_Initialize();
 8001788:	f000 f820 	bl	80017cc <NRF24L01p_port_Pin_IRQ_Initialize>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	200000e8 	.word	0x200000e8

0800179c <NRF24L01p_port_Pin_CE_Initialize>:
void NRF24L01p_port_DeInitialize(){
	HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
}
void NRF24L01p_port_Pin_CE_Initialize(){
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_CE_PORT, &nrf24l01p_CE_pin_Struct);
 80017a0:	4902      	ldr	r1, [pc, #8]	; (80017ac <NRF24L01p_port_Pin_CE_Initialize+0x10>)
 80017a2:	4803      	ldr	r0, [pc, #12]	; (80017b0 <NRF24L01p_port_Pin_CE_Initialize+0x14>)
 80017a4:	f000 ffd6 	bl	8002754 <HAL_GPIO_Init>
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000004 	.word	0x20000004
 80017b0:	48000800 	.word	0x48000800

080017b4 <NRF24L01p_port_Pin_CSN_Initialize>:
void NRF24L01p_port_Pin_CSN_Initialize(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_CSN_PORT, &nrf24l01p_CSN_pin_Struct);
 80017b8:	4902      	ldr	r1, [pc, #8]	; (80017c4 <NRF24L01p_port_Pin_CSN_Initialize+0x10>)
 80017ba:	4803      	ldr	r0, [pc, #12]	; (80017c8 <NRF24L01p_port_Pin_CSN_Initialize+0x14>)
 80017bc:	f000 ffca 	bl	8002754 <HAL_GPIO_Init>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000018 	.word	0x20000018
 80017c8:	48000800 	.word	0x48000800

080017cc <NRF24L01p_port_Pin_IRQ_Initialize>:
void NRF24L01p_port_Pin_IRQ_Initialize(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(NRF24L01P_IRQ_PORT, &nrf24l01p_IRQ_pin_Struct);
 80017d0:	4902      	ldr	r1, [pc, #8]	; (80017dc <NRF24L01p_port_Pin_IRQ_Initialize+0x10>)
 80017d2:	4803      	ldr	r0, [pc, #12]	; (80017e0 <NRF24L01p_port_Pin_IRQ_Initialize+0x14>)
 80017d4:	f000 ffbe 	bl	8002754 <HAL_GPIO_Init>

	//HAL_NVIC_SetPriority(EXTI9_5_IRQn, 10, 0);//------------------------------------------------
	//HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//---------------------------------------------------------
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	2000002c 	.word	0x2000002c
 80017e0:	48000800 	.word	0x48000800

080017e4 <NRF24L01p_port_write_Pin_CE>:
	return HAL_GPIO_ReadPin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN);
}
bool NRF24L01p_port_read_Pin_CSN(){
	return HAL_GPIO_ReadPin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN);
}
void NRF24L01p_port_write_Pin_CE(bool val){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NRF24L01P_CE_PORT, NRF24L01P_CE_PIN, (GPIO_PinState)val);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	461a      	mov	r2, r3
 80017f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f6:	4803      	ldr	r0, [pc, #12]	; (8001804 <NRF24L01p_port_write_Pin_CE+0x20>)
 80017f8:	f001 f926 	bl	8002a48 <HAL_GPIO_WritePin>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	48000800 	.word	0x48000800

08001808 <NRF24L01p_port_write_Pin_CSN>:
void NRF24L01p_port_write_Pin_CSN(bool val){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NRF24L01P_CSN_PORT, NRF24L01P_CSN_PIN, (GPIO_PinState)val);
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	461a      	mov	r2, r3
 8001816:	f44f 7100 	mov.w	r1, #512	; 0x200
 800181a:	4803      	ldr	r0, [pc, #12]	; (8001828 <NRF24L01p_port_write_Pin_CSN+0x20>)
 800181c:	f001 f914 	bl	8002a48 <HAL_GPIO_WritePin>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	48000800 	.word	0x48000800

0800182c <NRF24L01p_port_SPI_initialize>:
void NRF24L01p_port_SPI_initialize(){
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
	// TODO Auto-generated destructor stub
	/*##-1- Configure the SPI peripheral #######################################*/
	/* Set the SPI parameters */
	nrf24l01p_SpiHandle.Instance               = NRF24L01P_SPIx;
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001834:	4a41      	ldr	r2, [pc, #260]	; (800193c <NRF24L01p_port_SPI_initialize+0x110>)
 8001836:	601a      	str	r2, [r3, #0]
	nrf24l01p_SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001838:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <NRF24L01p_port_SPI_initialize+0x10c>)
 800183a:	2238      	movs	r2, #56	; 0x38
 800183c:	61da      	str	r2, [r3, #28]
	nrf24l01p_SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800183e:	4b3e      	ldr	r3, [pc, #248]	; (8001938 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
	nrf24l01p_SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001844:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
	nrf24l01p_SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800184a:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <NRF24L01p_port_SPI_initialize+0x10c>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
	nrf24l01p_SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8001850:	4b39      	ldr	r3, [pc, #228]	; (8001938 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001852:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001856:	60da      	str	r2, [r3, #12]
	nrf24l01p_SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001858:	4b37      	ldr	r3, [pc, #220]	; (8001938 <NRF24L01p_port_SPI_initialize+0x10c>)
 800185a:	2200      	movs	r2, #0
 800185c:	621a      	str	r2, [r3, #32]
	nrf24l01p_SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001860:	2200      	movs	r2, #0
 8001862:	625a      	str	r2, [r3, #36]	; 0x24
	nrf24l01p_SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001864:	4b34      	ldr	r3, [pc, #208]	; (8001938 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001866:	2200      	movs	r2, #0
 8001868:	629a      	str	r2, [r3, #40]	; 0x28
	nrf24l01p_SpiHandle.Init.CRCPolynomial     = 7;
 800186a:	4b33      	ldr	r3, [pc, #204]	; (8001938 <NRF24L01p_port_SPI_initialize+0x10c>)
 800186c:	2207      	movs	r2, #7
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
	//nrf24l01p_SpiHandle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
	nrf24l01p_SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <NRF24L01p_port_SPI_initialize+0x10c>)
 8001872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001876:	619a      	str	r2, [r3, #24]
	//nrf24l01p_SpiHandle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;

	nrf24l01p_SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <NRF24L01p_port_SPI_initialize+0x10c>)
 800187a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800187e:	605a      	str	r2, [r3, #4]

	GPIO_InitTypeDef  GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	NRF24L01P_SPIx_SCK_GPIO_CLK_ENABLE();
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <NRF24L01p_port_SPI_initialize+0x114>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	4a2e      	ldr	r2, [pc, #184]	; (8001940 <NRF24L01p_port_SPI_initialize+0x114>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188c:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <NRF24L01p_port_SPI_initialize+0x114>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]
	NRF24L01P_SPIx_MISO_GPIO_CLK_ENABLE();
 8001898:	4b29      	ldr	r3, [pc, #164]	; (8001940 <NRF24L01p_port_SPI_initialize+0x114>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	4a28      	ldr	r2, [pc, #160]	; (8001940 <NRF24L01p_port_SPI_initialize+0x114>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a4:	4b26      	ldr	r3, [pc, #152]	; (8001940 <NRF24L01p_port_SPI_initialize+0x114>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
	NRF24L01P_SPIx_MOSI_GPIO_CLK_ENABLE();
 80018b0:	4b23      	ldr	r3, [pc, #140]	; (8001940 <NRF24L01p_port_SPI_initialize+0x114>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	4a22      	ldr	r2, [pc, #136]	; (8001940 <NRF24L01p_port_SPI_initialize+0x114>)
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018bc:	4b20      	ldr	r3, [pc, #128]	; (8001940 <NRF24L01p_port_SPI_initialize+0x114>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
	/* Enable SPI clock */
	NRF24L01P_SPIx_CLK_ENABLE();
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <NRF24L01p_port_SPI_initialize+0x114>)
 80018ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018cc:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <NRF24L01p_port_SPI_initialize+0x114>)
 80018ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d2:	6593      	str	r3, [r2, #88]	; 0x58
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <NRF24L01p_port_SPI_initialize+0x114>)
 80018d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* SPI SCK GPIO pin configuration  */
	GPIO_InitStruct.Pin       = NRF24L01P_SPIx_SCK_PIN;
 80018e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80018ee:	2302      	movs	r3, #2
 80018f0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_SCK_AF;
 80018f2:	2306      	movs	r3, #6
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4811      	ldr	r0, [pc, #68]	; (8001944 <NRF24L01p_port_SPI_initialize+0x118>)
 80018fe:	f000 ff29 	bl	8002754 <HAL_GPIO_Init>

	/* SPI MISO GPIO pin configuration  */
	GPIO_InitStruct.Pin = NRF24L01P_SPIx_MISO_PIN;
 8001902:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001906:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_MISO_AF;
 8001908:	2306      	movs	r3, #6
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	480c      	ldr	r0, [pc, #48]	; (8001944 <NRF24L01p_port_SPI_initialize+0x118>)
 8001914:	f000 ff1e 	bl	8002754 <HAL_GPIO_Init>

	/* SPI MOSI GPIO pin configuration  */
	GPIO_InitStruct.Pin = NRF24L01P_SPIx_MOSI_PIN;
 8001918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = NRF24L01P_SPIx_MOSI_AF;
 800191e:	2306      	movs	r3, #6
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(NRF24L01P_SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	4806      	ldr	r0, [pc, #24]	; (8001944 <NRF24L01p_port_SPI_initialize+0x118>)
 800192a:	f000 ff13 	bl	8002754 <HAL_GPIO_Init>
}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200000e8 	.word	0x200000e8
 800193c:	40003c00 	.word	0x40003c00
 8001940:	40021000 	.word	0x40021000
 8001944:	48000800 	.word	0x48000800

08001948 <NRF24L01p_port_SPI_Transcieve>:
int NRF24L01p_port_SPI_Transcieve(uint8_t *dataOut, uint8_t *dataIn, unsigned int size){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af02      	add	r7, sp, #8
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
	return HAL_SPI_TransmitReceive(&nrf24l01p_SpiHandle, dataOut, dataIn, size,1000);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	b29a      	uxth	r2, r3
 8001958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	4613      	mov	r3, r2
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	68f9      	ldr	r1, [r7, #12]
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <NRF24L01p_port_SPI_Transcieve+0x2c>)
 8001966:	f003 fff9 	bl	800595c <HAL_SPI_TransmitReceive>
 800196a:	4603      	mov	r3, r0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200000e8 	.word	0x200000e8

08001978 <NRF24L01p_port_DelayMs>:
int NRF24L01p_port_SPI_Receive(uint8_t *data, unsigned int size){
	HAL_SPI_Receive(&nrf24l01p_SpiHandle, data, size, 1000);
}


void NRF24L01p_port_DelayMs(unsigned int ms){
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fde3 	bl	800254c <HAL_Delay>
	//vTaskDelay ((ms / portTICK_PERIOD_MS));

}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <NRF24L01p_port_DelayUs>:
void NRF24L01p_port_DelayUs(unsigned int us){
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	unsigned int ms = us/1000;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <NRF24L01p_port_DelayUs+0x28>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	60fb      	str	r3, [r7, #12]
	HAL_Delay(ms + 1);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3301      	adds	r3, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 fdcf 	bl	800254c <HAL_Delay>
	//vTaskDelay (( ms / portTICK_PERIOD_MS));
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	10624dd3 	.word	0x10624dd3

080019bc <Si7006_port_i2c_init>:





Si7006_error_t Si7006_port_i2c_init(void){
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

}
 80019c0:	bf00      	nop
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <Si7006_port_i2c_transmit>:
Si7006_error_t Si7006_port_i2c_transmit(uint8_t *data, unsigned int size){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1,(0x40<<1) ,data,size, 1000);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <Si7006_port_i2c_transmit+0x38>)
 80019e8:	f001 f8d6 	bl	8002b98 <HAL_I2C_Master_Transmit>
 80019ec:	4603      	mov	r3, r0
 80019ee:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <Si7006_port_i2c_transmit+0x2e>
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <Si7006_port_i2c_transmit+0x30>
	else return SI7006_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000ac98 	.word	0x2000ac98

08001a08 <Si7006_port_i2c_receive>:
Si7006_error_t Si7006_port_i2c_receive(uint8_t *data, unsigned int size){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c1,(0x40<<1) ,data,size, 1000);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <Si7006_port_i2c_receive+0x38>)
 8001a24:	f001 f9ac 	bl	8002d80 <HAL_I2C_Master_Receive>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	73fb      	strb	r3, [r7, #15]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <Si7006_port_i2c_receive+0x2e>
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <Si7006_port_i2c_receive+0x30>
	else return SI7006_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	2000ac98 	.word	0x2000ac98

08001a44 <Si7006_port_check_hardware>:
Si7006_error_t Si7006_port_check_hardware(){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1,(0x40<<1), 1000, 1000);
 8001a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	4807      	ldr	r0, [pc, #28]	; (8001a74 <Si7006_port_check_hardware+0x30>)
 8001a56:	f001 fa89 	bl	8002f6c <HAL_I2C_IsDeviceReady>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
	if(ret == HAL_OK) return SI7006_SUCCESS;
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <Si7006_port_check_hardware+0x24>
 8001a64:	2300      	movs	r3, #0
 8001a66:	e000      	b.n	8001a6a <Si7006_port_check_hardware+0x26>
	else return SI7006_ERROR;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000ac98 	.word	0x2000ac98

08001a78 <Si7006_port_delay>:
Si7006_error_t Si7006_port_delay(unsigned int ms){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

	HAL_Delay(ms);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 fd63 	bl	800254c <HAL_Delay>
}
 8001a86:	bf00      	nop
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <Si7006_port_init>:


Si7006_error_t Si7006_port_init(void){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	Si7006.init = Si7006_port_init;
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <Si7006_port_init+0x34>)
 8001a96:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <Si7006_port_init+0x38>)
 8001a98:	601a      	str	r2, [r3, #0]
	Si7006.i2c_init = Si7006_port_i2c_init;
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <Si7006_port_init+0x34>)
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <Si7006_port_init+0x3c>)
 8001a9e:	605a      	str	r2, [r3, #4]
	Si7006.i2c_transmit = Si7006_port_i2c_transmit;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <Si7006_port_init+0x34>)
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <Si7006_port_init+0x40>)
 8001aa4:	609a      	str	r2, [r3, #8]
	Si7006.i2c_receive = Si7006_port_i2c_receive;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <Si7006_port_init+0x34>)
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <Si7006_port_init+0x44>)
 8001aaa:	60da      	str	r2, [r3, #12]
	Si7006.check_hardware = Si7006_port_check_hardware;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <Si7006_port_init+0x34>)
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <Si7006_port_init+0x48>)
 8001ab0:	611a      	str	r2, [r3, #16]
	Si7006.delay = Si7006_port_delay;
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <Si7006_port_init+0x34>)
 8001ab4:	4a09      	ldr	r2, [pc, #36]	; (8001adc <Si7006_port_init+0x4c>)
 8001ab6:	615a      	str	r2, [r3, #20]

	return Si7006_port_check_hardware();
 8001ab8:	f7ff ffc4 	bl	8001a44 <Si7006_port_check_hardware>
 8001abc:	4603      	mov	r3, r0

}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000aabc 	.word	0x2000aabc
 8001ac8:	08001a91 	.word	0x08001a91
 8001acc:	080019bd 	.word	0x080019bd
 8001ad0:	080019cd 	.word	0x080019cd
 8001ad4:	08001a09 	.word	0x08001a09
 8001ad8:	08001a45 	.word	0x08001a45
 8001adc:	08001a79 	.word	0x08001a79

08001ae0 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af2:	f000 fcf4 	bl	80024de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af6:	f000 f80f 	bl	8001b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afa:	f000 f98f 	bl	8001e1c <MX_GPIO_Init>
  MX_SPI2_Init();
 8001afe:	f000 f8e1 	bl	8001cc4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001b02:	f000 f91d 	bl	8001d40 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001b06:	f000 f959 	bl	8001dbc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001b0a:	f000 f89b 	bl	8001c44 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  cygnini();
 8001b0e:	f7fe fd5f 	bl	80005d0 <cygnini>
  return 0;
 8001b12:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0ae      	sub	sp, #184	; 0xb8
 8001b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b22:	2244      	movs	r2, #68	; 0x44
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f00a f8ff 	bl	800bd2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b2c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	2260      	movs	r2, #96	; 0x60
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f00a f8f1 	bl	800bd2a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001b48:	f002 fb0a 	bl	8004160 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b4c:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <SystemClock_Config+0x128>)
 8001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b52:	4a3b      	ldr	r2, [pc, #236]	; (8001c40 <SystemClock_Config+0x128>)
 8001b54:	f023 0318 	bic.w	r3, r3, #24
 8001b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b5c:	2314      	movs	r3, #20
 8001b5e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b60:	2301      	movs	r3, #1
 8001b62:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b64:	2301      	movs	r3, #1
 8001b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b70:	2360      	movs	r3, #96	; 0x60
 8001b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b76:	2302      	movs	r3, #2
 8001b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001b88:	2324      	movs	r3, #36	; 0x24
 8001b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b8e:	2307      	movs	r3, #7
 8001b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b94:	2302      	movs	r3, #2
 8001b96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 fb4f 	bl	8004248 <HAL_RCC_OscConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001bb0:	f000 f9e8 	bl	8001f84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bc8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001bcc:	2104      	movs	r1, #4
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 ff5a 	bl	8004a88 <HAL_RCC_ClockConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001bda:	f000 f9d3 	bl	8001f84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001bde:	f242 0341 	movw	r3, #8257	; 0x2041
 8001be2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001bec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bf0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001bfa:	2318      	movs	r3, #24
 8001bfc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001c0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c0e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c10:	463b      	mov	r3, r7
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 f96e 	bl	8004ef4 <HAL_RCCEx_PeriphCLKConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8001c1e:	f000 f9b1 	bl	8001f84 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c26:	f002 fab9 	bl	800419c <HAL_PWREx_ControlVoltageScaling>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001c30:	f000 f9a8 	bl	8001f84 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001c34:	f003 fba2 	bl	800537c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001c38:	bf00      	nop
 8001c3a:	37b8      	adds	r7, #184	; 0xb8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000

08001c44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <MX_I2C1_Init+0x74>)
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <MX_I2C1_Init+0x78>)
 8001c4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <MX_I2C1_Init+0x74>)
 8001c50:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <MX_I2C1_Init+0x7c>)
 8001c52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <MX_I2C1_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <MX_I2C1_Init+0x74>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_I2C1_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <MX_I2C1_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <MX_I2C1_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_I2C1_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <MX_I2C1_Init+0x74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c7e:	480e      	ldr	r0, [pc, #56]	; (8001cb8 <MX_I2C1_Init+0x74>)
 8001c80:	f000 fefa 	bl	8002a78 <HAL_I2C_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c8a:	f000 f97b 	bl	8001f84 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <MX_I2C1_Init+0x74>)
 8001c92:	f001 fc53 	bl	800353c <HAL_I2CEx_ConfigAnalogFilter>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c9c:	f000 f972 	bl	8001f84 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_I2C1_Init+0x74>)
 8001ca4:	f001 fc95 	bl	80035d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cae:	f000 f969 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000ac98 	.word	0x2000ac98
 8001cbc:	40005400 	.word	0x40005400
 8001cc0:	10808dd3 	.word	0x10808dd3

08001cc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001cca:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <MX_SPI2_Init+0x78>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001cde:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ce2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001d12:	2207      	movs	r2, #7
 8001d14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001d1e:	2208      	movs	r2, #8
 8001d20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_SPI2_Init+0x74>)
 8001d24:	f003 fc2a 	bl	800557c <HAL_SPI_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d2e:	f000 f929 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000ac30 	.word	0x2000ac30
 8001d3c:	40003800 	.word	0x40003800

08001d40 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d46:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <MX_SPI3_Init+0x78>)
 8001d48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d52:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d58:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d5e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d72:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d8e:	2207      	movs	r2, #7
 8001d90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_SPI3_Init+0x74>)
 8001da0:	f003 fbec 	bl	800557c <HAL_SPI_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001daa:	f000 f8eb 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000ace4 	.word	0x2000ace4
 8001db8:	40003c00 	.word	0x40003c00

08001dbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <MX_USART1_UART_Init+0x58>)
 8001dc2:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <MX_USART1_UART_Init+0x5c>)
 8001dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <MX_USART1_UART_Init+0x58>)
 8001dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_USART1_UART_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <MX_USART1_UART_Init+0x58>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_USART1_UART_Init+0x58>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_USART1_UART_Init+0x58>)
 8001de2:	220c      	movs	r2, #12
 8001de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_USART1_UART_Init+0x58>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_USART1_UART_Init+0x58>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <MX_USART1_UART_Init+0x58>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_USART1_UART_Init+0x58>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_USART1_UART_Init+0x58>)
 8001e00:	f004 fb06 	bl	8006410 <HAL_UART_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e0a:	f000 f8bb 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000ad48 	.word	0x2000ad48
 8001e18:	40013800 	.word	0x40013800

08001e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e22:	f107 030c 	add.w	r3, r7, #12
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <MX_GPIO_Init+0x134>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	4a46      	ldr	r2, [pc, #280]	; (8001f50 <MX_GPIO_Init+0x134>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3e:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <MX_GPIO_Init+0x134>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <MX_GPIO_Init+0x134>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	4a40      	ldr	r2, [pc, #256]	; (8001f50 <MX_GPIO_Init+0x134>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <MX_GPIO_Init+0x134>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <MX_GPIO_Init+0x134>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	4a3a      	ldr	r2, [pc, #232]	; (8001f50 <MX_GPIO_Init+0x134>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6e:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <MX_GPIO_Init+0x134>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e84:	f000 fde0 	bl	8002a48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f44f 7158 	mov.w	r1, #864	; 0x360
 8001e8e:	4831      	ldr	r0, [pc, #196]	; (8001f54 <MX_GPIO_Init+0x138>)
 8001e90:	f000 fdda 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001e9a:	482f      	ldr	r0, [pc, #188]	; (8001f58 <MX_GPIO_Init+0x13c>)
 8001e9c:	f000 fdd4 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ea0:	230f      	movs	r3, #15
 8001ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb6:	f000 fc4d 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
 8001eba:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8001ebe:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed6:	f000 fc3d 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001eda:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4818      	ldr	r0, [pc, #96]	; (8001f54 <MX_GPIO_Init+0x138>)
 8001ef4:	f000 fc2e 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <MX_GPIO_Init+0x140>)
 8001efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4813      	ldr	r0, [pc, #76]	; (8001f58 <MX_GPIO_Init+0x13c>)
 8001f0c:	f000 fc22 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8001f10:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	4619      	mov	r1, r3
 8001f28:	480b      	ldr	r0, [pc, #44]	; (8001f58 <MX_GPIO_Init+0x13c>)
 8001f2a:	f000 fc13 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <MX_GPIO_Init+0x140>)
 8001f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4804      	ldr	r0, [pc, #16]	; (8001f54 <MX_GPIO_Init+0x138>)
 8001f42:	f000 fc07 	bl	8002754 <HAL_GPIO_Init>

}
 8001f46:	bf00      	nop
 8001f48:	3720      	adds	r7, #32
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	48000800 	.word	0x48000800
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	10110000 	.word	0x10110000

08001f60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d101      	bne.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f72:	f000 facd 	bl	8002510 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40012c00 	.word	0x40012c00

08001f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_MspInit+0x4c>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	210f      	movs	r1, #15
 8001fce:	f06f 0001 	mvn.w	r0, #1
 8001fd2:	f000 fb95 	bl	8002700 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a18      	ldr	r2, [pc, #96]	; (8002064 <HAL_I2C_MspInit+0x80>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d129      	bne.n	800205a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_I2C_MspInit+0x84>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_I2C_MspInit+0x84>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_I2C_MspInit+0x84>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800201e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002024:	2312      	movs	r3, #18
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002028:	2301      	movs	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002030:	2304      	movs	r3, #4
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203e:	f000 fb89 	bl	8002754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_I2C_MspInit+0x84>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <HAL_I2C_MspInit+0x84>)
 8002048:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800204c:	6593      	str	r3, [r2, #88]	; 0x58
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_I2C_MspInit+0x84>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	; 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40005400 	.word	0x40005400
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	; 0x30
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a2f      	ldr	r2, [pc, #188]	; (8002148 <HAL_SPI_MspInit+0xdc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d129      	bne.n	80020e2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800208e:	4b2f      	ldr	r3, [pc, #188]	; (800214c <HAL_SPI_MspInit+0xe0>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	4a2e      	ldr	r2, [pc, #184]	; (800214c <HAL_SPI_MspInit+0xe0>)
 8002094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002098:	6593      	str	r3, [r2, #88]	; 0x58
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <HAL_SPI_MspInit+0xe0>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a6:	4b29      	ldr	r3, [pc, #164]	; (800214c <HAL_SPI_MspInit+0xe0>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	4a28      	ldr	r2, [pc, #160]	; (800214c <HAL_SPI_MspInit+0xe0>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_SPI_MspInit+0xe0>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80020be:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020d0:	2305      	movs	r3, #5
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	4619      	mov	r1, r3
 80020da:	481d      	ldr	r0, [pc, #116]	; (8002150 <HAL_SPI_MspInit+0xe4>)
 80020dc:	f000 fb3a 	bl	8002754 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020e0:	e02d      	b.n	800213e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_SPI_MspInit+0xe8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d128      	bne.n	800213e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020ec:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_SPI_MspInit+0xe0>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	4a16      	ldr	r2, [pc, #88]	; (800214c <HAL_SPI_MspInit+0xe0>)
 80020f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f6:	6593      	str	r3, [r2, #88]	; 0x58
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_SPI_MspInit+0xe0>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_SPI_MspInit+0xe0>)
 8002106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002108:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_SPI_MspInit+0xe0>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_SPI_MspInit+0xe0>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800211c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212a:	2303      	movs	r3, #3
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800212e:	2306      	movs	r3, #6
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	4619      	mov	r1, r3
 8002138:	4807      	ldr	r0, [pc, #28]	; (8002158 <HAL_SPI_MspInit+0xec>)
 800213a:	f000 fb0b 	bl	8002754 <HAL_GPIO_Init>
}
 800213e:	bf00      	nop
 8002140:	3730      	adds	r7, #48	; 0x30
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40003800 	.word	0x40003800
 800214c:	40021000 	.word	0x40021000
 8002150:	48000400 	.word	0x48000400
 8002154:	40003c00 	.word	0x40003c00
 8002158:	48000800 	.word	0x48000800

0800215c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_UART_MspInit+0x7c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d127      	bne.n	80021ce <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_UART_MspInit+0x80>)
 8002180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002182:	4a16      	ldr	r2, [pc, #88]	; (80021dc <HAL_UART_MspInit+0x80>)
 8002184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002188:	6613      	str	r3, [r2, #96]	; 0x60
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_UART_MspInit+0x80>)
 800218c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_UART_MspInit+0x80>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <HAL_UART_MspInit+0x80>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_UART_MspInit+0x80>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ae:	23c0      	movs	r3, #192	; 0xc0
 80021b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021be:	2307      	movs	r3, #7
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	4805      	ldr	r0, [pc, #20]	; (80021e0 <HAL_UART_MspInit+0x84>)
 80021ca:	f000 fac3 	bl	8002754 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40021000 	.word	0x40021000
 80021e0:	48000400 	.word	0x48000400

080021e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	; 0x30
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80021f4:	2200      	movs	r2, #0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	2019      	movs	r0, #25
 80021fa:	f000 fa81 	bl	8002700 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80021fe:	2019      	movs	r0, #25
 8002200:	f000 fa9a 	bl	8002738 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_InitTick+0x9c>)
 8002206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002208:	4a1d      	ldr	r2, [pc, #116]	; (8002280 <HAL_InitTick+0x9c>)
 800220a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800220e:	6613      	str	r3, [r2, #96]	; 0x60
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HAL_InitTick+0x9c>)
 8002212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800221c:	f107 0210 	add.w	r2, r7, #16
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f002 fdd2 	bl	8004dd0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800222c:	f002 fdba 	bl	8004da4 <HAL_RCC_GetPCLK2Freq>
 8002230:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	4a13      	ldr	r2, [pc, #76]	; (8002284 <HAL_InitTick+0xa0>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0c9b      	lsrs	r3, r3, #18
 800223c:	3b01      	subs	r3, #1
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_InitTick+0xa4>)
 8002242:	4a12      	ldr	r2, [pc, #72]	; (800228c <HAL_InitTick+0xa8>)
 8002244:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_InitTick+0xa4>)
 8002248:	f240 32e7 	movw	r2, #999	; 0x3e7
 800224c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800224e:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <HAL_InitTick+0xa4>)
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <HAL_InitTick+0xa4>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_InitTick+0xa4>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002260:	4809      	ldr	r0, [pc, #36]	; (8002288 <HAL_InitTick+0xa4>)
 8002262:	f003 feab 	bl	8005fbc <HAL_TIM_Base_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800226c:	4806      	ldr	r0, [pc, #24]	; (8002288 <HAL_InitTick+0xa4>)
 800226e:	f003 fedb 	bl	8006028 <HAL_TIM_Base_Start_IT>
 8002272:	4603      	mov	r3, r0
 8002274:	e000      	b.n	8002278 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
}
 8002278:	4618      	mov	r0, r3
 800227a:	3730      	adds	r7, #48	; 0x30
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	431bde83 	.word	0x431bde83
 8002288:	2000adc8 	.word	0x2000adc8
 800228c:	40012c00 	.word	0x40012c00

08002290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a2:	e7fe      	b.n	80022a2 <HardFault_Handler+0x4>

080022a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <MemManage_Handler+0x4>

080022aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <BusFault_Handler+0x4>

080022b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <UsageFault_Handler+0x4>

080022b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80022ca:	f003 fed7 	bl	800607c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000adc8 	.word	0x2000adc8

080022d8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <USB_IRQHandler+0x10>)
 80022de:	f001 f9c4 	bl	800366a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000ae4c 	.word	0x2000ae4c

080022ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e00a      	b.n	8002314 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022fe:	f7fe f9d2 	bl	80006a6 <__io_getchar>
 8002302:	4601      	mov	r1, r0
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	60ba      	str	r2, [r7, #8]
 800230a:	b2ca      	uxtb	r2, r1
 800230c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3301      	adds	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	dbf0      	blt.n	80022fe <_read+0x12>
	}

return len;
 800231c:	687b      	ldr	r3, [r7, #4]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e009      	b.n	800234c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	60ba      	str	r2, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f9a3 	bl	800068c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	dbf1      	blt.n	8002338 <_write+0x12>
	}
	return len;
 8002354:	687b      	ldr	r3, [r7, #4]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_close>:

int _close(int file)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
	return -1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002386:	605a      	str	r2, [r3, #4]
	return 0;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <_isatty>:

int _isatty(int file)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
	return 1;
 800239e:	2301      	movs	r3, #1
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
	return 0;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <_sbrk+0x50>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <_sbrk+0x16>
		heap_end = &end;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <_sbrk+0x50>)
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <_sbrk+0x54>)
 80023dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <_sbrk+0x50>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <_sbrk+0x50>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	466a      	mov	r2, sp
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d907      	bls.n	8002402 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023f2:	f009 fc65 	bl	800bcc0 <__errno>
 80023f6:	4602      	mov	r2, r0
 80023f8:	230c      	movs	r3, #12
 80023fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002400:	e006      	b.n	8002410 <_sbrk+0x48>
	}

	heap_end += incr;
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <_sbrk+0x50>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	4a03      	ldr	r2, [pc, #12]	; (8002418 <_sbrk+0x50>)
 800240c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	2000014c 	.word	0x2000014c
 800241c:	2000b0c8 	.word	0x2000b0c8

08002420 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <SystemInit+0x64>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <SystemInit+0x64>)
 800242c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <SystemInit+0x68>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a13      	ldr	r2, [pc, #76]	; (8002488 <SystemInit+0x68>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <SystemInit+0x68>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <SystemInit+0x68>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <SystemInit+0x68>)
 800244c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002450:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002454:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <SystemInit+0x68>)
 8002458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800245c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <SystemInit+0x68>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a09      	ldr	r2, [pc, #36]	; (8002488 <SystemInit+0x68>)
 8002464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <SystemInit+0x68>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <SystemInit+0x64>)
 8002472:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002476:	609a      	str	r2, [r3, #8]
#endif
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00
 8002488:	40021000 	.word	0x40021000

0800248c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800248c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002490:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002492:	e003      	b.n	800249c <LoopCopyDataInit>

08002494 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002496:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002498:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800249a:	3104      	adds	r1, #4

0800249c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800249c:	480b      	ldr	r0, [pc, #44]	; (80024cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80024a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024a4:	d3f6      	bcc.n	8002494 <CopyDataInit>
	ldr	r2, =_sbss
 80024a6:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80024a8:	e002      	b.n	80024b0 <LoopFillZerobss>

080024aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024ac:	f842 3b04 	str.w	r3, [r2], #4

080024b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <LoopForever+0x16>)
	cmp	r2, r3
 80024b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024b4:	d3f9      	bcc.n	80024aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024b6:	f7ff ffb3 	bl	8002420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ba:	f009 fc07 	bl	800bccc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024be:	f7ff fb16 	bl	8001aee <main>

080024c2 <LoopForever>:

LoopForever:
    b LoopForever
 80024c2:	e7fe      	b.n	80024c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024c4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80024c8:	0800d0f0 	.word	0x0800d0f0
	ldr	r0, =_sdata
 80024cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80024d0:	200000b4 	.word	0x200000b4
	ldr	r2, =_sbss
 80024d4:	200000b8 	.word	0x200000b8
	ldr	r3, = _ebss
 80024d8:	2000b0c4 	.word	0x2000b0c4

080024dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024dc:	e7fe      	b.n	80024dc <ADC1_IRQHandler>

080024de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e8:	2003      	movs	r0, #3
 80024ea:	f000 f8fe 	bl	80026ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ee:	2000      	movs	r0, #0
 80024f0:	f7ff fe78 	bl	80021e4 <HAL_InitTick>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	71fb      	strb	r3, [r7, #7]
 80024fe:	e001      	b.n	8002504 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002500:	f7ff fd48 	bl	8001f94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002504:	79fb      	ldrb	r3, [r7, #7]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_IncTick+0x1c>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_IncTick+0x20>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4413      	add	r3, r2
 800251e:	4a03      	ldr	r2, [pc, #12]	; (800252c <HAL_IncTick+0x1c>)
 8002520:	6013      	str	r3, [r2, #0]
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	2000ae08 	.word	0x2000ae08
 8002530:	20000048 	.word	0x20000048

08002534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <HAL_GetTick+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	2000ae08 	.word	0x2000ae08

0800254c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff ffee 	bl	8002534 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d004      	beq.n	8002570 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_Delay+0x40>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4413      	add	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002570:	bf00      	nop
 8002572:	f7ff ffdf 	bl	8002534 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	429a      	cmp	r2, r3
 8002580:	d8f7      	bhi.n	8002572 <HAL_Delay+0x26>
  {
  }
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000048 	.word	0x20000048

08002590 <__NVIC_SetPriorityGrouping>:
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c2:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_GetPriorityGrouping>:
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <__NVIC_GetPriorityGrouping+0x18>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	f003 0307 	and.w	r3, r3, #7
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_EnableIRQ>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	2b00      	cmp	r3, #0
 8002604:	db0b      	blt.n	800261e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	4907      	ldr	r1, [pc, #28]	; (800262c <__NVIC_EnableIRQ+0x38>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	2001      	movs	r0, #1
 8002616:	fa00 f202 	lsl.w	r2, r0, r2
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000e100 	.word	0xe000e100

08002630 <__NVIC_SetPriority>:
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0a      	blt.n	800265a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	; (800267c <__NVIC_SetPriority+0x4c>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	440b      	add	r3, r1
 8002654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002658:	e00a      	b.n	8002670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <__NVIC_SetPriority+0x50>)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3b04      	subs	r3, #4
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	440b      	add	r3, r1
 800266e:	761a      	strb	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <NVIC_EncodePriority>:
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	bf28      	it	cs
 80026a2:	2304      	movcs	r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d902      	bls.n	80026b4 <NVIC_EncodePriority+0x30>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b03      	subs	r3, #3
 80026b2:	e000      	b.n	80026b6 <NVIC_EncodePriority+0x32>
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	4313      	orrs	r3, r2
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ff4c 	bl	8002590 <__NVIC_SetPriorityGrouping>
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002712:	f7ff ff61 	bl	80025d8 <__NVIC_GetPriorityGrouping>
 8002716:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	6978      	ldr	r0, [r7, #20]
 800271e:	f7ff ffb1 	bl	8002684 <NVIC_EncodePriority>
 8002722:	4602      	mov	r2, r0
 8002724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff80 	bl	8002630 <__NVIC_SetPriority>
}
 8002730:	bf00      	nop
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff54 	bl	80025f4 <__NVIC_EnableIRQ>
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002762:	e154      	b.n	8002a0e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	2101      	movs	r1, #1
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	4013      	ands	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8146 	beq.w	8002a08 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d00b      	beq.n	800279c <HAL_GPIO_Init+0x48>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d007      	beq.n	800279c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002790:	2b11      	cmp	r3, #17
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b12      	cmp	r3, #18
 800279a:	d130      	bne.n	80027fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027d2:	2201      	movs	r2, #1
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 0201 	and.w	r2, r3, #1
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0xea>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b12      	cmp	r3, #18
 800283c:	d123      	bne.n	8002886 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	08da      	lsrs	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3208      	adds	r2, #8
 8002846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4013      	ands	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	08da      	lsrs	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3208      	adds	r2, #8
 8002880:	6939      	ldr	r1, [r7, #16]
 8002882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	2203      	movs	r2, #3
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0203 	and.w	r2, r3, #3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80a0 	beq.w	8002a08 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c8:	4b58      	ldr	r3, [pc, #352]	; (8002a2c <HAL_GPIO_Init+0x2d8>)
 80028ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028cc:	4a57      	ldr	r2, [pc, #348]	; (8002a2c <HAL_GPIO_Init+0x2d8>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6613      	str	r3, [r2, #96]	; 0x60
 80028d4:	4b55      	ldr	r3, [pc, #340]	; (8002a2c <HAL_GPIO_Init+0x2d8>)
 80028d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028e0:	4a53      	ldr	r2, [pc, #332]	; (8002a30 <HAL_GPIO_Init+0x2dc>)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	3302      	adds	r3, #2
 80028e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	220f      	movs	r2, #15
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800290a:	d019      	beq.n	8002940 <HAL_GPIO_Init+0x1ec>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a49      	ldr	r2, [pc, #292]	; (8002a34 <HAL_GPIO_Init+0x2e0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d013      	beq.n	800293c <HAL_GPIO_Init+0x1e8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a48      	ldr	r2, [pc, #288]	; (8002a38 <HAL_GPIO_Init+0x2e4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00d      	beq.n	8002938 <HAL_GPIO_Init+0x1e4>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a47      	ldr	r2, [pc, #284]	; (8002a3c <HAL_GPIO_Init+0x2e8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d007      	beq.n	8002934 <HAL_GPIO_Init+0x1e0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a46      	ldr	r2, [pc, #280]	; (8002a40 <HAL_GPIO_Init+0x2ec>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d101      	bne.n	8002930 <HAL_GPIO_Init+0x1dc>
 800292c:	2304      	movs	r3, #4
 800292e:	e008      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 8002930:	2307      	movs	r3, #7
 8002932:	e006      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 8002934:	2303      	movs	r3, #3
 8002936:	e004      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 8002938:	2302      	movs	r3, #2
 800293a:	e002      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 8002940:	2300      	movs	r3, #0
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	f002 0203 	and.w	r2, r2, #3
 8002948:	0092      	lsls	r2, r2, #2
 800294a:	4093      	lsls	r3, r2
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002952:	4937      	ldr	r1, [pc, #220]	; (8002a30 <HAL_GPIO_Init+0x2dc>)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3302      	adds	r3, #2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002960:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <HAL_GPIO_Init+0x2f0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	43db      	mvns	r3, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002984:	4a2f      	ldr	r2, [pc, #188]	; (8002a44 <HAL_GPIO_Init+0x2f0>)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800298a:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <HAL_GPIO_Init+0x2f0>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029ae:	4a25      	ldr	r2, [pc, #148]	; (8002a44 <HAL_GPIO_Init+0x2f0>)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_GPIO_Init+0x2f0>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	43db      	mvns	r3, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029d8:	4a1a      	ldr	r2, [pc, #104]	; (8002a44 <HAL_GPIO_Init+0x2f0>)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029de:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_GPIO_Init+0x2f0>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a02:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <HAL_GPIO_Init+0x2f0>)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f47f aea3 	bne.w	8002764 <HAL_GPIO_Init+0x10>
  }
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40010000 	.word	0x40010000
 8002a34:	48000400 	.word	0x48000400
 8002a38:	48000800 	.word	0x48000800
 8002a3c:	48000c00 	.word	0x48000c00
 8002a40:	48001000 	.word	0x48001000
 8002a44:	40010400 	.word	0x40010400

08002a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
 8002a54:	4613      	mov	r3, r2
 8002a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a58:	787b      	ldrb	r3, [r7, #1]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e081      	b.n	8002b8e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff faa0 	bl	8001fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2224      	movs	r2, #36	; 0x24
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ac8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ad8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	e006      	b.n	8002b00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002afe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d104      	bne.n	8002b12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	ea42 0103 	orr.w	r1, r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	021a      	lsls	r2, r3, #8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69d9      	ldr	r1, [r3, #28]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1a      	ldr	r2, [r3, #32]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	817b      	strh	r3, [r7, #10]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	f040 80da 	bne.w	8002d6e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_I2C_Master_Transmit+0x30>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e0d3      	b.n	8002d70 <HAL_I2C_Master_Transmit+0x1d8>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bd0:	f7ff fcb0 	bl	8002534 <HAL_GetTick>
 8002bd4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	2319      	movs	r3, #25
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 faed 	bl	80031c2 <I2C_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0be      	b.n	8002d70 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2221      	movs	r2, #33	; 0x21
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	893a      	ldrh	r2, [r7, #8]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2bff      	cmp	r3, #255	; 0xff
 8002c22:	d90e      	bls.n	8002c42 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	8979      	ldrh	r1, [r7, #10]
 8002c32:	4b51      	ldr	r3, [pc, #324]	; (8002d78 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fc50 	bl	80034e0 <I2C_TransferConfig>
 8002c40:	e06c      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	8979      	ldrh	r1, [r7, #10]
 8002c54:	4b48      	ldr	r3, [pc, #288]	; (8002d78 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fc3f 	bl	80034e0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c62:	e05b      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	6a39      	ldr	r1, [r7, #32]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 faea 	bl	8003242 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e07b      	b.n	8002d70 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d034      	beq.n	8002d1c <HAL_I2C_Master_Transmit+0x184>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d130      	bne.n	8002d1c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fa7c 	bl	80031c2 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e04d      	b.n	8002d70 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2bff      	cmp	r3, #255	; 0xff
 8002cdc:	d90e      	bls.n	8002cfc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	22ff      	movs	r2, #255	; 0xff
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	8979      	ldrh	r1, [r7, #10]
 8002cec:	2300      	movs	r3, #0
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 fbf3 	bl	80034e0 <I2C_TransferConfig>
 8002cfa:	e00f      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	8979      	ldrh	r1, [r7, #10]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fbe2 	bl	80034e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d19e      	bne.n	8002c64 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	6a39      	ldr	r1, [r7, #32]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fac9 	bl	80032c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e01a      	b.n	8002d70 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_I2C_Master_Transmit+0x1e4>)
 8002d4e:	400b      	ands	r3, r1
 8002d50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e000      	b.n	8002d70 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d6e:	2302      	movs	r3, #2
  }
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	80002000 	.word	0x80002000
 8002d7c:	fe00e800 	.word	0xfe00e800

08002d80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	817b      	strh	r3, [r7, #10]
 8002d90:	4613      	mov	r3, r2
 8002d92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	f040 80db 	bne.w	8002f58 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_I2C_Master_Receive+0x30>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e0d4      	b.n	8002f5a <HAL_I2C_Master_Receive+0x1da>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002db8:	f7ff fbbc 	bl	8002534 <HAL_GetTick>
 8002dbc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2319      	movs	r3, #25
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f9f9 	bl	80031c2 <I2C_WaitOnFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0bf      	b.n	8002f5a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2222      	movs	r2, #34	; 0x22
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2210      	movs	r2, #16
 8002de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	893a      	ldrh	r2, [r7, #8]
 8002dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2bff      	cmp	r3, #255	; 0xff
 8002e0a:	d90e      	bls.n	8002e2a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	22ff      	movs	r2, #255	; 0xff
 8002e10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	8979      	ldrh	r1, [r7, #10]
 8002e1a:	4b52      	ldr	r3, [pc, #328]	; (8002f64 <HAL_I2C_Master_Receive+0x1e4>)
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fb5c 	bl	80034e0 <I2C_TransferConfig>
 8002e28:	e06d      	b.n	8002f06 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	8979      	ldrh	r1, [r7, #10]
 8002e3c:	4b49      	ldr	r3, [pc, #292]	; (8002f64 <HAL_I2C_Master_Receive+0x1e4>)
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fb4b 	bl	80034e0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002e4a:	e05c      	b.n	8002f06 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	6a39      	ldr	r1, [r7, #32]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fa73 	bl	800333c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e07c      	b.n	8002f5a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d034      	beq.n	8002f06 <HAL_I2C_Master_Receive+0x186>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d130      	bne.n	8002f06 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f987 	bl	80031c2 <I2C_WaitOnFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e04d      	b.n	8002f5a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2bff      	cmp	r3, #255	; 0xff
 8002ec6:	d90e      	bls.n	8002ee6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	22ff      	movs	r2, #255	; 0xff
 8002ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	8979      	ldrh	r1, [r7, #10]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fafe 	bl	80034e0 <I2C_TransferConfig>
 8002ee4:	e00f      	b.n	8002f06 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	8979      	ldrh	r1, [r7, #10]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 faed 	bl	80034e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d19d      	bne.n	8002e4c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	6a39      	ldr	r1, [r7, #32]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f9d4 	bl	80032c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e01a      	b.n	8002f5a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_I2C_Master_Receive+0x1e8>)
 8002f38:	400b      	ands	r3, r1
 8002f3a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e000      	b.n	8002f5a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
  }
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	80002400 	.word	0x80002400
 8002f68:	fe00e800 	.word	0xfe00e800

08002f6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	f040 80f1 	bne.w	8003170 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f9c:	d101      	bne.n	8002fa2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e0e7      	b.n	8003172 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_I2C_IsDeviceReady+0x44>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0e0      	b.n	8003172 <HAL_I2C_IsDeviceReady+0x206>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2224      	movs	r2, #36	; 0x24
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_I2C_IsDeviceReady+0x72>
 8002fce:	897b      	ldrh	r3, [r7, #10]
 8002fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fdc:	e004      	b.n	8002fe8 <HAL_I2C_IsDeviceReady+0x7c>
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002fee:	f7ff faa1 	bl	8002534 <HAL_GetTick>
 8002ff2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b10      	cmp	r3, #16
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003020:	e034      	b.n	800308c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d01a      	beq.n	8003060 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800302a:	f7ff fa83 	bl	8002534 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <HAL_I2C_IsDeviceReady+0xd4>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10f      	bne.n	8003060 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e088      	b.n	8003172 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b20      	cmp	r3, #32
 800306c:	bf0c      	ite	eq
 800306e:	2301      	moveq	r3, #1
 8003070:	2300      	movne	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b10      	cmp	r3, #16
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800308c:	7ffb      	ldrb	r3, [r7, #31]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <HAL_I2C_IsDeviceReady+0x12c>
 8003092:	7fbb      	ldrb	r3, [r7, #30]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0c4      	beq.n	8003022 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b10      	cmp	r3, #16
 80030a4:	d01a      	beq.n	80030dc <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2200      	movs	r2, #0
 80030ae:	2120      	movs	r1, #32
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f886 	bl	80031c2 <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e058      	b.n	8003172 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2220      	movs	r2, #32
 80030c6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e04a      	b.n	8003172 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2200      	movs	r2, #0
 80030e4:	2120      	movs	r1, #32
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f86b 	bl	80031c2 <I2C_WaitOnFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e03d      	b.n	8003172 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2210      	movs	r2, #16
 80030fc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2220      	movs	r2, #32
 8003104:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	d118      	bne.n	8003140 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800311c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2200      	movs	r2, #0
 8003126:	2120      	movs	r1, #32
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f84a 	bl	80031c2 <I2C_WaitOnFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e01c      	b.n	8003172 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2220      	movs	r2, #32
 800313e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	3301      	adds	r3, #1
 8003144:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	f63f af3b 	bhi.w	8002fc6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	3720      	adds	r7, #32
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d103      	bne.n	8003198 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2200      	movs	r2, #0
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d007      	beq.n	80031b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	619a      	str	r2, [r3, #24]
  }
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d2:	e022      	b.n	800321a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031da:	d01e      	beq.n	800321a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031dc:	f7ff f9aa 	bl	8002534 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d302      	bcc.n	80031f2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d113      	bne.n	800321a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e00f      	b.n	800323a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4013      	ands	r3, r2
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	429a      	cmp	r2, r3
 8003228:	bf0c      	ite	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	2300      	movne	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	429a      	cmp	r2, r3
 8003236:	d0cd      	beq.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800324e:	e02c      	b.n	80032aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f8dd 	bl	8003414 <I2C_IsAcknowledgeFailed>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e02a      	b.n	80032ba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326a:	d01e      	beq.n	80032aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326c:	f7ff f962 	bl	8002534 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	429a      	cmp	r2, r3
 800327a:	d302      	bcc.n	8003282 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d113      	bne.n	80032aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f043 0220 	orr.w	r2, r3, #32
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e007      	b.n	80032ba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d1cb      	bne.n	8003250 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ce:	e028      	b.n	8003322 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f89d 	bl	8003414 <I2C_IsAcknowledgeFailed>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e026      	b.n	8003332 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7ff f926 	bl	8002534 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d113      	bne.n	8003322 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f043 0220 	orr.w	r2, r3, #32
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e007      	b.n	8003332 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b20      	cmp	r3, #32
 800332e:	d1cf      	bne.n	80032d0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003348:	e055      	b.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f860 	bl	8003414 <I2C_IsAcknowledgeFailed>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e053      	b.n	8003406 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b20      	cmp	r3, #32
 800336a:	d129      	bne.n	80033c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b04      	cmp	r3, #4
 8003378:	d105      	bne.n	8003386 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e03f      	b.n	8003406 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2220      	movs	r2, #32
 800338c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800339a:	400b      	ands	r3, r1
 800339c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e022      	b.n	8003406 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c0:	f7ff f8b8 	bl	8002534 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d302      	bcc.n	80033d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10f      	bne.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e007      	b.n	8003406 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b04      	cmp	r3, #4
 8003402:	d1a2      	bne.n	800334a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	fe00e800 	.word	0xfe00e800

08003414 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b10      	cmp	r3, #16
 800342c:	d151      	bne.n	80034d2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800342e:	e022      	b.n	8003476 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d01e      	beq.n	8003476 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003438:	f7ff f87c 	bl	8002534 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	429a      	cmp	r2, r3
 8003446:	d302      	bcc.n	800344e <I2C_IsAcknowledgeFailed+0x3a>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d113      	bne.n	8003476 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	f043 0220 	orr.w	r2, r3, #32
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e02e      	b.n	80034d4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b20      	cmp	r3, #32
 8003482:	d1d5      	bne.n	8003430 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2210      	movs	r2, #16
 800348a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2220      	movs	r2, #32
 8003492:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7ff fe70 	bl	800317a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <I2C_IsAcknowledgeFailed+0xc8>)
 80034a6:	400b      	ands	r3, r1
 80034a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f043 0204 	orr.w	r2, r3, #4
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	fe00e800 	.word	0xfe00e800

080034e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	817b      	strh	r3, [r7, #10]
 80034ee:	4613      	mov	r3, r2
 80034f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003500:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <I2C_TransferConfig+0x58>)
 8003502:	430b      	orrs	r3, r1
 8003504:	43db      	mvns	r3, r3
 8003506:	ea02 0103 	and.w	r1, r2, r3
 800350a:	897b      	ldrh	r3, [r7, #10]
 800350c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003510:	7a7b      	ldrb	r3, [r7, #9]
 8003512:	041b      	lsls	r3, r3, #16
 8003514:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	431a      	orrs	r2, r3
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	431a      	orrs	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	03ff63ff 	.word	0x03ff63ff

0800353c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b20      	cmp	r3, #32
 8003550:	d138      	bne.n	80035c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800355c:	2302      	movs	r3, #2
 800355e:	e032      	b.n	80035c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2224      	movs	r2, #36	; 0x24
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800358e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6819      	ldr	r1, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d139      	bne.n	800365c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e033      	b.n	800365e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2224      	movs	r2, #36	; 0x24
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003624:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f004 faee 	bl	8007c58 <USB_ReadInterrupts>
 800367c:	4603      	mov	r3, r0
 800367e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003686:	d102      	bne.n	800368e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fadd 	bl	8003c48 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f004 fae0 	bl	8007c58 <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a2:	d112      	bne.n	80036ca <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b6:	b292      	uxth	r2, r2
 80036b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f008 f8f4 	bl	800b8aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80036c2:	2100      	movs	r1, #0
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f91e 	bl	8003906 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f004 fac2 	bl	8007c58 <USB_ReadInterrupts>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036de:	d10b      	bne.n	80036f8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036f2:	b292      	uxth	r2, r2
 80036f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f004 faab 	bl	8007c58 <USB_ReadInterrupts>
 8003702:	4603      	mov	r3, r0
 8003704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370c:	d10b      	bne.n	8003726 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003720:	b292      	uxth	r2, r2
 8003722:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f004 fa94 	bl	8007c58 <USB_ReadInterrupts>
 8003730:	4603      	mov	r3, r0
 8003732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373a:	d133      	bne.n	80037a4 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003744:	b29a      	uxth	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0204 	bic.w	r2, r2, #4
 800374e:	b292      	uxth	r2, r2
 8003750:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800375c:	b29a      	uxth	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0208 	bic.w	r2, r2, #8
 8003766:	b292      	uxth	r2, r2
 8003768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003772:	2b01      	cmp	r3, #1
 8003774:	d107      	bne.n	8003786 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800377e:	2100      	movs	r1, #0
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f008 fa61 	bl	800bc48 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f008 f8c8 	bl	800b91c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003794:	b29a      	uxth	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800379e:	b292      	uxth	r2, r2
 80037a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 fa55 	bl	8007c58 <USB_ReadInterrupts>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b8:	d126      	bne.n	8003808 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0208 	orr.w	r2, r2, #8
 80037cc:	b292      	uxth	r2, r2
 80037ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e4:	b292      	uxth	r2, r2
 80037e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0204 	orr.w	r2, r2, #4
 80037fc:	b292      	uxth	r2, r2
 80037fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f008 f870 	bl	800b8e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f004 fa23 	bl	8007c58 <USB_ReadInterrupts>
 8003812:	4603      	mov	r3, r0
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b80      	cmp	r3, #128	; 0x80
 800381a:	d13f      	bne.n	800389c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003824:	b29a      	uxth	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800382e:	b292      	uxth	r2, r2
 8003830:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800383a:	2b00      	cmp	r3, #0
 800383c:	d12b      	bne.n	8003896 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0204 	orr.w	r2, r2, #4
 8003850:	b292      	uxth	r2, r2
 8003852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0208 	orr.w	r2, r2, #8
 8003868:	b292      	uxth	r2, r2
 800386a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800387e:	b29b      	uxth	r3, r3
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800388c:	2101      	movs	r1, #1
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f008 f9da 	bl	800bc48 <HAL_PCDEx_LPM_Callback>
 8003894:	e002      	b.n	800389c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f008 f826 	bl	800b8e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f004 f9d9 	bl	8007c58 <USB_ReadInterrupts>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b0:	d10e      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038c4:	b292      	uxth	r2, r2
 80038c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f007 ffdf 	bl	800b88e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f004 f9bf 	bl	8007c58 <USB_ReadInterrupts>
 80038da:	4603      	mov	r3, r0
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e4:	d10b      	bne.n	80038fe <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038f8:	b292      	uxth	r2, r2
 80038fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_PCD_SetAddress+0x1a>
 800391c:	2302      	movs	r3, #2
 800391e:	e013      	b.n	8003948 <HAL_PCD_SetAddress+0x42>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f004 f979 	bl	8007c30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	4608      	mov	r0, r1
 800395a:	4611      	mov	r1, r2
 800395c:	461a      	mov	r2, r3
 800395e:	4603      	mov	r3, r0
 8003960:	70fb      	strb	r3, [r7, #3]
 8003962:	460b      	mov	r3, r1
 8003964:	803b      	strh	r3, [r7, #0]
 8003966:	4613      	mov	r3, r2
 8003968:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800396e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003972:	2b00      	cmp	r3, #0
 8003974:	da0b      	bge.n	800398e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	015b      	lsls	r3, r3, #5
 800397e:	3328      	adds	r3, #40	; 0x28
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	705a      	strb	r2, [r3, #1]
 800398c:	e00b      	b.n	80039a6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	015b      	lsls	r3, r3, #5
 8003996:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	4413      	add	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039b2:	883a      	ldrh	r2, [r7, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	78ba      	ldrb	r2, [r7, #2]
 80039bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	785b      	ldrb	r3, [r3, #1]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d004      	beq.n	80039d0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039d0:	78bb      	ldrb	r3, [r7, #2]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d102      	bne.n	80039dc <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_PCD_EP_Open+0x9a>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e00e      	b.n	8003a08 <HAL_PCD_EP_Open+0xb8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68f9      	ldr	r1, [r7, #12]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 fa9b 	bl	8006f34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003a06:	7afb      	ldrb	r3, [r7, #11]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a20:	7afb      	ldrb	r3, [r7, #11]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	015b      	lsls	r3, r3, #5
 8003a28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2200      	movs	r2, #0
 8003a42:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2200      	movs	r2, #0
 8003a48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a4a:	7afb      	ldrb	r3, [r7, #11]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a56:	7afb      	ldrb	r3, [r7, #11]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6979      	ldr	r1, [r7, #20]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f003 fd54 	bl	8007514 <USB_EPStartXfer>
 8003a6c:	e005      	b.n	8003a7a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6979      	ldr	r1, [r7, #20]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f003 fd4d 	bl	8007514 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	460b      	mov	r3, r1
 8003a92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a94:	7afb      	ldrb	r3, [r7, #11]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	015b      	lsls	r3, r3, #5
 8003a9c:	3328      	adds	r3, #40	; 0x28
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003abc:	7afb      	ldrb	r3, [r7, #11]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ac8:	7afb      	ldrb	r3, [r7, #11]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6979      	ldr	r1, [r7, #20]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f003 fd1b 	bl	8007514 <USB_EPStartXfer>
 8003ade:	e005      	b.n	8003aec <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6979      	ldr	r1, [r7, #20]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 fd14 	bl	8007514 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	460b      	mov	r3, r1
 8003b00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	f003 0207 	and.w	r2, r3, #7
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d901      	bls.n	8003b14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e046      	b.n	8003ba2 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	da0b      	bge.n	8003b34 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	015b      	lsls	r3, r3, #5
 8003b24:	3328      	adds	r3, #40	; 0x28
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	705a      	strb	r2, [r3, #1]
 8003b32:	e009      	b.n	8003b48 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	015b      	lsls	r3, r3, #5
 8003b38:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	4413      	add	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b4e:	78fb      	ldrb	r3, [r7, #3]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_PCD_EP_SetStall+0x72>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e01c      	b.n	8003ba2 <HAL_PCD_EP_SetStall+0xac>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68f9      	ldr	r1, [r7, #12]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f003 ff84 	bl	8007a84 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d108      	bne.n	8003b98 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f004 f870 	bl	8007c78 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	f003 020f 	and.w	r2, r3, #15
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d901      	bls.n	8003bc8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e03a      	b.n	8003c3e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	da0b      	bge.n	8003be8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	015b      	lsls	r3, r3, #5
 8003bd8:	3328      	adds	r3, #40	; 0x28
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	705a      	strb	r2, [r3, #1]
 8003be6:	e00b      	b.n	8003c00 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	015b      	lsls	r3, r3, #5
 8003bf0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_PCD_EP_ClrStall+0x76>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e00e      	b.n	8003c3e <HAL_PCD_EP_ClrStall+0x94>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68f9      	ldr	r1, [r7, #12]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f003 ff6a 	bl	8007b08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b089      	sub	sp, #36	; 0x24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c50:	e274      	b.n	800413c <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c5a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003c5c:	8afb      	ldrh	r3, [r7, #22]
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003c66:	7d7b      	ldrb	r3, [r7, #21]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f040 813c 	bne.w	8003ee6 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003c6e:	8afb      	ldrh	r3, [r7, #22]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d14f      	bne.n	8003d18 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c88:	b29c      	uxth	r4, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3328      	adds	r3, #40	; 0x28
 8003c9e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	441a      	add	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f007 fdc1 	bl	800b860 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8228 	beq.w	800413c <PCD_EP_ISR_Handler+0x4f4>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f040 8223 	bne.w	800413c <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	b292      	uxth	r2, r2
 8003d0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d16:	e211      	b.n	800413c <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003d1e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003d28:	8a7b      	ldrh	r3, [r7, #18]
 8003d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d031      	beq.n	8003d96 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f003 ffd0 	bl	8007d12 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d7e:	4013      	ands	r3, r2
 8003d80:	b29c      	uxth	r4, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003d8a:	b292      	uxth	r2, r2
 8003d8c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f007 fd3c 	bl	800b80c <HAL_PCD_SetupStageCallback>
 8003d94:	e1d2      	b.n	800413c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f280 81ce 	bge.w	800413c <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003dac:	4013      	ands	r3, r2
 8003dae:	b29c      	uxth	r4, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003db8:	b292      	uxth	r2, r2
 8003dba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d019      	beq.n	8003e20 <PCD_EP_ISR_Handler+0x1d8>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d015      	beq.n	8003e20 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6959      	ldr	r1, [r3, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f003 ff84 	bl	8007d12 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	441a      	add	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e18:	2100      	movs	r1, #0
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f007 fd08 	bl	800b830 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	461c      	mov	r4, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	441c      	add	r4, r3
 8003e32:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003e36:	461c      	mov	r4, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10e      	bne.n	8003e5e <PCD_EP_ISR_Handler+0x216>
 8003e40:	8823      	ldrh	r3, [r4, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	8023      	strh	r3, [r4, #0]
 8003e4c:	8823      	ldrh	r3, [r4, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	8023      	strh	r3, [r4, #0]
 8003e5c:	e02d      	b.n	8003eba <PCD_EP_ISR_Handler+0x272>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b3e      	cmp	r3, #62	; 0x3e
 8003e64:	d812      	bhi.n	8003e8c <PCD_EP_ISR_Handler+0x244>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <PCD_EP_ISR_Handler+0x238>
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	029b      	lsls	r3, r3, #10
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	8023      	strh	r3, [r4, #0]
 8003e8a:	e016      	b.n	8003eba <PCD_EP_ISR_Handler+0x272>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <PCD_EP_ISR_Handler+0x25e>
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	029b      	lsls	r3, r3, #10
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eca:	b29c      	uxth	r4, r3
 8003ecc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003ed0:	b29c      	uxth	r4, r3
 8003ed2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003ed6:	b29c      	uxth	r4, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b9e      	ldr	r3, [pc, #632]	; (8004158 <PCD_EP_ISR_Handler+0x510>)
 8003ede:	4323      	orrs	r3, r4
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	8013      	strh	r3, [r2, #0]
 8003ee4:	e12a      	b.n	800413c <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	7d7b      	ldrb	r3, [r7, #21]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ef6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f280 80cb 	bge.w	8004096 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	7d7b      	ldrb	r3, [r7, #21]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f14:	4013      	ands	r3, r2
 8003f16:	b29c      	uxth	r4, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	7d7b      	ldrb	r3, [r7, #21]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003f2c:	7d7b      	ldrb	r3, [r7, #21]
 8003f2e:	015b      	lsls	r3, r3, #5
 8003f30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	4413      	add	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	7b1b      	ldrb	r3, [r3, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d11f      	bne.n	8003f82 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4413      	add	r3, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f66:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003f68:	8bfb      	ldrh	r3, [r7, #30]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d06e      	beq.n	800404c <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6959      	ldr	r1, [r3, #20]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	88da      	ldrh	r2, [r3, #6]
 8003f7a:	8bfb      	ldrh	r3, [r7, #30]
 8003f7c:	f003 fec9 	bl	8007d12 <USB_ReadPMA>
 8003f80:	e064      	b.n	800404c <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9c:	b29c      	uxth	r4, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	441a      	add	r2, r3
 8003fac:	4b6b      	ldr	r3, [pc, #428]	; (800415c <PCD_EP_ISR_Handler+0x514>)
 8003fae:	4323      	orrs	r3, r4
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d01f      	beq.n	800400e <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ff2:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003ff4:	8bfb      	ldrh	r3, [r7, #30]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d028      	beq.n	800404c <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6959      	ldr	r1, [r3, #20]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	891a      	ldrh	r2, [r3, #8]
 8004006:	8bfb      	ldrh	r3, [r7, #30]
 8004008:	f003 fe83 	bl	8007d12 <USB_ReadPMA>
 800400c:	e01e      	b.n	800404c <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004016:	b29b      	uxth	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	4413      	add	r3, r2
 8004028:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004032:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004034:	8bfb      	ldrh	r3, [r7, #30]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6959      	ldr	r1, [r3, #20]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	895a      	ldrh	r2, [r3, #10]
 8004046:	8bfb      	ldrh	r3, [r7, #30]
 8004048:	f003 fe63 	bl	8007d12 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	8bfb      	ldrh	r3, [r7, #30]
 8004052:	441a      	add	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	695a      	ldr	r2, [r3, #20]
 800405c:	8bfb      	ldrh	r3, [r7, #30]
 800405e:	441a      	add	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d004      	beq.n	8004076 <PCD_EP_ISR_Handler+0x42e>
 800406c:	8bfa      	ldrh	r2, [r7, #30]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	429a      	cmp	r2, r3
 8004074:	d206      	bcs.n	8004084 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	4619      	mov	r1, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f007 fbd7 	bl	800b830 <HAL_PCD_DataOutStageCallback>
 8004082:	e008      	b.n	8004096 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	7819      	ldrb	r1, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	695a      	ldr	r2, [r3, #20]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff fcbd 	bl	8003a10 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004096:	8a7b      	ldrh	r3, [r7, #18]
 8004098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409c:	2b00      	cmp	r3, #0
 800409e:	d04d      	beq.n	800413c <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 80040a0:	7d7b      	ldrb	r3, [r7, #21]
 80040a2:	015b      	lsls	r3, r3, #5
 80040a4:	3328      	adds	r3, #40	; 0x28
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	7d7b      	ldrb	r3, [r7, #21]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80040c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c4:	b29c      	uxth	r4, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	7d7b      	ldrb	r3, [r7, #21]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	441a      	add	r2, r3
 80040d2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80040d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040da:	b29b      	uxth	r3, r3
 80040dc:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	4413      	add	r3, r2
 80040f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	695a      	ldr	r2, [r3, #20]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	441a      	add	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d106      	bne.n	800412a <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	4619      	mov	r1, r3
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f007 fb9c 	bl	800b860 <HAL_PCD_DataInStageCallback>
 8004128:	e008      	b.n	800413c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	7819      	ldrb	r1, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fca4 	bl	8003a84 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004144:	b29b      	uxth	r3, r3
 8004146:	b21b      	sxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	f6ff ad82 	blt.w	8003c52 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3724      	adds	r7, #36	; 0x24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd90      	pop	{r4, r7, pc}
 8004158:	ffff8080 	.word	0xffff8080
 800415c:	ffff80c0 	.word	0xffff80c0

08004160 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a04      	ldr	r2, [pc, #16]	; (800417c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800416a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416e:	6013      	str	r3, [r2, #0]
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40007000 	.word	0x40007000

08004180 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <HAL_PWREx_GetVoltageRange+0x18>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40007000 	.word	0x40007000

0800419c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041aa:	d130      	bne.n	800420e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ac:	4b23      	ldr	r3, [pc, #140]	; (800423c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b8:	d038      	beq.n	800422c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041c2:	4a1e      	ldr	r2, [pc, #120]	; (800423c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041ca:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2232      	movs	r2, #50	; 0x32
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	4a1b      	ldr	r2, [pc, #108]	; (8004244 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	0c9b      	lsrs	r3, r3, #18
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041e0:	e002      	b.n	80041e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041e8:	4b14      	ldr	r3, [pc, #80]	; (800423c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f4:	d102      	bne.n	80041fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f2      	bne.n	80041e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004208:	d110      	bne.n	800422c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e00f      	b.n	800422e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800420e:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421a:	d007      	beq.n	800422c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800421c:	4b07      	ldr	r3, [pc, #28]	; (800423c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004224:	4a05      	ldr	r2, [pc, #20]	; (800423c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800422a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40007000 	.word	0x40007000
 8004240:	20000040 	.word	0x20000040
 8004244:	431bde83 	.word	0x431bde83

08004248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f000 bc11 	b.w	8004a7e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800425c:	4ba0      	ldr	r3, [pc, #640]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004266:	4b9e      	ldr	r3, [pc, #632]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80e4 	beq.w	8004446 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <HAL_RCC_OscConfig+0x4c>
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	2b0c      	cmp	r3, #12
 8004288:	f040 808b 	bne.w	80043a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b01      	cmp	r3, #1
 8004290:	f040 8087 	bne.w	80043a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004294:	4b92      	ldr	r3, [pc, #584]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_OscConfig+0x64>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e3e8      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1a      	ldr	r2, [r3, #32]
 80042b0:	4b8b      	ldr	r3, [pc, #556]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <HAL_RCC_OscConfig+0x7e>
 80042bc:	4b88      	ldr	r3, [pc, #544]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c4:	e005      	b.n	80042d2 <HAL_RCC_OscConfig+0x8a>
 80042c6:	4b86      	ldr	r3, [pc, #536]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80042c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d223      	bcs.n	800431e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fdaa 	bl	8004e34 <RCC_SetFlashLatencyFromMSIRange>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e3c9      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042ea:	4b7d      	ldr	r3, [pc, #500]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7c      	ldr	r2, [pc, #496]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80042f0:	f043 0308 	orr.w	r3, r3, #8
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b7a      	ldr	r3, [pc, #488]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	4977      	ldr	r1, [pc, #476]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 8004304:	4313      	orrs	r3, r2
 8004306:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004308:	4b75      	ldr	r3, [pc, #468]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	4972      	ldr	r1, [pc, #456]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
 800431c:	e025      	b.n	800436a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800431e:	4b70      	ldr	r3, [pc, #448]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a6f      	ldr	r2, [pc, #444]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 8004324:	f043 0308 	orr.w	r3, r3, #8
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	4b6d      	ldr	r3, [pc, #436]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	496a      	ldr	r1, [pc, #424]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800433c:	4b68      	ldr	r3, [pc, #416]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	4965      	ldr	r1, [pc, #404]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 800434c:	4313      	orrs	r3, r2
 800434e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fd6a 	bl	8004e34 <RCC_SetFlashLatencyFromMSIRange>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e389      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800436a:	f000 fc6f 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 800436e:	4601      	mov	r1, r0
 8004370:	4b5b      	ldr	r3, [pc, #364]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	4a5a      	ldr	r2, [pc, #360]	; (80044e4 <HAL_RCC_OscConfig+0x29c>)
 800437c:	5cd3      	ldrb	r3, [r2, r3]
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	fa21 f303 	lsr.w	r3, r1, r3
 8004386:	4a58      	ldr	r2, [pc, #352]	; (80044e8 <HAL_RCC_OscConfig+0x2a0>)
 8004388:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800438a:	4b58      	ldr	r3, [pc, #352]	; (80044ec <HAL_RCC_OscConfig+0x2a4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd ff28 	bl	80021e4 <HAL_InitTick>
 8004394:	4603      	mov	r3, r0
 8004396:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d052      	beq.n	8004444 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	e36d      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d032      	beq.n	8004410 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043aa:	4b4d      	ldr	r3, [pc, #308]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a4c      	ldr	r2, [pc, #304]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043b6:	f7fe f8bd 	bl	8002534 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043be:	f7fe f8b9 	bl	8002534 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e356      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043d0:	4b43      	ldr	r3, [pc, #268]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043dc:	4b40      	ldr	r3, [pc, #256]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a3f      	ldr	r2, [pc, #252]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80043e2:	f043 0308 	orr.w	r3, r3, #8
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	4b3d      	ldr	r3, [pc, #244]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	493a      	ldr	r1, [pc, #232]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043fa:	4b39      	ldr	r3, [pc, #228]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	4935      	ldr	r1, [pc, #212]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 800440a:	4313      	orrs	r3, r2
 800440c:	604b      	str	r3, [r1, #4]
 800440e:	e01a      	b.n	8004446 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004410:	4b33      	ldr	r3, [pc, #204]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a32      	ldr	r2, [pc, #200]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800441c:	f7fe f88a 	bl	8002534 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004424:	f7fe f886 	bl	8002534 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e323      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004436:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0x1dc>
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004444:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d073      	beq.n	800453a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b08      	cmp	r3, #8
 8004456:	d005      	beq.n	8004464 <HAL_RCC_OscConfig+0x21c>
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	2b0c      	cmp	r3, #12
 800445c:	d10e      	bne.n	800447c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d10b      	bne.n	800447c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004464:	4b1e      	ldr	r3, [pc, #120]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d063      	beq.n	8004538 <HAL_RCC_OscConfig+0x2f0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d15f      	bne.n	8004538 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e300      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004484:	d106      	bne.n	8004494 <HAL_RCC_OscConfig+0x24c>
 8004486:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e01d      	b.n	80044d0 <HAL_RCC_OscConfig+0x288>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800449c:	d10c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x270>
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a0f      	ldr	r2, [pc, #60]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80044a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80044b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e00b      	b.n	80044d0 <HAL_RCC_OscConfig+0x288>
 80044b8:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80044be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a05      	ldr	r2, [pc, #20]	; (80044e0 <HAL_RCC_OscConfig+0x298>)
 80044ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01b      	beq.n	8004510 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe f82c 	bl	8002534 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044de:	e010      	b.n	8004502 <HAL_RCC_OscConfig+0x2ba>
 80044e0:	40021000 	.word	0x40021000
 80044e4:	0800d000 	.word	0x0800d000
 80044e8:	20000040 	.word	0x20000040
 80044ec:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f0:	f7fe f820 	bl	8002534 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e2bd      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004502:	4baf      	ldr	r3, [pc, #700]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0x2a8>
 800450e:	e014      	b.n	800453a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fe f810 	bl	8002534 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004518:	f7fe f80c 	bl	8002534 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	; 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e2a9      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800452a:	4ba5      	ldr	r3, [pc, #660]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x2d0>
 8004536:	e000      	b.n	800453a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d060      	beq.n	8004608 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b04      	cmp	r3, #4
 800454a:	d005      	beq.n	8004558 <HAL_RCC_OscConfig+0x310>
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b0c      	cmp	r3, #12
 8004550:	d119      	bne.n	8004586 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d116      	bne.n	8004586 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004558:	4b99      	ldr	r3, [pc, #612]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_RCC_OscConfig+0x328>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e286      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004570:	4b93      	ldr	r3, [pc, #588]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	061b      	lsls	r3, r3, #24
 800457e:	4990      	ldr	r1, [pc, #576]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004584:	e040      	b.n	8004608 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d023      	beq.n	80045d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800458e:	4b8c      	ldr	r3, [pc, #560]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a8b      	ldr	r2, [pc, #556]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459a:	f7fd ffcb 	bl	8002534 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a2:	f7fd ffc7 	bl	8002534 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e264      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b4:	4b82      	ldr	r3, [pc, #520]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c0:	4b7f      	ldr	r3, [pc, #508]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	497c      	ldr	r1, [pc, #496]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
 80045d4:	e018      	b.n	8004608 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d6:	4b7a      	ldr	r3, [pc, #488]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a79      	ldr	r2, [pc, #484]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80045dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fd ffa7 	bl	8002534 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ea:	f7fd ffa3 	bl	8002534 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e240      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045fc:	4b70      	ldr	r3, [pc, #448]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f0      	bne.n	80045ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d03c      	beq.n	800468e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01c      	beq.n	8004656 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461c:	4b68      	ldr	r3, [pc, #416]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800461e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004622:	4a67      	ldr	r2, [pc, #412]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fd ff82 	bl	8002534 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004634:	f7fd ff7e 	bl	8002534 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e21b      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004646:	4b5e      	ldr	r3, [pc, #376]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0ef      	beq.n	8004634 <HAL_RCC_OscConfig+0x3ec>
 8004654:	e01b      	b.n	800468e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004656:	4b5a      	ldr	r3, [pc, #360]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465c:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004666:	f7fd ff65 	bl	8002534 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800466e:	f7fd ff61 	bl	8002534 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e1fe      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004680:	4b4f      	ldr	r3, [pc, #316]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1ef      	bne.n	800466e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80a6 	beq.w	80047e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469c:	2300      	movs	r3, #0
 800469e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046a0:	4b47      	ldr	r3, [pc, #284]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10d      	bne.n	80046c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ac:	4b44      	ldr	r3, [pc, #272]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	4a43      	ldr	r2, [pc, #268]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80046b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b6:	6593      	str	r3, [r2, #88]	; 0x58
 80046b8:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c4:	2301      	movs	r3, #1
 80046c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046c8:	4b3e      	ldr	r3, [pc, #248]	; (80047c4 <HAL_RCC_OscConfig+0x57c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d118      	bne.n	8004706 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046d4:	4b3b      	ldr	r3, [pc, #236]	; (80047c4 <HAL_RCC_OscConfig+0x57c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a3a      	ldr	r2, [pc, #232]	; (80047c4 <HAL_RCC_OscConfig+0x57c>)
 80046da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e0:	f7fd ff28 	bl	8002534 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e8:	f7fd ff24 	bl	8002534 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e1c1      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046fa:	4b32      	ldr	r3, [pc, #200]	; (80047c4 <HAL_RCC_OscConfig+0x57c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d108      	bne.n	8004720 <HAL_RCC_OscConfig+0x4d8>
 800470e:	4b2c      	ldr	r3, [pc, #176]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004714:	4a2a      	ldr	r2, [pc, #168]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800471e:	e024      	b.n	800476a <HAL_RCC_OscConfig+0x522>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b05      	cmp	r3, #5
 8004726:	d110      	bne.n	800474a <HAL_RCC_OscConfig+0x502>
 8004728:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	4a24      	ldr	r2, [pc, #144]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004730:	f043 0304 	orr.w	r3, r3, #4
 8004734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004738:	4b21      	ldr	r3, [pc, #132]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	4a20      	ldr	r2, [pc, #128]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004748:	e00f      	b.n	800476a <HAL_RCC_OscConfig+0x522>
 800474a:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	4a1b      	ldr	r2, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800475a:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004760:	4a17      	ldr	r2, [pc, #92]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004762:	f023 0304 	bic.w	r3, r3, #4
 8004766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004772:	f7fd fedf 	bl	8002534 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004778:	e00a      	b.n	8004790 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477a:	f7fd fedb 	bl	8002534 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	f241 3288 	movw	r2, #5000	; 0x1388
 8004788:	4293      	cmp	r3, r2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e176      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_OscConfig+0x578>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0ed      	beq.n	800477a <HAL_RCC_OscConfig+0x532>
 800479e:	e01a      	b.n	80047d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a0:	f7fd fec8 	bl	8002534 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047a6:	e00f      	b.n	80047c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a8:	f7fd fec4 	bl	8002534 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d906      	bls.n	80047c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e15f      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047c8:	4baa      	ldr	r3, [pc, #680]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e8      	bne.n	80047a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047d6:	7ffb      	ldrb	r3, [r7, #31]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d105      	bne.n	80047e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047dc:	4ba5      	ldr	r3, [pc, #660]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	4aa4      	ldr	r2, [pc, #656]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 80047e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d03c      	beq.n	800486e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01c      	beq.n	8004836 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047fc:	4b9d      	ldr	r3, [pc, #628]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 80047fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004802:	4a9c      	ldr	r2, [pc, #624]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480c:	f7fd fe92 	bl	8002534 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004814:	f7fd fe8e 	bl	8002534 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e12b      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004826:	4b93      	ldr	r3, [pc, #588]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004828:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0ef      	beq.n	8004814 <HAL_RCC_OscConfig+0x5cc>
 8004834:	e01b      	b.n	800486e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004836:	4b8f      	ldr	r3, [pc, #572]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800483c:	4a8d      	ldr	r2, [pc, #564]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 800483e:	f023 0301 	bic.w	r3, r3, #1
 8004842:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004846:	f7fd fe75 	bl	8002534 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800484e:	f7fd fe71 	bl	8002534 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e10e      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004860:	4b84      	ldr	r3, [pc, #528]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004862:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1ef      	bne.n	800484e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8102 	beq.w	8004a7c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	2b02      	cmp	r3, #2
 800487e:	f040 80c5 	bne.w	8004a0c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004882:	4b7c      	ldr	r3, [pc, #496]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f003 0203 	and.w	r2, r3, #3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	429a      	cmp	r2, r3
 8004894:	d12c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	3b01      	subs	r3, #1
 80048a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d123      	bne.n	80048f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d11b      	bne.n	80048f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d113      	bne.n	80048f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	3b01      	subs	r3, #1
 80048d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d109      	bne.n	80048f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	3b01      	subs	r3, #1
 80048ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d067      	beq.n	80049c0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	d062      	beq.n	80049bc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048f6:	4b5f      	ldr	r3, [pc, #380]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e0bb      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004906:	4b5b      	ldr	r3, [pc, #364]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a5a      	ldr	r2, [pc, #360]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 800490c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004910:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004912:	f7fd fe0f 	bl	8002534 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491a:	f7fd fe0b 	bl	8002534 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e0a8      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800492c:	4b51      	ldr	r3, [pc, #324]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f0      	bne.n	800491a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004938:	4b4e      	ldr	r3, [pc, #312]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	4b4e      	ldr	r3, [pc, #312]	; (8004a78 <HAL_RCC_OscConfig+0x830>)
 800493e:	4013      	ands	r3, r2
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004948:	3a01      	subs	r2, #1
 800494a:	0112      	lsls	r2, r2, #4
 800494c:	4311      	orrs	r1, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004952:	0212      	lsls	r2, r2, #8
 8004954:	4311      	orrs	r1, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800495a:	0852      	lsrs	r2, r2, #1
 800495c:	3a01      	subs	r2, #1
 800495e:	0552      	lsls	r2, r2, #21
 8004960:	4311      	orrs	r1, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004966:	0852      	lsrs	r2, r2, #1
 8004968:	3a01      	subs	r2, #1
 800496a:	0652      	lsls	r2, r2, #25
 800496c:	4311      	orrs	r1, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004972:	06d2      	lsls	r2, r2, #27
 8004974:	430a      	orrs	r2, r1
 8004976:	493f      	ldr	r1, [pc, #252]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800497c:	4b3d      	ldr	r3, [pc, #244]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a3c      	ldr	r2, [pc, #240]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004986:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004988:	4b3a      	ldr	r3, [pc, #232]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4a39      	ldr	r2, [pc, #228]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 800498e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004992:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004994:	f7fd fdce 	bl	8002534 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499c:	f7fd fdca 	bl	8002534 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e067      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ae:	4b31      	ldr	r3, [pc, #196]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049ba:	e05f      	b.n	8004a7c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e05e      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c0:	4b2c      	ldr	r3, [pc, #176]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d157      	bne.n	8004a7c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049cc:	4b29      	ldr	r3, [pc, #164]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a28      	ldr	r2, [pc, #160]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 80049d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049d8:	4b26      	ldr	r3, [pc, #152]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4a25      	ldr	r2, [pc, #148]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 80049de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049e4:	f7fd fda6 	bl	8002534 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fd fda2 	bl	8002534 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e03f      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fe:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0x7a4>
 8004a0a:	e037      	b.n	8004a7c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	2b0c      	cmp	r3, #12
 8004a10:	d02d      	beq.n	8004a6e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a12:	4b18      	ldr	r3, [pc, #96]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a1c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a1e:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d105      	bne.n	8004a36 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	4a11      	ldr	r2, [pc, #68]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004a30:	f023 0303 	bic.w	r3, r3, #3
 8004a34:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	4a0e      	ldr	r2, [pc, #56]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004a3c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a44:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a46:	f7fd fd75 	bl	8002534 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4e:	f7fd fd71 	bl	8002534 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e00e      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a60:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <HAL_RCC_OscConfig+0x82c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f0      	bne.n	8004a4e <HAL_RCC_OscConfig+0x806>
 8004a6c:	e006      	b.n	8004a7c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e005      	b.n	8004a7e <HAL_RCC_OscConfig+0x836>
 8004a72:	bf00      	nop
 8004a74:	40021000 	.word	0x40021000
 8004a78:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop

08004a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0c8      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b66      	ldr	r3, [pc, #408]	; (8004c38 <HAL_RCC_ClockConfig+0x1b0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d910      	bls.n	8004acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b63      	ldr	r3, [pc, #396]	; (8004c38 <HAL_RCC_ClockConfig+0x1b0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f023 0207 	bic.w	r2, r3, #7
 8004ab2:	4961      	ldr	r1, [pc, #388]	; (8004c38 <HAL_RCC_ClockConfig+0x1b0>)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aba:	4b5f      	ldr	r3, [pc, #380]	; (8004c38 <HAL_RCC_ClockConfig+0x1b0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d001      	beq.n	8004acc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0b0      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d04c      	beq.n	8004b72 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d107      	bne.n	8004af0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae0:	4b56      	ldr	r3, [pc, #344]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d121      	bne.n	8004b30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e09e      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d107      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004af8:	4b50      	ldr	r3, [pc, #320]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d115      	bne.n	8004b30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e092      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b10:	4b4a      	ldr	r3, [pc, #296]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e086      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b20:	4b46      	ldr	r3, [pc, #280]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e07e      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b30:	4b42      	ldr	r3, [pc, #264]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f023 0203 	bic.w	r2, r3, #3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	493f      	ldr	r1, [pc, #252]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b42:	f7fd fcf7 	bl	8002534 <HAL_GetTick>
 8004b46:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b48:	e00a      	b.n	8004b60 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4a:	f7fd fcf3 	bl	8002534 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e066      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b60:	4b36      	ldr	r3, [pc, #216]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 020c 	and.w	r2, r3, #12
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d1eb      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d008      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b7e:	4b2f      	ldr	r3, [pc, #188]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	492c      	ldr	r1, [pc, #176]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b90:	4b29      	ldr	r3, [pc, #164]	; (8004c38 <HAL_RCC_ClockConfig+0x1b0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d210      	bcs.n	8004bc0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9e:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <HAL_RCC_ClockConfig+0x1b0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 0207 	bic.w	r2, r3, #7
 8004ba6:	4924      	ldr	r1, [pc, #144]	; (8004c38 <HAL_RCC_ClockConfig+0x1b0>)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bae:	4b22      	ldr	r3, [pc, #136]	; (8004c38 <HAL_RCC_ClockConfig+0x1b0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e036      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d008      	beq.n	8004bde <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bcc:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4918      	ldr	r1, [pc, #96]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bea:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4910      	ldr	r1, [pc, #64]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bfe:	f000 f825 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8004c02:	4601      	mov	r1, r0
 8004c04:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <HAL_RCC_ClockConfig+0x1b4>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	4a0c      	ldr	r2, [pc, #48]	; (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004c10:	5cd3      	ldrb	r3, [r2, r3]
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	fa21 f303 	lsr.w	r3, r1, r3
 8004c1a:	4a0a      	ldr	r2, [pc, #40]	; (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <HAL_RCC_ClockConfig+0x1c0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fd fade 	bl	80021e4 <HAL_InitTick>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c2c:	7afb      	ldrb	r3, [r7, #11]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40022000 	.word	0x40022000
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	0800d000 	.word	0x0800d000
 8004c44:	20000040 	.word	0x20000040
 8004c48:	20000044 	.word	0x20000044

08004c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	; 0x24
 8004c50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c5a:	4b3d      	ldr	r3, [pc, #244]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c64:	4b3a      	ldr	r3, [pc, #232]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_GetSysClockFreq+0x34>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d121      	bne.n	8004cbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d11e      	bne.n	8004cbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c80:	4b33      	ldr	r3, [pc, #204]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d107      	bne.n	8004c9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c8c:	4b30      	ldr	r3, [pc, #192]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	e005      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c9c:	4b2c      	ldr	r3, [pc, #176]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ca8:	4a2a      	ldr	r2, [pc, #168]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10d      	bne.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d102      	bne.n	8004cca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cc4:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	e004      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cd0:	4b22      	ldr	r3, [pc, #136]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004cd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b0c      	cmp	r3, #12
 8004cd8:	d133      	bne.n	8004d42 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cda:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d002      	beq.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xa4>
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d003      	beq.n	8004cf6 <HAL_RCC_GetSysClockFreq+0xaa>
 8004cee:	e005      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cf0:	4b19      	ldr	r3, [pc, #100]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cf2:	617b      	str	r3, [r7, #20]
      break;
 8004cf4:	e005      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004cf6:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004cf8:	617b      	str	r3, [r7, #20]
      break;
 8004cfa:	e002      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	617b      	str	r3, [r7, #20]
      break;
 8004d00:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d02:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	091b      	lsrs	r3, r3, #4
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d10:	4b0f      	ldr	r3, [pc, #60]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	0a1b      	lsrs	r3, r3, #8
 8004d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	fb02 f203 	mul.w	r2, r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d26:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d28:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	0e5b      	lsrs	r3, r3, #25
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	3301      	adds	r3, #1
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d42:	69bb      	ldr	r3, [r7, #24]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3724      	adds	r7, #36	; 0x24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	40021000 	.word	0x40021000
 8004d54:	0800d018 	.word	0x0800d018
 8004d58:	00f42400 	.word	0x00f42400
 8004d5c:	007a1200 	.word	0x007a1200

08004d60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d64:	4b03      	ldr	r3, [pc, #12]	; (8004d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d66:	681b      	ldr	r3, [r3, #0]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000040 	.word	0x20000040

08004d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d7c:	f7ff fff0 	bl	8004d60 <HAL_RCC_GetHCLKFreq>
 8004d80:	4601      	mov	r1, r0
 8004d82:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	4a04      	ldr	r2, [pc, #16]	; (8004da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d8e:	5cd3      	ldrb	r3, [r2, r3]
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	0800d010 	.word	0x0800d010

08004da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004da8:	f7ff ffda 	bl	8004d60 <HAL_RCC_GetHCLKFreq>
 8004dac:	4601      	mov	r1, r0
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	0adb      	lsrs	r3, r3, #11
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dba:	5cd3      	ldrb	r3, [r2, r3]
 8004dbc:	f003 031f 	and.w	r3, r3, #31
 8004dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	0800d010 	.word	0x0800d010

08004dd0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	220f      	movs	r2, #15
 8004dde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004de0:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <HAL_RCC_GetClockConfig+0x5c>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f003 0203 	and.w	r2, r3, #3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <HAL_RCC_GetClockConfig+0x5c>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004df8:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <HAL_RCC_GetClockConfig+0x5c>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004e04:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <HAL_RCC_GetClockConfig+0x5c>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	08db      	lsrs	r3, r3, #3
 8004e0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004e12:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <HAL_RCC_GetClockConfig+0x60>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0207 	and.w	r2, r3, #7
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	601a      	str	r2, [r3, #0]
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	40022000 	.word	0x40022000

08004e34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e40:	4b2a      	ldr	r3, [pc, #168]	; (8004eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e4c:	f7ff f998 	bl	8004180 <HAL_PWREx_GetVoltageRange>
 8004e50:	6178      	str	r0, [r7, #20]
 8004e52:	e014      	b.n	8004e7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e54:	4b25      	ldr	r3, [pc, #148]	; (8004eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e58:	4a24      	ldr	r2, [pc, #144]	; (8004eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e60:	4b22      	ldr	r3, [pc, #136]	; (8004eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e6c:	f7ff f988 	bl	8004180 <HAL_PWREx_GetVoltageRange>
 8004e70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e72:	4b1e      	ldr	r3, [pc, #120]	; (8004eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	4a1d      	ldr	r2, [pc, #116]	; (8004eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e84:	d10b      	bne.n	8004e9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b80      	cmp	r3, #128	; 0x80
 8004e8a:	d919      	bls.n	8004ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2ba0      	cmp	r3, #160	; 0xa0
 8004e90:	d902      	bls.n	8004e98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e92:	2302      	movs	r3, #2
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	e013      	b.n	8004ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e98:	2301      	movs	r3, #1
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	e010      	b.n	8004ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b80      	cmp	r3, #128	; 0x80
 8004ea2:	d902      	bls.n	8004eaa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	e00a      	b.n	8004ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b80      	cmp	r3, #128	; 0x80
 8004eae:	d102      	bne.n	8004eb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	613b      	str	r3, [r7, #16]
 8004eb4:	e004      	b.n	8004ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b70      	cmp	r3, #112	; 0x70
 8004eba:	d101      	bne.n	8004ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f023 0207 	bic.w	r2, r3, #7
 8004ec8:	4909      	ldr	r1, [pc, #36]	; (8004ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d001      	beq.n	8004ee2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	40022000 	.word	0x40022000

08004ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004efc:	2300      	movs	r3, #0
 8004efe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f00:	2300      	movs	r3, #0
 8004f02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d02f      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f18:	d005      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004f1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f1e:	d015      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d007      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004f24:	e00f      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004f26:	4b5d      	ldr	r3, [pc, #372]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	4a5c      	ldr	r2, [pc, #368]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f30:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f32:	e00c      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3304      	adds	r3, #4
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fa2e 	bl	800539c <RCCEx_PLLSAI1_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f44:	e003      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	74fb      	strb	r3, [r7, #19]
      break;
 8004f4a:	e000      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f4e:	7cfb      	ldrb	r3, [r7, #19]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10b      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f54:	4b51      	ldr	r3, [pc, #324]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	494e      	ldr	r1, [pc, #312]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f6a:	e001      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	7cfb      	ldrb	r3, [r7, #19]
 8004f6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 809e 	beq.w	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f82:	4b46      	ldr	r3, [pc, #280]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00d      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f98:	4b40      	ldr	r3, [pc, #256]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9c:	4a3f      	ldr	r2, [pc, #252]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fa4:	4b3d      	ldr	r3, [pc, #244]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fb4:	4b3a      	ldr	r3, [pc, #232]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a39      	ldr	r2, [pc, #228]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fc0:	f7fd fab8 	bl	8002534 <HAL_GetTick>
 8004fc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fc6:	e009      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc8:	f7fd fab4 	bl	8002534 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d902      	bls.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	74fb      	strb	r3, [r7, #19]
        break;
 8004fda:	e005      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fdc:	4b30      	ldr	r3, [pc, #192]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0ef      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8004fe8:	7cfb      	ldrb	r3, [r7, #19]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d15a      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fee:	4b2b      	ldr	r3, [pc, #172]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01e      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	429a      	cmp	r2, r3
 8005008:	d019      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800500a:	4b24      	ldr	r3, [pc, #144]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005014:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005016:	4b21      	ldr	r3, [pc, #132]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501c:	4a1f      	ldr	r2, [pc, #124]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800501e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005026:	4b1d      	ldr	r3, [pc, #116]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	4a1b      	ldr	r2, [pc, #108]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800502e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005036:	4a19      	ldr	r2, [pc, #100]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d016      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fd fa74 	bl	8002534 <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800504e:	e00b      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005050:	f7fd fa70 	bl	8002534 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	; 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d902      	bls.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	74fb      	strb	r3, [r7, #19]
            break;
 8005066:	e006      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005068:	4b0c      	ldr	r3, [pc, #48]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0ec      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8005076:	7cfb      	ldrb	r3, [r7, #19]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800507c:	4b07      	ldr	r3, [pc, #28]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508a:	4904      	ldr	r1, [pc, #16]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005092:	e009      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005094:	7cfb      	ldrb	r3, [r7, #19]
 8005096:	74bb      	strb	r3, [r7, #18]
 8005098:	e006      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000
 80050a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a4:	7cfb      	ldrb	r3, [r7, #19]
 80050a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050a8:	7c7b      	ldrb	r3, [r7, #17]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d105      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ae:	4bb2      	ldr	r3, [pc, #712]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b2:	4ab1      	ldr	r2, [pc, #708]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80050b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050c6:	4bac      	ldr	r3, [pc, #688]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	f023 0203 	bic.w	r2, r3, #3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	49a8      	ldr	r1, [pc, #672]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050e8:	4ba3      	ldr	r3, [pc, #652]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ee:	f023 020c 	bic.w	r2, r3, #12
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	49a0      	ldr	r1, [pc, #640]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800510a:	4b9b      	ldr	r3, [pc, #620]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	4997      	ldr	r1, [pc, #604]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800512c:	4b92      	ldr	r3, [pc, #584]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005132:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	498f      	ldr	r1, [pc, #572]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800514e:	4b8a      	ldr	r3, [pc, #552]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515c:	4986      	ldr	r1, [pc, #536]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005170:	4b81      	ldr	r3, [pc, #516]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	497e      	ldr	r1, [pc, #504]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005192:	4b79      	ldr	r3, [pc, #484]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	4975      	ldr	r1, [pc, #468]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051b4:	4b70      	ldr	r3, [pc, #448]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c2:	496d      	ldr	r1, [pc, #436]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051d6:	4b68      	ldr	r3, [pc, #416]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e4:	4964      	ldr	r1, [pc, #400]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d028      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051f8:	4b5f      	ldr	r3, [pc, #380]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005206:	495c      	ldr	r1, [pc, #368]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005216:	d106      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005218:	4b57      	ldr	r3, [pc, #348]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4a56      	ldr	r2, [pc, #344]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800521e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005222:	60d3      	str	r3, [r2, #12]
 8005224:	e011      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800522e:	d10c      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	2101      	movs	r1, #1
 8005236:	4618      	mov	r0, r3
 8005238:	f000 f8b0 	bl	800539c <RCCEx_PLLSAI1_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005240:	7cfb      	ldrb	r3, [r7, #19]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8005246:	7cfb      	ldrb	r3, [r7, #19]
 8005248:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d028      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005256:	4b48      	ldr	r3, [pc, #288]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005264:	4944      	ldr	r1, [pc, #272]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005274:	d106      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005276:	4b40      	ldr	r3, [pc, #256]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	4a3f      	ldr	r2, [pc, #252]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800527c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005280:	60d3      	str	r3, [r2, #12]
 8005282:	e011      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800528c:	d10c      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3304      	adds	r3, #4
 8005292:	2101      	movs	r1, #1
 8005294:	4618      	mov	r0, r3
 8005296:	f000 f881 	bl	800539c <RCCEx_PLLSAI1_Config>
 800529a:	4603      	mov	r3, r0
 800529c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d028      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052b4:	4b30      	ldr	r3, [pc, #192]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c2:	492d      	ldr	r1, [pc, #180]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d2:	d106      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052d4:	4b28      	ldr	r3, [pc, #160]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4a27      	ldr	r2, [pc, #156]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80052da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052de:	60d3      	str	r3, [r2, #12]
 80052e0:	e011      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ea:	d10c      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	2101      	movs	r1, #1
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f852 	bl	800539c <RCCEx_PLLSAI1_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8005302:	7cfb      	ldrb	r3, [r7, #19]
 8005304:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01c      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005312:	4b19      	ldr	r3, [pc, #100]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005318:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	4915      	ldr	r1, [pc, #84]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005330:	d10c      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3304      	adds	r3, #4
 8005336:	2102      	movs	r1, #2
 8005338:	4618      	mov	r0, r3
 800533a:	f000 f82f 	bl	800539c <RCCEx_PLLSAI1_Config>
 800533e:	4603      	mov	r3, r0
 8005340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005342:	7cfb      	ldrb	r3, [r7, #19]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8005348:	7cfb      	ldrb	r3, [r7, #19]
 800534a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005366:	4904      	ldr	r1, [pc, #16]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800536e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40021000 	.word	0x40021000

0800537c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a04      	ldr	r2, [pc, #16]	; (8005398 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005386:	f043 0304 	orr.w	r3, r3, #4
 800538a:	6013      	str	r3, [r2, #0]
}
 800538c:	bf00      	nop
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000

0800539c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053aa:	4b73      	ldr	r3, [pc, #460]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d018      	beq.n	80053e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053b6:	4b70      	ldr	r3, [pc, #448]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f003 0203 	and.w	r2, r3, #3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d10d      	bne.n	80053e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
       ||
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80053ce:	4b6a      	ldr	r3, [pc, #424]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	091b      	lsrs	r3, r3, #4
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
       ||
 80053de:	429a      	cmp	r2, r3
 80053e0:	d044      	beq.n	800546c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	73fb      	strb	r3, [r7, #15]
 80053e6:	e041      	b.n	800546c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d00c      	beq.n	800540a <RCCEx_PLLSAI1_Config+0x6e>
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d013      	beq.n	800541c <RCCEx_PLLSAI1_Config+0x80>
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d120      	bne.n	800543a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053f8:	4b5f      	ldr	r3, [pc, #380]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d11d      	bne.n	8005440 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005408:	e01a      	b.n	8005440 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800540a:	4b5b      	ldr	r3, [pc, #364]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005412:	2b00      	cmp	r3, #0
 8005414:	d116      	bne.n	8005444 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800541a:	e013      	b.n	8005444 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800541c:	4b56      	ldr	r3, [pc, #344]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10f      	bne.n	8005448 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005428:	4b53      	ldr	r3, [pc, #332]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d109      	bne.n	8005448 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005438:	e006      	b.n	8005448 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]
      break;
 800543e:	e004      	b.n	800544a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005440:	bf00      	nop
 8005442:	e002      	b.n	800544a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005444:	bf00      	nop
 8005446:	e000      	b.n	800544a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005448:	bf00      	nop
    }

    if(status == HAL_OK)
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10d      	bne.n	800546c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005450:	4b49      	ldr	r3, [pc, #292]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6819      	ldr	r1, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	3b01      	subs	r3, #1
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	430b      	orrs	r3, r1
 8005466:	4944      	ldr	r1, [pc, #272]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005468:	4313      	orrs	r3, r2
 800546a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d17c      	bne.n	800556c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005472:	4b41      	ldr	r3, [pc, #260]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a40      	ldr	r2, [pc, #256]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005478:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800547c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800547e:	f7fd f859 	bl	8002534 <HAL_GetTick>
 8005482:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005484:	e009      	b.n	800549a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005486:	f7fd f855 	bl	8002534 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d902      	bls.n	800549a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	73fb      	strb	r3, [r7, #15]
        break;
 8005498:	e005      	b.n	80054a6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800549a:	4b37      	ldr	r3, [pc, #220]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1ef      	bne.n	8005486 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d15f      	bne.n	800556c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d110      	bne.n	80054d4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054b2:	4b31      	ldr	r3, [pc, #196]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80054ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6892      	ldr	r2, [r2, #8]
 80054c2:	0211      	lsls	r1, r2, #8
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	68d2      	ldr	r2, [r2, #12]
 80054c8:	06d2      	lsls	r2, r2, #27
 80054ca:	430a      	orrs	r2, r1
 80054cc:	492a      	ldr	r1, [pc, #168]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	610b      	str	r3, [r1, #16]
 80054d2:	e027      	b.n	8005524 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d112      	bne.n	8005500 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054da:	4b27      	ldr	r3, [pc, #156]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80054e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6892      	ldr	r2, [r2, #8]
 80054ea:	0211      	lsls	r1, r2, #8
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6912      	ldr	r2, [r2, #16]
 80054f0:	0852      	lsrs	r2, r2, #1
 80054f2:	3a01      	subs	r2, #1
 80054f4:	0552      	lsls	r2, r2, #21
 80054f6:	430a      	orrs	r2, r1
 80054f8:	491f      	ldr	r1, [pc, #124]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	610b      	str	r3, [r1, #16]
 80054fe:	e011      	b.n	8005524 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005500:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005508:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6892      	ldr	r2, [r2, #8]
 8005510:	0211      	lsls	r1, r2, #8
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6952      	ldr	r2, [r2, #20]
 8005516:	0852      	lsrs	r2, r2, #1
 8005518:	3a01      	subs	r2, #1
 800551a:	0652      	lsls	r2, r2, #25
 800551c:	430a      	orrs	r2, r1
 800551e:	4916      	ldr	r1, [pc, #88]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005520:	4313      	orrs	r3, r2
 8005522:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005524:	4b14      	ldr	r3, [pc, #80]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a13      	ldr	r2, [pc, #76]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 800552a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800552e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fd f800 	bl	8002534 <HAL_GetTick>
 8005534:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005536:	e009      	b.n	800554c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005538:	f7fc fffc 	bl	8002534 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d902      	bls.n	800554c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	73fb      	strb	r3, [r7, #15]
          break;
 800554a:	e005      	b.n	8005558 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800554c:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ef      	beq.n	8005538 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	4904      	ldr	r1, [pc, #16]	; (8005578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005568:	4313      	orrs	r3, r2
 800556a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40021000 	.word	0x40021000

0800557c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e07c      	b.n	8005688 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7fc fd5f 	bl	800206c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2202      	movs	r2, #2
 80055b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055c4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055ce:	d902      	bls.n	80055d6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e002      	b.n	80055dc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055e4:	d007      	beq.n	80055f6 <HAL_SPI_Init+0x7a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055ee:	d002      	beq.n	80055f6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10b      	bne.n	8005616 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005606:	d903      	bls.n	8005610 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	631a      	str	r2, [r3, #48]	; 0x30
 800560e:	e002      	b.n	8005616 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005634:	431a      	orrs	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	ea42 0103 	orr.w	r1, r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	0c1b      	lsrs	r3, r3, #16
 8005656:	f003 0204 	and.w	r2, r3, #4
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	ea42 0103 	orr.w	r1, r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	430a      	orrs	r2, r1
 8005676:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <HAL_SPI_Transmit+0x22>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e150      	b.n	8005954 <HAL_SPI_Transmit+0x2c4>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ba:	f7fc ff3b 	bl	8002534 <HAL_GetTick>
 80056be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d002      	beq.n	80056d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
 80056d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056d4:	e135      	b.n	8005942 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <HAL_SPI_Transmit+0x52>
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d102      	bne.n	80056e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056e6:	e12c      	b.n	8005942 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2203      	movs	r2, #3
 80056ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	88fa      	ldrh	r2, [r7, #6]
 8005706:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005732:	d107      	bne.n	8005744 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005742:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b40      	cmp	r3, #64	; 0x40
 8005750:	d007      	beq.n	8005762 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005760:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800576a:	d94b      	bls.n	8005804 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_SPI_Transmit+0xea>
 8005774:	8afb      	ldrh	r3, [r7, #22]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d13e      	bne.n	80057f8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	881a      	ldrh	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	1c9a      	adds	r2, r3, #2
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800579e:	e02b      	b.n	80057f8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d112      	bne.n	80057d4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b2:	881a      	ldrh	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	1c9a      	adds	r2, r3, #2
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057d2:	e011      	b.n	80057f8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057d4:	f7fc feae 	bl	8002534 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d803      	bhi.n	80057ec <HAL_SPI_Transmit+0x15c>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d102      	bne.n	80057f2 <HAL_SPI_Transmit+0x162>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d102      	bne.n	80057f8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057f6:	e0a4      	b.n	8005942 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1ce      	bne.n	80057a0 <HAL_SPI_Transmit+0x110>
 8005802:	e07c      	b.n	80058fe <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_SPI_Transmit+0x182>
 800580c:	8afb      	ldrh	r3, [r7, #22]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d170      	bne.n	80058f4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	d912      	bls.n	8005842 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	881a      	ldrh	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	1c9a      	adds	r2, r3, #2
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b02      	subs	r3, #2
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005840:	e058      	b.n	80058f4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	330c      	adds	r3, #12
 800584c:	7812      	ldrb	r2, [r2, #0]
 800584e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005868:	e044      	b.n	80058f4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b02      	cmp	r3, #2
 8005876:	d12b      	bne.n	80058d0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	d912      	bls.n	80058a8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005886:	881a      	ldrh	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	1c9a      	adds	r2, r3, #2
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b02      	subs	r3, #2
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058a6:	e025      	b.n	80058f4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	7812      	ldrb	r2, [r2, #0]
 80058b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058ce:	e011      	b.n	80058f4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d0:	f7fc fe30 	bl	8002534 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d803      	bhi.n	80058e8 <HAL_SPI_Transmit+0x258>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e6:	d102      	bne.n	80058ee <HAL_SPI_Transmit+0x25e>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d102      	bne.n	80058f4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058f2:	e026      	b.n	8005942 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1b5      	bne.n	800586a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	6839      	ldr	r1, [r7, #0]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 fb14 	bl	8005f30 <SPI_EndRxTxTransaction>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10a      	bne.n	8005932 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800591c:	2300      	movs	r3, #0
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	77fb      	strb	r3, [r7, #31]
 800593e:	e000      	b.n	8005942 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005940:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005952:	7ffb      	ldrb	r3, [r7, #31]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08a      	sub	sp, #40	; 0x28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800596a:	2301      	movs	r3, #1
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_SPI_TransmitReceive+0x26>
 800597e:	2302      	movs	r3, #2
 8005980:	e1fb      	b.n	8005d7a <HAL_SPI_TransmitReceive+0x41e>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800598a:	f7fc fdd3 	bl	8002534 <HAL_GetTick>
 800598e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005996:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80059a2:	887b      	ldrh	r3, [r7, #2]
 80059a4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059a6:	7efb      	ldrb	r3, [r7, #27]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d00e      	beq.n	80059ca <HAL_SPI_TransmitReceive+0x6e>
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b2:	d106      	bne.n	80059c2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <HAL_SPI_TransmitReceive+0x66>
 80059bc:	7efb      	ldrb	r3, [r7, #27]
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d003      	beq.n	80059ca <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80059c2:	2302      	movs	r3, #2
 80059c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80059c8:	e1cd      	b.n	8005d66 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_SPI_TransmitReceive+0x80>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_SPI_TransmitReceive+0x80>
 80059d6:	887b      	ldrh	r3, [r7, #2]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d103      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80059e2:	e1c0      	b.n	8005d66 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d003      	beq.n	80059f8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2205      	movs	r2, #5
 80059f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	887a      	ldrh	r2, [r7, #2]
 8005a08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	887a      	ldrh	r2, [r7, #2]
 8005a10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	887a      	ldrh	r2, [r7, #2]
 8005a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	887a      	ldrh	r2, [r7, #2]
 8005a24:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a3a:	d802      	bhi.n	8005a42 <HAL_SPI_TransmitReceive+0xe6>
 8005a3c:	8a3b      	ldrh	r3, [r7, #16]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d908      	bls.n	8005a54 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a50:	605a      	str	r2, [r3, #4]
 8005a52:	e007      	b.n	8005a64 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a62:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d007      	beq.n	8005a82 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a8a:	d97c      	bls.n	8005b86 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_SPI_TransmitReceive+0x13e>
 8005a94:	8a7b      	ldrh	r3, [r7, #18]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d169      	bne.n	8005b6e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	881a      	ldrh	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	1c9a      	adds	r2, r3, #2
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005abe:	e056      	b.n	8005b6e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d11b      	bne.n	8005b06 <HAL_SPI_TransmitReceive+0x1aa>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d016      	beq.n	8005b06 <HAL_SPI_TransmitReceive+0x1aa>
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d113      	bne.n	8005b06 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	881a      	ldrh	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	1c9a      	adds	r2, r3, #2
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d11c      	bne.n	8005b4e <HAL_SPI_TransmitReceive+0x1f2>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d016      	beq.n	8005b4e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	b292      	uxth	r2, r2
 8005b2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	1c9a      	adds	r2, r3, #2
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b4e:	f7fc fcf1 	bl	8002534 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d807      	bhi.n	8005b6e <HAL_SPI_TransmitReceive+0x212>
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d003      	beq.n	8005b6e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005b6c:	e0fb      	b.n	8005d66 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1a3      	bne.n	8005ac0 <HAL_SPI_TransmitReceive+0x164>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d19d      	bne.n	8005ac0 <HAL_SPI_TransmitReceive+0x164>
 8005b84:	e0df      	b.n	8005d46 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_SPI_TransmitReceive+0x23a>
 8005b8e:	8a7b      	ldrh	r3, [r7, #18]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	f040 80cb 	bne.w	8005d2c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d912      	bls.n	8005bc6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	881a      	ldrh	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	1c9a      	adds	r2, r3, #2
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b02      	subs	r3, #2
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bc4:	e0b2      	b.n	8005d2c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	330c      	adds	r3, #12
 8005bd0:	7812      	ldrb	r2, [r2, #0]
 8005bd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bec:	e09e      	b.n	8005d2c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d134      	bne.n	8005c66 <HAL_SPI_TransmitReceive+0x30a>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d02f      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x30a>
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d12c      	bne.n	8005c66 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d912      	bls.n	8005c3c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	881a      	ldrh	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	1c9a      	adds	r2, r3, #2
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b02      	subs	r3, #2
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c3a:	e012      	b.n	8005c62 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	7812      	ldrb	r2, [r2, #0]
 8005c48:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d148      	bne.n	8005d06 <HAL_SPI_TransmitReceive+0x3aa>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d042      	beq.n	8005d06 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d923      	bls.n	8005cd4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	b292      	uxth	r2, r2
 8005c98:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	1c9a      	adds	r2, r3, #2
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b02      	subs	r3, #2
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d81f      	bhi.n	8005d02 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	e016      	b.n	8005d02 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f103 020c 	add.w	r2, r3, #12
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	7812      	ldrb	r2, [r2, #0]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d02:	2301      	movs	r3, #1
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d06:	f7fc fc15 	bl	8002534 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d803      	bhi.n	8005d1e <HAL_SPI_TransmitReceive+0x3c2>
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1c:	d102      	bne.n	8005d24 <HAL_SPI_TransmitReceive+0x3c8>
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d2a:	e01c      	b.n	8005d66 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f47f af5b 	bne.w	8005bee <HAL_SPI_TransmitReceive+0x292>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f47f af54 	bne.w	8005bee <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 f8f0 	bl	8005f30 <SPI_EndRxTxTransaction>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d006      	beq.n	8005d64 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	661a      	str	r2, [r3, #96]	; 0x60
 8005d62:	e000      	b.n	8005d66 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005d64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3728      	adds	r7, #40	; 0x28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	603b      	str	r3, [r7, #0]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d92:	e04c      	b.n	8005e2e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d048      	beq.n	8005e2e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005d9c:	f7fc fbca 	bl	8002534 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d902      	bls.n	8005db2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d13d      	bne.n	8005e2e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dca:	d111      	bne.n	8005df0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd4:	d004      	beq.n	8005de0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dde:	d107      	bne.n	8005df0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df8:	d10f      	bne.n	8005e1a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e00f      	b.n	8005e4e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4013      	ands	r3, r2
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	bf0c      	ite	eq
 8005e3e:	2301      	moveq	r3, #1
 8005e40:	2300      	movne	r3, #0
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d1a3      	bne.n	8005d94 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e64:	e057      	b.n	8005f16 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e6c:	d106      	bne.n	8005e7c <SPI_WaitFifoStateUntilTimeout+0x26>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d103      	bne.n	8005e7c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	330c      	adds	r3, #12
 8005e7a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d048      	beq.n	8005f16 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005e84:	f7fc fb56 	bl	8002534 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d902      	bls.n	8005e9a <SPI_WaitFifoStateUntilTimeout+0x44>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d13d      	bne.n	8005f16 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ea8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb2:	d111      	bne.n	8005ed8 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ebc:	d004      	beq.n	8005ec8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec6:	d107      	bne.n	8005ed8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee0:	d10f      	bne.n	8005f02 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e008      	b.n	8005f28 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d19f      	bne.n	8005e66 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7ff ff84 	bl	8005e56 <SPI_WaitFifoStateUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d007      	beq.n	8005f64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e027      	b.n	8005fb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2180      	movs	r1, #128	; 0x80
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff ff07 	bl	8005d82 <SPI_WaitFlagStateUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7e:	f043 0220 	orr.w	r2, r3, #32
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e014      	b.n	8005fb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7ff ff5d 	bl	8005e56 <SPI_WaitFifoStateUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d007      	beq.n	8005fb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa6:	f043 0220 	orr.w	r2, r3, #32
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e000      	b.n	8005fb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e01d      	b.n	800600a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f815 	bl	8006012 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	f000 f986 	bl	800630c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
	...

08006028 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0201 	orr.w	r2, r2, #1
 800603e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <HAL_TIM_Base_Start_IT+0x50>)
 8006048:	4013      	ands	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b06      	cmp	r3, #6
 8006050:	d00b      	beq.n	800606a <HAL_TIM_Base_Start_IT+0x42>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006058:	d007      	beq.n	800606a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 0201 	orr.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	00010007 	.word	0x00010007

0800607c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b02      	cmp	r3, #2
 8006090:	d122      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b02      	cmp	r3, #2
 800609e:	d11b      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f06f 0202 	mvn.w	r2, #2
 80060a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f905 	bl	80062ce <HAL_TIM_IC_CaptureCallback>
 80060c4:	e005      	b.n	80060d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f8f7 	bl	80062ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f908 	bl	80062e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d122      	bne.n	800612c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	d11b      	bne.n	800612c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0204 	mvn.w	r2, #4
 80060fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2202      	movs	r2, #2
 8006102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f8db 	bl	80062ce <HAL_TIM_IC_CaptureCallback>
 8006118:	e005      	b.n	8006126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f8cd 	bl	80062ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f8de 	bl	80062e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b08      	cmp	r3, #8
 8006138:	d122      	bne.n	8006180 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b08      	cmp	r3, #8
 8006146:	d11b      	bne.n	8006180 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0208 	mvn.w	r2, #8
 8006150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2204      	movs	r2, #4
 8006156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f8b1 	bl	80062ce <HAL_TIM_IC_CaptureCallback>
 800616c:	e005      	b.n	800617a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f8a3 	bl	80062ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f8b4 	bl	80062e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0310 	and.w	r3, r3, #16
 800618a:	2b10      	cmp	r3, #16
 800618c:	d122      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	2b10      	cmp	r3, #16
 800619a:	d11b      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0210 	mvn.w	r2, #16
 80061a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2208      	movs	r2, #8
 80061aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f887 	bl	80062ce <HAL_TIM_IC_CaptureCallback>
 80061c0:	e005      	b.n	80061ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f879 	bl	80062ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f88a 	bl	80062e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d10e      	bne.n	8006200 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d107      	bne.n	8006200 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0201 	mvn.w	r2, #1
 80061f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fb feb0 	bl	8001f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620a:	2b80      	cmp	r3, #128	; 0x80
 800620c:	d10e      	bne.n	800622c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006218:	2b80      	cmp	r3, #128	; 0x80
 800621a:	d107      	bne.n	800622c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f8de 	bl	80063e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623a:	d10e      	bne.n	800625a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006246:	2b80      	cmp	r3, #128	; 0x80
 8006248:	d107      	bne.n	800625a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f8d1 	bl	80063fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d10e      	bne.n	8006286 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b40      	cmp	r3, #64	; 0x40
 8006274:	d107      	bne.n	8006286 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800627e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f838 	bl	80062f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b20      	cmp	r3, #32
 8006292:	d10e      	bne.n	80062b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b20      	cmp	r3, #32
 80062a0:	d107      	bne.n	80062b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f06f 0220 	mvn.w	r2, #32
 80062aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f891 	bl	80063d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
	...

0800630c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a2a      	ldr	r2, [pc, #168]	; (80063c8 <TIM_Base_SetConfig+0xbc>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_Base_SetConfig+0x20>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800632a:	d108      	bne.n	800633e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a21      	ldr	r2, [pc, #132]	; (80063c8 <TIM_Base_SetConfig+0xbc>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00b      	beq.n	800635e <TIM_Base_SetConfig+0x52>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634c:	d007      	beq.n	800635e <TIM_Base_SetConfig+0x52>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <TIM_Base_SetConfig+0xc0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d003      	beq.n	800635e <TIM_Base_SetConfig+0x52>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a1d      	ldr	r2, [pc, #116]	; (80063d0 <TIM_Base_SetConfig+0xc4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d108      	bne.n	8006370 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a0c      	ldr	r2, [pc, #48]	; (80063c8 <TIM_Base_SetConfig+0xbc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d007      	beq.n	80063ac <TIM_Base_SetConfig+0xa0>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a0b      	ldr	r2, [pc, #44]	; (80063cc <TIM_Base_SetConfig+0xc0>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <TIM_Base_SetConfig+0xa0>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <TIM_Base_SetConfig+0xc4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d103      	bne.n	80063b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	691a      	ldr	r2, [r3, #16]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	615a      	str	r2, [r3, #20]
}
 80063ba:	bf00      	nop
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	40012c00 	.word	0x40012c00
 80063cc:	40014000 	.word	0x40014000
 80063d0:	40014400 	.word	0x40014400

080063d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e040      	b.n	80064a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fb fe92 	bl	800215c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2224      	movs	r2, #36	; 0x24
 800643c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0201 	bic.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f8fa 	bl	8006648 <UART_SetConfig>
 8006454:	4603      	mov	r3, r0
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e022      	b.n	80064a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fc02 	bl	8006c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800647a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800648a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fc89 	bl	8006db4 <UART_CheckIdleState>
 80064a2:	4603      	mov	r3, r0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	; 0x28
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	f040 80bb 	bne.w	800663c <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <HAL_UART_Receive+0x26>
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e0b3      	b.n	800663e <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_UART_Receive+0x38>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e0ac      	b.n	800663e <HAL_UART_Receive+0x192>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2222      	movs	r2, #34	; 0x22
 80064f6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80064f8:	f7fc f81c 	bl	8002534 <HAL_GetTick>
 80064fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	88fa      	ldrh	r2, [r7, #6]
 8006502:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	88fa      	ldrh	r2, [r7, #6]
 800650a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006516:	d10e      	bne.n	8006536 <HAL_UART_Receive+0x8a>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d105      	bne.n	800652c <HAL_UART_Receive+0x80>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006526:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800652a:	e02d      	b.n	8006588 <HAL_UART_Receive+0xdc>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	22ff      	movs	r2, #255	; 0xff
 8006530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006534:	e028      	b.n	8006588 <HAL_UART_Receive+0xdc>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10d      	bne.n	800655a <HAL_UART_Receive+0xae>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d104      	bne.n	8006550 <HAL_UART_Receive+0xa4>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	22ff      	movs	r2, #255	; 0xff
 800654a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800654e:	e01b      	b.n	8006588 <HAL_UART_Receive+0xdc>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	227f      	movs	r2, #127	; 0x7f
 8006554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006558:	e016      	b.n	8006588 <HAL_UART_Receive+0xdc>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006562:	d10d      	bne.n	8006580 <HAL_UART_Receive+0xd4>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d104      	bne.n	8006576 <HAL_UART_Receive+0xca>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	227f      	movs	r2, #127	; 0x7f
 8006570:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006574:	e008      	b.n	8006588 <HAL_UART_Receive+0xdc>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	223f      	movs	r2, #63	; 0x3f
 800657a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800657e:	e003      	b.n	8006588 <HAL_UART_Receive+0xdc>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800658e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006598:	d108      	bne.n	80065ac <HAL_UART_Receive+0x100>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d104      	bne.n	80065ac <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	e003      	b.n	80065b4 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80065bc:	e033      	b.n	8006626 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2200      	movs	r2, #0
 80065c6:	2120      	movs	r1, #32
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 fc38 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e032      	b.n	800663e <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10c      	bne.n	80065f8 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	8a7b      	ldrh	r3, [r7, #18]
 80065e8:	4013      	ands	r3, r2
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	3302      	adds	r3, #2
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	e00d      	b.n	8006614 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065fe:	b29b      	uxth	r3, r3
 8006600:	b2da      	uxtb	r2, r3
 8006602:	8a7b      	ldrh	r3, [r7, #18]
 8006604:	b2db      	uxtb	r3, r3
 8006606:	4013      	ands	r3, r2
 8006608:	b2da      	uxtb	r2, r3
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	3301      	adds	r3, #1
 8006612:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1c5      	bne.n	80065be <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2220      	movs	r2, #32
 8006636:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006638:	2300      	movs	r3, #0
 800663a:	e000      	b.n	800663e <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800663c:	2302      	movs	r3, #2
  }
}
 800663e:	4618      	mov	r0, r3
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006648:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800664c:	b08a      	sub	sp, #40	; 0x28
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006652:	2300      	movs	r3, #0
 8006654:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800665a:	2300      	movs	r3, #0
 800665c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	431a      	orrs	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	4313      	orrs	r3, r2
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	4bbc      	ldr	r3, [pc, #752]	; (8006970 <UART_SetConfig+0x328>)
 800667e:	4013      	ands	r3, r2
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6812      	ldr	r2, [r2, #0]
 8006684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006686:	430b      	orrs	r3, r1
 8006688:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4ab2      	ldr	r2, [pc, #712]	; (8006974 <UART_SetConfig+0x32c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d004      	beq.n	80066ba <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b6:	4313      	orrs	r3, r2
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ca:	430a      	orrs	r2, r1
 80066cc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4aa9      	ldr	r2, [pc, #676]	; (8006978 <UART_SetConfig+0x330>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d126      	bne.n	8006726 <UART_SetConfig+0xde>
 80066d8:	4ba8      	ldr	r3, [pc, #672]	; (800697c <UART_SetConfig+0x334>)
 80066da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d81a      	bhi.n	800671c <UART_SetConfig+0xd4>
 80066e6:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <UART_SetConfig+0xa4>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	080066fd 	.word	0x080066fd
 80066f0:	0800670d 	.word	0x0800670d
 80066f4:	08006705 	.word	0x08006705
 80066f8:	08006715 	.word	0x08006715
 80066fc:	2301      	movs	r3, #1
 80066fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006702:	e0ab      	b.n	800685c <UART_SetConfig+0x214>
 8006704:	2302      	movs	r3, #2
 8006706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800670a:	e0a7      	b.n	800685c <UART_SetConfig+0x214>
 800670c:	2304      	movs	r3, #4
 800670e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006712:	e0a3      	b.n	800685c <UART_SetConfig+0x214>
 8006714:	2308      	movs	r3, #8
 8006716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671a:	e09f      	b.n	800685c <UART_SetConfig+0x214>
 800671c:	2310      	movs	r3, #16
 800671e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006722:	bf00      	nop
 8006724:	e09a      	b.n	800685c <UART_SetConfig+0x214>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a95      	ldr	r2, [pc, #596]	; (8006980 <UART_SetConfig+0x338>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d138      	bne.n	80067a2 <UART_SetConfig+0x15a>
 8006730:	4b92      	ldr	r3, [pc, #584]	; (800697c <UART_SetConfig+0x334>)
 8006732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006736:	f003 030c 	and.w	r3, r3, #12
 800673a:	2b0c      	cmp	r3, #12
 800673c:	d82c      	bhi.n	8006798 <UART_SetConfig+0x150>
 800673e:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <UART_SetConfig+0xfc>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	08006779 	.word	0x08006779
 8006748:	08006799 	.word	0x08006799
 800674c:	08006799 	.word	0x08006799
 8006750:	08006799 	.word	0x08006799
 8006754:	08006789 	.word	0x08006789
 8006758:	08006799 	.word	0x08006799
 800675c:	08006799 	.word	0x08006799
 8006760:	08006799 	.word	0x08006799
 8006764:	08006781 	.word	0x08006781
 8006768:	08006799 	.word	0x08006799
 800676c:	08006799 	.word	0x08006799
 8006770:	08006799 	.word	0x08006799
 8006774:	08006791 	.word	0x08006791
 8006778:	2300      	movs	r3, #0
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677e:	e06d      	b.n	800685c <UART_SetConfig+0x214>
 8006780:	2302      	movs	r3, #2
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006786:	e069      	b.n	800685c <UART_SetConfig+0x214>
 8006788:	2304      	movs	r3, #4
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678e:	e065      	b.n	800685c <UART_SetConfig+0x214>
 8006790:	2308      	movs	r3, #8
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006796:	e061      	b.n	800685c <UART_SetConfig+0x214>
 8006798:	2310      	movs	r3, #16
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679e:	bf00      	nop
 80067a0:	e05c      	b.n	800685c <UART_SetConfig+0x214>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a77      	ldr	r2, [pc, #476]	; (8006984 <UART_SetConfig+0x33c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d125      	bne.n	80067f8 <UART_SetConfig+0x1b0>
 80067ac:	4b73      	ldr	r3, [pc, #460]	; (800697c <UART_SetConfig+0x334>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067b6:	2b10      	cmp	r3, #16
 80067b8:	d011      	beq.n	80067de <UART_SetConfig+0x196>
 80067ba:	2b10      	cmp	r3, #16
 80067bc:	d802      	bhi.n	80067c4 <UART_SetConfig+0x17c>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <UART_SetConfig+0x186>
 80067c2:	e014      	b.n	80067ee <UART_SetConfig+0x1a6>
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d006      	beq.n	80067d6 <UART_SetConfig+0x18e>
 80067c8:	2b30      	cmp	r3, #48	; 0x30
 80067ca:	d00c      	beq.n	80067e6 <UART_SetConfig+0x19e>
 80067cc:	e00f      	b.n	80067ee <UART_SetConfig+0x1a6>
 80067ce:	2300      	movs	r3, #0
 80067d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d4:	e042      	b.n	800685c <UART_SetConfig+0x214>
 80067d6:	2302      	movs	r3, #2
 80067d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067dc:	e03e      	b.n	800685c <UART_SetConfig+0x214>
 80067de:	2304      	movs	r3, #4
 80067e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e4:	e03a      	b.n	800685c <UART_SetConfig+0x214>
 80067e6:	2308      	movs	r3, #8
 80067e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ec:	e036      	b.n	800685c <UART_SetConfig+0x214>
 80067ee:	2310      	movs	r3, #16
 80067f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f4:	bf00      	nop
 80067f6:	e031      	b.n	800685c <UART_SetConfig+0x214>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a5d      	ldr	r2, [pc, #372]	; (8006974 <UART_SetConfig+0x32c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d129      	bne.n	8006856 <UART_SetConfig+0x20e>
 8006802:	4b5e      	ldr	r3, [pc, #376]	; (800697c <UART_SetConfig+0x334>)
 8006804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006808:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800680c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006810:	d014      	beq.n	800683c <UART_SetConfig+0x1f4>
 8006812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006816:	d802      	bhi.n	800681e <UART_SetConfig+0x1d6>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d007      	beq.n	800682c <UART_SetConfig+0x1e4>
 800681c:	e016      	b.n	800684c <UART_SetConfig+0x204>
 800681e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006822:	d007      	beq.n	8006834 <UART_SetConfig+0x1ec>
 8006824:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006828:	d00c      	beq.n	8006844 <UART_SetConfig+0x1fc>
 800682a:	e00f      	b.n	800684c <UART_SetConfig+0x204>
 800682c:	2300      	movs	r3, #0
 800682e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006832:	e013      	b.n	800685c <UART_SetConfig+0x214>
 8006834:	2302      	movs	r3, #2
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683a:	e00f      	b.n	800685c <UART_SetConfig+0x214>
 800683c:	2304      	movs	r3, #4
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006842:	e00b      	b.n	800685c <UART_SetConfig+0x214>
 8006844:	2308      	movs	r3, #8
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684a:	e007      	b.n	800685c <UART_SetConfig+0x214>
 800684c:	2310      	movs	r3, #16
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006852:	bf00      	nop
 8006854:	e002      	b.n	800685c <UART_SetConfig+0x214>
 8006856:	2310      	movs	r3, #16
 8006858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a44      	ldr	r2, [pc, #272]	; (8006974 <UART_SetConfig+0x32c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	f040 80fb 	bne.w	8006a5e <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006868:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800686c:	2b08      	cmp	r3, #8
 800686e:	d824      	bhi.n	80068ba <UART_SetConfig+0x272>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <UART_SetConfig+0x230>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	0800689d 	.word	0x0800689d
 800687c:	080068bb 	.word	0x080068bb
 8006880:	080068a5 	.word	0x080068a5
 8006884:	080068bb 	.word	0x080068bb
 8006888:	080068ab 	.word	0x080068ab
 800688c:	080068bb 	.word	0x080068bb
 8006890:	080068bb 	.word	0x080068bb
 8006894:	080068bb 	.word	0x080068bb
 8006898:	080068b3 	.word	0x080068b3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800689c:	f7fe fa6c 	bl	8004d78 <HAL_RCC_GetPCLK1Freq>
 80068a0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068a2:	e00d      	b.n	80068c0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80068a4:	4b38      	ldr	r3, [pc, #224]	; (8006988 <UART_SetConfig+0x340>)
 80068a6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068a8:	e00a      	b.n	80068c0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80068aa:	f7fe f9cf 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 80068ae:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068b0:	e006      	b.n	80068c0 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80068b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068b8:	e002      	b.n	80068c0 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	76fb      	strb	r3, [r7, #27]
        break;
 80068be:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 81c8 	beq.w	8006c58 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	4613      	mov	r3, r2
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	4413      	add	r3, r2
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d305      	bcc.n	80068e4 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d902      	bls.n	80068ea <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	76fb      	strb	r3, [r7, #27]
 80068e8:	e1b6      	b.n	8006c58 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 80068ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	f200 80a2 	bhi.w	8006a38 <UART_SetConfig+0x3f0>
 80068f4:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <UART_SetConfig+0x2b4>)
 80068f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fa:	bf00      	nop
 80068fc:	08006921 	.word	0x08006921
 8006900:	08006a39 	.word	0x08006a39
 8006904:	0800698d 	.word	0x0800698d
 8006908:	08006a39 	.word	0x08006a39
 800690c:	080069c1 	.word	0x080069c1
 8006910:	08006a39 	.word	0x08006a39
 8006914:	08006a39 	.word	0x08006a39
 8006918:	08006a39 	.word	0x08006a39
 800691c:	08006a0f 	.word	0x08006a0f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006920:	f7fe fa2a 	bl	8004d78 <HAL_RCC_GetPCLK1Freq>
 8006924:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	4619      	mov	r1, r3
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	f04f 0300 	mov.w	r3, #0
 8006932:	f04f 0400 	mov.w	r4, #0
 8006936:	0214      	lsls	r4, r2, #8
 8006938:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800693c:	020b      	lsls	r3, r1, #8
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6852      	ldr	r2, [r2, #4]
 8006942:	0852      	lsrs	r2, r2, #1
 8006944:	4611      	mov	r1, r2
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	eb13 0b01 	adds.w	fp, r3, r1
 800694e:	eb44 0c02 	adc.w	ip, r4, r2
 8006952:	4658      	mov	r0, fp
 8006954:	4661      	mov	r1, ip
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f04f 0400 	mov.w	r4, #0
 800695e:	461a      	mov	r2, r3
 8006960:	4623      	mov	r3, r4
 8006962:	f7f9 fc8d 	bl	8000280 <__aeabi_uldivmod>
 8006966:	4603      	mov	r3, r0
 8006968:	460c      	mov	r4, r1
 800696a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800696c:	e067      	b.n	8006a3e <UART_SetConfig+0x3f6>
 800696e:	bf00      	nop
 8006970:	efff69f3 	.word	0xefff69f3
 8006974:	40008000 	.word	0x40008000
 8006978:	40013800 	.word	0x40013800
 800697c:	40021000 	.word	0x40021000
 8006980:	40004400 	.word	0x40004400
 8006984:	40004800 	.word	0x40004800
 8006988:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	085b      	lsrs	r3, r3, #1
 8006992:	f04f 0400 	mov.w	r4, #0
 8006996:	49ae      	ldr	r1, [pc, #696]	; (8006c50 <UART_SetConfig+0x608>)
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	eb13 0b01 	adds.w	fp, r3, r1
 80069a0:	eb44 0c02 	adc.w	ip, r4, r2
 80069a4:	4658      	mov	r0, fp
 80069a6:	4661      	mov	r1, ip
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f04f 0400 	mov.w	r4, #0
 80069b0:	461a      	mov	r2, r3
 80069b2:	4623      	mov	r3, r4
 80069b4:	f7f9 fc64 	bl	8000280 <__aeabi_uldivmod>
 80069b8:	4603      	mov	r3, r0
 80069ba:	460c      	mov	r4, r1
 80069bc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80069be:	e03e      	b.n	8006a3e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80069c0:	f7fe f944 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 80069c4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	4619      	mov	r1, r3
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	f04f 0400 	mov.w	r4, #0
 80069d6:	0214      	lsls	r4, r2, #8
 80069d8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80069dc:	020b      	lsls	r3, r1, #8
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	6852      	ldr	r2, [r2, #4]
 80069e2:	0852      	lsrs	r2, r2, #1
 80069e4:	4611      	mov	r1, r2
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	eb13 0b01 	adds.w	fp, r3, r1
 80069ee:	eb44 0c02 	adc.w	ip, r4, r2
 80069f2:	4658      	mov	r0, fp
 80069f4:	4661      	mov	r1, ip
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f04f 0400 	mov.w	r4, #0
 80069fe:	461a      	mov	r2, r3
 8006a00:	4623      	mov	r3, r4
 8006a02:	f7f9 fc3d 	bl	8000280 <__aeabi_uldivmod>
 8006a06:	4603      	mov	r3, r0
 8006a08:	460c      	mov	r4, r1
 8006a0a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a0c:	e017      	b.n	8006a3e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	085b      	lsrs	r3, r3, #1
 8006a14:	f04f 0400 	mov.w	r4, #0
 8006a18:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006a1c:	f144 0100 	adc.w	r1, r4, #0
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f04f 0400 	mov.w	r4, #0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4623      	mov	r3, r4
 8006a2c:	f7f9 fc28 	bl	8000280 <__aeabi_uldivmod>
 8006a30:	4603      	mov	r3, r0
 8006a32:	460c      	mov	r4, r1
 8006a34:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a36:	e002      	b.n	8006a3e <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	76fb      	strb	r3, [r7, #27]
            break;
 8006a3c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a44:	d308      	bcc.n	8006a58 <UART_SetConfig+0x410>
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a4c:	d204      	bcs.n	8006a58 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	60da      	str	r2, [r3, #12]
 8006a56:	e0ff      	b.n	8006c58 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	76fb      	strb	r3, [r7, #27]
 8006a5c:	e0fc      	b.n	8006c58 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a66:	f040 8083 	bne.w	8006b70 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8006a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d85e      	bhi.n	8006b30 <UART_SetConfig+0x4e8>
 8006a72:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <UART_SetConfig+0x430>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006a9d 	.word	0x08006a9d
 8006a7c:	08006abd 	.word	0x08006abd
 8006a80:	08006add 	.word	0x08006add
 8006a84:	08006b31 	.word	0x08006b31
 8006a88:	08006af9 	.word	0x08006af9
 8006a8c:	08006b31 	.word	0x08006b31
 8006a90:	08006b31 	.word	0x08006b31
 8006a94:	08006b31 	.word	0x08006b31
 8006a98:	08006b19 	.word	0x08006b19
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a9c:	f7fe f96c 	bl	8004d78 <HAL_RCC_GetPCLK1Freq>
 8006aa0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	005a      	lsls	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	085b      	lsrs	r3, r3, #1
 8006aac:	441a      	add	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006aba:	e03c      	b.n	8006b36 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006abc:	f7fe f972 	bl	8004da4 <HAL_RCC_GetPCLK2Freq>
 8006ac0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	005a      	lsls	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	441a      	add	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ada:	e02c      	b.n	8006b36 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	085b      	lsrs	r3, r3, #1
 8006ae2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006ae6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6852      	ldr	r2, [r2, #4]
 8006aee:	fbb3 f3f2 	udiv	r3, r3, r2
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006af6:	e01e      	b.n	8006b36 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006af8:	f7fe f8a8 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006afc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	005a      	lsls	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	441a      	add	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b16:	e00e      	b.n	8006b36 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b2e:	e002      	b.n	8006b36 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	76fb      	strb	r3, [r7, #27]
        break;
 8006b34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	2b0f      	cmp	r3, #15
 8006b3a:	d916      	bls.n	8006b6a <UART_SetConfig+0x522>
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b42:	d212      	bcs.n	8006b6a <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f023 030f 	bic.w	r3, r3, #15
 8006b4c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	085b      	lsrs	r3, r3, #1
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	89fb      	ldrh	r3, [r7, #14]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	89fa      	ldrh	r2, [r7, #14]
 8006b66:	60da      	str	r2, [r3, #12]
 8006b68:	e076      	b.n	8006c58 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	76fb      	strb	r3, [r7, #27]
 8006b6e:	e073      	b.n	8006c58 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 8006b70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d85c      	bhi.n	8006c32 <UART_SetConfig+0x5ea>
 8006b78:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <UART_SetConfig+0x538>)
 8006b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7e:	bf00      	nop
 8006b80:	08006ba5 	.word	0x08006ba5
 8006b84:	08006bc3 	.word	0x08006bc3
 8006b88:	08006be1 	.word	0x08006be1
 8006b8c:	08006c33 	.word	0x08006c33
 8006b90:	08006bfd 	.word	0x08006bfd
 8006b94:	08006c33 	.word	0x08006c33
 8006b98:	08006c33 	.word	0x08006c33
 8006b9c:	08006c33 	.word	0x08006c33
 8006ba0:	08006c1b 	.word	0x08006c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ba4:	f7fe f8e8 	bl	8004d78 <HAL_RCC_GetPCLK1Freq>
 8006ba8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	085a      	lsrs	r2, r3, #1
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	441a      	add	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bc0:	e03a      	b.n	8006c38 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bc2:	f7fe f8ef 	bl	8004da4 <HAL_RCC_GetPCLK2Freq>
 8006bc6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	085a      	lsrs	r2, r3, #1
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	441a      	add	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bde:	e02b      	b.n	8006c38 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	085b      	lsrs	r3, r3, #1
 8006be6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006bea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6852      	ldr	r2, [r2, #4]
 8006bf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bfa:	e01d      	b.n	8006c38 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bfc:	f7fe f826 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8006c00:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	085a      	lsrs	r2, r3, #1
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	441a      	add	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c18:	e00e      	b.n	8006c38 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c30:	e002      	b.n	8006c38 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	76fb      	strb	r3, [r7, #27]
        break;
 8006c36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	2b0f      	cmp	r3, #15
 8006c3c:	d90a      	bls.n	8006c54 <UART_SetConfig+0x60c>
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c44:	d206      	bcs.n	8006c54 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	60da      	str	r2, [r3, #12]
 8006c4e:	e003      	b.n	8006c58 <UART_SetConfig+0x610>
 8006c50:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006c64:	7efb      	ldrb	r3, [r7, #27]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3728      	adds	r7, #40	; 0x28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00a      	beq.n	8006c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00a      	beq.n	8006cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00a      	beq.n	8006d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01a      	beq.n	8006d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d6e:	d10a      	bne.n	8006d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	605a      	str	r2, [r3, #4]
  }
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af02      	add	r7, sp, #8
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006dc2:	f7fb fbb7 	bl	8002534 <HAL_GetTick>
 8006dc6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0308 	and.w	r3, r3, #8
 8006dd2:	2b08      	cmp	r3, #8
 8006dd4:	d10e      	bne.n	8006df4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f82a 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e020      	b.n	8006e36 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d10e      	bne.n	8006e20 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f814 	bl	8006e3e <UART_WaitOnFlagUntilTimeout>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e00a      	b.n	8006e36 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e4e:	e05d      	b.n	8006f0c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d059      	beq.n	8006f0c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e58:	f7fb fb6c 	bl	8002534 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d302      	bcc.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x30>
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d11b      	bne.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e7c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0201 	bic.w	r2, r2, #1
 8006e8c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2220      	movs	r2, #32
 8006e92:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2220      	movs	r2, #32
 8006e98:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e042      	b.n	8006f2c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d02b      	beq.n	8006f0c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ec2:	d123      	bne.n	8006f0c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ecc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006edc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0201 	bic.w	r2, r2, #1
 8006eec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2220      	movs	r2, #32
 8006efe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e00f      	b.n	8006f2c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69da      	ldr	r2, [r3, #28]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	4013      	ands	r3, r2
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	bf0c      	ite	eq
 8006f1c:	2301      	moveq	r3, #1
 8006f1e:	2300      	movne	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	461a      	mov	r2, r3
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d092      	beq.n	8006e50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f34:	b490      	push	{r4, r7}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f58:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	78db      	ldrb	r3, [r3, #3]
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d819      	bhi.n	8006f96 <USB_ActivateEndpoint+0x62>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <USB_ActivateEndpoint+0x34>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006f79 	.word	0x08006f79
 8006f6c:	08006f8d 	.word	0x08006f8d
 8006f70:	08006f9d 	.word	0x08006f9d
 8006f74:	08006f83 	.word	0x08006f83
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006f78:	89bb      	ldrh	r3, [r7, #12]
 8006f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f7e:	81bb      	strh	r3, [r7, #12]
      break;
 8006f80:	e00d      	b.n	8006f9e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006f82:	89bb      	ldrh	r3, [r7, #12]
 8006f84:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006f88:	81bb      	strh	r3, [r7, #12]
      break;
 8006f8a:	e008      	b.n	8006f9e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006f8c:	89bb      	ldrh	r3, [r7, #12]
 8006f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f92:	81bb      	strh	r3, [r7, #12]
      break;
 8006f94:	e003      	b.n	8006f9e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	73fb      	strb	r3, [r7, #15]
      break;
 8006f9a:	e000      	b.n	8006f9e <USB_ActivateEndpoint+0x6a>
      break;
 8006f9c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	89bb      	ldrh	r3, [r7, #12]
 8006faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	b21b      	sxth	r3, r3
 8006fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd6:	b21a      	sxth	r2, r3
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	b21b      	sxth	r3, r3
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	b21b      	sxth	r3, r3
 8006fe2:	b29c      	uxth	r4, r3
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	441a      	add	r2, r3
 8006fee:	4b8a      	ldr	r3, [pc, #552]	; (8007218 <USB_ActivateEndpoint+0x2e4>)
 8006ff0:	4323      	orrs	r3, r4
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	7b1b      	ldrb	r3, [r3, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f040 8112 	bne.w	8007224 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	785b      	ldrb	r3, [r3, #1]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d067      	beq.n	80070d8 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007008:	687c      	ldr	r4, [r7, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007010:	b29b      	uxth	r3, r3
 8007012:	441c      	add	r4, r3
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	4423      	add	r3, r4
 800701c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007020:	461c      	mov	r4, r3
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	88db      	ldrh	r3, [r3, #6]
 8007026:	085b      	lsrs	r3, r3, #1
 8007028:	b29b      	uxth	r3, r3
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	b29b      	uxth	r3, r3
 800702e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29c      	uxth	r4, r3
 800703e:	4623      	mov	r3, r4
 8007040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d014      	beq.n	8007072 <USB_ActivateEndpoint+0x13e>
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705e:	b29c      	uxth	r4, r3
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	4b6c      	ldr	r3, [pc, #432]	; (800721c <USB_ActivateEndpoint+0x2e8>)
 800706c:	4323      	orrs	r3, r4
 800706e:	b29b      	uxth	r3, r3
 8007070:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	78db      	ldrb	r3, [r3, #3]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d018      	beq.n	80070ac <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800708c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007090:	b29c      	uxth	r4, r3
 8007092:	f084 0320 	eor.w	r3, r4, #32
 8007096:	b29c      	uxth	r4, r3
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	441a      	add	r2, r3
 80070a2:	4b5d      	ldr	r3, [pc, #372]	; (8007218 <USB_ActivateEndpoint+0x2e4>)
 80070a4:	4323      	orrs	r3, r4
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	8013      	strh	r3, [r2, #0]
 80070aa:	e22b      	b.n	8007504 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c2:	b29c      	uxth	r4, r3
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	441a      	add	r2, r3
 80070ce:	4b52      	ldr	r3, [pc, #328]	; (8007218 <USB_ActivateEndpoint+0x2e4>)
 80070d0:	4323      	orrs	r3, r4
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	8013      	strh	r3, [r2, #0]
 80070d6:	e215      	b.n	8007504 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80070d8:	687c      	ldr	r4, [r7, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	441c      	add	r4, r3
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	4423      	add	r3, r4
 80070ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070f0:	461c      	mov	r4, r3
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	88db      	ldrh	r3, [r3, #6]
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007100:	687c      	ldr	r4, [r7, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007108:	b29b      	uxth	r3, r3
 800710a:	441c      	add	r4, r3
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	4423      	add	r3, r4
 8007114:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007118:	461c      	mov	r4, r3
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10e      	bne.n	8007140 <USB_ActivateEndpoint+0x20c>
 8007122:	8823      	ldrh	r3, [r4, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800712a:	b29b      	uxth	r3, r3
 800712c:	8023      	strh	r3, [r4, #0]
 800712e:	8823      	ldrh	r3, [r4, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713a:	b29b      	uxth	r3, r3
 800713c:	8023      	strh	r3, [r4, #0]
 800713e:	e02d      	b.n	800719c <USB_ActivateEndpoint+0x268>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b3e      	cmp	r3, #62	; 0x3e
 8007146:	d812      	bhi.n	800716e <USB_ActivateEndpoint+0x23a>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	085b      	lsrs	r3, r3, #1
 800714e:	60bb      	str	r3, [r7, #8]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <USB_ActivateEndpoint+0x22e>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	3301      	adds	r3, #1
 8007160:	60bb      	str	r3, [r7, #8]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	b29b      	uxth	r3, r3
 8007166:	029b      	lsls	r3, r3, #10
 8007168:	b29b      	uxth	r3, r3
 800716a:	8023      	strh	r3, [r4, #0]
 800716c:	e016      	b.n	800719c <USB_ActivateEndpoint+0x268>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	60bb      	str	r3, [r7, #8]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	2b00      	cmp	r3, #0
 8007180:	d102      	bne.n	8007188 <USB_ActivateEndpoint+0x254>
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	3b01      	subs	r3, #1
 8007186:	60bb      	str	r3, [r7, #8]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	b29b      	uxth	r3, r3
 800718c:	029b      	lsls	r3, r3, #10
 800718e:	b29b      	uxth	r3, r3
 8007190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007198:	b29b      	uxth	r3, r3
 800719a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b29c      	uxth	r4, r3
 80071aa:	4623      	mov	r3, r4
 80071ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d014      	beq.n	80071de <USB_ActivateEndpoint+0x2aa>
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ca:	b29c      	uxth	r4, r3
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	441a      	add	r2, r3
 80071d6:	4b12      	ldr	r3, [pc, #72]	; (8007220 <USB_ActivateEndpoint+0x2ec>)
 80071d8:	4323      	orrs	r3, r4
 80071da:	b29b      	uxth	r3, r3
 80071dc:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f4:	b29c      	uxth	r4, r3
 80071f6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80071fa:	b29c      	uxth	r4, r3
 80071fc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007200:	b29c      	uxth	r4, r3
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	441a      	add	r2, r3
 800720c:	4b02      	ldr	r3, [pc, #8]	; (8007218 <USB_ActivateEndpoint+0x2e4>)
 800720e:	4323      	orrs	r3, r4
 8007210:	b29b      	uxth	r3, r3
 8007212:	8013      	strh	r3, [r2, #0]
 8007214:	e176      	b.n	8007504 <USB_ActivateEndpoint+0x5d0>
 8007216:	bf00      	nop
 8007218:	ffff8080 	.word	0xffff8080
 800721c:	ffff80c0 	.word	0xffff80c0
 8007220:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	b29b      	uxth	r3, r3
 8007232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723a:	b29c      	uxth	r4, r3
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	441a      	add	r2, r3
 8007246:	4b96      	ldr	r3, [pc, #600]	; (80074a0 <USB_ActivateEndpoint+0x56c>)
 8007248:	4323      	orrs	r3, r4
 800724a:	b29b      	uxth	r3, r3
 800724c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800724e:	687c      	ldr	r4, [r7, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007256:	b29b      	uxth	r3, r3
 8007258:	441c      	add	r4, r3
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	4423      	add	r3, r4
 8007262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007266:	461c      	mov	r4, r3
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	891b      	ldrh	r3, [r3, #8]
 800726c:	085b      	lsrs	r3, r3, #1
 800726e:	b29b      	uxth	r3, r3
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	b29b      	uxth	r3, r3
 8007274:	8023      	strh	r3, [r4, #0]
 8007276:	687c      	ldr	r4, [r7, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800727e:	b29b      	uxth	r3, r3
 8007280:	441c      	add	r4, r3
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4423      	add	r3, r4
 800728a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800728e:	461c      	mov	r4, r3
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	895b      	ldrh	r3, [r3, #10]
 8007294:	085b      	lsrs	r3, r3, #1
 8007296:	b29b      	uxth	r3, r3
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	b29b      	uxth	r3, r3
 800729c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	785b      	ldrb	r3, [r3, #1]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f040 8088 	bne.w	80073b8 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	b29c      	uxth	r4, r3
 80072b6:	4623      	mov	r3, r4
 80072b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d014      	beq.n	80072ea <USB_ActivateEndpoint+0x3b6>
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	b29c      	uxth	r4, r3
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	441a      	add	r2, r3
 80072e2:	4b70      	ldr	r3, [pc, #448]	; (80074a4 <USB_ActivateEndpoint+0x570>)
 80072e4:	4323      	orrs	r3, r4
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	b29c      	uxth	r4, r3
 80072f8:	4623      	mov	r3, r4
 80072fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d014      	beq.n	800732c <USB_ActivateEndpoint+0x3f8>
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	b29b      	uxth	r3, r3
 8007310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007318:	b29c      	uxth	r4, r3
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	441a      	add	r2, r3
 8007324:	4b60      	ldr	r3, [pc, #384]	; (80074a8 <USB_ActivateEndpoint+0x574>)
 8007326:	4323      	orrs	r3, r4
 8007328:	b29b      	uxth	r3, r3
 800732a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800733e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007342:	b29c      	uxth	r4, r3
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	441a      	add	r2, r3
 800734e:	4b56      	ldr	r3, [pc, #344]	; (80074a8 <USB_ActivateEndpoint+0x574>)
 8007350:	4323      	orrs	r3, r4
 8007352:	b29b      	uxth	r3, r3
 8007354:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736c:	b29c      	uxth	r4, r3
 800736e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007372:	b29c      	uxth	r4, r3
 8007374:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007378:	b29c      	uxth	r4, r3
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	441a      	add	r2, r3
 8007384:	4b49      	ldr	r3, [pc, #292]	; (80074ac <USB_ActivateEndpoint+0x578>)
 8007386:	4323      	orrs	r3, r4
 8007388:	b29b      	uxth	r3, r3
 800738a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073a2:	b29c      	uxth	r4, r3
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	4b3f      	ldr	r3, [pc, #252]	; (80074ac <USB_ActivateEndpoint+0x578>)
 80073b0:	4323      	orrs	r3, r4
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	8013      	strh	r3, [r2, #0]
 80073b6:	e0a5      	b.n	8007504 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29c      	uxth	r4, r3
 80073c6:	4623      	mov	r3, r4
 80073c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d014      	beq.n	80073fa <USB_ActivateEndpoint+0x4c6>
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e6:	b29c      	uxth	r4, r3
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	441a      	add	r2, r3
 80073f2:	4b2c      	ldr	r3, [pc, #176]	; (80074a4 <USB_ActivateEndpoint+0x570>)
 80073f4:	4323      	orrs	r3, r4
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	b29c      	uxth	r4, r3
 8007408:	4623      	mov	r3, r4
 800740a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	d014      	beq.n	800743c <USB_ActivateEndpoint+0x508>
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	b29b      	uxth	r3, r3
 8007420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007428:	b29c      	uxth	r4, r3
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	441a      	add	r2, r3
 8007434:	4b1c      	ldr	r3, [pc, #112]	; (80074a8 <USB_ActivateEndpoint+0x574>)
 8007436:	4323      	orrs	r3, r4
 8007438:	b29b      	uxth	r3, r3
 800743a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	b29b      	uxth	r3, r3
 800744a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800744e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007452:	b29c      	uxth	r4, r3
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	441a      	add	r2, r3
 800745e:	4b11      	ldr	r3, [pc, #68]	; (80074a4 <USB_ActivateEndpoint+0x570>)
 8007460:	4323      	orrs	r3, r4
 8007462:	b29b      	uxth	r3, r3
 8007464:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	78db      	ldrb	r3, [r3, #3]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d020      	beq.n	80074b0 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007484:	b29c      	uxth	r4, r3
 8007486:	f084 0320 	eor.w	r3, r4, #32
 800748a:	b29c      	uxth	r4, r3
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	441a      	add	r2, r3
 8007496:	4b05      	ldr	r3, [pc, #20]	; (80074ac <USB_ActivateEndpoint+0x578>)
 8007498:	4323      	orrs	r3, r4
 800749a:	b29b      	uxth	r3, r3
 800749c:	8013      	strh	r3, [r2, #0]
 800749e:	e01c      	b.n	80074da <USB_ActivateEndpoint+0x5a6>
 80074a0:	ffff8180 	.word	0xffff8180
 80074a4:	ffffc080 	.word	0xffffc080
 80074a8:	ffff80c0 	.word	0xffff80c0
 80074ac:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	b29b      	uxth	r3, r3
 80074be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c6:	b29c      	uxth	r4, r3
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	441a      	add	r2, r3
 80074d2:	4b0f      	ldr	r3, [pc, #60]	; (8007510 <USB_ActivateEndpoint+0x5dc>)
 80074d4:	4323      	orrs	r3, r4
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f0:	b29c      	uxth	r4, r3
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	441a      	add	r2, r3
 80074fc:	4b04      	ldr	r3, [pc, #16]	; (8007510 <USB_ActivateEndpoint+0x5dc>)
 80074fe:	4323      	orrs	r3, r4
 8007500:	b29b      	uxth	r3, r3
 8007502:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bc90      	pop	{r4, r7}
 800750e:	4770      	bx	lr
 8007510:	ffff8080 	.word	0xffff8080

08007514 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007514:	b590      	push	{r4, r7, lr}
 8007516:	b08d      	sub	sp, #52	; 0x34
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	785b      	ldrb	r3, [r3, #1]
 8007522:	2b01      	cmp	r3, #1
 8007524:	f040 8160 	bne.w	80077e8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	699a      	ldr	r2, [r3, #24]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	429a      	cmp	r2, r3
 8007532:	d909      	bls.n	8007548 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	699a      	ldr	r2, [r3, #24]
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007540:	1ad2      	subs	r2, r2, r3
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	619a      	str	r2, [r3, #24]
 8007546:	e005      	b.n	8007554 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2200      	movs	r2, #0
 8007552:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	7b1b      	ldrb	r3, [r3, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d119      	bne.n	8007590 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	6959      	ldr	r1, [r3, #20]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	88da      	ldrh	r2, [r3, #6]
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	b29b      	uxth	r3, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fb91 	bl	8007c90 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800756e:	687c      	ldr	r4, [r7, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007576:	b29b      	uxth	r3, r3
 8007578:	441c      	add	r4, r3
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	4423      	add	r3, r4
 8007582:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007586:	461c      	mov	r4, r3
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	b29b      	uxth	r3, r3
 800758c:	8023      	strh	r3, [r4, #0]
 800758e:	e10f      	b.n	80077b0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d065      	beq.n	8007672 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075a6:	687c      	ldr	r4, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	785b      	ldrb	r3, [r3, #1]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d148      	bne.n	8007642 <USB_EPStartXfer+0x12e>
 80075b0:	687c      	ldr	r4, [r7, #4]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	441c      	add	r4, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	4423      	add	r3, r4
 80075c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075c8:	461c      	mov	r4, r3
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10e      	bne.n	80075ee <USB_EPStartXfer+0xda>
 80075d0:	8823      	ldrh	r3, [r4, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075d8:	b29b      	uxth	r3, r3
 80075da:	8023      	strh	r3, [r4, #0]
 80075dc:	8823      	ldrh	r3, [r4, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	8023      	strh	r3, [r4, #0]
 80075ec:	e03d      	b.n	800766a <USB_EPStartXfer+0x156>
 80075ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f0:	2b3e      	cmp	r3, #62	; 0x3e
 80075f2:	d810      	bhi.n	8007616 <USB_EPStartXfer+0x102>
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	085b      	lsrs	r3, r3, #1
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
 80075fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <USB_EPStartXfer+0xf6>
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	3301      	adds	r3, #1
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	b29b      	uxth	r3, r3
 800760e:	029b      	lsls	r3, r3, #10
 8007610:	b29b      	uxth	r3, r3
 8007612:	8023      	strh	r3, [r4, #0]
 8007614:	e029      	b.n	800766a <USB_EPStartXfer+0x156>
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	095b      	lsrs	r3, r3, #5
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	f003 031f 	and.w	r3, r3, #31
 8007622:	2b00      	cmp	r3, #0
 8007624:	d102      	bne.n	800762c <USB_EPStartXfer+0x118>
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	3b01      	subs	r3, #1
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	b29b      	uxth	r3, r3
 8007630:	029b      	lsls	r3, r3, #10
 8007632:	b29b      	uxth	r3, r3
 8007634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800763c:	b29b      	uxth	r3, r3
 800763e:	8023      	strh	r3, [r4, #0]
 8007640:	e013      	b.n	800766a <USB_EPStartXfer+0x156>
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	785b      	ldrb	r3, [r3, #1]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d10f      	bne.n	800766a <USB_EPStartXfer+0x156>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007650:	b29b      	uxth	r3, r3
 8007652:	441c      	add	r4, r3
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	4423      	add	r3, r4
 800765c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007660:	60fb      	str	r3, [r7, #12]
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	b29a      	uxth	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	895b      	ldrh	r3, [r3, #10]
 800766e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007670:	e063      	b.n	800773a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d148      	bne.n	800770c <USB_EPStartXfer+0x1f8>
 800767a:	687c      	ldr	r4, [r7, #4]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007682:	b29b      	uxth	r3, r3
 8007684:	441c      	add	r4, r3
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	4423      	add	r3, r4
 800768e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007692:	461c      	mov	r4, r3
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10e      	bne.n	80076b8 <USB_EPStartXfer+0x1a4>
 800769a:	8823      	ldrh	r3, [r4, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	8023      	strh	r3, [r4, #0]
 80076a6:	8823      	ldrh	r3, [r4, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	8023      	strh	r3, [r4, #0]
 80076b6:	e03d      	b.n	8007734 <USB_EPStartXfer+0x220>
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	2b3e      	cmp	r3, #62	; 0x3e
 80076bc:	d810      	bhi.n	80076e0 <USB_EPStartXfer+0x1cc>
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	085b      	lsrs	r3, r3, #1
 80076c2:	623b      	str	r3, [r7, #32]
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <USB_EPStartXfer+0x1c0>
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	3301      	adds	r3, #1
 80076d2:	623b      	str	r3, [r7, #32]
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	029b      	lsls	r3, r3, #10
 80076da:	b29b      	uxth	r3, r3
 80076dc:	8023      	strh	r3, [r4, #0]
 80076de:	e029      	b.n	8007734 <USB_EPStartXfer+0x220>
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	095b      	lsrs	r3, r3, #5
 80076e4:	623b      	str	r3, [r7, #32]
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	f003 031f 	and.w	r3, r3, #31
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <USB_EPStartXfer+0x1e2>
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	623b      	str	r3, [r7, #32]
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	029b      	lsls	r3, r3, #10
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007706:	b29b      	uxth	r3, r3
 8007708:	8023      	strh	r3, [r4, #0]
 800770a:	e013      	b.n	8007734 <USB_EPStartXfer+0x220>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	785b      	ldrb	r3, [r3, #1]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d10f      	bne.n	8007734 <USB_EPStartXfer+0x220>
 8007714:	687c      	ldr	r4, [r7, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800771c:	b29b      	uxth	r3, r3
 800771e:	441c      	add	r4, r3
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	4423      	add	r3, r4
 8007728:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800772c:	461c      	mov	r4, r3
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	b29b      	uxth	r3, r3
 8007732:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	891b      	ldrh	r3, [r3, #8]
 8007738:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6959      	ldr	r1, [r3, #20]
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	b29b      	uxth	r3, r3
 8007742:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 faa3 	bl	8007c90 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	785b      	ldrb	r3, [r3, #1]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d115      	bne.n	800777e <USB_EPStartXfer+0x26a>
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007768:	b29c      	uxth	r4, r3
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	441a      	add	r2, r3
 8007774:	4b9a      	ldr	r3, [pc, #616]	; (80079e0 <USB_EPStartXfer+0x4cc>)
 8007776:	4323      	orrs	r3, r4
 8007778:	b29b      	uxth	r3, r3
 800777a:	8013      	strh	r3, [r2, #0]
 800777c:	e018      	b.n	80077b0 <USB_EPStartXfer+0x29c>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	785b      	ldrb	r3, [r3, #1]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d114      	bne.n	80077b0 <USB_EPStartXfer+0x29c>
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	b29b      	uxth	r3, r3
 8007794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779c:	b29c      	uxth	r4, r3
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	441a      	add	r2, r3
 80077a8:	4b8e      	ldr	r3, [pc, #568]	; (80079e4 <USB_EPStartXfer+0x4d0>)
 80077aa:	4323      	orrs	r3, r4
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c6:	b29c      	uxth	r4, r3
 80077c8:	f084 0310 	eor.w	r3, r4, #16
 80077cc:	b29c      	uxth	r4, r3
 80077ce:	f084 0320 	eor.w	r3, r4, #32
 80077d2:	b29c      	uxth	r4, r3
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	441a      	add	r2, r3
 80077de:	4b82      	ldr	r3, [pc, #520]	; (80079e8 <USB_EPStartXfer+0x4d4>)
 80077e0:	4323      	orrs	r3, r4
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	8013      	strh	r3, [r2, #0]
 80077e6:	e146      	b.n	8007a76 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	699a      	ldr	r2, [r3, #24]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d909      	bls.n	8007808 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	1ad2      	subs	r2, r2, r3
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	619a      	str	r2, [r3, #24]
 8007806:	e005      	b.n	8007814 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2200      	movs	r2, #0
 8007812:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	7b1b      	ldrb	r3, [r3, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d148      	bne.n	80078ae <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800781c:	687c      	ldr	r4, [r7, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007824:	b29b      	uxth	r3, r3
 8007826:	441c      	add	r4, r3
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4423      	add	r3, r4
 8007830:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007834:	461c      	mov	r4, r3
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10e      	bne.n	800785a <USB_EPStartXfer+0x346>
 800783c:	8823      	ldrh	r3, [r4, #0]
 800783e:	b29b      	uxth	r3, r3
 8007840:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007844:	b29b      	uxth	r3, r3
 8007846:	8023      	strh	r3, [r4, #0]
 8007848:	8823      	ldrh	r3, [r4, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007854:	b29b      	uxth	r3, r3
 8007856:	8023      	strh	r3, [r4, #0]
 8007858:	e0f2      	b.n	8007a40 <USB_EPStartXfer+0x52c>
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	2b3e      	cmp	r3, #62	; 0x3e
 800785e:	d810      	bhi.n	8007882 <USB_EPStartXfer+0x36e>
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	085b      	lsrs	r3, r3, #1
 8007864:	61fb      	str	r3, [r7, #28]
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <USB_EPStartXfer+0x362>
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	3301      	adds	r3, #1
 8007874:	61fb      	str	r3, [r7, #28]
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	b29b      	uxth	r3, r3
 800787a:	029b      	lsls	r3, r3, #10
 800787c:	b29b      	uxth	r3, r3
 800787e:	8023      	strh	r3, [r4, #0]
 8007880:	e0de      	b.n	8007a40 <USB_EPStartXfer+0x52c>
 8007882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007884:	095b      	lsrs	r3, r3, #5
 8007886:	61fb      	str	r3, [r7, #28]
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	f003 031f 	and.w	r3, r3, #31
 800788e:	2b00      	cmp	r3, #0
 8007890:	d102      	bne.n	8007898 <USB_EPStartXfer+0x384>
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	3b01      	subs	r3, #1
 8007896:	61fb      	str	r3, [r7, #28]
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	b29b      	uxth	r3, r3
 800789c:	029b      	lsls	r3, r3, #10
 800789e:	b29b      	uxth	r3, r3
 80078a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	8023      	strh	r3, [r4, #0]
 80078ac:	e0c8      	b.n	8007a40 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	785b      	ldrb	r3, [r3, #1]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d148      	bne.n	8007948 <USB_EPStartXfer+0x434>
 80078b6:	687c      	ldr	r4, [r7, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078be:	b29b      	uxth	r3, r3
 80078c0:	441c      	add	r4, r3
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	4423      	add	r3, r4
 80078ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078ce:	461c      	mov	r4, r3
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10e      	bne.n	80078f4 <USB_EPStartXfer+0x3e0>
 80078d6:	8823      	ldrh	r3, [r4, #0]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078de:	b29b      	uxth	r3, r3
 80078e0:	8023      	strh	r3, [r4, #0]
 80078e2:	8823      	ldrh	r3, [r4, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	8023      	strh	r3, [r4, #0]
 80078f2:	e03d      	b.n	8007970 <USB_EPStartXfer+0x45c>
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	2b3e      	cmp	r3, #62	; 0x3e
 80078f8:	d810      	bhi.n	800791c <USB_EPStartXfer+0x408>
 80078fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fc:	085b      	lsrs	r3, r3, #1
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <USB_EPStartXfer+0x3fc>
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	3301      	adds	r3, #1
 800790e:	61bb      	str	r3, [r7, #24]
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	b29b      	uxth	r3, r3
 8007914:	029b      	lsls	r3, r3, #10
 8007916:	b29b      	uxth	r3, r3
 8007918:	8023      	strh	r3, [r4, #0]
 800791a:	e029      	b.n	8007970 <USB_EPStartXfer+0x45c>
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	095b      	lsrs	r3, r3, #5
 8007920:	61bb      	str	r3, [r7, #24]
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	f003 031f 	and.w	r3, r3, #31
 8007928:	2b00      	cmp	r3, #0
 800792a:	d102      	bne.n	8007932 <USB_EPStartXfer+0x41e>
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	3b01      	subs	r3, #1
 8007930:	61bb      	str	r3, [r7, #24]
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	b29b      	uxth	r3, r3
 8007936:	029b      	lsls	r3, r3, #10
 8007938:	b29b      	uxth	r3, r3
 800793a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800793e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007942:	b29b      	uxth	r3, r3
 8007944:	8023      	strh	r3, [r4, #0]
 8007946:	e013      	b.n	8007970 <USB_EPStartXfer+0x45c>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	785b      	ldrb	r3, [r3, #1]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d10f      	bne.n	8007970 <USB_EPStartXfer+0x45c>
 8007950:	687c      	ldr	r4, [r7, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007958:	b29b      	uxth	r3, r3
 800795a:	441c      	add	r4, r3
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	4423      	add	r3, r4
 8007964:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007968:	461c      	mov	r4, r3
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	b29b      	uxth	r3, r3
 800796e:	8023      	strh	r3, [r4, #0]
 8007970:	687c      	ldr	r4, [r7, #4]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	785b      	ldrb	r3, [r3, #1]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d14e      	bne.n	8007a18 <USB_EPStartXfer+0x504>
 800797a:	687c      	ldr	r4, [r7, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007982:	b29b      	uxth	r3, r3
 8007984:	441c      	add	r4, r3
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	4423      	add	r3, r4
 800798e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007992:	461c      	mov	r4, r3
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10e      	bne.n	80079b8 <USB_EPStartXfer+0x4a4>
 800799a:	8823      	ldrh	r3, [r4, #0]
 800799c:	b29b      	uxth	r3, r3
 800799e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	8023      	strh	r3, [r4, #0]
 80079a6:	8823      	ldrh	r3, [r4, #0]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	8023      	strh	r3, [r4, #0]
 80079b6:	e043      	b.n	8007a40 <USB_EPStartXfer+0x52c>
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	2b3e      	cmp	r3, #62	; 0x3e
 80079bc:	d816      	bhi.n	80079ec <USB_EPStartXfer+0x4d8>
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <USB_EPStartXfer+0x4c0>
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	3301      	adds	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	029b      	lsls	r3, r3, #10
 80079da:	b29b      	uxth	r3, r3
 80079dc:	8023      	strh	r3, [r4, #0]
 80079de:	e02f      	b.n	8007a40 <USB_EPStartXfer+0x52c>
 80079e0:	ffff80c0 	.word	0xffff80c0
 80079e4:	ffffc080 	.word	0xffffc080
 80079e8:	ffff8080 	.word	0xffff8080
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	095b      	lsrs	r3, r3, #5
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	f003 031f 	and.w	r3, r3, #31
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d102      	bne.n	8007a02 <USB_EPStartXfer+0x4ee>
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	029b      	lsls	r3, r3, #10
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	8023      	strh	r3, [r4, #0]
 8007a16:	e013      	b.n	8007a40 <USB_EPStartXfer+0x52c>
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d10f      	bne.n	8007a40 <USB_EPStartXfer+0x52c>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	441c      	add	r4, r3
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	4423      	add	r3, r4
 8007a32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a36:	613b      	str	r3, [r7, #16]
 8007a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	b29c      	uxth	r4, r3
 8007a58:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007a5c:	b29c      	uxth	r4, r3
 8007a5e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007a62:	b29c      	uxth	r4, r3
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	441a      	add	r2, r3
 8007a6e:	4b04      	ldr	r3, [pc, #16]	; (8007a80 <USB_EPStartXfer+0x56c>)
 8007a70:	4323      	orrs	r3, r4
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3734      	adds	r7, #52	; 0x34
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd90      	pop	{r4, r7, pc}
 8007a80:	ffff8080 	.word	0xffff8080

08007a84 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a84:	b490      	push	{r4, r7}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	785b      	ldrb	r3, [r3, #1]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d018      	beq.n	8007ac8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aac:	b29c      	uxth	r4, r3
 8007aae:	f084 0310 	eor.w	r3, r4, #16
 8007ab2:	b29c      	uxth	r4, r3
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	441a      	add	r2, r3
 8007abe:	4b11      	ldr	r3, [pc, #68]	; (8007b04 <USB_EPSetStall+0x80>)
 8007ac0:	4323      	orrs	r3, r4
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	8013      	strh	r3, [r2, #0]
 8007ac6:	e017      	b.n	8007af8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ade:	b29c      	uxth	r4, r3
 8007ae0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007ae4:	b29c      	uxth	r4, r3
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	441a      	add	r2, r3
 8007af0:	4b04      	ldr	r3, [pc, #16]	; (8007b04 <USB_EPSetStall+0x80>)
 8007af2:	4323      	orrs	r3, r4
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bc90      	pop	{r4, r7}
 8007b02:	4770      	bx	lr
 8007b04:	ffff8080 	.word	0xffff8080

08007b08 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b08:	b490      	push	{r4, r7}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	7b1b      	ldrb	r3, [r3, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d17d      	bne.n	8007c16 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	785b      	ldrb	r3, [r3, #1]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d03d      	beq.n	8007b9e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	b29c      	uxth	r4, r3
 8007b30:	4623      	mov	r3, r4
 8007b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d014      	beq.n	8007b64 <USB_EPClearStall+0x5c>
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b50:	b29c      	uxth	r4, r3
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	441a      	add	r2, r3
 8007b5c:	4b31      	ldr	r3, [pc, #196]	; (8007c24 <USB_EPClearStall+0x11c>)
 8007b5e:	4323      	orrs	r3, r4
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	78db      	ldrb	r3, [r3, #3]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d054      	beq.n	8007c16 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b82:	b29c      	uxth	r4, r3
 8007b84:	f084 0320 	eor.w	r3, r4, #32
 8007b88:	b29c      	uxth	r4, r3
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	441a      	add	r2, r3
 8007b94:	4b24      	ldr	r3, [pc, #144]	; (8007c28 <USB_EPClearStall+0x120>)
 8007b96:	4323      	orrs	r3, r4
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	8013      	strh	r3, [r2, #0]
 8007b9c:	e03b      	b.n	8007c16 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29c      	uxth	r4, r3
 8007bac:	4623      	mov	r3, r4
 8007bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d014      	beq.n	8007be0 <USB_EPClearStall+0xd8>
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bcc:	b29c      	uxth	r4, r3
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	441a      	add	r2, r3
 8007bd8:	4b14      	ldr	r3, [pc, #80]	; (8007c2c <USB_EPClearStall+0x124>)
 8007bda:	4323      	orrs	r3, r4
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf6:	b29c      	uxth	r4, r3
 8007bf8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007bfc:	b29c      	uxth	r4, r3
 8007bfe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007c02:	b29c      	uxth	r4, r3
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	441a      	add	r2, r3
 8007c0e:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <USB_EPClearStall+0x120>)
 8007c10:	4323      	orrs	r3, r4
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bc90      	pop	{r4, r7}
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	ffff80c0 	.word	0xffff80c0
 8007c28:	ffff8080 	.word	0xffff8080
 8007c2c:	ffffc080 	.word	0xffffc080

08007c30 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c3c:	78fb      	ldrb	r3, [r7, #3]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d103      	bne.n	8007c4a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2280      	movs	r2, #128	; 0x80
 8007c46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b08d      	sub	sp, #52	; 0x34
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	80fb      	strh	r3, [r7, #6]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007ca6:	88bb      	ldrh	r3, [r7, #4]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cb6:	88fa      	ldrh	r2, [r7, #6]
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cc0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cc6:	e01b      	b.n	8007d00 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	3302      	adds	r3, #2
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e0      	bne.n	8007cc8 <USB_WritePMA+0x38>
  }
}
 8007d06:	bf00      	nop
 8007d08:	3734      	adds	r7, #52	; 0x34
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b08b      	sub	sp, #44	; 0x2c
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	60f8      	str	r0, [r7, #12]
 8007d1a:	60b9      	str	r1, [r7, #8]
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	461a      	mov	r2, r3
 8007d20:	460b      	mov	r3, r1
 8007d22:	80fb      	strh	r3, [r7, #6]
 8007d24:	4613      	mov	r3, r2
 8007d26:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007d28:	88bb      	ldrh	r3, [r7, #4]
 8007d2a:	085b      	lsrs	r3, r3, #1
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d38:	88fa      	ldrh	r2, [r7, #6]
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d42:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	627b      	str	r3, [r7, #36]	; 0x24
 8007d48:	e018      	b.n	8007d7c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	881b      	ldrh	r3, [r3, #0]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	3302      	adds	r3, #2
 8007d56:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	3301      	adds	r3, #1
 8007d64:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	0a1b      	lsrs	r3, r3, #8
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	3301      	adds	r3, #1
 8007d74:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e3      	bne.n	8007d4a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007d82:	88bb      	ldrh	r3, [r7, #4]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d007      	beq.n	8007d9e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	701a      	strb	r2, [r3, #0]
  }
}
 8007d9e:	bf00      	nop
 8007da0:	372c      	adds	r7, #44	; 0x2c
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007dcc:	2302      	movs	r3, #2
 8007dce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00c      	beq.n	8007df4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	78fa      	ldrb	r2, [r7, #3]
 8007de4:	4611      	mov	r1, r2
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	4798      	blx	r3
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	460b      	mov	r3, r1
 8007e08:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	78fa      	ldrb	r2, [r7, #3]
 8007e14:	4611      	mov	r1, r2
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	4798      	blx	r3

  return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 fef8 	bl	8008c2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e58:	f003 031f 	and.w	r3, r3, #31
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d00c      	beq.n	8007e7a <USBD_LL_SetupStage+0x56>
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d302      	bcc.n	8007e6a <USBD_LL_SetupStage+0x46>
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d010      	beq.n	8007e8a <USBD_LL_SetupStage+0x66>
 8007e68:	e017      	b.n	8007e9a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f9ce 	bl	8008214 <USBD_StdDevReq>
      break;
 8007e78:	e01a      	b.n	8007eb0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e80:	4619      	mov	r1, r3
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa30 	bl	80082e8 <USBD_StdItfReq>
      break;
 8007e88:	e012      	b.n	8007eb0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fa6e 	bl	8008374 <USBD_StdEPReq>
      break;
 8007e98:	e00a      	b.n	8007eb0 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ea0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f003 fd91 	bl	800b9d0 <USBD_LL_StallEP>
      break;
 8007eae:	bf00      	nop
  }

  return USBD_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b086      	sub	sp, #24
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	607a      	str	r2, [r7, #4]
 8007ec6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ec8:	7afb      	ldrb	r3, [r7, #11]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d14b      	bne.n	8007f66 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ed4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d134      	bne.n	8007f4a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d919      	bls.n	8007f20 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	68da      	ldr	r2, [r3, #12]
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	1ad2      	subs	r2, r2, r3
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d203      	bcs.n	8007f0e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	e002      	b.n	8007f14 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 ff03 	bl	8008d24 <USBD_CtlContinueRx>
 8007f1e:	e038      	b.n	8007f92 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d105      	bne.n	8007f42 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 ff00 	bl	8008d48 <USBD_CtlSendStatus>
 8007f48:	e023      	b.n	8007f92 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f50:	2b05      	cmp	r3, #5
 8007f52:	d11e      	bne.n	8007f92 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f003 fd36 	bl	800b9d0 <USBD_LL_StallEP>
 8007f64:	e015      	b.n	8007f92 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00d      	beq.n	8007f8e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d108      	bne.n	8007f8e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	7afa      	ldrb	r2, [r7, #11]
 8007f86:	4611      	mov	r1, r2
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	4798      	blx	r3
 8007f8c:	e001      	b.n	8007f92 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f8e:	2302      	movs	r3, #2
 8007f90:	e000      	b.n	8007f94 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	607a      	str	r2, [r7, #4]
 8007fa8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007faa:	7afb      	ldrb	r3, [r7, #11]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d17f      	bne.n	80080b0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3314      	adds	r3, #20
 8007fb4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d15c      	bne.n	800807a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	68da      	ldr	r2, [r3, #12]
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d915      	bls.n	8007ff8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	1ad2      	subs	r2, r2, r3
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 fe8b 	bl	8008d00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fea:	2300      	movs	r3, #0
 8007fec:	2200      	movs	r2, #0
 8007fee:	2100      	movs	r1, #0
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f003 fdef 	bl	800bbd4 <USBD_LL_PrepareReceive>
 8007ff6:	e04e      	b.n	8008096 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	6912      	ldr	r2, [r2, #16]
 8008000:	fbb3 f1f2 	udiv	r1, r3, r2
 8008004:	fb02 f201 	mul.w	r2, r2, r1
 8008008:	1a9b      	subs	r3, r3, r2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d11c      	bne.n	8008048 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008016:	429a      	cmp	r2, r3
 8008018:	d316      	bcc.n	8008048 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008024:	429a      	cmp	r2, r3
 8008026:	d20f      	bcs.n	8008048 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008028:	2200      	movs	r2, #0
 800802a:	2100      	movs	r1, #0
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 fe67 	bl	8008d00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800803a:	2300      	movs	r3, #0
 800803c:	2200      	movs	r2, #0
 800803e:	2100      	movs	r1, #0
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f003 fdc7 	bl	800bbd4 <USBD_LL_PrepareReceive>
 8008046:	e026      	b.n	8008096 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00a      	beq.n	800806a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800805a:	2b03      	cmp	r3, #3
 800805c:	d105      	bne.n	800806a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800806a:	2180      	movs	r1, #128	; 0x80
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f003 fcaf 	bl	800b9d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 fe7b 	bl	8008d6e <USBD_CtlReceiveStatus>
 8008078:	e00d      	b.n	8008096 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008080:	2b04      	cmp	r3, #4
 8008082:	d004      	beq.n	800808e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800808a:	2b00      	cmp	r3, #0
 800808c:	d103      	bne.n	8008096 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800808e:	2180      	movs	r1, #128	; 0x80
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f003 fc9d 	bl	800b9d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800809c:	2b01      	cmp	r3, #1
 800809e:	d11d      	bne.n	80080dc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff fe82 	bl	8007daa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80080ae:	e015      	b.n	80080dc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00d      	beq.n	80080d8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d108      	bne.n	80080d8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	7afa      	ldrb	r2, [r7, #11]
 80080d0:	4611      	mov	r1, r2
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	4798      	blx	r3
 80080d6:	e001      	b.n	80080dc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080d8:	2302      	movs	r3, #2
 80080da:	e000      	b.n	80080de <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080ee:	2340      	movs	r3, #64	; 0x40
 80080f0:	2200      	movs	r2, #0
 80080f2:	2100      	movs	r1, #0
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f003 fc2d 	bl	800b954 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2240      	movs	r2, #64	; 0x40
 8008106:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800810a:	2340      	movs	r3, #64	; 0x40
 800810c:	2200      	movs	r2, #0
 800810e:	2180      	movs	r1, #128	; 0x80
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f003 fc1f 	bl	800b954 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2240      	movs	r2, #64	; 0x40
 8008120:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008146:	2b00      	cmp	r3, #0
 8008148:	d009      	beq.n	800815e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	6852      	ldr	r2, [r2, #4]
 8008156:	b2d2      	uxtb	r2, r2
 8008158:	4611      	mov	r1, r2
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
  }

  return USBD_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	78fa      	ldrb	r2, [r7, #3]
 8008178:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2204      	movs	r2, #4
 80081a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d105      	bne.n	80081d0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d10b      	bne.n	8008208 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d005      	beq.n	8008208 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800822a:	2b20      	cmp	r3, #32
 800822c:	d004      	beq.n	8008238 <USBD_StdDevReq+0x24>
 800822e:	2b40      	cmp	r3, #64	; 0x40
 8008230:	d002      	beq.n	8008238 <USBD_StdDevReq+0x24>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d008      	beq.n	8008248 <USBD_StdDevReq+0x34>
 8008236:	e04c      	b.n	80082d2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
      break;
 8008246:	e049      	b.n	80082dc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	785b      	ldrb	r3, [r3, #1]
 800824c:	2b09      	cmp	r3, #9
 800824e:	d83a      	bhi.n	80082c6 <USBD_StdDevReq+0xb2>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <USBD_StdDevReq+0x44>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	080082a9 	.word	0x080082a9
 800825c:	080082bd 	.word	0x080082bd
 8008260:	080082c7 	.word	0x080082c7
 8008264:	080082b3 	.word	0x080082b3
 8008268:	080082c7 	.word	0x080082c7
 800826c:	0800828b 	.word	0x0800828b
 8008270:	08008281 	.word	0x08008281
 8008274:	080082c7 	.word	0x080082c7
 8008278:	0800829f 	.word	0x0800829f
 800827c:	08008295 	.word	0x08008295
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f9d4 	bl	8008630 <USBD_GetDescriptor>
          break;
 8008288:	e022      	b.n	80082d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fb61 	bl	8008954 <USBD_SetAddress>
          break;
 8008292:	e01d      	b.n	80082d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fb9e 	bl	80089d8 <USBD_SetConfig>
          break;
 800829c:	e018      	b.n	80082d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fc27 	bl	8008af4 <USBD_GetConfig>
          break;
 80082a6:	e013      	b.n	80082d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fc56 	bl	8008b5c <USBD_GetStatus>
          break;
 80082b0:	e00e      	b.n	80082d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fc84 	bl	8008bc2 <USBD_SetFeature>
          break;
 80082ba:	e009      	b.n	80082d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fc93 	bl	8008bea <USBD_ClrFeature>
          break;
 80082c4:	e004      	b.n	80082d0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fcec 	bl	8008ca6 <USBD_CtlError>
          break;
 80082ce:	bf00      	nop
      }
      break;
 80082d0:	e004      	b.n	80082dc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fce6 	bl	8008ca6 <USBD_CtlError>
      break;
 80082da:	bf00      	nop
  }

  return ret;
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop

080082e8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082fe:	2b20      	cmp	r3, #32
 8008300:	d003      	beq.n	800830a <USBD_StdItfReq+0x22>
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d001      	beq.n	800830a <USBD_StdItfReq+0x22>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d12a      	bne.n	8008360 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008310:	3b01      	subs	r3, #1
 8008312:	2b02      	cmp	r3, #2
 8008314:	d81d      	bhi.n	8008352 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	889b      	ldrh	r3, [r3, #4]
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b01      	cmp	r3, #1
 800831e:	d813      	bhi.n	8008348 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	88db      	ldrh	r3, [r3, #6]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d110      	bne.n	800835c <USBD_StdItfReq+0x74>
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10d      	bne.n	800835c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fd01 	bl	8008d48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008346:	e009      	b.n	800835c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fcab 	bl	8008ca6 <USBD_CtlError>
          break;
 8008350:	e004      	b.n	800835c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fca6 	bl	8008ca6 <USBD_CtlError>
          break;
 800835a:	e000      	b.n	800835e <USBD_StdItfReq+0x76>
          break;
 800835c:	bf00      	nop
      }
      break;
 800835e:	e004      	b.n	800836a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fc9f 	bl	8008ca6 <USBD_CtlError>
      break;
 8008368:	bf00      	nop
  }

  return USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	889b      	ldrh	r3, [r3, #4]
 8008386:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008390:	2b20      	cmp	r3, #32
 8008392:	d004      	beq.n	800839e <USBD_StdEPReq+0x2a>
 8008394:	2b40      	cmp	r3, #64	; 0x40
 8008396:	d002      	beq.n	800839e <USBD_StdEPReq+0x2a>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d008      	beq.n	80083ae <USBD_StdEPReq+0x3a>
 800839c:	e13d      	b.n	800861a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	4798      	blx	r3
      break;
 80083ac:	e13a      	b.n	8008624 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083b6:	2b20      	cmp	r3, #32
 80083b8:	d10a      	bne.n	80083d0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	4798      	blx	r3
 80083c8:	4603      	mov	r3, r0
 80083ca:	73fb      	strb	r3, [r7, #15]

        return ret;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	e12a      	b.n	8008626 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	785b      	ldrb	r3, [r3, #1]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d03e      	beq.n	8008456 <USBD_StdEPReq+0xe2>
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d002      	beq.n	80083e2 <USBD_StdEPReq+0x6e>
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d070      	beq.n	80084c2 <USBD_StdEPReq+0x14e>
 80083e0:	e115      	b.n	800860e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d002      	beq.n	80083f2 <USBD_StdEPReq+0x7e>
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d015      	beq.n	800841c <USBD_StdEPReq+0xa8>
 80083f0:	e02b      	b.n	800844a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00c      	beq.n	8008412 <USBD_StdEPReq+0x9e>
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2b80      	cmp	r3, #128	; 0x80
 80083fc:	d009      	beq.n	8008412 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f003 fae4 	bl	800b9d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008408:	2180      	movs	r1, #128	; 0x80
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f003 fae0 	bl	800b9d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008410:	e020      	b.n	8008454 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fc46 	bl	8008ca6 <USBD_CtlError>
              break;
 800841a:	e01b      	b.n	8008454 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	885b      	ldrh	r3, [r3, #2]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10e      	bne.n	8008442 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00b      	beq.n	8008442 <USBD_StdEPReq+0xce>
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	2b80      	cmp	r3, #128	; 0x80
 800842e:	d008      	beq.n	8008442 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	88db      	ldrh	r3, [r3, #6]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d104      	bne.n	8008442 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f003 fac7 	bl	800b9d0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fc80 	bl	8008d48 <USBD_CtlSendStatus>

              break;
 8008448:	e004      	b.n	8008454 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fc2a 	bl	8008ca6 <USBD_CtlError>
              break;
 8008452:	bf00      	nop
          }
          break;
 8008454:	e0e0      	b.n	8008618 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800845c:	2b02      	cmp	r3, #2
 800845e:	d002      	beq.n	8008466 <USBD_StdEPReq+0xf2>
 8008460:	2b03      	cmp	r3, #3
 8008462:	d015      	beq.n	8008490 <USBD_StdEPReq+0x11c>
 8008464:	e026      	b.n	80084b4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008466:	7bbb      	ldrb	r3, [r7, #14]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00c      	beq.n	8008486 <USBD_StdEPReq+0x112>
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	2b80      	cmp	r3, #128	; 0x80
 8008470:	d009      	beq.n	8008486 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f003 faaa 	bl	800b9d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800847c:	2180      	movs	r1, #128	; 0x80
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f003 faa6 	bl	800b9d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008484:	e01c      	b.n	80084c0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fc0c 	bl	8008ca6 <USBD_CtlError>
              break;
 800848e:	e017      	b.n	80084c0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	885b      	ldrh	r3, [r3, #2]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d112      	bne.n	80084be <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d004      	beq.n	80084ac <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f003 fac8 	bl	800ba3c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fc4b 	bl	8008d48 <USBD_CtlSendStatus>
              }
              break;
 80084b2:	e004      	b.n	80084be <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fbf5 	bl	8008ca6 <USBD_CtlError>
              break;
 80084bc:	e000      	b.n	80084c0 <USBD_StdEPReq+0x14c>
              break;
 80084be:	bf00      	nop
          }
          break;
 80084c0:	e0aa      	b.n	8008618 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d002      	beq.n	80084d2 <USBD_StdEPReq+0x15e>
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	d032      	beq.n	8008536 <USBD_StdEPReq+0x1c2>
 80084d0:	e097      	b.n	8008602 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d007      	beq.n	80084e8 <USBD_StdEPReq+0x174>
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	2b80      	cmp	r3, #128	; 0x80
 80084dc:	d004      	beq.n	80084e8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fbe0 	bl	8008ca6 <USBD_CtlError>
                break;
 80084e6:	e091      	b.n	800860c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	da0b      	bge.n	8008508 <USBD_StdEPReq+0x194>
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084f6:	4613      	mov	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	3310      	adds	r3, #16
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	4413      	add	r3, r2
 8008504:	3304      	adds	r3, #4
 8008506:	e00b      	b.n	8008520 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008508:	7bbb      	ldrb	r3, [r7, #14]
 800850a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800850e:	4613      	mov	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	4413      	add	r3, r2
 800851e:	3304      	adds	r3, #4
 8008520:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2200      	movs	r2, #0
 8008526:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2202      	movs	r2, #2
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fbca 	bl	8008cc8 <USBD_CtlSendData>
              break;
 8008534:	e06a      	b.n	800860c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008536:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800853a:	2b00      	cmp	r3, #0
 800853c:	da11      	bge.n	8008562 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	f003 020f 	and.w	r2, r3, #15
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	4613      	mov	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	440b      	add	r3, r1
 8008550:	3318      	adds	r3, #24
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d117      	bne.n	8008588 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fba3 	bl	8008ca6 <USBD_CtlError>
                  break;
 8008560:	e054      	b.n	800860c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008562:	7bbb      	ldrb	r3, [r7, #14]
 8008564:	f003 020f 	and.w	r2, r3, #15
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d104      	bne.n	8008588 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fb90 	bl	8008ca6 <USBD_CtlError>
                  break;
 8008586:	e041      	b.n	800860c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800858c:	2b00      	cmp	r3, #0
 800858e:	da0b      	bge.n	80085a8 <USBD_StdEPReq+0x234>
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	3310      	adds	r3, #16
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	4413      	add	r3, r2
 80085a4:	3304      	adds	r3, #4
 80085a6:	e00b      	b.n	80085c0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	4413      	add	r3, r2
 80085be:	3304      	adds	r3, #4
 80085c0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <USBD_StdEPReq+0x25a>
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
 80085ca:	2b80      	cmp	r3, #128	; 0x80
 80085cc:	d103      	bne.n	80085d6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	e00e      	b.n	80085f4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f003 fa64 	bl	800baa8 <USBD_LL_IsStallEP>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2201      	movs	r2, #1
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	e002      	b.n	80085f4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2200      	movs	r2, #0
 80085f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2202      	movs	r2, #2
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fb64 	bl	8008cc8 <USBD_CtlSendData>
              break;
 8008600:	e004      	b.n	800860c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fb4e 	bl	8008ca6 <USBD_CtlError>
              break;
 800860a:	bf00      	nop
          }
          break;
 800860c:	e004      	b.n	8008618 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fb48 	bl	8008ca6 <USBD_CtlError>
          break;
 8008616:	bf00      	nop
      }
      break;
 8008618:	e004      	b.n	8008624 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fb42 	bl	8008ca6 <USBD_CtlError>
      break;
 8008622:	bf00      	nop
  }

  return ret;
 8008624:	7bfb      	ldrb	r3, [r7, #15]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	885b      	ldrh	r3, [r3, #2]
 800864a:	0a1b      	lsrs	r3, r3, #8
 800864c:	b29b      	uxth	r3, r3
 800864e:	3b01      	subs	r3, #1
 8008650:	2b0e      	cmp	r3, #14
 8008652:	f200 8152 	bhi.w	80088fa <USBD_GetDescriptor+0x2ca>
 8008656:	a201      	add	r2, pc, #4	; (adr r2, 800865c <USBD_GetDescriptor+0x2c>)
 8008658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865c:	080086cd 	.word	0x080086cd
 8008660:	080086e5 	.word	0x080086e5
 8008664:	08008725 	.word	0x08008725
 8008668:	080088fb 	.word	0x080088fb
 800866c:	080088fb 	.word	0x080088fb
 8008670:	0800889b 	.word	0x0800889b
 8008674:	080088c7 	.word	0x080088c7
 8008678:	080088fb 	.word	0x080088fb
 800867c:	080088fb 	.word	0x080088fb
 8008680:	080088fb 	.word	0x080088fb
 8008684:	080088fb 	.word	0x080088fb
 8008688:	080088fb 	.word	0x080088fb
 800868c:	080088fb 	.word	0x080088fb
 8008690:	080088fb 	.word	0x080088fb
 8008694:	08008699 	.word	0x08008699
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00b      	beq.n	80086bc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	7c12      	ldrb	r2, [r2, #16]
 80086b0:	f107 0108 	add.w	r1, r7, #8
 80086b4:	4610      	mov	r0, r2
 80086b6:	4798      	blx	r3
 80086b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086ba:	e126      	b.n	800890a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 faf1 	bl	8008ca6 <USBD_CtlError>
        err++;
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	3301      	adds	r3, #1
 80086c8:	72fb      	strb	r3, [r7, #11]
      break;
 80086ca:	e11e      	b.n	800890a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	7c12      	ldrb	r2, [r2, #16]
 80086d8:	f107 0108 	add.w	r1, r7, #8
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	60f8      	str	r0, [r7, #12]
      break;
 80086e2:	e112      	b.n	800890a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	7c1b      	ldrb	r3, [r3, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10d      	bne.n	8008708 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f4:	f107 0208 	add.w	r2, r7, #8
 80086f8:	4610      	mov	r0, r2
 80086fa:	4798      	blx	r3
 80086fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3301      	adds	r3, #1
 8008702:	2202      	movs	r2, #2
 8008704:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008706:	e100      	b.n	800890a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	f107 0208 	add.w	r2, r7, #8
 8008714:	4610      	mov	r0, r2
 8008716:	4798      	blx	r3
 8008718:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	3301      	adds	r3, #1
 800871e:	2202      	movs	r2, #2
 8008720:	701a      	strb	r2, [r3, #0]
      break;
 8008722:	e0f2      	b.n	800890a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	885b      	ldrh	r3, [r3, #2]
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b05      	cmp	r3, #5
 800872c:	f200 80ac 	bhi.w	8008888 <USBD_GetDescriptor+0x258>
 8008730:	a201      	add	r2, pc, #4	; (adr r2, 8008738 <USBD_GetDescriptor+0x108>)
 8008732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008736:	bf00      	nop
 8008738:	08008751 	.word	0x08008751
 800873c:	08008785 	.word	0x08008785
 8008740:	080087b9 	.word	0x080087b9
 8008744:	080087ed 	.word	0x080087ed
 8008748:	08008821 	.word	0x08008821
 800874c:	08008855 	.word	0x08008855
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00b      	beq.n	8008774 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	7c12      	ldrb	r2, [r2, #16]
 8008768:	f107 0108 	add.w	r1, r7, #8
 800876c:	4610      	mov	r0, r2
 800876e:	4798      	blx	r3
 8008770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008772:	e091      	b.n	8008898 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fa95 	bl	8008ca6 <USBD_CtlError>
            err++;
 800877c:	7afb      	ldrb	r3, [r7, #11]
 800877e:	3301      	adds	r3, #1
 8008780:	72fb      	strb	r3, [r7, #11]
          break;
 8008782:	e089      	b.n	8008898 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00b      	beq.n	80087a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	7c12      	ldrb	r2, [r2, #16]
 800879c:	f107 0108 	add.w	r1, r7, #8
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087a6:	e077      	b.n	8008898 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fa7b 	bl	8008ca6 <USBD_CtlError>
            err++;
 80087b0:	7afb      	ldrb	r3, [r7, #11]
 80087b2:	3301      	adds	r3, #1
 80087b4:	72fb      	strb	r3, [r7, #11]
          break;
 80087b6:	e06f      	b.n	8008898 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00b      	beq.n	80087dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	7c12      	ldrb	r2, [r2, #16]
 80087d0:	f107 0108 	add.w	r1, r7, #8
 80087d4:	4610      	mov	r0, r2
 80087d6:	4798      	blx	r3
 80087d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087da:	e05d      	b.n	8008898 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fa61 	bl	8008ca6 <USBD_CtlError>
            err++;
 80087e4:	7afb      	ldrb	r3, [r7, #11]
 80087e6:	3301      	adds	r3, #1
 80087e8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ea:	e055      	b.n	8008898 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	7c12      	ldrb	r2, [r2, #16]
 8008804:	f107 0108 	add.w	r1, r7, #8
 8008808:	4610      	mov	r0, r2
 800880a:	4798      	blx	r3
 800880c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880e:	e043      	b.n	8008898 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa47 	bl	8008ca6 <USBD_CtlError>
            err++;
 8008818:	7afb      	ldrb	r3, [r7, #11]
 800881a:	3301      	adds	r3, #1
 800881c:	72fb      	strb	r3, [r7, #11]
          break;
 800881e:	e03b      	b.n	8008898 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00b      	beq.n	8008844 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	7c12      	ldrb	r2, [r2, #16]
 8008838:	f107 0108 	add.w	r1, r7, #8
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008842:	e029      	b.n	8008898 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fa2d 	bl	8008ca6 <USBD_CtlError>
            err++;
 800884c:	7afb      	ldrb	r3, [r7, #11]
 800884e:	3301      	adds	r3, #1
 8008850:	72fb      	strb	r3, [r7, #11]
          break;
 8008852:	e021      	b.n	8008898 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00b      	beq.n	8008878 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	7c12      	ldrb	r2, [r2, #16]
 800886c:	f107 0108 	add.w	r1, r7, #8
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
 8008874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008876:	e00f      	b.n	8008898 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fa13 	bl	8008ca6 <USBD_CtlError>
            err++;
 8008880:	7afb      	ldrb	r3, [r7, #11]
 8008882:	3301      	adds	r3, #1
 8008884:	72fb      	strb	r3, [r7, #11]
          break;
 8008886:	e007      	b.n	8008898 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fa0b 	bl	8008ca6 <USBD_CtlError>
          err++;
 8008890:	7afb      	ldrb	r3, [r7, #11]
 8008892:	3301      	adds	r3, #1
 8008894:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008896:	e038      	b.n	800890a <USBD_GetDescriptor+0x2da>
 8008898:	e037      	b.n	800890a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	7c1b      	ldrb	r3, [r3, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d109      	bne.n	80088b6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088aa:	f107 0208 	add.w	r2, r7, #8
 80088ae:	4610      	mov	r0, r2
 80088b0:	4798      	blx	r3
 80088b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088b4:	e029      	b.n	800890a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f9f4 	bl	8008ca6 <USBD_CtlError>
        err++;
 80088be:	7afb      	ldrb	r3, [r7, #11]
 80088c0:	3301      	adds	r3, #1
 80088c2:	72fb      	strb	r3, [r7, #11]
      break;
 80088c4:	e021      	b.n	800890a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	7c1b      	ldrb	r3, [r3, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10d      	bne.n	80088ea <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d6:	f107 0208 	add.w	r2, r7, #8
 80088da:	4610      	mov	r0, r2
 80088dc:	4798      	blx	r3
 80088de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3301      	adds	r3, #1
 80088e4:	2207      	movs	r2, #7
 80088e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088e8:	e00f      	b.n	800890a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f9da 	bl	8008ca6 <USBD_CtlError>
        err++;
 80088f2:	7afb      	ldrb	r3, [r7, #11]
 80088f4:	3301      	adds	r3, #1
 80088f6:	72fb      	strb	r3, [r7, #11]
      break;
 80088f8:	e007      	b.n	800890a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f9d2 	bl	8008ca6 <USBD_CtlError>
      err++;
 8008902:	7afb      	ldrb	r3, [r7, #11]
 8008904:	3301      	adds	r3, #1
 8008906:	72fb      	strb	r3, [r7, #11]
      break;
 8008908:	bf00      	nop
  }

  if (err != 0U)
 800890a:	7afb      	ldrb	r3, [r7, #11]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d11c      	bne.n	800894a <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008910:	893b      	ldrh	r3, [r7, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d011      	beq.n	800893a <USBD_GetDescriptor+0x30a>
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	88db      	ldrh	r3, [r3, #6]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00d      	beq.n	800893a <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	88da      	ldrh	r2, [r3, #6]
 8008922:	893b      	ldrh	r3, [r7, #8]
 8008924:	4293      	cmp	r3, r2
 8008926:	bf28      	it	cs
 8008928:	4613      	movcs	r3, r2
 800892a:	b29b      	uxth	r3, r3
 800892c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800892e:	893b      	ldrh	r3, [r7, #8]
 8008930:	461a      	mov	r2, r3
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f9c7 	bl	8008cc8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	88db      	ldrh	r3, [r3, #6]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d104      	bne.n	800894c <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fa00 	bl	8008d48 <USBD_CtlSendStatus>
 8008948:	e000      	b.n	800894c <USBD_GetDescriptor+0x31c>
    return;
 800894a:	bf00      	nop
    }
  }
}
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop

08008954 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	889b      	ldrh	r3, [r3, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d130      	bne.n	80089c8 <USBD_SetAddress+0x74>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	88db      	ldrh	r3, [r3, #6]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d12c      	bne.n	80089c8 <USBD_SetAddress+0x74>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	885b      	ldrh	r3, [r3, #2]
 8008972:	2b7f      	cmp	r3, #127	; 0x7f
 8008974:	d828      	bhi.n	80089c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	885b      	ldrh	r3, [r3, #2]
 800897a:	b2db      	uxtb	r3, r3
 800897c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008980:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008988:	2b03      	cmp	r3, #3
 800898a:	d104      	bne.n	8008996 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f989 	bl	8008ca6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008994:	e01c      	b.n	80089d0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	7bfa      	ldrb	r2, [r7, #15]
 800899a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f003 f8a6 	bl	800baf4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f9cd 	bl	8008d48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d004      	beq.n	80089be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2202      	movs	r2, #2
 80089b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089bc:	e008      	b.n	80089d0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c6:	e003      	b.n	80089d0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f96b 	bl	8008ca6 <USBD_CtlError>
  }
}
 80089d0:	bf00      	nop
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	885b      	ldrh	r3, [r3, #2]
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	4b41      	ldr	r3, [pc, #260]	; (8008af0 <USBD_SetConfig+0x118>)
 80089ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80089ec:	4b40      	ldr	r3, [pc, #256]	; (8008af0 <USBD_SetConfig+0x118>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d904      	bls.n	80089fe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f955 	bl	8008ca6 <USBD_CtlError>
 80089fc:	e075      	b.n	8008aea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d002      	beq.n	8008a0e <USBD_SetConfig+0x36>
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d023      	beq.n	8008a54 <USBD_SetConfig+0x7c>
 8008a0c:	e062      	b.n	8008ad4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008a0e:	4b38      	ldr	r3, [pc, #224]	; (8008af0 <USBD_SetConfig+0x118>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d01a      	beq.n	8008a4c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008a16:	4b36      	ldr	r3, [pc, #216]	; (8008af0 <USBD_SetConfig+0x118>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2203      	movs	r2, #3
 8008a24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a28:	4b31      	ldr	r3, [pc, #196]	; (8008af0 <USBD_SetConfig+0x118>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff f9c6 	bl	8007dc0 <USBD_SetClassConfig>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d104      	bne.n	8008a44 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f932 	bl	8008ca6 <USBD_CtlError>
            return;
 8008a42:	e052      	b.n	8008aea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f97f 	bl	8008d48 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a4a:	e04e      	b.n	8008aea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f97b 	bl	8008d48 <USBD_CtlSendStatus>
        break;
 8008a52:	e04a      	b.n	8008aea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008a54:	4b26      	ldr	r3, [pc, #152]	; (8008af0 <USBD_SetConfig+0x118>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d112      	bne.n	8008a82 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008a64:	4b22      	ldr	r3, [pc, #136]	; (8008af0 <USBD_SetConfig+0x118>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008a6e:	4b20      	ldr	r3, [pc, #128]	; (8008af0 <USBD_SetConfig+0x118>)
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7ff f9c2 	bl	8007dfe <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f964 	bl	8008d48 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a80:	e033      	b.n	8008aea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008a82:	4b1b      	ldr	r3, [pc, #108]	; (8008af0 <USBD_SetConfig+0x118>)
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d01d      	beq.n	8008acc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7ff f9b0 	bl	8007dfe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008a9e:	4b14      	ldr	r3, [pc, #80]	; (8008af0 <USBD_SetConfig+0x118>)
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008aa8:	4b11      	ldr	r3, [pc, #68]	; (8008af0 <USBD_SetConfig+0x118>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7ff f986 	bl	8007dc0 <USBD_SetClassConfig>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d104      	bne.n	8008ac4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f8f2 	bl	8008ca6 <USBD_CtlError>
            return;
 8008ac2:	e012      	b.n	8008aea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f93f 	bl	8008d48 <USBD_CtlSendStatus>
        break;
 8008aca:	e00e      	b.n	8008aea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f93b 	bl	8008d48 <USBD_CtlSendStatus>
        break;
 8008ad2:	e00a      	b.n	8008aea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f8e5 	bl	8008ca6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008adc:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <USBD_SetConfig+0x118>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7ff f98b 	bl	8007dfe <USBD_ClrClassConfig>
        break;
 8008ae8:	bf00      	nop
    }
  }
}
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	20000150 	.word	0x20000150

08008af4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	88db      	ldrh	r3, [r3, #6]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d004      	beq.n	8008b10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f8cc 	bl	8008ca6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b0e:	e021      	b.n	8008b54 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	db17      	blt.n	8008b4a <USBD_GetConfig+0x56>
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	dd02      	ble.n	8008b24 <USBD_GetConfig+0x30>
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d00b      	beq.n	8008b3a <USBD_GetConfig+0x46>
 8008b22:	e012      	b.n	8008b4a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3308      	adds	r3, #8
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f8c8 	bl	8008cc8 <USBD_CtlSendData>
        break;
 8008b38:	e00c      	b.n	8008b54 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	2201      	movs	r2, #1
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f8c0 	bl	8008cc8 <USBD_CtlSendData>
        break;
 8008b48:	e004      	b.n	8008b54 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f8aa 	bl	8008ca6 <USBD_CtlError>
        break;
 8008b52:	bf00      	nop
}
 8008b54:	bf00      	nop
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d81e      	bhi.n	8008bb0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	88db      	ldrh	r3, [r3, #6]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d004      	beq.n	8008b84 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f892 	bl	8008ca6 <USBD_CtlError>
        break;
 8008b82:	e01a      	b.n	8008bba <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	f043 0202 	orr.w	r2, r3, #2
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	330c      	adds	r3, #12
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f88d 	bl	8008cc8 <USBD_CtlSendData>
      break;
 8008bae:	e004      	b.n	8008bba <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f877 	bl	8008ca6 <USBD_CtlError>
      break;
 8008bb8:	bf00      	nop
  }
}
 8008bba:	bf00      	nop
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	885b      	ldrh	r3, [r3, #2]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d106      	bne.n	8008be2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f8b3 	bl	8008d48 <USBD_CtlSendStatus>
  }
}
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d80b      	bhi.n	8008c18 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	885b      	ldrh	r3, [r3, #2]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d10c      	bne.n	8008c22 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f899 	bl	8008d48 <USBD_CtlSendStatus>
      }
      break;
 8008c16:	e004      	b.n	8008c22 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f843 	bl	8008ca6 <USBD_CtlError>
      break;
 8008c20:	e000      	b.n	8008c24 <USBD_ClrFeature+0x3a>
      break;
 8008c22:	bf00      	nop
  }
}
 8008c24:	bf00      	nop
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	785a      	ldrb	r2, [r3, #1]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	3302      	adds	r3, #2
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	3303      	adds	r3, #3
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	021b      	lsls	r3, r3, #8
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	4413      	add	r3, r2
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	3304      	adds	r3, #4
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	3305      	adds	r3, #5
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	021b      	lsls	r3, r3, #8
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	4413      	add	r3, r2
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	3306      	adds	r3, #6
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	3307      	adds	r3, #7
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	021b      	lsls	r3, r3, #8
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	4413      	add	r3, r2
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	80da      	strh	r2, [r3, #6]

}
 8008c9a:	bf00      	nop
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b082      	sub	sp, #8
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008cb0:	2180      	movs	r1, #128	; 0x80
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f002 fe8c 	bl	800b9d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008cb8:	2100      	movs	r1, #0
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f002 fe88 	bl	800b9d0 <USBD_LL_StallEP>
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2202      	movs	r2, #2
 8008cda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008cde:	88fa      	ldrh	r2, [r7, #6]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008ce4:	88fa      	ldrh	r2, [r7, #6]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cea:	88fb      	ldrh	r3, [r7, #6]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	2100      	movs	r1, #0
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f002 ff35 	bl	800bb60 <USBD_LL_Transmit>

  return USBD_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d0e:	88fb      	ldrh	r3, [r7, #6]
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	2100      	movs	r1, #0
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f002 ff23 	bl	800bb60 <USBD_LL_Transmit>

  return USBD_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d32:	88fb      	ldrh	r3, [r7, #6]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	2100      	movs	r1, #0
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f002 ff4b 	bl	800bbd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2204      	movs	r2, #4
 8008d54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d58:	2300      	movs	r3, #0
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f002 fefe 	bl	800bb60 <USBD_LL_Transmit>

  return USBD_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2205      	movs	r2, #5
 8008d7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d7e:	2300      	movs	r3, #0
 8008d80:	2200      	movs	r2, #0
 8008d82:	2100      	movs	r1, #0
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f002 ff25 	bl	800bbd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d9c:	f3ef 8305 	mrs	r3, IPSR
 8008da0:	613b      	str	r3, [r7, #16]
  return(result);
 8008da2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10f      	bne.n	8008dc8 <osDelay+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008da8:	f3ef 8310 	mrs	r3, PRIMASK
 8008dac:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d105      	bne.n	8008dc0 <osDelay+0x2c>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008db4:	f3ef 8311 	mrs	r3, BASEPRI
 8008db8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d007      	beq.n	8008dd0 <osDelay+0x3c>
 8008dc0:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <osDelay+0x58>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d103      	bne.n	8008dd0 <osDelay+0x3c>
    stat = osErrorISR;
 8008dc8:	f06f 0305 	mvn.w	r3, #5
 8008dcc:	617b      	str	r3, [r7, #20]
 8008dce:	e007      	b.n	8008de0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 ff62 	bl	8009ca4 <vTaskDelay>
    }
  }

  return (stat);
 8008de0:	697b      	ldr	r3, [r7, #20]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20000154 	.word	0x20000154

08008df0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4a07      	ldr	r2, [pc, #28]	; (8008e1c <vApplicationGetIdleTaskMemory+0x2c>)
 8008e00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	4a06      	ldr	r2, [pc, #24]	; (8008e20 <vApplicationGetIdleTaskMemory+0x30>)
 8008e06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2280      	movs	r2, #128	; 0x80
 8008e0c:	601a      	str	r2, [r3, #0]
}
 8008e0e:	bf00      	nop
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	20000158 	.word	0x20000158
 8008e20:	200001b4 	.word	0x200001b4

08008e24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4a07      	ldr	r2, [pc, #28]	; (8008e50 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	4a06      	ldr	r2, [pc, #24]	; (8008e54 <vApplicationGetTimerTaskMemory+0x30>)
 8008e3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e42:	601a      	str	r2, [r3, #0]
}
 8008e44:	bf00      	nop
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	200003b4 	.word	0x200003b4
 8008e54:	20000410 	.word	0x20000410

08008e58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f103 0208 	add.w	r2, r3, #8
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f103 0208 	add.w	r2, r3, #8
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f103 0208 	add.w	r2, r3, #8
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ea6:	bf00      	nop
 8008ea8:	370c      	adds	r7, #12
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b085      	sub	sp, #20
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	689a      	ldr	r2, [r3, #8]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	601a      	str	r2, [r3, #0]
}
 8008eee:	bf00      	nop
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008efa:	b480      	push	{r7}
 8008efc:	b085      	sub	sp, #20
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f10:	d103      	bne.n	8008f1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	e00c      	b.n	8008f34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3308      	adds	r3, #8
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	e002      	b.n	8008f28 <vListInsert+0x2e>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d2f6      	bcs.n	8008f22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	601a      	str	r2, [r3, #0]
}
 8008f60:	bf00      	nop
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	6892      	ldr	r2, [r2, #8]
 8008f82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6852      	ldr	r2, [r2, #4]
 8008f8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d103      	bne.n	8008fa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	1e5a      	subs	r2, r3, #1
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d109      	bne.n	8008fe8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	60bb      	str	r3, [r7, #8]
 8008fe6:	e7fe      	b.n	8008fe6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008fe8:	f002 f920 	bl	800b22c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff4:	68f9      	ldr	r1, [r7, #12]
 8008ff6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ff8:	fb01 f303 	mul.w	r3, r1, r3
 8008ffc:	441a      	add	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009018:	3b01      	subs	r3, #1
 800901a:	68f9      	ldr	r1, [r7, #12]
 800901c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800901e:	fb01 f303 	mul.w	r3, r1, r3
 8009022:	441a      	add	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	22ff      	movs	r2, #255	; 0xff
 800902c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	22ff      	movs	r2, #255	; 0xff
 8009034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d114      	bne.n	8009068 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d01a      	beq.n	800907c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3310      	adds	r3, #16
 800904a:	4618      	mov	r0, r3
 800904c:	f001 f8de 	bl	800a20c <xTaskRemoveFromEventList>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d012      	beq.n	800907c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009056:	4b0d      	ldr	r3, [pc, #52]	; (800908c <xQueueGenericReset+0xcc>)
 8009058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	e009      	b.n	800907c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	3310      	adds	r3, #16
 800906c:	4618      	mov	r0, r3
 800906e:	f7ff fef3 	bl	8008e58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3324      	adds	r3, #36	; 0x24
 8009076:	4618      	mov	r0, r3
 8009078:	f7ff feee 	bl	8008e58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800907c:	f002 f904 	bl	800b288 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009080:	2301      	movs	r3, #1
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	e000ed04 	.word	0xe000ed04

08009090 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08e      	sub	sp, #56	; 0x38
 8009094:	af02      	add	r7, sp, #8
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d109      	bne.n	80090b8 <xQueueGenericCreateStatic+0x28>
 80090a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80090b6:	e7fe      	b.n	80090b6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d109      	bne.n	80090d2 <xQueueGenericCreateStatic+0x42>
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	627b      	str	r3, [r7, #36]	; 0x24
 80090d0:	e7fe      	b.n	80090d0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <xQueueGenericCreateStatic+0x4e>
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <xQueueGenericCreateStatic+0x52>
 80090de:	2301      	movs	r3, #1
 80090e0:	e000      	b.n	80090e4 <xQueueGenericCreateStatic+0x54>
 80090e2:	2300      	movs	r3, #0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d109      	bne.n	80090fc <xQueueGenericCreateStatic+0x6c>
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	623b      	str	r3, [r7, #32]
 80090fa:	e7fe      	b.n	80090fa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d102      	bne.n	8009108 <xQueueGenericCreateStatic+0x78>
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d101      	bne.n	800910c <xQueueGenericCreateStatic+0x7c>
 8009108:	2301      	movs	r3, #1
 800910a:	e000      	b.n	800910e <xQueueGenericCreateStatic+0x7e>
 800910c:	2300      	movs	r3, #0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d109      	bne.n	8009126 <xQueueGenericCreateStatic+0x96>
 8009112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009116:	f383 8811 	msr	BASEPRI, r3
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	61fb      	str	r3, [r7, #28]
 8009124:	e7fe      	b.n	8009124 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009126:	2350      	movs	r3, #80	; 0x50
 8009128:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b50      	cmp	r3, #80	; 0x50
 800912e:	d009      	beq.n	8009144 <xQueueGenericCreateStatic+0xb4>
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	61bb      	str	r3, [r7, #24]
 8009142:	e7fe      	b.n	8009142 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009144:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800914a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00d      	beq.n	800916c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009158:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	4613      	mov	r3, r2
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	68b9      	ldr	r1, [r7, #8]
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 f805 	bl	8009176 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800916e:	4618      	mov	r0, r3
 8009170:	3730      	adds	r7, #48	; 0x30
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b084      	sub	sp, #16
 800917a:	af00      	add	r7, sp, #0
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	60b9      	str	r1, [r7, #8]
 8009180:	607a      	str	r2, [r7, #4]
 8009182:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d103      	bne.n	8009192 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	e002      	b.n	8009198 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091a4:	2101      	movs	r1, #1
 80091a6:	69b8      	ldr	r0, [r7, #24]
 80091a8:	f7ff ff0a 	bl	8008fc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	78fa      	ldrb	r2, [r7, #3]
 80091b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80091b4:	bf00      	nop
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08e      	sub	sp, #56	; 0x38
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
 80091c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80091ca:	2300      	movs	r3, #0
 80091cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d109      	bne.n	80091ec <xQueueGenericSend+0x30>
 80091d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091dc:	f383 8811 	msr	BASEPRI, r3
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80091ea:	e7fe      	b.n	80091ea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d103      	bne.n	80091fa <xQueueGenericSend+0x3e>
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <xQueueGenericSend+0x42>
 80091fa:	2301      	movs	r3, #1
 80091fc:	e000      	b.n	8009200 <xQueueGenericSend+0x44>
 80091fe:	2300      	movs	r3, #0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d109      	bne.n	8009218 <xQueueGenericSend+0x5c>
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	627b      	str	r3, [r7, #36]	; 0x24
 8009216:	e7fe      	b.n	8009216 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	2b02      	cmp	r3, #2
 800921c:	d103      	bne.n	8009226 <xQueueGenericSend+0x6a>
 800921e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009222:	2b01      	cmp	r3, #1
 8009224:	d101      	bne.n	800922a <xQueueGenericSend+0x6e>
 8009226:	2301      	movs	r3, #1
 8009228:	e000      	b.n	800922c <xQueueGenericSend+0x70>
 800922a:	2300      	movs	r3, #0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d109      	bne.n	8009244 <xQueueGenericSend+0x88>
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	623b      	str	r3, [r7, #32]
 8009242:	e7fe      	b.n	8009242 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009244:	f001 f99a 	bl	800a57c <xTaskGetSchedulerState>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d102      	bne.n	8009254 <xQueueGenericSend+0x98>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <xQueueGenericSend+0x9c>
 8009254:	2301      	movs	r3, #1
 8009256:	e000      	b.n	800925a <xQueueGenericSend+0x9e>
 8009258:	2300      	movs	r3, #0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d109      	bne.n	8009272 <xQueueGenericSend+0xb6>
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	61fb      	str	r3, [r7, #28]
 8009270:	e7fe      	b.n	8009270 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009272:	f001 ffdb 	bl	800b22c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927e:	429a      	cmp	r2, r3
 8009280:	d302      	bcc.n	8009288 <xQueueGenericSend+0xcc>
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b02      	cmp	r3, #2
 8009286:	d129      	bne.n	80092dc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	68b9      	ldr	r1, [r7, #8]
 800928c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800928e:	f000 f9ff 	bl	8009690 <prvCopyDataToQueue>
 8009292:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	2b00      	cmp	r3, #0
 800929a:	d010      	beq.n	80092be <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	3324      	adds	r3, #36	; 0x24
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 ffb3 	bl	800a20c <xTaskRemoveFromEventList>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d013      	beq.n	80092d4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80092ac:	4b3f      	ldr	r3, [pc, #252]	; (80093ac <xQueueGenericSend+0x1f0>)
 80092ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	e00a      	b.n	80092d4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d007      	beq.n	80092d4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80092c4:	4b39      	ldr	r3, [pc, #228]	; (80093ac <xQueueGenericSend+0x1f0>)
 80092c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80092d4:	f001 ffd8 	bl	800b288 <vPortExitCritical>
				return pdPASS;
 80092d8:	2301      	movs	r3, #1
 80092da:	e063      	b.n	80093a4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d103      	bne.n	80092ea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092e2:	f001 ffd1 	bl	800b288 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	e05c      	b.n	80093a4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d106      	bne.n	80092fe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092f0:	f107 0314 	add.w	r3, r7, #20
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 ffeb 	bl	800a2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092fa:	2301      	movs	r3, #1
 80092fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092fe:	f001 ffc3 	bl	800b288 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009302:	f000 fd67 	bl	8009dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009306:	f001 ff91 	bl	800b22c <vPortEnterCritical>
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009310:	b25b      	sxtb	r3, r3
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009316:	d103      	bne.n	8009320 <xQueueGenericSend+0x164>
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009326:	b25b      	sxtb	r3, r3
 8009328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932c:	d103      	bne.n	8009336 <xQueueGenericSend+0x17a>
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009336:	f001 ffa7 	bl	800b288 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800933a:	1d3a      	adds	r2, r7, #4
 800933c:	f107 0314 	add.w	r3, r7, #20
 8009340:	4611      	mov	r1, r2
 8009342:	4618      	mov	r0, r3
 8009344:	f000 ffda 	bl	800a2fc <xTaskCheckForTimeOut>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d124      	bne.n	8009398 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800934e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009350:	f000 fa96 	bl	8009880 <prvIsQueueFull>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d018      	beq.n	800938c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	3310      	adds	r3, #16
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	4611      	mov	r1, r2
 8009362:	4618      	mov	r0, r3
 8009364:	f000 ff04 	bl	800a170 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800936a:	f000 fa21 	bl	80097b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800936e:	f000 fd3f 	bl	8009df0 <xTaskResumeAll>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	f47f af7c 	bne.w	8009272 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800937a:	4b0c      	ldr	r3, [pc, #48]	; (80093ac <xQueueGenericSend+0x1f0>)
 800937c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	e772      	b.n	8009272 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800938c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800938e:	f000 fa0f 	bl	80097b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009392:	f000 fd2d 	bl	8009df0 <xTaskResumeAll>
 8009396:	e76c      	b.n	8009272 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800939a:	f000 fa09 	bl	80097b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800939e:	f000 fd27 	bl	8009df0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80093a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3738      	adds	r7, #56	; 0x38
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	e000ed04 	.word	0xe000ed04

080093b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b08e      	sub	sp, #56	; 0x38
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
 80093bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80093c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d109      	bne.n	80093dc <xQueueGenericSendFromISR+0x2c>
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	627b      	str	r3, [r7, #36]	; 0x24
 80093da:	e7fe      	b.n	80093da <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d103      	bne.n	80093ea <xQueueGenericSendFromISR+0x3a>
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d101      	bne.n	80093ee <xQueueGenericSendFromISR+0x3e>
 80093ea:	2301      	movs	r3, #1
 80093ec:	e000      	b.n	80093f0 <xQueueGenericSendFromISR+0x40>
 80093ee:	2300      	movs	r3, #0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d109      	bne.n	8009408 <xQueueGenericSendFromISR+0x58>
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	623b      	str	r3, [r7, #32]
 8009406:	e7fe      	b.n	8009406 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b02      	cmp	r3, #2
 800940c:	d103      	bne.n	8009416 <xQueueGenericSendFromISR+0x66>
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009412:	2b01      	cmp	r3, #1
 8009414:	d101      	bne.n	800941a <xQueueGenericSendFromISR+0x6a>
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <xQueueGenericSendFromISR+0x6c>
 800941a:	2300      	movs	r3, #0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d109      	bne.n	8009434 <xQueueGenericSendFromISR+0x84>
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	61fb      	str	r3, [r7, #28]
 8009432:	e7fe      	b.n	8009432 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009434:	f001 ffd6 	bl	800b3e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009438:	f3ef 8211 	mrs	r2, BASEPRI
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	61ba      	str	r2, [r7, #24]
 800944e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009450:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009452:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945c:	429a      	cmp	r2, r3
 800945e:	d302      	bcc.n	8009466 <xQueueGenericSendFromISR+0xb6>
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2b02      	cmp	r3, #2
 8009464:	d12c      	bne.n	80094c0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800946c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	68b9      	ldr	r1, [r7, #8]
 8009474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009476:	f000 f90b 	bl	8009690 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800947a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800947e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009482:	d112      	bne.n	80094aa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	2b00      	cmp	r3, #0
 800948a:	d016      	beq.n	80094ba <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800948c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948e:	3324      	adds	r3, #36	; 0x24
 8009490:	4618      	mov	r0, r3
 8009492:	f000 febb 	bl	800a20c <xTaskRemoveFromEventList>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00e      	beq.n	80094ba <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00b      	beq.n	80094ba <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	e007      	b.n	80094ba <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094ae:	3301      	adds	r3, #1
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	b25a      	sxtb	r2, r3
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80094ba:	2301      	movs	r3, #1
 80094bc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80094be:	e001      	b.n	80094c4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80094c0:	2300      	movs	r3, #0
 80094c2:	637b      	str	r3, [r7, #52]	; 0x34
 80094c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3738      	adds	r7, #56	; 0x38
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08c      	sub	sp, #48	; 0x30
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80094e4:	2300      	movs	r3, #0
 80094e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d109      	bne.n	8009506 <xQueueReceive+0x2e>
	__asm volatile
 80094f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	623b      	str	r3, [r7, #32]
 8009504:	e7fe      	b.n	8009504 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d103      	bne.n	8009514 <xQueueReceive+0x3c>
 800950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <xQueueReceive+0x40>
 8009514:	2301      	movs	r3, #1
 8009516:	e000      	b.n	800951a <xQueueReceive+0x42>
 8009518:	2300      	movs	r3, #0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d109      	bne.n	8009532 <xQueueReceive+0x5a>
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	61fb      	str	r3, [r7, #28]
 8009530:	e7fe      	b.n	8009530 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009532:	f001 f823 	bl	800a57c <xTaskGetSchedulerState>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d102      	bne.n	8009542 <xQueueReceive+0x6a>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <xQueueReceive+0x6e>
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <xQueueReceive+0x70>
 8009546:	2300      	movs	r3, #0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d109      	bne.n	8009560 <xQueueReceive+0x88>
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	61bb      	str	r3, [r7, #24]
 800955e:	e7fe      	b.n	800955e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009560:	f001 fe64 	bl	800b22c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009568:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01f      	beq.n	80095b0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009570:	68b9      	ldr	r1, [r7, #8]
 8009572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009574:	f000 f8f6 	bl	8009764 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	1e5a      	subs	r2, r3, #1
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00f      	beq.n	80095a8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	3310      	adds	r3, #16
 800958c:	4618      	mov	r0, r3
 800958e:	f000 fe3d 	bl	800a20c <xTaskRemoveFromEventList>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d007      	beq.n	80095a8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009598:	4b3c      	ldr	r3, [pc, #240]	; (800968c <xQueueReceive+0x1b4>)
 800959a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800959e:	601a      	str	r2, [r3, #0]
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095a8:	f001 fe6e 	bl	800b288 <vPortExitCritical>
				return pdPASS;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e069      	b.n	8009684 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d103      	bne.n	80095be <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095b6:	f001 fe67 	bl	800b288 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095ba:	2300      	movs	r3, #0
 80095bc:	e062      	b.n	8009684 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d106      	bne.n	80095d2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095c4:	f107 0310 	add.w	r3, r7, #16
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fe81 	bl	800a2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095ce:	2301      	movs	r3, #1
 80095d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095d2:	f001 fe59 	bl	800b288 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095d6:	f000 fbfd 	bl	8009dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095da:	f001 fe27 	bl	800b22c <vPortEnterCritical>
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095e4:	b25b      	sxtb	r3, r3
 80095e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ea:	d103      	bne.n	80095f4 <xQueueReceive+0x11c>
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095fa:	b25b      	sxtb	r3, r3
 80095fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009600:	d103      	bne.n	800960a <xQueueReceive+0x132>
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800960a:	f001 fe3d 	bl	800b288 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800960e:	1d3a      	adds	r2, r7, #4
 8009610:	f107 0310 	add.w	r3, r7, #16
 8009614:	4611      	mov	r1, r2
 8009616:	4618      	mov	r0, r3
 8009618:	f000 fe70 	bl	800a2fc <xTaskCheckForTimeOut>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d123      	bne.n	800966a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009624:	f000 f916 	bl	8009854 <prvIsQueueEmpty>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d017      	beq.n	800965e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800962e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009630:	3324      	adds	r3, #36	; 0x24
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	4611      	mov	r1, r2
 8009636:	4618      	mov	r0, r3
 8009638:	f000 fd9a 	bl	800a170 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800963c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800963e:	f000 f8b7 	bl	80097b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009642:	f000 fbd5 	bl	8009df0 <xTaskResumeAll>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d189      	bne.n	8009560 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800964c:	4b0f      	ldr	r3, [pc, #60]	; (800968c <xQueueReceive+0x1b4>)
 800964e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	e780      	b.n	8009560 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800965e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009660:	f000 f8a6 	bl	80097b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009664:	f000 fbc4 	bl	8009df0 <xTaskResumeAll>
 8009668:	e77a      	b.n	8009560 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800966a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800966c:	f000 f8a0 	bl	80097b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009670:	f000 fbbe 	bl	8009df0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009676:	f000 f8ed 	bl	8009854 <prvIsQueueEmpty>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	f43f af6f 	beq.w	8009560 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009682:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009684:	4618      	mov	r0, r3
 8009686:	3730      	adds	r7, #48	; 0x30
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	e000ed04 	.word	0xe000ed04

08009690 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800969c:	2300      	movs	r3, #0
 800969e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10d      	bne.n	80096ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d14d      	bne.n	8009752 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 ff7c 	bl	800a5b8 <xTaskPriorityDisinherit>
 80096c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	609a      	str	r2, [r3, #8]
 80096c8:	e043      	b.n	8009752 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d119      	bne.n	8009704 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6858      	ldr	r0, [r3, #4]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d8:	461a      	mov	r2, r3
 80096da:	68b9      	ldr	r1, [r7, #8]
 80096dc:	f002 fb1a 	bl	800bd14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	441a      	add	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d32b      	bcc.n	8009752 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	605a      	str	r2, [r3, #4]
 8009702:	e026      	b.n	8009752 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	68d8      	ldr	r0, [r3, #12]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970c:	461a      	mov	r2, r3
 800970e:	68b9      	ldr	r1, [r7, #8]
 8009710:	f002 fb00 	bl	800bd14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	68da      	ldr	r2, [r3, #12]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971c:	425b      	negs	r3, r3
 800971e:	441a      	add	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	68da      	ldr	r2, [r3, #12]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	429a      	cmp	r2, r3
 800972e:	d207      	bcs.n	8009740 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	689a      	ldr	r2, [r3, #8]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009738:	425b      	negs	r3, r3
 800973a:	441a      	add	r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b02      	cmp	r3, #2
 8009744:	d105      	bne.n	8009752 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	3b01      	subs	r3, #1
 8009750:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	1c5a      	adds	r2, r3, #1
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800975a:	697b      	ldr	r3, [r7, #20]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	2b00      	cmp	r3, #0
 8009774:	d018      	beq.n	80097a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68da      	ldr	r2, [r3, #12]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977e:	441a      	add	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	429a      	cmp	r2, r3
 800978e:	d303      	bcc.n	8009798 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68d9      	ldr	r1, [r3, #12]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a0:	461a      	mov	r2, r3
 80097a2:	6838      	ldr	r0, [r7, #0]
 80097a4:	f002 fab6 	bl	800bd14 <memcpy>
	}
}
 80097a8:	bf00      	nop
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80097b8:	f001 fd38 	bl	800b22c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097c4:	e011      	b.n	80097ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d012      	beq.n	80097f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3324      	adds	r3, #36	; 0x24
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 fd1a 	bl	800a20c <xTaskRemoveFromEventList>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80097de:	f000 fded 	bl	800a3bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
 80097e4:	3b01      	subs	r3, #1
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80097ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	dce9      	bgt.n	80097c6 <prvUnlockQueue+0x16>
 80097f2:	e000      	b.n	80097f6 <prvUnlockQueue+0x46>
					break;
 80097f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	22ff      	movs	r2, #255	; 0xff
 80097fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80097fe:	f001 fd43 	bl	800b288 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009802:	f001 fd13 	bl	800b22c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800980c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800980e:	e011      	b.n	8009834 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d012      	beq.n	800983e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3310      	adds	r3, #16
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fcf5 	bl	800a20c <xTaskRemoveFromEventList>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009828:	f000 fdc8 	bl	800a3bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	3b01      	subs	r3, #1
 8009830:	b2db      	uxtb	r3, r3
 8009832:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009838:	2b00      	cmp	r3, #0
 800983a:	dce9      	bgt.n	8009810 <prvUnlockQueue+0x60>
 800983c:	e000      	b.n	8009840 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800983e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	22ff      	movs	r2, #255	; 0xff
 8009844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009848:	f001 fd1e 	bl	800b288 <vPortExitCritical>
}
 800984c:	bf00      	nop
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800985c:	f001 fce6 	bl	800b22c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009864:	2b00      	cmp	r3, #0
 8009866:	d102      	bne.n	800986e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009868:	2301      	movs	r3, #1
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	e001      	b.n	8009872 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800986e:	2300      	movs	r3, #0
 8009870:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009872:	f001 fd09 	bl	800b288 <vPortExitCritical>

	return xReturn;
 8009876:	68fb      	ldr	r3, [r7, #12]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009888:	f001 fcd0 	bl	800b22c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009894:	429a      	cmp	r2, r3
 8009896:	d102      	bne.n	800989e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009898:	2301      	movs	r3, #1
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	e001      	b.n	80098a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800989e:	2300      	movs	r3, #0
 80098a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098a2:	f001 fcf1 	bl	800b288 <vPortExitCritical>

	return xReturn;
 80098a6:	68fb      	ldr	r3, [r7, #12]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098ba:	2300      	movs	r3, #0
 80098bc:	60fb      	str	r3, [r7, #12]
 80098be:	e014      	b.n	80098ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80098c0:	4a0e      	ldr	r2, [pc, #56]	; (80098fc <vQueueAddToRegistry+0x4c>)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10b      	bne.n	80098e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80098cc:	490b      	ldr	r1, [pc, #44]	; (80098fc <vQueueAddToRegistry+0x4c>)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80098d6:	4a09      	ldr	r2, [pc, #36]	; (80098fc <vQueueAddToRegistry+0x4c>)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	00db      	lsls	r3, r3, #3
 80098dc:	4413      	add	r3, r2
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80098e2:	e005      	b.n	80098f0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3301      	adds	r3, #1
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2b07      	cmp	r3, #7
 80098ee:	d9e7      	bls.n	80098c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80098f0:	bf00      	nop
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	2000ae0c 	.word	0x2000ae0c

08009900 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009910:	f001 fc8c 	bl	800b22c <vPortEnterCritical>
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800991a:	b25b      	sxtb	r3, r3
 800991c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009920:	d103      	bne.n	800992a <vQueueWaitForMessageRestricted+0x2a>
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009930:	b25b      	sxtb	r3, r3
 8009932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009936:	d103      	bne.n	8009940 <vQueueWaitForMessageRestricted+0x40>
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009940:	f001 fca2 	bl	800b288 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009948:	2b00      	cmp	r3, #0
 800994a:	d106      	bne.n	800995a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	3324      	adds	r3, #36	; 0x24
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	68b9      	ldr	r1, [r7, #8]
 8009954:	4618      	mov	r0, r3
 8009956:	f000 fc2f 	bl	800a1b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800995a:	6978      	ldr	r0, [r7, #20]
 800995c:	f7ff ff28 	bl	80097b0 <prvUnlockQueue>
	}
 8009960:	bf00      	nop
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009968:	b580      	push	{r7, lr}
 800996a:	b08e      	sub	sp, #56	; 0x38
 800996c:	af04      	add	r7, sp, #16
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009978:	2b00      	cmp	r3, #0
 800997a:	d109      	bne.n	8009990 <xTaskCreateStatic+0x28>
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	623b      	str	r3, [r7, #32]
 800998e:	e7fe      	b.n	800998e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009992:	2b00      	cmp	r3, #0
 8009994:	d109      	bne.n	80099aa <xTaskCreateStatic+0x42>
 8009996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	61fb      	str	r3, [r7, #28]
 80099a8:	e7fe      	b.n	80099a8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80099aa:	235c      	movs	r3, #92	; 0x5c
 80099ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	2b5c      	cmp	r3, #92	; 0x5c
 80099b2:	d009      	beq.n	80099c8 <xTaskCreateStatic+0x60>
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	61bb      	str	r3, [r7, #24]
 80099c6:	e7fe      	b.n	80099c6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80099c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80099ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d01e      	beq.n	8009a0e <xTaskCreateStatic+0xa6>
 80099d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d01b      	beq.n	8009a0e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099e8:	2300      	movs	r3, #0
 80099ea:	9303      	str	r3, [sp, #12]
 80099ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ee:	9302      	str	r3, [sp, #8]
 80099f0:	f107 0314 	add.w	r3, r7, #20
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 f850 	bl	8009aa6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a08:	f000 f8dc 	bl	8009bc4 <prvAddNewTaskToReadyList>
 8009a0c:	e001      	b.n	8009a12 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009a12:	697b      	ldr	r3, [r7, #20]
	}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3728      	adds	r7, #40	; 0x28
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08c      	sub	sp, #48	; 0x30
 8009a20:	af04      	add	r7, sp, #16
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	603b      	str	r3, [r7, #0]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009a2c:	88fb      	ldrh	r3, [r7, #6]
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4618      	mov	r0, r3
 8009a32:	f001 fd15 	bl	800b460 <pvPortMalloc>
 8009a36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00e      	beq.n	8009a5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a3e:	205c      	movs	r0, #92	; 0x5c
 8009a40:	f001 fd0e 	bl	800b460 <pvPortMalloc>
 8009a44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d003      	beq.n	8009a54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	631a      	str	r2, [r3, #48]	; 0x30
 8009a52:	e005      	b.n	8009a60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a54:	6978      	ldr	r0, [r7, #20]
 8009a56:	f001 fdc5 	bl	800b5e4 <vPortFree>
 8009a5a:	e001      	b.n	8009a60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d017      	beq.n	8009a96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a6e:	88fa      	ldrh	r2, [r7, #6]
 8009a70:	2300      	movs	r3, #0
 8009a72:	9303      	str	r3, [sp, #12]
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	9302      	str	r3, [sp, #8]
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	68b9      	ldr	r1, [r7, #8]
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f000 f80e 	bl	8009aa6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a8a:	69f8      	ldr	r0, [r7, #28]
 8009a8c:	f000 f89a 	bl	8009bc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a90:	2301      	movs	r3, #1
 8009a92:	61bb      	str	r3, [r7, #24]
 8009a94:	e002      	b.n	8009a9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a96:	f04f 33ff 	mov.w	r3, #4294967295
 8009a9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a9c:	69bb      	ldr	r3, [r7, #24]
	}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3720      	adds	r7, #32
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b088      	sub	sp, #32
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	60f8      	str	r0, [r7, #12]
 8009aae:	60b9      	str	r1, [r7, #8]
 8009ab0:	607a      	str	r2, [r7, #4]
 8009ab2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	461a      	mov	r2, r3
 8009abe:	21a5      	movs	r1, #165	; 0xa5
 8009ac0:	f002 f933 	bl	800bd2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	f023 0307 	bic.w	r3, r3, #7
 8009adc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	f003 0307 	and.w	r3, r3, #7
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d009      	beq.n	8009afc <prvInitialiseNewTask+0x56>
 8009ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	617b      	str	r3, [r7, #20]
 8009afa:	e7fe      	b.n	8009afa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d01f      	beq.n	8009b42 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b02:	2300      	movs	r3, #0
 8009b04:	61fb      	str	r3, [r7, #28]
 8009b06:	e012      	b.n	8009b2e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	7819      	ldrb	r1, [r3, #0]
 8009b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	4413      	add	r3, r2
 8009b16:	3334      	adds	r3, #52	; 0x34
 8009b18:	460a      	mov	r2, r1
 8009b1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	4413      	add	r3, r2
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d006      	beq.n	8009b36 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	61fb      	str	r3, [r7, #28]
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	2b0f      	cmp	r3, #15
 8009b32:	d9e9      	bls.n	8009b08 <prvInitialiseNewTask+0x62>
 8009b34:	e000      	b.n	8009b38 <prvInitialiseNewTask+0x92>
			{
				break;
 8009b36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b40:	e003      	b.n	8009b4a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4c:	2b37      	cmp	r3, #55	; 0x37
 8009b4e:	d901      	bls.n	8009b54 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b50:	2337      	movs	r3, #55	; 0x37
 8009b52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b62:	2200      	movs	r2, #0
 8009b64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	3304      	adds	r3, #4
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7ff f994 	bl	8008e98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	3318      	adds	r3, #24
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff f98f 	bl	8008e98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b92:	2200      	movs	r2, #0
 8009b94:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	68f9      	ldr	r1, [r7, #12]
 8009ba2:	69b8      	ldr	r0, [r7, #24]
 8009ba4:	f001 fa1c 	bl	800afe0 <pxPortInitialiseStack>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d002      	beq.n	8009bba <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bba:	bf00      	nop
 8009bbc:	3720      	adds	r7, #32
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
	...

08009bc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009bcc:	f001 fb2e 	bl	800b22c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009bd0:	4b2d      	ldr	r3, [pc, #180]	; (8009c88 <prvAddNewTaskToReadyList+0xc4>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	4a2c      	ldr	r2, [pc, #176]	; (8009c88 <prvAddNewTaskToReadyList+0xc4>)
 8009bd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009bda:	4b2c      	ldr	r3, [pc, #176]	; (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d109      	bne.n	8009bf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009be2:	4a2a      	ldr	r2, [pc, #168]	; (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009be8:	4b27      	ldr	r3, [pc, #156]	; (8009c88 <prvAddNewTaskToReadyList+0xc4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d110      	bne.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009bf0:	f000 fc0a 	bl	800a408 <prvInitialiseTaskLists>
 8009bf4:	e00d      	b.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009bf6:	4b26      	ldr	r3, [pc, #152]	; (8009c90 <prvAddNewTaskToReadyList+0xcc>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d109      	bne.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009bfe:	4b23      	ldr	r3, [pc, #140]	; (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d802      	bhi.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c0c:	4a1f      	ldr	r2, [pc, #124]	; (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c12:	4b20      	ldr	r3, [pc, #128]	; (8009c94 <prvAddNewTaskToReadyList+0xd0>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3301      	adds	r3, #1
 8009c18:	4a1e      	ldr	r2, [pc, #120]	; (8009c94 <prvAddNewTaskToReadyList+0xd0>)
 8009c1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c1c:	4b1d      	ldr	r3, [pc, #116]	; (8009c94 <prvAddNewTaskToReadyList+0xd0>)
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c28:	4b1b      	ldr	r3, [pc, #108]	; (8009c98 <prvAddNewTaskToReadyList+0xd4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d903      	bls.n	8009c38 <prvAddNewTaskToReadyList+0x74>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c34:	4a18      	ldr	r2, [pc, #96]	; (8009c98 <prvAddNewTaskToReadyList+0xd4>)
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4a15      	ldr	r2, [pc, #84]	; (8009c9c <prvAddNewTaskToReadyList+0xd8>)
 8009c46:	441a      	add	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f7ff f92f 	bl	8008eb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c54:	f001 fb18 	bl	800b288 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c58:	4b0d      	ldr	r3, [pc, #52]	; (8009c90 <prvAddNewTaskToReadyList+0xcc>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00e      	beq.n	8009c7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c60:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d207      	bcs.n	8009c7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ca0 <prvAddNewTaskToReadyList+0xdc>)
 8009c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c7e:	bf00      	nop
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20000ce4 	.word	0x20000ce4
 8009c8c:	20000810 	.word	0x20000810
 8009c90:	20000cf0 	.word	0x20000cf0
 8009c94:	20000d00 	.word	0x20000d00
 8009c98:	20000cec 	.word	0x20000cec
 8009c9c:	20000814 	.word	0x20000814
 8009ca0:	e000ed04 	.word	0xe000ed04

08009ca4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009cac:	2300      	movs	r3, #0
 8009cae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d016      	beq.n	8009ce4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cb6:	4b13      	ldr	r3, [pc, #76]	; (8009d04 <vTaskDelay+0x60>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d009      	beq.n	8009cd2 <vTaskDelay+0x2e>
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	60bb      	str	r3, [r7, #8]
 8009cd0:	e7fe      	b.n	8009cd0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009cd2:	f000 f87f 	bl	8009dd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fde7 	bl	800a8ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009cde:	f000 f887 	bl	8009df0 <xTaskResumeAll>
 8009ce2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d107      	bne.n	8009cfa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009cea:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <vTaskDelay+0x64>)
 8009cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009cfa:	bf00      	nop
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20000d0c 	.word	0x20000d0c
 8009d08:	e000ed04 	.word	0xe000ed04

08009d0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08a      	sub	sp, #40	; 0x28
 8009d10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d12:	2300      	movs	r3, #0
 8009d14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d1a:	463a      	mov	r2, r7
 8009d1c:	1d39      	adds	r1, r7, #4
 8009d1e:	f107 0308 	add.w	r3, r7, #8
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7ff f864 	bl	8008df0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	9202      	str	r2, [sp, #8]
 8009d30:	9301      	str	r3, [sp, #4]
 8009d32:	2300      	movs	r3, #0
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	2300      	movs	r3, #0
 8009d38:	460a      	mov	r2, r1
 8009d3a:	4920      	ldr	r1, [pc, #128]	; (8009dbc <vTaskStartScheduler+0xb0>)
 8009d3c:	4820      	ldr	r0, [pc, #128]	; (8009dc0 <vTaskStartScheduler+0xb4>)
 8009d3e:	f7ff fe13 	bl	8009968 <xTaskCreateStatic>
 8009d42:	4602      	mov	r2, r0
 8009d44:	4b1f      	ldr	r3, [pc, #124]	; (8009dc4 <vTaskStartScheduler+0xb8>)
 8009d46:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d48:	4b1e      	ldr	r3, [pc, #120]	; (8009dc4 <vTaskStartScheduler+0xb8>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d50:	2301      	movs	r3, #1
 8009d52:	617b      	str	r3, [r7, #20]
 8009d54:	e001      	b.n	8009d5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d102      	bne.n	8009d66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d60:	f000 fdf8 	bl	800a954 <xTimerCreateTimerTask>
 8009d64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d115      	bne.n	8009d98 <vTaskStartScheduler+0x8c>
 8009d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d70:	f383 8811 	msr	BASEPRI, r3
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d7e:	4b12      	ldr	r3, [pc, #72]	; (8009dc8 <vTaskStartScheduler+0xbc>)
 8009d80:	f04f 32ff 	mov.w	r2, #4294967295
 8009d84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d86:	4b11      	ldr	r3, [pc, #68]	; (8009dcc <vTaskStartScheduler+0xc0>)
 8009d88:	2201      	movs	r2, #1
 8009d8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009d8c:	4b10      	ldr	r3, [pc, #64]	; (8009dd0 <vTaskStartScheduler+0xc4>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009d92:	f001 f9ad 	bl	800b0f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009d96:	e00d      	b.n	8009db4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9e:	d109      	bne.n	8009db4 <vTaskStartScheduler+0xa8>
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	e7fe      	b.n	8009db2 <vTaskStartScheduler+0xa6>
}
 8009db4:	bf00      	nop
 8009db6:	3718      	adds	r7, #24
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	0800ce20 	.word	0x0800ce20
 8009dc0:	0800a3d5 	.word	0x0800a3d5
 8009dc4:	20000d08 	.word	0x20000d08
 8009dc8:	20000d04 	.word	0x20000d04
 8009dcc:	20000cf0 	.word	0x20000cf0
 8009dd0:	20000ce8 	.word	0x20000ce8

08009dd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009dd8:	4b04      	ldr	r3, [pc, #16]	; (8009dec <vTaskSuspendAll+0x18>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	4a03      	ldr	r2, [pc, #12]	; (8009dec <vTaskSuspendAll+0x18>)
 8009de0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009de2:	bf00      	nop
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	20000d0c 	.word	0x20000d0c

08009df0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009df6:	2300      	movs	r3, #0
 8009df8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009dfe:	4b41      	ldr	r3, [pc, #260]	; (8009f04 <xTaskResumeAll+0x114>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d109      	bne.n	8009e1a <xTaskResumeAll+0x2a>
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	603b      	str	r3, [r7, #0]
 8009e18:	e7fe      	b.n	8009e18 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e1a:	f001 fa07 	bl	800b22c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e1e:	4b39      	ldr	r3, [pc, #228]	; (8009f04 <xTaskResumeAll+0x114>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	4a37      	ldr	r2, [pc, #220]	; (8009f04 <xTaskResumeAll+0x114>)
 8009e26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e28:	4b36      	ldr	r3, [pc, #216]	; (8009f04 <xTaskResumeAll+0x114>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d162      	bne.n	8009ef6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e30:	4b35      	ldr	r3, [pc, #212]	; (8009f08 <xTaskResumeAll+0x118>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d05e      	beq.n	8009ef6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e38:	e02f      	b.n	8009e9a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e3a:	4b34      	ldr	r3, [pc, #208]	; (8009f0c <xTaskResumeAll+0x11c>)
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3318      	adds	r3, #24
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7ff f890 	bl	8008f6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7ff f88b 	bl	8008f6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e5a:	4b2d      	ldr	r3, [pc, #180]	; (8009f10 <xTaskResumeAll+0x120>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d903      	bls.n	8009e6a <xTaskResumeAll+0x7a>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e66:	4a2a      	ldr	r2, [pc, #168]	; (8009f10 <xTaskResumeAll+0x120>)
 8009e68:	6013      	str	r3, [r2, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6e:	4613      	mov	r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4a27      	ldr	r2, [pc, #156]	; (8009f14 <xTaskResumeAll+0x124>)
 8009e78:	441a      	add	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4610      	mov	r0, r2
 8009e82:	f7ff f816 	bl	8008eb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8a:	4b23      	ldr	r3, [pc, #140]	; (8009f18 <xTaskResumeAll+0x128>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d302      	bcc.n	8009e9a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009e94:	4b21      	ldr	r3, [pc, #132]	; (8009f1c <xTaskResumeAll+0x12c>)
 8009e96:	2201      	movs	r2, #1
 8009e98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e9a:	4b1c      	ldr	r3, [pc, #112]	; (8009f0c <xTaskResumeAll+0x11c>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1cb      	bne.n	8009e3a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ea8:	f000 fb48 	bl	800a53c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009eac:	4b1c      	ldr	r3, [pc, #112]	; (8009f20 <xTaskResumeAll+0x130>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d010      	beq.n	8009eda <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009eb8:	f000 f846 	bl	8009f48 <xTaskIncrementTick>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009ec2:	4b16      	ldr	r3, [pc, #88]	; (8009f1c <xTaskResumeAll+0x12c>)
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1f1      	bne.n	8009eb8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009ed4:	4b12      	ldr	r3, [pc, #72]	; (8009f20 <xTaskResumeAll+0x130>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009eda:	4b10      	ldr	r3, [pc, #64]	; (8009f1c <xTaskResumeAll+0x12c>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d009      	beq.n	8009ef6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ee6:	4b0f      	ldr	r3, [pc, #60]	; (8009f24 <xTaskResumeAll+0x134>)
 8009ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ef6:	f001 f9c7 	bl	800b288 <vPortExitCritical>

	return xAlreadyYielded;
 8009efa:	68bb      	ldr	r3, [r7, #8]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	20000d0c 	.word	0x20000d0c
 8009f08:	20000ce4 	.word	0x20000ce4
 8009f0c:	20000ca4 	.word	0x20000ca4
 8009f10:	20000cec 	.word	0x20000cec
 8009f14:	20000814 	.word	0x20000814
 8009f18:	20000810 	.word	0x20000810
 8009f1c:	20000cf8 	.word	0x20000cf8
 8009f20:	20000cf4 	.word	0x20000cf4
 8009f24:	e000ed04 	.word	0xe000ed04

08009f28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f2e:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <xTaskGetTickCount+0x1c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f34:	687b      	ldr	r3, [r7, #4]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	20000ce8 	.word	0x20000ce8

08009f48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f52:	4b4e      	ldr	r3, [pc, #312]	; (800a08c <xTaskIncrementTick+0x144>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f040 8088 	bne.w	800a06c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f5c:	4b4c      	ldr	r3, [pc, #304]	; (800a090 <xTaskIncrementTick+0x148>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3301      	adds	r3, #1
 8009f62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f64:	4a4a      	ldr	r2, [pc, #296]	; (800a090 <xTaskIncrementTick+0x148>)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d11f      	bne.n	8009fb0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f70:	4b48      	ldr	r3, [pc, #288]	; (800a094 <xTaskIncrementTick+0x14c>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d009      	beq.n	8009f8e <xTaskIncrementTick+0x46>
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	603b      	str	r3, [r7, #0]
 8009f8c:	e7fe      	b.n	8009f8c <xTaskIncrementTick+0x44>
 8009f8e:	4b41      	ldr	r3, [pc, #260]	; (800a094 <xTaskIncrementTick+0x14c>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	4b40      	ldr	r3, [pc, #256]	; (800a098 <xTaskIncrementTick+0x150>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a3e      	ldr	r2, [pc, #248]	; (800a094 <xTaskIncrementTick+0x14c>)
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	4a3e      	ldr	r2, [pc, #248]	; (800a098 <xTaskIncrementTick+0x150>)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	4b3e      	ldr	r3, [pc, #248]	; (800a09c <xTaskIncrementTick+0x154>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	4a3c      	ldr	r2, [pc, #240]	; (800a09c <xTaskIncrementTick+0x154>)
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	f000 fac6 	bl	800a53c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009fb0:	4b3b      	ldr	r3, [pc, #236]	; (800a0a0 <xTaskIncrementTick+0x158>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d349      	bcc.n	800a04e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fba:	4b36      	ldr	r3, [pc, #216]	; (800a094 <xTaskIncrementTick+0x14c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d104      	bne.n	8009fce <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fc4:	4b36      	ldr	r3, [pc, #216]	; (800a0a0 <xTaskIncrementTick+0x158>)
 8009fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fca:	601a      	str	r2, [r3, #0]
					break;
 8009fcc:	e03f      	b.n	800a04e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fce:	4b31      	ldr	r3, [pc, #196]	; (800a094 <xTaskIncrementTick+0x14c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d203      	bcs.n	8009fee <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009fe6:	4a2e      	ldr	r2, [pc, #184]	; (800a0a0 <xTaskIncrementTick+0x158>)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009fec:	e02f      	b.n	800a04e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fe ffba 	bl	8008f6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d004      	beq.n	800a00a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	3318      	adds	r3, #24
 800a004:	4618      	mov	r0, r3
 800a006:	f7fe ffb1 	bl	8008f6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a00e:	4b25      	ldr	r3, [pc, #148]	; (800a0a4 <xTaskIncrementTick+0x15c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	429a      	cmp	r2, r3
 800a014:	d903      	bls.n	800a01e <xTaskIncrementTick+0xd6>
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01a:	4a22      	ldr	r2, [pc, #136]	; (800a0a4 <xTaskIncrementTick+0x15c>)
 800a01c:	6013      	str	r3, [r2, #0]
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a022:	4613      	mov	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4a1f      	ldr	r2, [pc, #124]	; (800a0a8 <xTaskIncrementTick+0x160>)
 800a02c:	441a      	add	r2, r3
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	3304      	adds	r3, #4
 800a032:	4619      	mov	r1, r3
 800a034:	4610      	mov	r0, r2
 800a036:	f7fe ff3c 	bl	8008eb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03e:	4b1b      	ldr	r3, [pc, #108]	; (800a0ac <xTaskIncrementTick+0x164>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	429a      	cmp	r2, r3
 800a046:	d3b8      	bcc.n	8009fba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a048:	2301      	movs	r3, #1
 800a04a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a04c:	e7b5      	b.n	8009fba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a04e:	4b17      	ldr	r3, [pc, #92]	; (800a0ac <xTaskIncrementTick+0x164>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a054:	4914      	ldr	r1, [pc, #80]	; (800a0a8 <xTaskIncrementTick+0x160>)
 800a056:	4613      	mov	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	440b      	add	r3, r1
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d907      	bls.n	800a076 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a066:	2301      	movs	r3, #1
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	e004      	b.n	800a076 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a06c:	4b10      	ldr	r3, [pc, #64]	; (800a0b0 <xTaskIncrementTick+0x168>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3301      	adds	r3, #1
 800a072:	4a0f      	ldr	r2, [pc, #60]	; (800a0b0 <xTaskIncrementTick+0x168>)
 800a074:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a076:	4b0f      	ldr	r3, [pc, #60]	; (800a0b4 <xTaskIncrementTick+0x16c>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a07e:	2301      	movs	r3, #1
 800a080:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a082:	697b      	ldr	r3, [r7, #20]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20000d0c 	.word	0x20000d0c
 800a090:	20000ce8 	.word	0x20000ce8
 800a094:	20000c9c 	.word	0x20000c9c
 800a098:	20000ca0 	.word	0x20000ca0
 800a09c:	20000cfc 	.word	0x20000cfc
 800a0a0:	20000d04 	.word	0x20000d04
 800a0a4:	20000cec 	.word	0x20000cec
 800a0a8:	20000814 	.word	0x20000814
 800a0ac:	20000810 	.word	0x20000810
 800a0b0:	20000cf4 	.word	0x20000cf4
 800a0b4:	20000cf8 	.word	0x20000cf8

0800a0b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a0be:	4b27      	ldr	r3, [pc, #156]	; (800a15c <vTaskSwitchContext+0xa4>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d003      	beq.n	800a0ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a0c6:	4b26      	ldr	r3, [pc, #152]	; (800a160 <vTaskSwitchContext+0xa8>)
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0cc:	e040      	b.n	800a150 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a0ce:	4b24      	ldr	r3, [pc, #144]	; (800a160 <vTaskSwitchContext+0xa8>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0d4:	4b23      	ldr	r3, [pc, #140]	; (800a164 <vTaskSwitchContext+0xac>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	60fb      	str	r3, [r7, #12]
 800a0da:	e00f      	b.n	800a0fc <vTaskSwitchContext+0x44>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d109      	bne.n	800a0f6 <vTaskSwitchContext+0x3e>
 800a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	607b      	str	r3, [r7, #4]
 800a0f4:	e7fe      	b.n	800a0f4 <vTaskSwitchContext+0x3c>
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	491a      	ldr	r1, [pc, #104]	; (800a168 <vTaskSwitchContext+0xb0>)
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	4613      	mov	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	440b      	add	r3, r1
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d0e5      	beq.n	800a0dc <vTaskSwitchContext+0x24>
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	4613      	mov	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4a13      	ldr	r2, [pc, #76]	; (800a168 <vTaskSwitchContext+0xb0>)
 800a11c:	4413      	add	r3, r2
 800a11e:	60bb      	str	r3, [r7, #8]
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	605a      	str	r2, [r3, #4]
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	3308      	adds	r3, #8
 800a132:	429a      	cmp	r2, r3
 800a134:	d104      	bne.n	800a140 <vTaskSwitchContext+0x88>
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	605a      	str	r2, [r3, #4]
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	4a09      	ldr	r2, [pc, #36]	; (800a16c <vTaskSwitchContext+0xb4>)
 800a148:	6013      	str	r3, [r2, #0]
 800a14a:	4a06      	ldr	r2, [pc, #24]	; (800a164 <vTaskSwitchContext+0xac>)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6013      	str	r3, [r2, #0]
}
 800a150:	bf00      	nop
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	20000d0c 	.word	0x20000d0c
 800a160:	20000cf8 	.word	0x20000cf8
 800a164:	20000cec 	.word	0x20000cec
 800a168:	20000814 	.word	0x20000814
 800a16c:	20000810 	.word	0x20000810

0800a170 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d109      	bne.n	800a194 <vTaskPlaceOnEventList+0x24>
 800a180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	60fb      	str	r3, [r7, #12]
 800a192:	e7fe      	b.n	800a192 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a194:	4b07      	ldr	r3, [pc, #28]	; (800a1b4 <vTaskPlaceOnEventList+0x44>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	3318      	adds	r3, #24
 800a19a:	4619      	mov	r1, r3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7fe feac 	bl	8008efa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	6838      	ldr	r0, [r7, #0]
 800a1a6:	f000 fb81 	bl	800a8ac <prvAddCurrentTaskToDelayedList>
}
 800a1aa:	bf00      	nop
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	20000810 	.word	0x20000810

0800a1b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d109      	bne.n	800a1de <vTaskPlaceOnEventListRestricted+0x26>
 800a1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	617b      	str	r3, [r7, #20]
 800a1dc:	e7fe      	b.n	800a1dc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1de:	4b0a      	ldr	r3, [pc, #40]	; (800a208 <vTaskPlaceOnEventListRestricted+0x50>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	3318      	adds	r3, #24
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f7fe fe63 	bl	8008eb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a1f8:	6879      	ldr	r1, [r7, #4]
 800a1fa:	68b8      	ldr	r0, [r7, #8]
 800a1fc:	f000 fb56 	bl	800a8ac <prvAddCurrentTaskToDelayedList>
	}
 800a200:	bf00      	nop
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	20000810 	.word	0x20000810

0800a20c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d109      	bne.n	800a236 <xTaskRemoveFromEventList+0x2a>
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	60fb      	str	r3, [r7, #12]
 800a234:	e7fe      	b.n	800a234 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	3318      	adds	r3, #24
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fe96 	bl	8008f6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a240:	4b1d      	ldr	r3, [pc, #116]	; (800a2b8 <xTaskRemoveFromEventList+0xac>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d11d      	bne.n	800a284 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	3304      	adds	r3, #4
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fe fe8d 	bl	8008f6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a256:	4b19      	ldr	r3, [pc, #100]	; (800a2bc <xTaskRemoveFromEventList+0xb0>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d903      	bls.n	800a266 <xTaskRemoveFromEventList+0x5a>
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a262:	4a16      	ldr	r2, [pc, #88]	; (800a2bc <xTaskRemoveFromEventList+0xb0>)
 800a264:	6013      	str	r3, [r2, #0]
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26a:	4613      	mov	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4a13      	ldr	r2, [pc, #76]	; (800a2c0 <xTaskRemoveFromEventList+0xb4>)
 800a274:	441a      	add	r2, r3
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	3304      	adds	r3, #4
 800a27a:	4619      	mov	r1, r3
 800a27c:	4610      	mov	r0, r2
 800a27e:	f7fe fe18 	bl	8008eb2 <vListInsertEnd>
 800a282:	e005      	b.n	800a290 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	3318      	adds	r3, #24
 800a288:	4619      	mov	r1, r3
 800a28a:	480e      	ldr	r0, [pc, #56]	; (800a2c4 <xTaskRemoveFromEventList+0xb8>)
 800a28c:	f7fe fe11 	bl	8008eb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a294:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <xTaskRemoveFromEventList+0xbc>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d905      	bls.n	800a2aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2a2:	4b0a      	ldr	r3, [pc, #40]	; (800a2cc <xTaskRemoveFromEventList+0xc0>)
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]
 800a2a8:	e001      	b.n	800a2ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a2ae:	697b      	ldr	r3, [r7, #20]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3718      	adds	r7, #24
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	20000d0c 	.word	0x20000d0c
 800a2bc:	20000cec 	.word	0x20000cec
 800a2c0:	20000814 	.word	0x20000814
 800a2c4:	20000ca4 	.word	0x20000ca4
 800a2c8:	20000810 	.word	0x20000810
 800a2cc:	20000cf8 	.word	0x20000cf8

0800a2d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a2d8:	4b06      	ldr	r3, [pc, #24]	; (800a2f4 <vTaskInternalSetTimeOutState+0x24>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a2e0:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <vTaskInternalSetTimeOutState+0x28>)
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	605a      	str	r2, [r3, #4]
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	20000cfc 	.word	0x20000cfc
 800a2f8:	20000ce8 	.word	0x20000ce8

0800a2fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b088      	sub	sp, #32
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d109      	bne.n	800a320 <xTaskCheckForTimeOut+0x24>
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	613b      	str	r3, [r7, #16]
 800a31e:	e7fe      	b.n	800a31e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d109      	bne.n	800a33a <xTaskCheckForTimeOut+0x3e>
 800a326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	60fb      	str	r3, [r7, #12]
 800a338:	e7fe      	b.n	800a338 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a33a:	f000 ff77 	bl	800b22c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a33e:	4b1d      	ldr	r3, [pc, #116]	; (800a3b4 <xTaskCheckForTimeOut+0xb8>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	69ba      	ldr	r2, [r7, #24]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a356:	d102      	bne.n	800a35e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a358:	2300      	movs	r3, #0
 800a35a:	61fb      	str	r3, [r7, #28]
 800a35c:	e023      	b.n	800a3a6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	4b15      	ldr	r3, [pc, #84]	; (800a3b8 <xTaskCheckForTimeOut+0xbc>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	429a      	cmp	r2, r3
 800a368:	d007      	beq.n	800a37a <xTaskCheckForTimeOut+0x7e>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	69ba      	ldr	r2, [r7, #24]
 800a370:	429a      	cmp	r2, r3
 800a372:	d302      	bcc.n	800a37a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a374:	2301      	movs	r3, #1
 800a376:	61fb      	str	r3, [r7, #28]
 800a378:	e015      	b.n	800a3a6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	697a      	ldr	r2, [r7, #20]
 800a380:	429a      	cmp	r2, r3
 800a382:	d20b      	bcs.n	800a39c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	1ad2      	subs	r2, r2, r3
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f7ff ff9d 	bl	800a2d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a396:	2300      	movs	r3, #0
 800a398:	61fb      	str	r3, [r7, #28]
 800a39a:	e004      	b.n	800a3a6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a3a6:	f000 ff6f 	bl	800b288 <vPortExitCritical>

	return xReturn;
 800a3aa:	69fb      	ldr	r3, [r7, #28]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3720      	adds	r7, #32
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	20000ce8 	.word	0x20000ce8
 800a3b8:	20000cfc 	.word	0x20000cfc

0800a3bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a3bc:	b480      	push	{r7}
 800a3be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a3c0:	4b03      	ldr	r3, [pc, #12]	; (800a3d0 <vTaskMissedYield+0x14>)
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	601a      	str	r2, [r3, #0]
}
 800a3c6:	bf00      	nop
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	20000cf8 	.word	0x20000cf8

0800a3d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a3dc:	f000 f854 	bl	800a488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a3e0:	4b07      	ldr	r3, [pc, #28]	; (800a400 <prvIdleTask+0x2c>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d907      	bls.n	800a3f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a3e8:	4b06      	ldr	r3, [pc, #24]	; (800a404 <prvIdleTask+0x30>)
 800a3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a3f8:	f7f7 fb72 	bl	8001ae0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a3fc:	e7ee      	b.n	800a3dc <prvIdleTask+0x8>
 800a3fe:	bf00      	nop
 800a400:	20000814 	.word	0x20000814
 800a404:	e000ed04 	.word	0xe000ed04

0800a408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a40e:	2300      	movs	r3, #0
 800a410:	607b      	str	r3, [r7, #4]
 800a412:	e00c      	b.n	800a42e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	4613      	mov	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4413      	add	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	4a12      	ldr	r2, [pc, #72]	; (800a468 <prvInitialiseTaskLists+0x60>)
 800a420:	4413      	add	r3, r2
 800a422:	4618      	mov	r0, r3
 800a424:	f7fe fd18 	bl	8008e58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3301      	adds	r3, #1
 800a42c:	607b      	str	r3, [r7, #4]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b37      	cmp	r3, #55	; 0x37
 800a432:	d9ef      	bls.n	800a414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a434:	480d      	ldr	r0, [pc, #52]	; (800a46c <prvInitialiseTaskLists+0x64>)
 800a436:	f7fe fd0f 	bl	8008e58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a43a:	480d      	ldr	r0, [pc, #52]	; (800a470 <prvInitialiseTaskLists+0x68>)
 800a43c:	f7fe fd0c 	bl	8008e58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a440:	480c      	ldr	r0, [pc, #48]	; (800a474 <prvInitialiseTaskLists+0x6c>)
 800a442:	f7fe fd09 	bl	8008e58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a446:	480c      	ldr	r0, [pc, #48]	; (800a478 <prvInitialiseTaskLists+0x70>)
 800a448:	f7fe fd06 	bl	8008e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a44c:	480b      	ldr	r0, [pc, #44]	; (800a47c <prvInitialiseTaskLists+0x74>)
 800a44e:	f7fe fd03 	bl	8008e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a452:	4b0b      	ldr	r3, [pc, #44]	; (800a480 <prvInitialiseTaskLists+0x78>)
 800a454:	4a05      	ldr	r2, [pc, #20]	; (800a46c <prvInitialiseTaskLists+0x64>)
 800a456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a458:	4b0a      	ldr	r3, [pc, #40]	; (800a484 <prvInitialiseTaskLists+0x7c>)
 800a45a:	4a05      	ldr	r2, [pc, #20]	; (800a470 <prvInitialiseTaskLists+0x68>)
 800a45c:	601a      	str	r2, [r3, #0]
}
 800a45e:	bf00      	nop
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20000814 	.word	0x20000814
 800a46c:	20000c74 	.word	0x20000c74
 800a470:	20000c88 	.word	0x20000c88
 800a474:	20000ca4 	.word	0x20000ca4
 800a478:	20000cb8 	.word	0x20000cb8
 800a47c:	20000cd0 	.word	0x20000cd0
 800a480:	20000c9c 	.word	0x20000c9c
 800a484:	20000ca0 	.word	0x20000ca0

0800a488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a48e:	e019      	b.n	800a4c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a490:	f000 fecc 	bl	800b22c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a494:	4b0f      	ldr	r3, [pc, #60]	; (800a4d4 <prvCheckTasksWaitingTermination+0x4c>)
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fe fd63 	bl	8008f6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a4a6:	4b0c      	ldr	r3, [pc, #48]	; (800a4d8 <prvCheckTasksWaitingTermination+0x50>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	4a0a      	ldr	r2, [pc, #40]	; (800a4d8 <prvCheckTasksWaitingTermination+0x50>)
 800a4ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a4b0:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <prvCheckTasksWaitingTermination+0x54>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	4a09      	ldr	r2, [pc, #36]	; (800a4dc <prvCheckTasksWaitingTermination+0x54>)
 800a4b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a4ba:	f000 fee5 	bl	800b288 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f80e 	bl	800a4e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4c4:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <prvCheckTasksWaitingTermination+0x54>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1e1      	bne.n	800a490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a4cc:	bf00      	nop
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	20000cb8 	.word	0x20000cb8
 800a4d8:	20000ce4 	.word	0x20000ce4
 800a4dc:	20000ccc 	.word	0x20000ccc

0800a4e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d108      	bne.n	800a504 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f001 f874 	bl	800b5e4 <vPortFree>
				vPortFree( pxTCB );
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f001 f871 	bl	800b5e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a502:	e017      	b.n	800a534 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d103      	bne.n	800a516 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f001 f868 	bl	800b5e4 <vPortFree>
	}
 800a514:	e00e      	b.n	800a534 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d009      	beq.n	800a534 <prvDeleteTCB+0x54>
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	e7fe      	b.n	800a532 <prvDeleteTCB+0x52>
	}
 800a534:	bf00      	nop
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a542:	4b0c      	ldr	r3, [pc, #48]	; (800a574 <prvResetNextTaskUnblockTime+0x38>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d104      	bne.n	800a556 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a54c:	4b0a      	ldr	r3, [pc, #40]	; (800a578 <prvResetNextTaskUnblockTime+0x3c>)
 800a54e:	f04f 32ff 	mov.w	r2, #4294967295
 800a552:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a554:	e008      	b.n	800a568 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a556:	4b07      	ldr	r3, [pc, #28]	; (800a574 <prvResetNextTaskUnblockTime+0x38>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	4a04      	ldr	r2, [pc, #16]	; (800a578 <prvResetNextTaskUnblockTime+0x3c>)
 800a566:	6013      	str	r3, [r2, #0]
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	20000c9c 	.word	0x20000c9c
 800a578:	20000d04 	.word	0x20000d04

0800a57c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a582:	4b0b      	ldr	r3, [pc, #44]	; (800a5b0 <xTaskGetSchedulerState+0x34>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d102      	bne.n	800a590 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a58a:	2301      	movs	r3, #1
 800a58c:	607b      	str	r3, [r7, #4]
 800a58e:	e008      	b.n	800a5a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a590:	4b08      	ldr	r3, [pc, #32]	; (800a5b4 <xTaskGetSchedulerState+0x38>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a598:	2302      	movs	r3, #2
 800a59a:	607b      	str	r3, [r7, #4]
 800a59c:	e001      	b.n	800a5a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a5a2:	687b      	ldr	r3, [r7, #4]
	}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr
 800a5b0:	20000cf0 	.word	0x20000cf0
 800a5b4:	20000d0c 	.word	0x20000d0c

0800a5b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d054      	beq.n	800a678 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a5ce:	4b2d      	ldr	r3, [pc, #180]	; (800a684 <xTaskPriorityDisinherit+0xcc>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d009      	beq.n	800a5ec <xTaskPriorityDisinherit+0x34>
 800a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	60fb      	str	r3, [r7, #12]
 800a5ea:	e7fe      	b.n	800a5ea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d109      	bne.n	800a608 <xTaskPriorityDisinherit+0x50>
 800a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	60bb      	str	r3, [r7, #8]
 800a606:	e7fe      	b.n	800a606 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a60c:	1e5a      	subs	r2, r3, #1
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d02c      	beq.n	800a678 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a622:	2b00      	cmp	r3, #0
 800a624:	d128      	bne.n	800a678 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	3304      	adds	r3, #4
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fe fc9e 	bl	8008f6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a648:	4b0f      	ldr	r3, [pc, #60]	; (800a688 <xTaskPriorityDisinherit+0xd0>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d903      	bls.n	800a658 <xTaskPriorityDisinherit+0xa0>
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a654:	4a0c      	ldr	r2, [pc, #48]	; (800a688 <xTaskPriorityDisinherit+0xd0>)
 800a656:	6013      	str	r3, [r2, #0]
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a65c:	4613      	mov	r3, r2
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	4413      	add	r3, r2
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	4a09      	ldr	r2, [pc, #36]	; (800a68c <xTaskPriorityDisinherit+0xd4>)
 800a666:	441a      	add	r2, r3
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	3304      	adds	r3, #4
 800a66c:	4619      	mov	r1, r3
 800a66e:	4610      	mov	r0, r2
 800a670:	f7fe fc1f 	bl	8008eb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a674:	2301      	movs	r3, #1
 800a676:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a678:	697b      	ldr	r3, [r7, #20]
	}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20000810 	.word	0x20000810
 800a688:	20000cec 	.word	0x20000cec
 800a68c:	20000814 	.word	0x20000814

0800a690 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a69e:	f000 fdc5 	bl	800b22c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a6a2:	4b26      	ldr	r3, [pc, #152]	; (800a73c <xTaskNotifyWait+0xac>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d01a      	beq.n	800a6e6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a6b0:	4b22      	ldr	r3, [pc, #136]	; (800a73c <xTaskNotifyWait+0xac>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	43d2      	mvns	r2, r2
 800a6ba:	400a      	ands	r2, r1
 800a6bc:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a6be:	4b1f      	ldr	r3, [pc, #124]	; (800a73c <xTaskNotifyWait+0xac>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00b      	beq.n	800a6e6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	6838      	ldr	r0, [r7, #0]
 800a6d2:	f000 f8eb 	bl	800a8ac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a6d6:	4b1a      	ldr	r3, [pc, #104]	; (800a740 <xTaskNotifyWait+0xb0>)
 800a6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a6e6:	f000 fdcf 	bl	800b288 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a6ea:	f000 fd9f 	bl	800b22c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d004      	beq.n	800a6fe <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a6f4:	4b11      	ldr	r3, [pc, #68]	; (800a73c <xTaskNotifyWait+0xac>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a6fe:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <xTaskNotifyWait+0xac>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a706:	b2db      	uxtb	r3, r3
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d002      	beq.n	800a712 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a70c:	2300      	movs	r3, #0
 800a70e:	617b      	str	r3, [r7, #20]
 800a710:	e008      	b.n	800a724 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a712:	4b0a      	ldr	r3, [pc, #40]	; (800a73c <xTaskNotifyWait+0xac>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	43d2      	mvns	r2, r2
 800a71c:	400a      	ands	r2, r1
 800a71e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800a720:	2301      	movs	r3, #1
 800a722:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a724:	4b05      	ldr	r3, [pc, #20]	; (800a73c <xTaskNotifyWait+0xac>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800a72e:	f000 fdab 	bl	800b288 <vPortExitCritical>

		return xReturn;
 800a732:	697b      	ldr	r3, [r7, #20]
	}
 800a734:	4618      	mov	r0, r3
 800a736:	3718      	adds	r7, #24
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	20000810 	.word	0x20000810
 800a740:	e000ed04 	.word	0xe000ed04

0800a744 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08a      	sub	sp, #40	; 0x28
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	603b      	str	r3, [r7, #0]
 800a750:	4613      	mov	r3, r2
 800a752:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a754:	2301      	movs	r3, #1
 800a756:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d109      	bne.n	800a772 <xTaskGenericNotify+0x2e>
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	61bb      	str	r3, [r7, #24]
 800a770:	e7fe      	b.n	800a770 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a776:	f000 fd59 	bl	800b22c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d003      	beq.n	800a788 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a78e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a790:	6a3b      	ldr	r3, [r7, #32]
 800a792:	2202      	movs	r2, #2
 800a794:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800a798:	79fb      	ldrb	r3, [r7, #7]
 800a79a:	2b04      	cmp	r3, #4
 800a79c:	d827      	bhi.n	800a7ee <xTaskGenericNotify+0xaa>
 800a79e:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <xTaskGenericNotify+0x60>)
 800a7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a4:	0800a80d 	.word	0x0800a80d
 800a7a8:	0800a7b9 	.word	0x0800a7b9
 800a7ac:	0800a7c7 	.word	0x0800a7c7
 800a7b0:	0800a7d3 	.word	0x0800a7d3
 800a7b4:	0800a7db 	.word	0x0800a7db
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a7b8:	6a3b      	ldr	r3, [r7, #32]
 800a7ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	431a      	orrs	r2, r3
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a7c4:	e025      	b.n	800a812 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a7c6:	6a3b      	ldr	r3, [r7, #32]
 800a7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ca:	1c5a      	adds	r2, r3, #1
 800a7cc:	6a3b      	ldr	r3, [r7, #32]
 800a7ce:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a7d0:	e01f      	b.n	800a812 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800a7d8:	e01b      	b.n	800a812 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a7da:	7ffb      	ldrb	r3, [r7, #31]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d003      	beq.n	800a7e8 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a7e0:	6a3b      	ldr	r3, [r7, #32]
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a7e6:	e014      	b.n	800a812 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a7ec:	e011      	b.n	800a812 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f6:	d00b      	beq.n	800a810 <xTaskGenericNotify+0xcc>
 800a7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	e7fe      	b.n	800a80a <xTaskGenericNotify+0xc6>
					break;
 800a80c:	bf00      	nop
 800a80e:	e000      	b.n	800a812 <xTaskGenericNotify+0xce>

					break;
 800a810:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a812:	7ffb      	ldrb	r3, [r7, #31]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d139      	bne.n	800a88c <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	3304      	adds	r3, #4
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fe fba5 	bl	8008f6c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a822:	6a3b      	ldr	r3, [r7, #32]
 800a824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a826:	4b1d      	ldr	r3, [pc, #116]	; (800a89c <xTaskGenericNotify+0x158>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d903      	bls.n	800a836 <xTaskGenericNotify+0xf2>
 800a82e:	6a3b      	ldr	r3, [r7, #32]
 800a830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a832:	4a1a      	ldr	r2, [pc, #104]	; (800a89c <xTaskGenericNotify+0x158>)
 800a834:	6013      	str	r3, [r2, #0]
 800a836:	6a3b      	ldr	r3, [r7, #32]
 800a838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a83a:	4613      	mov	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4413      	add	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4a17      	ldr	r2, [pc, #92]	; (800a8a0 <xTaskGenericNotify+0x15c>)
 800a844:	441a      	add	r2, r3
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	3304      	adds	r3, #4
 800a84a:	4619      	mov	r1, r3
 800a84c:	4610      	mov	r0, r2
 800a84e:	f7fe fb30 	bl	8008eb2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a852:	6a3b      	ldr	r3, [r7, #32]
 800a854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a856:	2b00      	cmp	r3, #0
 800a858:	d009      	beq.n	800a86e <xTaskGenericNotify+0x12a>
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	613b      	str	r3, [r7, #16]
 800a86c:	e7fe      	b.n	800a86c <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a872:	4b0c      	ldr	r3, [pc, #48]	; (800a8a4 <xTaskGenericNotify+0x160>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a878:	429a      	cmp	r2, r3
 800a87a:	d907      	bls.n	800a88c <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a87c:	4b0a      	ldr	r3, [pc, #40]	; (800a8a8 <xTaskGenericNotify+0x164>)
 800a87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a88c:	f000 fcfc 	bl	800b288 <vPortExitCritical>

		return xReturn;
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a892:	4618      	mov	r0, r3
 800a894:	3728      	adds	r7, #40	; 0x28
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	20000cec 	.word	0x20000cec
 800a8a0:	20000814 	.word	0x20000814
 800a8a4:	20000810 	.word	0x20000810
 800a8a8:	e000ed04 	.word	0xe000ed04

0800a8ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a8b6:	4b21      	ldr	r3, [pc, #132]	; (800a93c <prvAddCurrentTaskToDelayedList+0x90>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8bc:	4b20      	ldr	r3, [pc, #128]	; (800a940 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3304      	adds	r3, #4
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fe fb52 	bl	8008f6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ce:	d10a      	bne.n	800a8e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d007      	beq.n	800a8e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8d6:	4b1a      	ldr	r3, [pc, #104]	; (800a940 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4619      	mov	r1, r3
 800a8de:	4819      	ldr	r0, [pc, #100]	; (800a944 <prvAddCurrentTaskToDelayedList+0x98>)
 800a8e0:	f7fe fae7 	bl	8008eb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a8e4:	e026      	b.n	800a934 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8ee:	4b14      	ldr	r3, [pc, #80]	; (800a940 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d209      	bcs.n	800a912 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8fe:	4b12      	ldr	r3, [pc, #72]	; (800a948 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	4b0f      	ldr	r3, [pc, #60]	; (800a940 <prvAddCurrentTaskToDelayedList+0x94>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	3304      	adds	r3, #4
 800a908:	4619      	mov	r1, r3
 800a90a:	4610      	mov	r0, r2
 800a90c:	f7fe faf5 	bl	8008efa <vListInsert>
}
 800a910:	e010      	b.n	800a934 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a912:	4b0e      	ldr	r3, [pc, #56]	; (800a94c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	4b0a      	ldr	r3, [pc, #40]	; (800a940 <prvAddCurrentTaskToDelayedList+0x94>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3304      	adds	r3, #4
 800a91c:	4619      	mov	r1, r3
 800a91e:	4610      	mov	r0, r2
 800a920:	f7fe faeb 	bl	8008efa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a924:	4b0a      	ldr	r3, [pc, #40]	; (800a950 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d202      	bcs.n	800a934 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a92e:	4a08      	ldr	r2, [pc, #32]	; (800a950 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	6013      	str	r3, [r2, #0]
}
 800a934:	bf00      	nop
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	20000ce8 	.word	0x20000ce8
 800a940:	20000810 	.word	0x20000810
 800a944:	20000cd0 	.word	0x20000cd0
 800a948:	20000ca0 	.word	0x20000ca0
 800a94c:	20000c9c 	.word	0x20000c9c
 800a950:	20000d04 	.word	0x20000d04

0800a954 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b08a      	sub	sp, #40	; 0x28
 800a958:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a95a:	2300      	movs	r3, #0
 800a95c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a95e:	f000 faff 	bl	800af60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a962:	4b1c      	ldr	r3, [pc, #112]	; (800a9d4 <xTimerCreateTimerTask+0x80>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d021      	beq.n	800a9ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a96e:	2300      	movs	r3, #0
 800a970:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a972:	1d3a      	adds	r2, r7, #4
 800a974:	f107 0108 	add.w	r1, r7, #8
 800a978:	f107 030c 	add.w	r3, r7, #12
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fe fa51 	bl	8008e24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a982:	6879      	ldr	r1, [r7, #4]
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	9202      	str	r2, [sp, #8]
 800a98a:	9301      	str	r3, [sp, #4]
 800a98c:	2302      	movs	r3, #2
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	2300      	movs	r3, #0
 800a992:	460a      	mov	r2, r1
 800a994:	4910      	ldr	r1, [pc, #64]	; (800a9d8 <xTimerCreateTimerTask+0x84>)
 800a996:	4811      	ldr	r0, [pc, #68]	; (800a9dc <xTimerCreateTimerTask+0x88>)
 800a998:	f7fe ffe6 	bl	8009968 <xTaskCreateStatic>
 800a99c:	4602      	mov	r2, r0
 800a99e:	4b10      	ldr	r3, [pc, #64]	; (800a9e0 <xTimerCreateTimerTask+0x8c>)
 800a9a0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a9a2:	4b0f      	ldr	r3, [pc, #60]	; (800a9e0 <xTimerCreateTimerTask+0x8c>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d109      	bne.n	800a9c8 <xTimerCreateTimerTask+0x74>
 800a9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	613b      	str	r3, [r7, #16]
 800a9c6:	e7fe      	b.n	800a9c6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a9c8:	697b      	ldr	r3, [r7, #20]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3718      	adds	r7, #24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20000d40 	.word	0x20000d40
 800a9d8:	0800ce28 	.word	0x0800ce28
 800a9dc:	0800ab15 	.word	0x0800ab15
 800a9e0:	20000d44 	.word	0x20000d44

0800a9e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b08a      	sub	sp, #40	; 0x28
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
 800a9f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d109      	bne.n	800aa10 <xTimerGenericCommand+0x2c>
 800a9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa00:	f383 8811 	msr	BASEPRI, r3
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	623b      	str	r3, [r7, #32]
 800aa0e:	e7fe      	b.n	800aa0e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa10:	4b19      	ldr	r3, [pc, #100]	; (800aa78 <xTimerGenericCommand+0x94>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d02a      	beq.n	800aa6e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	2b05      	cmp	r3, #5
 800aa28:	dc18      	bgt.n	800aa5c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa2a:	f7ff fda7 	bl	800a57c <xTaskGetSchedulerState>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d109      	bne.n	800aa48 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa34:	4b10      	ldr	r3, [pc, #64]	; (800aa78 <xTimerGenericCommand+0x94>)
 800aa36:	6818      	ldr	r0, [r3, #0]
 800aa38:	f107 0110 	add.w	r1, r7, #16
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa40:	f7fe fbbc 	bl	80091bc <xQueueGenericSend>
 800aa44:	6278      	str	r0, [r7, #36]	; 0x24
 800aa46:	e012      	b.n	800aa6e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa48:	4b0b      	ldr	r3, [pc, #44]	; (800aa78 <xTimerGenericCommand+0x94>)
 800aa4a:	6818      	ldr	r0, [r3, #0]
 800aa4c:	f107 0110 	add.w	r1, r7, #16
 800aa50:	2300      	movs	r3, #0
 800aa52:	2200      	movs	r2, #0
 800aa54:	f7fe fbb2 	bl	80091bc <xQueueGenericSend>
 800aa58:	6278      	str	r0, [r7, #36]	; 0x24
 800aa5a:	e008      	b.n	800aa6e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa5c:	4b06      	ldr	r3, [pc, #24]	; (800aa78 <xTimerGenericCommand+0x94>)
 800aa5e:	6818      	ldr	r0, [r3, #0]
 800aa60:	f107 0110 	add.w	r1, r7, #16
 800aa64:	2300      	movs	r3, #0
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	f7fe fca2 	bl	80093b0 <xQueueGenericSendFromISR>
 800aa6c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3728      	adds	r7, #40	; 0x28
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20000d40 	.word	0x20000d40

0800aa7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af02      	add	r7, sp, #8
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa86:	4b22      	ldr	r3, [pc, #136]	; (800ab10 <prvProcessExpiredTimer+0x94>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	3304      	adds	r3, #4
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fe fa69 	bl	8008f6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaa0:	f003 0304 	and.w	r3, r3, #4
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d021      	beq.n	800aaec <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	699a      	ldr	r2, [r3, #24]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	18d1      	adds	r1, r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	6978      	ldr	r0, [r7, #20]
 800aab6:	f000 f8d1 	bl	800ac5c <prvInsertTimerInActiveList>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d01e      	beq.n	800aafe <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aac0:	2300      	movs	r3, #0
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	2300      	movs	r3, #0
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	2100      	movs	r1, #0
 800aaca:	6978      	ldr	r0, [r7, #20]
 800aacc:	f7ff ff8a 	bl	800a9e4 <xTimerGenericCommand>
 800aad0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d112      	bne.n	800aafe <prvProcessExpiredTimer+0x82>
 800aad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	60fb      	str	r3, [r7, #12]
 800aaea:	e7fe      	b.n	800aaea <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaf2:	f023 0301 	bic.w	r3, r3, #1
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	6a1b      	ldr	r3, [r3, #32]
 800ab02:	6978      	ldr	r0, [r7, #20]
 800ab04:	4798      	blx	r3
}
 800ab06:	bf00      	nop
 800ab08:	3718      	adds	r7, #24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	20000d38 	.word	0x20000d38

0800ab14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab1c:	f107 0308 	add.w	r3, r7, #8
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 f857 	bl	800abd4 <prvGetNextExpireTime>
 800ab26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f000 f803 	bl	800ab38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab32:	f000 f8d5 	bl	800ace0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab36:	e7f1      	b.n	800ab1c <prvTimerTask+0x8>

0800ab38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab42:	f7ff f947 	bl	8009dd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab46:	f107 0308 	add.w	r3, r7, #8
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f000 f866 	bl	800ac1c <prvSampleTimeNow>
 800ab50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d130      	bne.n	800abba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10a      	bne.n	800ab74 <prvProcessTimerOrBlockTask+0x3c>
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d806      	bhi.n	800ab74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ab66:	f7ff f943 	bl	8009df0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ab6a:	68f9      	ldr	r1, [r7, #12]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff ff85 	bl	800aa7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ab72:	e024      	b.n	800abbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d008      	beq.n	800ab8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab7a:	4b13      	ldr	r3, [pc, #76]	; (800abc8 <prvProcessTimerOrBlockTask+0x90>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d101      	bne.n	800ab88 <prvProcessTimerOrBlockTask+0x50>
 800ab84:	2301      	movs	r3, #1
 800ab86:	e000      	b.n	800ab8a <prvProcessTimerOrBlockTask+0x52>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab8c:	4b0f      	ldr	r3, [pc, #60]	; (800abcc <prvProcessTimerOrBlockTask+0x94>)
 800ab8e:	6818      	ldr	r0, [r3, #0]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	4619      	mov	r1, r3
 800ab9a:	f7fe feb1 	bl	8009900 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab9e:	f7ff f927 	bl	8009df0 <xTaskResumeAll>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10a      	bne.n	800abbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aba8:	4b09      	ldr	r3, [pc, #36]	; (800abd0 <prvProcessTimerOrBlockTask+0x98>)
 800abaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abae:	601a      	str	r2, [r3, #0]
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	f3bf 8f6f 	isb	sy
}
 800abb8:	e001      	b.n	800abbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800abba:	f7ff f919 	bl	8009df0 <xTaskResumeAll>
}
 800abbe:	bf00      	nop
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20000d3c 	.word	0x20000d3c
 800abcc:	20000d40 	.word	0x20000d40
 800abd0:	e000ed04 	.word	0xe000ed04

0800abd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800abdc:	4b0e      	ldr	r3, [pc, #56]	; (800ac18 <prvGetNextExpireTime+0x44>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d101      	bne.n	800abea <prvGetNextExpireTime+0x16>
 800abe6:	2201      	movs	r2, #1
 800abe8:	e000      	b.n	800abec <prvGetNextExpireTime+0x18>
 800abea:	2200      	movs	r2, #0
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d105      	bne.n	800ac04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abf8:	4b07      	ldr	r3, [pc, #28]	; (800ac18 <prvGetNextExpireTime+0x44>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	60fb      	str	r3, [r7, #12]
 800ac02:	e001      	b.n	800ac08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac04:	2300      	movs	r3, #0
 800ac06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac08:	68fb      	ldr	r3, [r7, #12]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3714      	adds	r7, #20
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	20000d38 	.word	0x20000d38

0800ac1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac24:	f7ff f980 	bl	8009f28 <xTaskGetTickCount>
 800ac28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac2a:	4b0b      	ldr	r3, [pc, #44]	; (800ac58 <prvSampleTimeNow+0x3c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d205      	bcs.n	800ac40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac34:	f000 f930 	bl	800ae98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	601a      	str	r2, [r3, #0]
 800ac3e:	e002      	b.n	800ac46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac46:	4a04      	ldr	r2, [pc, #16]	; (800ac58 <prvSampleTimeNow+0x3c>)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	20000d48 	.word	0x20000d48

0800ac5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d812      	bhi.n	800aca8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	1ad2      	subs	r2, r2, r3
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	699b      	ldr	r3, [r3, #24]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d302      	bcc.n	800ac96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac90:	2301      	movs	r3, #1
 800ac92:	617b      	str	r3, [r7, #20]
 800ac94:	e01b      	b.n	800acce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac96:	4b10      	ldr	r3, [pc, #64]	; (800acd8 <prvInsertTimerInActiveList+0x7c>)
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	4619      	mov	r1, r3
 800aca0:	4610      	mov	r0, r2
 800aca2:	f7fe f92a 	bl	8008efa <vListInsert>
 800aca6:	e012      	b.n	800acce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	429a      	cmp	r2, r3
 800acae:	d206      	bcs.n	800acbe <prvInsertTimerInActiveList+0x62>
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d302      	bcc.n	800acbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800acb8:	2301      	movs	r3, #1
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	e007      	b.n	800acce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800acbe:	4b07      	ldr	r3, [pc, #28]	; (800acdc <prvInsertTimerInActiveList+0x80>)
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	3304      	adds	r3, #4
 800acc6:	4619      	mov	r1, r3
 800acc8:	4610      	mov	r0, r2
 800acca:	f7fe f916 	bl	8008efa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800acce:	697b      	ldr	r3, [r7, #20]
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3718      	adds	r7, #24
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	20000d3c 	.word	0x20000d3c
 800acdc:	20000d38 	.word	0x20000d38

0800ace0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08e      	sub	sp, #56	; 0x38
 800ace4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ace6:	e0c6      	b.n	800ae76 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	da17      	bge.n	800ad1e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800acee:	1d3b      	adds	r3, r7, #4
 800acf0:	3304      	adds	r3, #4
 800acf2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800acf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d109      	bne.n	800ad0e <prvProcessReceivedCommands+0x2e>
 800acfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfe:	f383 8811 	msr	BASEPRI, r3
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	f3bf 8f4f 	dsb	sy
 800ad0a:	61fb      	str	r3, [r7, #28]
 800ad0c:	e7fe      	b.n	800ad0c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad14:	6850      	ldr	r0, [r2, #4]
 800ad16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad18:	6892      	ldr	r2, [r2, #8]
 800ad1a:	4611      	mov	r1, r2
 800ad1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f2c0 80a7 	blt.w	800ae74 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d004      	beq.n	800ad3c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	3304      	adds	r3, #4
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe f918 	bl	8008f6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad3c:	463b      	mov	r3, r7
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff ff6c 	bl	800ac1c <prvSampleTimeNow>
 800ad44:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b09      	cmp	r3, #9
 800ad4a:	f200 8094 	bhi.w	800ae76 <prvProcessReceivedCommands+0x196>
 800ad4e:	a201      	add	r2, pc, #4	; (adr r2, 800ad54 <prvProcessReceivedCommands+0x74>)
 800ad50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad54:	0800ad7d 	.word	0x0800ad7d
 800ad58:	0800ad7d 	.word	0x0800ad7d
 800ad5c:	0800ad7d 	.word	0x0800ad7d
 800ad60:	0800adef 	.word	0x0800adef
 800ad64:	0800ae03 	.word	0x0800ae03
 800ad68:	0800ae4b 	.word	0x0800ae4b
 800ad6c:	0800ad7d 	.word	0x0800ad7d
 800ad70:	0800ad7d 	.word	0x0800ad7d
 800ad74:	0800adef 	.word	0x0800adef
 800ad78:	0800ae03 	.word	0x0800ae03
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad82:	f043 0301 	orr.w	r3, r3, #1
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	18d1      	adds	r1, r2, r3
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad9c:	f7ff ff5e 	bl	800ac5c <prvInsertTimerInActiveList>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d067      	beq.n	800ae76 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ada6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada8:	6a1b      	ldr	r3, [r3, #32]
 800adaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d05c      	beq.n	800ae76 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc0:	699b      	ldr	r3, [r3, #24]
 800adc2:	441a      	add	r2, r3
 800adc4:	2300      	movs	r3, #0
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	2300      	movs	r3, #0
 800adca:	2100      	movs	r1, #0
 800adcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adce:	f7ff fe09 	bl	800a9e4 <xTimerGenericCommand>
 800add2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d14d      	bne.n	800ae76 <prvProcessReceivedCommands+0x196>
 800adda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	61bb      	str	r3, [r7, #24]
 800adec:	e7fe      	b.n	800adec <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adf4:	f023 0301 	bic.w	r3, r3, #1
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ae00:	e039      	b.n	800ae76 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae08:	f043 0301 	orr.w	r3, r3, #1
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae18:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d109      	bne.n	800ae36 <prvProcessReceivedCommands+0x156>
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	617b      	str	r3, [r7, #20]
 800ae34:	e7fe      	b.n	800ae34 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae38:	699a      	ldr	r2, [r3, #24]
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	18d1      	adds	r1, r2, r3
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae44:	f7ff ff0a 	bl	800ac5c <prvInsertTimerInActiveList>
					break;
 800ae48:	e015      	b.n	800ae76 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae50:	f003 0302 	and.w	r3, r3, #2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d103      	bne.n	800ae60 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800ae58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae5a:	f000 fbc3 	bl	800b5e4 <vPortFree>
 800ae5e:	e00a      	b.n	800ae76 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae66:	f023 0301 	bic.w	r3, r3, #1
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ae72:	e000      	b.n	800ae76 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ae74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae76:	4b07      	ldr	r3, [pc, #28]	; (800ae94 <prvProcessReceivedCommands+0x1b4>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	1d39      	adds	r1, r7, #4
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fb2a 	bl	80094d8 <xQueueReceive>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f47f af2e 	bne.w	800ace8 <prvProcessReceivedCommands+0x8>
	}
}
 800ae8c:	bf00      	nop
 800ae8e:	3730      	adds	r7, #48	; 0x30
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	20000d40 	.word	0x20000d40

0800ae98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae9e:	e047      	b.n	800af30 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aea0:	4b2d      	ldr	r3, [pc, #180]	; (800af58 <prvSwitchTimerLists+0xc0>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeaa:	4b2b      	ldr	r3, [pc, #172]	; (800af58 <prvSwitchTimerLists+0xc0>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fe f857 	bl	8008f6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aecc:	f003 0304 	and.w	r3, r3, #4
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d02d      	beq.n	800af30 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	4413      	add	r3, r2
 800aedc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d90e      	bls.n	800af04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aef2:	4b19      	ldr	r3, [pc, #100]	; (800af58 <prvSwitchTimerLists+0xc0>)
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	3304      	adds	r3, #4
 800aefa:	4619      	mov	r1, r3
 800aefc:	4610      	mov	r0, r2
 800aefe:	f7fd fffc 	bl	8008efa <vListInsert>
 800af02:	e015      	b.n	800af30 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af04:	2300      	movs	r3, #0
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	2300      	movs	r3, #0
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	2100      	movs	r1, #0
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f7ff fd68 	bl	800a9e4 <xTimerGenericCommand>
 800af14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d109      	bne.n	800af30 <prvSwitchTimerLists+0x98>
 800af1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af20:	f383 8811 	msr	BASEPRI, r3
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	603b      	str	r3, [r7, #0]
 800af2e:	e7fe      	b.n	800af2e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af30:	4b09      	ldr	r3, [pc, #36]	; (800af58 <prvSwitchTimerLists+0xc0>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1b2      	bne.n	800aea0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af3a:	4b07      	ldr	r3, [pc, #28]	; (800af58 <prvSwitchTimerLists+0xc0>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af40:	4b06      	ldr	r3, [pc, #24]	; (800af5c <prvSwitchTimerLists+0xc4>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a04      	ldr	r2, [pc, #16]	; (800af58 <prvSwitchTimerLists+0xc0>)
 800af46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af48:	4a04      	ldr	r2, [pc, #16]	; (800af5c <prvSwitchTimerLists+0xc4>)
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	6013      	str	r3, [r2, #0]
}
 800af4e:	bf00      	nop
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20000d38 	.word	0x20000d38
 800af5c:	20000d3c 	.word	0x20000d3c

0800af60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800af66:	f000 f961 	bl	800b22c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800af6a:	4b15      	ldr	r3, [pc, #84]	; (800afc0 <prvCheckForValidListAndQueue+0x60>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d120      	bne.n	800afb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af72:	4814      	ldr	r0, [pc, #80]	; (800afc4 <prvCheckForValidListAndQueue+0x64>)
 800af74:	f7fd ff70 	bl	8008e58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af78:	4813      	ldr	r0, [pc, #76]	; (800afc8 <prvCheckForValidListAndQueue+0x68>)
 800af7a:	f7fd ff6d 	bl	8008e58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af7e:	4b13      	ldr	r3, [pc, #76]	; (800afcc <prvCheckForValidListAndQueue+0x6c>)
 800af80:	4a10      	ldr	r2, [pc, #64]	; (800afc4 <prvCheckForValidListAndQueue+0x64>)
 800af82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af84:	4b12      	ldr	r3, [pc, #72]	; (800afd0 <prvCheckForValidListAndQueue+0x70>)
 800af86:	4a10      	ldr	r2, [pc, #64]	; (800afc8 <prvCheckForValidListAndQueue+0x68>)
 800af88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af8a:	2300      	movs	r3, #0
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	4b11      	ldr	r3, [pc, #68]	; (800afd4 <prvCheckForValidListAndQueue+0x74>)
 800af90:	4a11      	ldr	r2, [pc, #68]	; (800afd8 <prvCheckForValidListAndQueue+0x78>)
 800af92:	2110      	movs	r1, #16
 800af94:	200a      	movs	r0, #10
 800af96:	f7fe f87b 	bl	8009090 <xQueueGenericCreateStatic>
 800af9a:	4602      	mov	r2, r0
 800af9c:	4b08      	ldr	r3, [pc, #32]	; (800afc0 <prvCheckForValidListAndQueue+0x60>)
 800af9e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800afa0:	4b07      	ldr	r3, [pc, #28]	; (800afc0 <prvCheckForValidListAndQueue+0x60>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d005      	beq.n	800afb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800afa8:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <prvCheckForValidListAndQueue+0x60>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	490b      	ldr	r1, [pc, #44]	; (800afdc <prvCheckForValidListAndQueue+0x7c>)
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fe fc7e 	bl	80098b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afb4:	f000 f968 	bl	800b288 <vPortExitCritical>
}
 800afb8:	bf00      	nop
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20000d40 	.word	0x20000d40
 800afc4:	20000d10 	.word	0x20000d10
 800afc8:	20000d24 	.word	0x20000d24
 800afcc:	20000d38 	.word	0x20000d38
 800afd0:	20000d3c 	.word	0x20000d3c
 800afd4:	20000dec 	.word	0x20000dec
 800afd8:	20000d4c 	.word	0x20000d4c
 800afdc:	0800ce30 	.word	0x0800ce30

0800afe0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	3b04      	subs	r3, #4
 800aff0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	3b04      	subs	r3, #4
 800affe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	f023 0201 	bic.w	r2, r3, #1
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	3b04      	subs	r3, #4
 800b00e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b010:	4a0c      	ldr	r2, [pc, #48]	; (800b044 <pxPortInitialiseStack+0x64>)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	3b14      	subs	r3, #20
 800b01a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	3b04      	subs	r3, #4
 800b026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f06f 0202 	mvn.w	r2, #2
 800b02e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3b20      	subs	r3, #32
 800b034:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b036:	68fb      	ldr	r3, [r7, #12]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3714      	adds	r7, #20
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	0800b049 	.word	0x0800b049

0800b048 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b052:	4b11      	ldr	r3, [pc, #68]	; (800b098 <prvTaskExitError+0x50>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b05a:	d009      	beq.n	800b070 <prvTaskExitError+0x28>
 800b05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	60fb      	str	r3, [r7, #12]
 800b06e:	e7fe      	b.n	800b06e <prvTaskExitError+0x26>
 800b070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b082:	bf00      	nop
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0fc      	beq.n	800b084 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b08a:	bf00      	nop
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	2000004c 	.word	0x2000004c
 800b09c:	00000000 	.word	0x00000000

0800b0a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b0a0:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <pxCurrentTCBConst2>)
 800b0a2:	6819      	ldr	r1, [r3, #0]
 800b0a4:	6808      	ldr	r0, [r1, #0]
 800b0a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0aa:	f380 8809 	msr	PSP, r0
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	f04f 0000 	mov.w	r0, #0
 800b0b6:	f380 8811 	msr	BASEPRI, r0
 800b0ba:	4770      	bx	lr
 800b0bc:	f3af 8000 	nop.w

0800b0c0 <pxCurrentTCBConst2>:
 800b0c0:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b0c4:	bf00      	nop
 800b0c6:	bf00      	nop

0800b0c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b0c8:	4808      	ldr	r0, [pc, #32]	; (800b0ec <prvPortStartFirstTask+0x24>)
 800b0ca:	6800      	ldr	r0, [r0, #0]
 800b0cc:	6800      	ldr	r0, [r0, #0]
 800b0ce:	f380 8808 	msr	MSP, r0
 800b0d2:	f04f 0000 	mov.w	r0, #0
 800b0d6:	f380 8814 	msr	CONTROL, r0
 800b0da:	b662      	cpsie	i
 800b0dc:	b661      	cpsie	f
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	df00      	svc	0
 800b0e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b0ea:	bf00      	nop
 800b0ec:	e000ed08 	.word	0xe000ed08

0800b0f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b0f6:	4b44      	ldr	r3, [pc, #272]	; (800b208 <xPortStartScheduler+0x118>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a44      	ldr	r2, [pc, #272]	; (800b20c <xPortStartScheduler+0x11c>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d109      	bne.n	800b114 <xPortStartScheduler+0x24>
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	613b      	str	r3, [r7, #16]
 800b112:	e7fe      	b.n	800b112 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b114:	4b3c      	ldr	r3, [pc, #240]	; (800b208 <xPortStartScheduler+0x118>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a3d      	ldr	r2, [pc, #244]	; (800b210 <xPortStartScheduler+0x120>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d109      	bne.n	800b132 <xPortStartScheduler+0x42>
 800b11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	60fb      	str	r3, [r7, #12]
 800b130:	e7fe      	b.n	800b130 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b132:	4b38      	ldr	r3, [pc, #224]	; (800b214 <xPortStartScheduler+0x124>)
 800b134:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	22ff      	movs	r2, #255	; 0xff
 800b142:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b14c:	78fb      	ldrb	r3, [r7, #3]
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b154:	b2da      	uxtb	r2, r3
 800b156:	4b30      	ldr	r3, [pc, #192]	; (800b218 <xPortStartScheduler+0x128>)
 800b158:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b15a:	4b30      	ldr	r3, [pc, #192]	; (800b21c <xPortStartScheduler+0x12c>)
 800b15c:	2207      	movs	r2, #7
 800b15e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b160:	e009      	b.n	800b176 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b162:	4b2e      	ldr	r3, [pc, #184]	; (800b21c <xPortStartScheduler+0x12c>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3b01      	subs	r3, #1
 800b168:	4a2c      	ldr	r2, [pc, #176]	; (800b21c <xPortStartScheduler+0x12c>)
 800b16a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b16c:	78fb      	ldrb	r3, [r7, #3]
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	b2db      	uxtb	r3, r3
 800b174:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b176:	78fb      	ldrb	r3, [r7, #3]
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b17e:	2b80      	cmp	r3, #128	; 0x80
 800b180:	d0ef      	beq.n	800b162 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b182:	4b26      	ldr	r3, [pc, #152]	; (800b21c <xPortStartScheduler+0x12c>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f1c3 0307 	rsb	r3, r3, #7
 800b18a:	2b04      	cmp	r3, #4
 800b18c:	d009      	beq.n	800b1a2 <xPortStartScheduler+0xb2>
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	60bb      	str	r3, [r7, #8]
 800b1a0:	e7fe      	b.n	800b1a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b1a2:	4b1e      	ldr	r3, [pc, #120]	; (800b21c <xPortStartScheduler+0x12c>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	021b      	lsls	r3, r3, #8
 800b1a8:	4a1c      	ldr	r2, [pc, #112]	; (800b21c <xPortStartScheduler+0x12c>)
 800b1aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b1ac:	4b1b      	ldr	r3, [pc, #108]	; (800b21c <xPortStartScheduler+0x12c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b1b4:	4a19      	ldr	r2, [pc, #100]	; (800b21c <xPortStartScheduler+0x12c>)
 800b1b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	b2da      	uxtb	r2, r3
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b1c0:	4b17      	ldr	r3, [pc, #92]	; (800b220 <xPortStartScheduler+0x130>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a16      	ldr	r2, [pc, #88]	; (800b220 <xPortStartScheduler+0x130>)
 800b1c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b1ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b1cc:	4b14      	ldr	r3, [pc, #80]	; (800b220 <xPortStartScheduler+0x130>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a13      	ldr	r2, [pc, #76]	; (800b220 <xPortStartScheduler+0x130>)
 800b1d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b1d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b1d8:	f000 f8d6 	bl	800b388 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b1dc:	4b11      	ldr	r3, [pc, #68]	; (800b224 <xPortStartScheduler+0x134>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b1e2:	f000 f8f5 	bl	800b3d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b1e6:	4b10      	ldr	r3, [pc, #64]	; (800b228 <xPortStartScheduler+0x138>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a0f      	ldr	r2, [pc, #60]	; (800b228 <xPortStartScheduler+0x138>)
 800b1ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b1f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b1f2:	f7ff ff69 	bl	800b0c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b1f6:	f7fe ff5f 	bl	800a0b8 <vTaskSwitchContext>
	prvTaskExitError();
 800b1fa:	f7ff ff25 	bl	800b048 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3718      	adds	r7, #24
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	e000ed00 	.word	0xe000ed00
 800b20c:	410fc271 	.word	0x410fc271
 800b210:	410fc270 	.word	0x410fc270
 800b214:	e000e400 	.word	0xe000e400
 800b218:	20000e3c 	.word	0x20000e3c
 800b21c:	20000e40 	.word	0x20000e40
 800b220:	e000ed20 	.word	0xe000ed20
 800b224:	2000004c 	.word	0x2000004c
 800b228:	e000ef34 	.word	0xe000ef34

0800b22c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b236:	f383 8811 	msr	BASEPRI, r3
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b244:	4b0e      	ldr	r3, [pc, #56]	; (800b280 <vPortEnterCritical+0x54>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	3301      	adds	r3, #1
 800b24a:	4a0d      	ldr	r2, [pc, #52]	; (800b280 <vPortEnterCritical+0x54>)
 800b24c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b24e:	4b0c      	ldr	r3, [pc, #48]	; (800b280 <vPortEnterCritical+0x54>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d10e      	bne.n	800b274 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b256:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <vPortEnterCritical+0x58>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d009      	beq.n	800b274 <vPortEnterCritical+0x48>
 800b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b264:	f383 8811 	msr	BASEPRI, r3
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	603b      	str	r3, [r7, #0]
 800b272:	e7fe      	b.n	800b272 <vPortEnterCritical+0x46>
	}
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr
 800b280:	2000004c 	.word	0x2000004c
 800b284:	e000ed04 	.word	0xe000ed04

0800b288 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b28e:	4b11      	ldr	r3, [pc, #68]	; (800b2d4 <vPortExitCritical+0x4c>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d109      	bne.n	800b2aa <vPortExitCritical+0x22>
 800b296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	607b      	str	r3, [r7, #4]
 800b2a8:	e7fe      	b.n	800b2a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b2aa:	4b0a      	ldr	r3, [pc, #40]	; (800b2d4 <vPortExitCritical+0x4c>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	4a08      	ldr	r2, [pc, #32]	; (800b2d4 <vPortExitCritical+0x4c>)
 800b2b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b2b4:	4b07      	ldr	r3, [pc, #28]	; (800b2d4 <vPortExitCritical+0x4c>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d104      	bne.n	800b2c6 <vPortExitCritical+0x3e>
 800b2bc:	2300      	movs	r3, #0
 800b2be:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b2c6:	bf00      	nop
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	2000004c 	.word	0x2000004c
	...

0800b2e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b2e0:	f3ef 8009 	mrs	r0, PSP
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	4b15      	ldr	r3, [pc, #84]	; (800b340 <pxCurrentTCBConst>)
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	f01e 0f10 	tst.w	lr, #16
 800b2f0:	bf08      	it	eq
 800b2f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b2f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fa:	6010      	str	r0, [r2, #0]
 800b2fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b300:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b304:	f380 8811 	msr	BASEPRI, r0
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f7fe fed2 	bl	800a0b8 <vTaskSwitchContext>
 800b314:	f04f 0000 	mov.w	r0, #0
 800b318:	f380 8811 	msr	BASEPRI, r0
 800b31c:	bc09      	pop	{r0, r3}
 800b31e:	6819      	ldr	r1, [r3, #0]
 800b320:	6808      	ldr	r0, [r1, #0]
 800b322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b326:	f01e 0f10 	tst.w	lr, #16
 800b32a:	bf08      	it	eq
 800b32c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b330:	f380 8809 	msr	PSP, r0
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	f3af 8000 	nop.w

0800b340 <pxCurrentTCBConst>:
 800b340:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b344:	bf00      	nop
 800b346:	bf00      	nop

0800b348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b360:	f7fe fdf2 	bl	8009f48 <xTaskIncrementTick>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d003      	beq.n	800b372 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b36a:	4b06      	ldr	r3, [pc, #24]	; (800b384 <SysTick_Handler+0x3c>)
 800b36c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b370:	601a      	str	r2, [r3, #0]
 800b372:	2300      	movs	r3, #0
 800b374:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b37c:	bf00      	nop
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	e000ed04 	.word	0xe000ed04

0800b388 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b388:	b480      	push	{r7}
 800b38a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b38c:	4b0b      	ldr	r3, [pc, #44]	; (800b3bc <vPortSetupTimerInterrupt+0x34>)
 800b38e:	2200      	movs	r2, #0
 800b390:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b392:	4b0b      	ldr	r3, [pc, #44]	; (800b3c0 <vPortSetupTimerInterrupt+0x38>)
 800b394:	2200      	movs	r2, #0
 800b396:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b398:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <vPortSetupTimerInterrupt+0x3c>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a0a      	ldr	r2, [pc, #40]	; (800b3c8 <vPortSetupTimerInterrupt+0x40>)
 800b39e:	fba2 2303 	umull	r2, r3, r2, r3
 800b3a2:	099b      	lsrs	r3, r3, #6
 800b3a4:	4a09      	ldr	r2, [pc, #36]	; (800b3cc <vPortSetupTimerInterrupt+0x44>)
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b3aa:	4b04      	ldr	r3, [pc, #16]	; (800b3bc <vPortSetupTimerInterrupt+0x34>)
 800b3ac:	2207      	movs	r2, #7
 800b3ae:	601a      	str	r2, [r3, #0]
}
 800b3b0:	bf00      	nop
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	e000e010 	.word	0xe000e010
 800b3c0:	e000e018 	.word	0xe000e018
 800b3c4:	20000040 	.word	0x20000040
 800b3c8:	10624dd3 	.word	0x10624dd3
 800b3cc:	e000e014 	.word	0xe000e014

0800b3d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b3d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b3e0 <vPortEnableVFP+0x10>
 800b3d4:	6801      	ldr	r1, [r0, #0]
 800b3d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b3da:	6001      	str	r1, [r0, #0]
 800b3dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b3de:	bf00      	nop
 800b3e0:	e000ed88 	.word	0xe000ed88

0800b3e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b3ea:	f3ef 8305 	mrs	r3, IPSR
 800b3ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2b0f      	cmp	r3, #15
 800b3f4:	d913      	bls.n	800b41e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b3f6:	4a16      	ldr	r2, [pc, #88]	; (800b450 <vPortValidateInterruptPriority+0x6c>)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b400:	4b14      	ldr	r3, [pc, #80]	; (800b454 <vPortValidateInterruptPriority+0x70>)
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	7afa      	ldrb	r2, [r7, #11]
 800b406:	429a      	cmp	r2, r3
 800b408:	d209      	bcs.n	800b41e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	607b      	str	r3, [r7, #4]
 800b41c:	e7fe      	b.n	800b41c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b41e:	4b0e      	ldr	r3, [pc, #56]	; (800b458 <vPortValidateInterruptPriority+0x74>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b426:	4b0d      	ldr	r3, [pc, #52]	; (800b45c <vPortValidateInterruptPriority+0x78>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d909      	bls.n	800b442 <vPortValidateInterruptPriority+0x5e>
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	603b      	str	r3, [r7, #0]
 800b440:	e7fe      	b.n	800b440 <vPortValidateInterruptPriority+0x5c>
	}
 800b442:	bf00      	nop
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	e000e3f0 	.word	0xe000e3f0
 800b454:	20000e3c 	.word	0x20000e3c
 800b458:	e000ed0c 	.word	0xe000ed0c
 800b45c:	20000e40 	.word	0x20000e40

0800b460 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b08a      	sub	sp, #40	; 0x28
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b468:	2300      	movs	r3, #0
 800b46a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b46c:	f7fe fcb2 	bl	8009dd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b470:	4b57      	ldr	r3, [pc, #348]	; (800b5d0 <pvPortMalloc+0x170>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d101      	bne.n	800b47c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b478:	f000 f90c 	bl	800b694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b47c:	4b55      	ldr	r3, [pc, #340]	; (800b5d4 <pvPortMalloc+0x174>)
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4013      	ands	r3, r2
 800b484:	2b00      	cmp	r3, #0
 800b486:	f040 808c 	bne.w	800b5a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d01c      	beq.n	800b4ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b490:	2208      	movs	r2, #8
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4413      	add	r3, r2
 800b496:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f003 0307 	and.w	r3, r3, #7
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d013      	beq.n	800b4ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f023 0307 	bic.w	r3, r3, #7
 800b4a8:	3308      	adds	r3, #8
 800b4aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f003 0307 	and.w	r3, r3, #7
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d009      	beq.n	800b4ca <pvPortMalloc+0x6a>
 800b4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ba:	f383 8811 	msr	BASEPRI, r3
 800b4be:	f3bf 8f6f 	isb	sy
 800b4c2:	f3bf 8f4f 	dsb	sy
 800b4c6:	617b      	str	r3, [r7, #20]
 800b4c8:	e7fe      	b.n	800b4c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d068      	beq.n	800b5a2 <pvPortMalloc+0x142>
 800b4d0:	4b41      	ldr	r3, [pc, #260]	; (800b5d8 <pvPortMalloc+0x178>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d863      	bhi.n	800b5a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b4da:	4b40      	ldr	r3, [pc, #256]	; (800b5dc <pvPortMalloc+0x17c>)
 800b4dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b4de:	4b3f      	ldr	r3, [pc, #252]	; (800b5dc <pvPortMalloc+0x17c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4e4:	e004      	b.n	800b4f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d903      	bls.n	800b502 <pvPortMalloc+0xa2>
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d1f1      	bne.n	800b4e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b502:	4b33      	ldr	r3, [pc, #204]	; (800b5d0 <pvPortMalloc+0x170>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b508:	429a      	cmp	r2, r3
 800b50a:	d04a      	beq.n	800b5a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2208      	movs	r2, #8
 800b512:	4413      	add	r3, r2
 800b514:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	6a3b      	ldr	r3, [r7, #32]
 800b51c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b520:	685a      	ldr	r2, [r3, #4]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	1ad2      	subs	r2, r2, r3
 800b526:	2308      	movs	r3, #8
 800b528:	005b      	lsls	r3, r3, #1
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d91e      	bls.n	800b56c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b52e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4413      	add	r3, r2
 800b534:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	f003 0307 	and.w	r3, r3, #7
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d009      	beq.n	800b554 <pvPortMalloc+0xf4>
 800b540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	613b      	str	r3, [r7, #16]
 800b552:	e7fe      	b.n	800b552 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	685a      	ldr	r2, [r3, #4]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	1ad2      	subs	r2, r2, r3
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b566:	69b8      	ldr	r0, [r7, #24]
 800b568:	f000 f8f6 	bl	800b758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b56c:	4b1a      	ldr	r3, [pc, #104]	; (800b5d8 <pvPortMalloc+0x178>)
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	1ad3      	subs	r3, r2, r3
 800b576:	4a18      	ldr	r2, [pc, #96]	; (800b5d8 <pvPortMalloc+0x178>)
 800b578:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b57a:	4b17      	ldr	r3, [pc, #92]	; (800b5d8 <pvPortMalloc+0x178>)
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	4b18      	ldr	r3, [pc, #96]	; (800b5e0 <pvPortMalloc+0x180>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	429a      	cmp	r2, r3
 800b584:	d203      	bcs.n	800b58e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b586:	4b14      	ldr	r3, [pc, #80]	; (800b5d8 <pvPortMalloc+0x178>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a15      	ldr	r2, [pc, #84]	; (800b5e0 <pvPortMalloc+0x180>)
 800b58c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	4b10      	ldr	r3, [pc, #64]	; (800b5d4 <pvPortMalloc+0x174>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	431a      	orrs	r2, r3
 800b598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	2200      	movs	r2, #0
 800b5a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5a2:	f7fe fc25 	bl	8009df0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	f003 0307 	and.w	r3, r3, #7
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d009      	beq.n	800b5c4 <pvPortMalloc+0x164>
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	60fb      	str	r3, [r7, #12]
 800b5c2:	e7fe      	b.n	800b5c2 <pvPortMalloc+0x162>
	return pvReturn;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3728      	adds	r7, #40	; 0x28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	2000aa8c 	.word	0x2000aa8c
 800b5d4:	2000aa98 	.word	0x2000aa98
 800b5d8:	2000aa90 	.word	0x2000aa90
 800b5dc:	2000aa84 	.word	0x2000aa84
 800b5e0:	2000aa94 	.word	0x2000aa94

0800b5e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d046      	beq.n	800b684 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b5f6:	2308      	movs	r3, #8
 800b5f8:	425b      	negs	r3, r3
 800b5fa:	697a      	ldr	r2, [r7, #20]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	4b20      	ldr	r3, [pc, #128]	; (800b68c <vPortFree+0xa8>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4013      	ands	r3, r2
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d109      	bne.n	800b626 <vPortFree+0x42>
 800b612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	60fb      	str	r3, [r7, #12]
 800b624:	e7fe      	b.n	800b624 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d009      	beq.n	800b642 <vPortFree+0x5e>
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	60bb      	str	r3, [r7, #8]
 800b640:	e7fe      	b.n	800b640 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	685a      	ldr	r2, [r3, #4]
 800b646:	4b11      	ldr	r3, [pc, #68]	; (800b68c <vPortFree+0xa8>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4013      	ands	r3, r2
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d019      	beq.n	800b684 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d115      	bne.n	800b684 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	4b0b      	ldr	r3, [pc, #44]	; (800b68c <vPortFree+0xa8>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	43db      	mvns	r3, r3
 800b662:	401a      	ands	r2, r3
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b668:	f7fe fbb4 	bl	8009dd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	685a      	ldr	r2, [r3, #4]
 800b670:	4b07      	ldr	r3, [pc, #28]	; (800b690 <vPortFree+0xac>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4413      	add	r3, r2
 800b676:	4a06      	ldr	r2, [pc, #24]	; (800b690 <vPortFree+0xac>)
 800b678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b67a:	6938      	ldr	r0, [r7, #16]
 800b67c:	f000 f86c 	bl	800b758 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b680:	f7fe fbb6 	bl	8009df0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b684:	bf00      	nop
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	2000aa98 	.word	0x2000aa98
 800b690:	2000aa90 	.word	0x2000aa90

0800b694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b69a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800b69e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b6a0:	4b27      	ldr	r3, [pc, #156]	; (800b740 <prvHeapInit+0xac>)
 800b6a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f003 0307 	and.w	r3, r3, #7
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00c      	beq.n	800b6c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	3307      	adds	r3, #7
 800b6b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f023 0307 	bic.w	r3, r3, #7
 800b6ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	4a1f      	ldr	r2, [pc, #124]	; (800b740 <prvHeapInit+0xac>)
 800b6c4:	4413      	add	r3, r2
 800b6c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b6cc:	4a1d      	ldr	r2, [pc, #116]	; (800b744 <prvHeapInit+0xb0>)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b6d2:	4b1c      	ldr	r3, [pc, #112]	; (800b744 <prvHeapInit+0xb0>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	4413      	add	r3, r2
 800b6de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b6e0:	2208      	movs	r2, #8
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	1a9b      	subs	r3, r3, r2
 800b6e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f023 0307 	bic.w	r3, r3, #7
 800b6ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	4a15      	ldr	r2, [pc, #84]	; (800b748 <prvHeapInit+0xb4>)
 800b6f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b6f6:	4b14      	ldr	r3, [pc, #80]	; (800b748 <prvHeapInit+0xb4>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b6fe:	4b12      	ldr	r3, [pc, #72]	; (800b748 <prvHeapInit+0xb4>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2200      	movs	r2, #0
 800b704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	1ad2      	subs	r2, r2, r3
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b714:	4b0c      	ldr	r3, [pc, #48]	; (800b748 <prvHeapInit+0xb4>)
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	4a0a      	ldr	r2, [pc, #40]	; (800b74c <prvHeapInit+0xb8>)
 800b722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	4a09      	ldr	r2, [pc, #36]	; (800b750 <prvHeapInit+0xbc>)
 800b72a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b72c:	4b09      	ldr	r3, [pc, #36]	; (800b754 <prvHeapInit+0xc0>)
 800b72e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b732:	601a      	str	r2, [r3, #0]
}
 800b734:	bf00      	nop
 800b736:	3714      	adds	r7, #20
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr
 800b740:	20000e44 	.word	0x20000e44
 800b744:	2000aa84 	.word	0x2000aa84
 800b748:	2000aa8c 	.word	0x2000aa8c
 800b74c:	2000aa94 	.word	0x2000aa94
 800b750:	2000aa90 	.word	0x2000aa90
 800b754:	2000aa98 	.word	0x2000aa98

0800b758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b760:	4b28      	ldr	r3, [pc, #160]	; (800b804 <prvInsertBlockIntoFreeList+0xac>)
 800b762:	60fb      	str	r3, [r7, #12]
 800b764:	e002      	b.n	800b76c <prvInsertBlockIntoFreeList+0x14>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	429a      	cmp	r2, r3
 800b774:	d8f7      	bhi.n	800b766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	4413      	add	r3, r2
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	429a      	cmp	r2, r3
 800b786:	d108      	bne.n	800b79a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	685a      	ldr	r2, [r3, #4]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	441a      	add	r2, r3
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	441a      	add	r2, r3
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d118      	bne.n	800b7e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	4b15      	ldr	r3, [pc, #84]	; (800b808 <prvInsertBlockIntoFreeList+0xb0>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d00d      	beq.n	800b7d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	441a      	add	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	e008      	b.n	800b7e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b7d6:	4b0c      	ldr	r3, [pc, #48]	; (800b808 <prvInsertBlockIntoFreeList+0xb0>)
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	601a      	str	r2, [r3, #0]
 800b7de:	e003      	b.n	800b7e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d002      	beq.n	800b7f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7f6:	bf00      	nop
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	2000aa84 	.word	0x2000aa84
 800b808:	2000aa8c 	.word	0x2000aa8c

0800b80c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b820:	4619      	mov	r1, r3
 800b822:	4610      	mov	r0, r2
 800b824:	f7fc fafe 	bl	8007e24 <USBD_LL_SetupStage>
}
 800b828:	bf00      	nop
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	460b      	mov	r3, r1
 800b83a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800b842:	78fb      	ldrb	r3, [r7, #3]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	015b      	lsls	r3, r3, #5
 800b848:	4413      	add	r3, r2
 800b84a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	78fb      	ldrb	r3, [r7, #3]
 800b852:	4619      	mov	r1, r3
 800b854:	f7fc fb31 	bl	8007eba <USBD_LL_DataOutStage>
}
 800b858:	bf00      	nop
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800b872:	78fb      	ldrb	r3, [r7, #3]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	015b      	lsls	r3, r3, #5
 800b878:	4413      	add	r3, r2
 800b87a:	333c      	adds	r3, #60	; 0x3c
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	78fb      	ldrb	r3, [r7, #3]
 800b880:	4619      	mov	r1, r3
 800b882:	f7fc fb8b 	bl	8007f9c <USBD_LL_DataInStage>
}
 800b886:	bf00      	nop
 800b888:	3708      	adds	r7, #8
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b082      	sub	sp, #8
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fc fc9e 	bl	80081de <USBD_LL_SOF>
}
 800b8a2:	bf00      	nop
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b084      	sub	sp, #16
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d001      	beq.n	800b8c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b8be:	f7f6 fb61 	bl	8001f84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b8c8:	7bfa      	ldrb	r2, [r7, #15]
 800b8ca:	4611      	mov	r1, r2
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7fc fc4b 	bl	8008168 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fc fc04 	bl	80080e6 <USBD_LL_Reset>
}
 800b8de:	bf00      	nop
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
	...

0800b8e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fc fc46 	bl	8008188 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d005      	beq.n	800b910 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b904:	4b04      	ldr	r3, [pc, #16]	; (800b918 <HAL_PCD_SuspendCallback+0x30>)
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	4a03      	ldr	r2, [pc, #12]	; (800b918 <HAL_PCD_SuspendCallback+0x30>)
 800b90a:	f043 0306 	orr.w	r3, r3, #6
 800b90e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b910:	bf00      	nop
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}
 800b918:	e000ed00 	.word	0xe000ed00

0800b91c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d007      	beq.n	800b93c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b92c:	4b08      	ldr	r3, [pc, #32]	; (800b950 <HAL_PCD_ResumeCallback+0x34>)
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	4a07      	ldr	r2, [pc, #28]	; (800b950 <HAL_PCD_ResumeCallback+0x34>)
 800b932:	f023 0306 	bic.w	r3, r3, #6
 800b936:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b938:	f000 f9bc 	bl	800bcb4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b942:	4618      	mov	r0, r3
 800b944:	f7fc fc35 	bl	80081b2 <USBD_LL_Resume>
}
 800b948:	bf00      	nop
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	e000ed00 	.word	0xe000ed00

0800b954 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	4608      	mov	r0, r1
 800b95e:	4611      	mov	r1, r2
 800b960:	461a      	mov	r2, r3
 800b962:	4603      	mov	r3, r0
 800b964:	70fb      	strb	r3, [r7, #3]
 800b966:	460b      	mov	r3, r1
 800b968:	70bb      	strb	r3, [r7, #2]
 800b96a:	4613      	mov	r3, r2
 800b96c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b96e:	2300      	movs	r3, #0
 800b970:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b97c:	78bb      	ldrb	r3, [r7, #2]
 800b97e:	883a      	ldrh	r2, [r7, #0]
 800b980:	78f9      	ldrb	r1, [r7, #3]
 800b982:	f7f7 ffe5 	bl	8003950 <HAL_PCD_EP_Open>
 800b986:	4603      	mov	r3, r0
 800b988:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b98a:	7bbb      	ldrb	r3, [r7, #14]
 800b98c:	2b03      	cmp	r3, #3
 800b98e:	d817      	bhi.n	800b9c0 <USBD_LL_OpenEP+0x6c>
 800b990:	a201      	add	r2, pc, #4	; (adr r2, 800b998 <USBD_LL_OpenEP+0x44>)
 800b992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b996:	bf00      	nop
 800b998:	0800b9a9 	.word	0x0800b9a9
 800b99c:	0800b9af 	.word	0x0800b9af
 800b9a0:	0800b9b5 	.word	0x0800b9b5
 800b9a4:	0800b9bb 	.word	0x0800b9bb
    case HAL_OK :
      usb_status = USBD_OK;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ac:	e00b      	b.n	800b9c6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9ae:	2302      	movs	r3, #2
 800b9b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b9b2:	e008      	b.n	800b9c6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9b8:	e005      	b.n	800b9c6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9ba:	2302      	movs	r3, #2
 800b9bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b9be:	e002      	b.n	800b9c6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c4:	bf00      	nop
  }
  return usb_status;
 800b9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9ea:	78fa      	ldrb	r2, [r7, #3]
 800b9ec:	4611      	mov	r1, r2
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7f8 f881 	bl	8003af6 <HAL_PCD_EP_SetStall>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b9f8:	7bbb      	ldrb	r3, [r7, #14]
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d816      	bhi.n	800ba2c <USBD_LL_StallEP+0x5c>
 800b9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ba04 <USBD_LL_StallEP+0x34>)
 800ba00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba04:	0800ba15 	.word	0x0800ba15
 800ba08:	0800ba1b 	.word	0x0800ba1b
 800ba0c:	0800ba21 	.word	0x0800ba21
 800ba10:	0800ba27 	.word	0x0800ba27
    case HAL_OK :
      usb_status = USBD_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73fb      	strb	r3, [r7, #15]
    break;
 800ba18:	e00b      	b.n	800ba32 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba1a:	2302      	movs	r3, #2
 800ba1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba1e:	e008      	b.n	800ba32 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba20:	2301      	movs	r3, #1
 800ba22:	73fb      	strb	r3, [r7, #15]
    break;
 800ba24:	e005      	b.n	800ba32 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba26:	2302      	movs	r3, #2
 800ba28:	73fb      	strb	r3, [r7, #15]
    break;
 800ba2a:	e002      	b.n	800ba32 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba30:	bf00      	nop
  }
  return usb_status;  
 800ba32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba56:	78fa      	ldrb	r2, [r7, #3]
 800ba58:	4611      	mov	r1, r2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7f8 f8a5 	bl	8003baa <HAL_PCD_EP_ClrStall>
 800ba60:	4603      	mov	r3, r0
 800ba62:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	d816      	bhi.n	800ba98 <USBD_LL_ClearStallEP+0x5c>
 800ba6a:	a201      	add	r2, pc, #4	; (adr r2, 800ba70 <USBD_LL_ClearStallEP+0x34>)
 800ba6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba70:	0800ba81 	.word	0x0800ba81
 800ba74:	0800ba87 	.word	0x0800ba87
 800ba78:	0800ba8d 	.word	0x0800ba8d
 800ba7c:	0800ba93 	.word	0x0800ba93
    case HAL_OK :
      usb_status = USBD_OK;
 800ba80:	2300      	movs	r3, #0
 800ba82:	73fb      	strb	r3, [r7, #15]
    break;
 800ba84:	e00b      	b.n	800ba9e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba86:	2302      	movs	r3, #2
 800ba88:	73fb      	strb	r3, [r7, #15]
    break;
 800ba8a:	e008      	b.n	800ba9e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba90:	e005      	b.n	800ba9e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba92:	2302      	movs	r3, #2
 800ba94:	73fb      	strb	r3, [r7, #15]
    break;
 800ba96:	e002      	b.n	800ba9e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ba98:	2302      	movs	r3, #2
 800ba9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba9c:	bf00      	nop
  }
  return usb_status; 
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	460b      	mov	r3, r1
 800bab2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800baba:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800babc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	da08      	bge.n	800bad6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800bac4:	78fb      	ldrb	r3, [r7, #3]
 800bac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	015b      	lsls	r3, r3, #5
 800bace:	4413      	add	r3, r2
 800bad0:	332a      	adds	r3, #42	; 0x2a
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	e008      	b.n	800bae8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800bad6:	78fb      	ldrb	r3, [r7, #3]
 800bad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	015b      	lsls	r3, r3, #5
 800bae0:	4413      	add	r3, r2
 800bae2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800bae6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	460b      	mov	r3, r1
 800bafe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb0e:	78fa      	ldrb	r2, [r7, #3]
 800bb10:	4611      	mov	r1, r2
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7f7 fef7 	bl	8003906 <HAL_PCD_SetAddress>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800bb1c:	7bbb      	ldrb	r3, [r7, #14]
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d816      	bhi.n	800bb50 <USBD_LL_SetUSBAddress+0x5c>
 800bb22:	a201      	add	r2, pc, #4	; (adr r2, 800bb28 <USBD_LL_SetUSBAddress+0x34>)
 800bb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb28:	0800bb39 	.word	0x0800bb39
 800bb2c:	0800bb3f 	.word	0x0800bb3f
 800bb30:	0800bb45 	.word	0x0800bb45
 800bb34:	0800bb4b 	.word	0x0800bb4b
    case HAL_OK :
      usb_status = USBD_OK;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb3c:	e00b      	b.n	800bb56 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb3e:	2302      	movs	r3, #2
 800bb40:	73fb      	strb	r3, [r7, #15]
    break;
 800bb42:	e008      	b.n	800bb56 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb44:	2301      	movs	r3, #1
 800bb46:	73fb      	strb	r3, [r7, #15]
    break;
 800bb48:	e005      	b.n	800bb56 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb4a:	2302      	movs	r3, #2
 800bb4c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb4e:	e002      	b.n	800bb56 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bb50:	2302      	movs	r3, #2
 800bb52:	73fb      	strb	r3, [r7, #15]
    break;
 800bb54:	bf00      	nop
  }
  return usb_status;  
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	607a      	str	r2, [r7, #4]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	72fb      	strb	r3, [r7, #11]
 800bb70:	4613      	mov	r3, r2
 800bb72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb74:	2300      	movs	r3, #0
 800bb76:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb82:	893b      	ldrh	r3, [r7, #8]
 800bb84:	7af9      	ldrb	r1, [r7, #11]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	f7f7 ff7c 	bl	8003a84 <HAL_PCD_EP_Transmit>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800bb90:	7dbb      	ldrb	r3, [r7, #22]
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	d816      	bhi.n	800bbc4 <USBD_LL_Transmit+0x64>
 800bb96:	a201      	add	r2, pc, #4	; (adr r2, 800bb9c <USBD_LL_Transmit+0x3c>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bbad 	.word	0x0800bbad
 800bba0:	0800bbb3 	.word	0x0800bbb3
 800bba4:	0800bbb9 	.word	0x0800bbb9
 800bba8:	0800bbbf 	.word	0x0800bbbf
    case HAL_OK :
      usb_status = USBD_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	75fb      	strb	r3, [r7, #23]
    break;
 800bbb0:	e00b      	b.n	800bbca <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	75fb      	strb	r3, [r7, #23]
    break;
 800bbb6:	e008      	b.n	800bbca <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	75fb      	strb	r3, [r7, #23]
    break;
 800bbbc:	e005      	b.n	800bbca <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbbe:	2302      	movs	r3, #2
 800bbc0:	75fb      	strb	r3, [r7, #23]
    break;
 800bbc2:	e002      	b.n	800bbca <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	75fb      	strb	r3, [r7, #23]
    break;
 800bbc8:	bf00      	nop
  }
  return usb_status;    
 800bbca:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	607a      	str	r2, [r7, #4]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	72fb      	strb	r3, [r7, #11]
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbec:	2300      	movs	r3, #0
 800bbee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bbf6:	893b      	ldrh	r3, [r7, #8]
 800bbf8:	7af9      	ldrb	r1, [r7, #11]
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	f7f7 ff08 	bl	8003a10 <HAL_PCD_EP_Receive>
 800bc00:	4603      	mov	r3, r0
 800bc02:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800bc04:	7dbb      	ldrb	r3, [r7, #22]
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	d816      	bhi.n	800bc38 <USBD_LL_PrepareReceive+0x64>
 800bc0a:	a201      	add	r2, pc, #4	; (adr r2, 800bc10 <USBD_LL_PrepareReceive+0x3c>)
 800bc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc10:	0800bc21 	.word	0x0800bc21
 800bc14:	0800bc27 	.word	0x0800bc27
 800bc18:	0800bc2d 	.word	0x0800bc2d
 800bc1c:	0800bc33 	.word	0x0800bc33
    case HAL_OK :
      usb_status = USBD_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	75fb      	strb	r3, [r7, #23]
    break;
 800bc24:	e00b      	b.n	800bc3e <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc26:	2302      	movs	r3, #2
 800bc28:	75fb      	strb	r3, [r7, #23]
    break;
 800bc2a:	e008      	b.n	800bc3e <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	75fb      	strb	r3, [r7, #23]
    break;
 800bc30:	e005      	b.n	800bc3e <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc32:	2302      	movs	r3, #2
 800bc34:	75fb      	strb	r3, [r7, #23]
    break;
 800bc36:	e002      	b.n	800bc3e <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800bc38:	2302      	movs	r3, #2
 800bc3a:	75fb      	strb	r3, [r7, #23]
    break;
 800bc3c:	bf00      	nop
  }
  return usb_status; 
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3718      	adds	r7, #24
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bc54:	78fb      	ldrb	r3, [r7, #3]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d002      	beq.n	800bc60 <HAL_PCDEx_LPM_Callback+0x18>
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d013      	beq.n	800bc86 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800bc5e:	e023      	b.n	800bca8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	699b      	ldr	r3, [r3, #24]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d007      	beq.n	800bc78 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bc68:	f000 f824 	bl	800bcb4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc6c:	4b10      	ldr	r3, [pc, #64]	; (800bcb0 <HAL_PCDEx_LPM_Callback+0x68>)
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	4a0f      	ldr	r2, [pc, #60]	; (800bcb0 <HAL_PCDEx_LPM_Callback+0x68>)
 800bc72:	f023 0306 	bic.w	r3, r3, #6
 800bc76:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fc fa97 	bl	80081b2 <USBD_LL_Resume>
    break;
 800bc84:	e010      	b.n	800bca8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fc fa7b 	bl	8008188 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d005      	beq.n	800bca6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc9a:	4b05      	ldr	r3, [pc, #20]	; (800bcb0 <HAL_PCDEx_LPM_Callback+0x68>)
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	4a04      	ldr	r2, [pc, #16]	; (800bcb0 <HAL_PCDEx_LPM_Callback+0x68>)
 800bca0:	f043 0306 	orr.w	r3, r3, #6
 800bca4:	6113      	str	r3, [r2, #16]
    break;   
 800bca6:	bf00      	nop
}
 800bca8:	bf00      	nop
 800bcaa:	3708      	adds	r7, #8
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	e000ed00 	.word	0xe000ed00

0800bcb4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bcb8:	f7f5 ff2e 	bl	8001b18 <SystemClock_Config>
}
 800bcbc:	bf00      	nop
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <__errno>:
 800bcc0:	4b01      	ldr	r3, [pc, #4]	; (800bcc8 <__errno+0x8>)
 800bcc2:	6818      	ldr	r0, [r3, #0]
 800bcc4:	4770      	bx	lr
 800bcc6:	bf00      	nop
 800bcc8:	20000050 	.word	0x20000050

0800bccc <__libc_init_array>:
 800bccc:	b570      	push	{r4, r5, r6, lr}
 800bcce:	4e0d      	ldr	r6, [pc, #52]	; (800bd04 <__libc_init_array+0x38>)
 800bcd0:	4c0d      	ldr	r4, [pc, #52]	; (800bd08 <__libc_init_array+0x3c>)
 800bcd2:	1ba4      	subs	r4, r4, r6
 800bcd4:	10a4      	asrs	r4, r4, #2
 800bcd6:	2500      	movs	r5, #0
 800bcd8:	42a5      	cmp	r5, r4
 800bcda:	d109      	bne.n	800bcf0 <__libc_init_array+0x24>
 800bcdc:	4e0b      	ldr	r6, [pc, #44]	; (800bd0c <__libc_init_array+0x40>)
 800bcde:	4c0c      	ldr	r4, [pc, #48]	; (800bd10 <__libc_init_array+0x44>)
 800bce0:	f000 ffd6 	bl	800cc90 <_init>
 800bce4:	1ba4      	subs	r4, r4, r6
 800bce6:	10a4      	asrs	r4, r4, #2
 800bce8:	2500      	movs	r5, #0
 800bcea:	42a5      	cmp	r5, r4
 800bcec:	d105      	bne.n	800bcfa <__libc_init_array+0x2e>
 800bcee:	bd70      	pop	{r4, r5, r6, pc}
 800bcf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bcf4:	4798      	blx	r3
 800bcf6:	3501      	adds	r5, #1
 800bcf8:	e7ee      	b.n	800bcd8 <__libc_init_array+0xc>
 800bcfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bcfe:	4798      	blx	r3
 800bd00:	3501      	adds	r5, #1
 800bd02:	e7f2      	b.n	800bcea <__libc_init_array+0x1e>
 800bd04:	0800d0e8 	.word	0x0800d0e8
 800bd08:	0800d0e8 	.word	0x0800d0e8
 800bd0c:	0800d0e8 	.word	0x0800d0e8
 800bd10:	0800d0ec 	.word	0x0800d0ec

0800bd14 <memcpy>:
 800bd14:	b510      	push	{r4, lr}
 800bd16:	1e43      	subs	r3, r0, #1
 800bd18:	440a      	add	r2, r1
 800bd1a:	4291      	cmp	r1, r2
 800bd1c:	d100      	bne.n	800bd20 <memcpy+0xc>
 800bd1e:	bd10      	pop	{r4, pc}
 800bd20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd28:	e7f7      	b.n	800bd1a <memcpy+0x6>

0800bd2a <memset>:
 800bd2a:	4402      	add	r2, r0
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d100      	bne.n	800bd34 <memset+0xa>
 800bd32:	4770      	bx	lr
 800bd34:	f803 1b01 	strb.w	r1, [r3], #1
 800bd38:	e7f9      	b.n	800bd2e <memset+0x4>
	...

0800bd3c <_puts_r>:
 800bd3c:	b570      	push	{r4, r5, r6, lr}
 800bd3e:	460e      	mov	r6, r1
 800bd40:	4605      	mov	r5, r0
 800bd42:	b118      	cbz	r0, 800bd4c <_puts_r+0x10>
 800bd44:	6983      	ldr	r3, [r0, #24]
 800bd46:	b90b      	cbnz	r3, 800bd4c <_puts_r+0x10>
 800bd48:	f000 fa2c 	bl	800c1a4 <__sinit>
 800bd4c:	69ab      	ldr	r3, [r5, #24]
 800bd4e:	68ac      	ldr	r4, [r5, #8]
 800bd50:	b913      	cbnz	r3, 800bd58 <_puts_r+0x1c>
 800bd52:	4628      	mov	r0, r5
 800bd54:	f000 fa26 	bl	800c1a4 <__sinit>
 800bd58:	4b23      	ldr	r3, [pc, #140]	; (800bde8 <_puts_r+0xac>)
 800bd5a:	429c      	cmp	r4, r3
 800bd5c:	d117      	bne.n	800bd8e <_puts_r+0x52>
 800bd5e:	686c      	ldr	r4, [r5, #4]
 800bd60:	89a3      	ldrh	r3, [r4, #12]
 800bd62:	071b      	lsls	r3, r3, #28
 800bd64:	d51d      	bpl.n	800bda2 <_puts_r+0x66>
 800bd66:	6923      	ldr	r3, [r4, #16]
 800bd68:	b1db      	cbz	r3, 800bda2 <_puts_r+0x66>
 800bd6a:	3e01      	subs	r6, #1
 800bd6c:	68a3      	ldr	r3, [r4, #8]
 800bd6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd72:	3b01      	subs	r3, #1
 800bd74:	60a3      	str	r3, [r4, #8]
 800bd76:	b9e9      	cbnz	r1, 800bdb4 <_puts_r+0x78>
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	da2e      	bge.n	800bdda <_puts_r+0x9e>
 800bd7c:	4622      	mov	r2, r4
 800bd7e:	210a      	movs	r1, #10
 800bd80:	4628      	mov	r0, r5
 800bd82:	f000 f85f 	bl	800be44 <__swbuf_r>
 800bd86:	3001      	adds	r0, #1
 800bd88:	d011      	beq.n	800bdae <_puts_r+0x72>
 800bd8a:	200a      	movs	r0, #10
 800bd8c:	e011      	b.n	800bdb2 <_puts_r+0x76>
 800bd8e:	4b17      	ldr	r3, [pc, #92]	; (800bdec <_puts_r+0xb0>)
 800bd90:	429c      	cmp	r4, r3
 800bd92:	d101      	bne.n	800bd98 <_puts_r+0x5c>
 800bd94:	68ac      	ldr	r4, [r5, #8]
 800bd96:	e7e3      	b.n	800bd60 <_puts_r+0x24>
 800bd98:	4b15      	ldr	r3, [pc, #84]	; (800bdf0 <_puts_r+0xb4>)
 800bd9a:	429c      	cmp	r4, r3
 800bd9c:	bf08      	it	eq
 800bd9e:	68ec      	ldreq	r4, [r5, #12]
 800bda0:	e7de      	b.n	800bd60 <_puts_r+0x24>
 800bda2:	4621      	mov	r1, r4
 800bda4:	4628      	mov	r0, r5
 800bda6:	f000 f89f 	bl	800bee8 <__swsetup_r>
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d0dd      	beq.n	800bd6a <_puts_r+0x2e>
 800bdae:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb2:	bd70      	pop	{r4, r5, r6, pc}
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	da04      	bge.n	800bdc2 <_puts_r+0x86>
 800bdb8:	69a2      	ldr	r2, [r4, #24]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	dc06      	bgt.n	800bdcc <_puts_r+0x90>
 800bdbe:	290a      	cmp	r1, #10
 800bdc0:	d004      	beq.n	800bdcc <_puts_r+0x90>
 800bdc2:	6823      	ldr	r3, [r4, #0]
 800bdc4:	1c5a      	adds	r2, r3, #1
 800bdc6:	6022      	str	r2, [r4, #0]
 800bdc8:	7019      	strb	r1, [r3, #0]
 800bdca:	e7cf      	b.n	800bd6c <_puts_r+0x30>
 800bdcc:	4622      	mov	r2, r4
 800bdce:	4628      	mov	r0, r5
 800bdd0:	f000 f838 	bl	800be44 <__swbuf_r>
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	d1c9      	bne.n	800bd6c <_puts_r+0x30>
 800bdd8:	e7e9      	b.n	800bdae <_puts_r+0x72>
 800bdda:	6823      	ldr	r3, [r4, #0]
 800bddc:	200a      	movs	r0, #10
 800bdde:	1c5a      	adds	r2, r3, #1
 800bde0:	6022      	str	r2, [r4, #0]
 800bde2:	7018      	strb	r0, [r3, #0]
 800bde4:	e7e5      	b.n	800bdb2 <_puts_r+0x76>
 800bde6:	bf00      	nop
 800bde8:	0800d06c 	.word	0x0800d06c
 800bdec:	0800d08c 	.word	0x0800d08c
 800bdf0:	0800d04c 	.word	0x0800d04c

0800bdf4 <puts>:
 800bdf4:	4b02      	ldr	r3, [pc, #8]	; (800be00 <puts+0xc>)
 800bdf6:	4601      	mov	r1, r0
 800bdf8:	6818      	ldr	r0, [r3, #0]
 800bdfa:	f7ff bf9f 	b.w	800bd3c <_puts_r>
 800bdfe:	bf00      	nop
 800be00:	20000050 	.word	0x20000050

0800be04 <siprintf>:
 800be04:	b40e      	push	{r1, r2, r3}
 800be06:	b500      	push	{lr}
 800be08:	b09c      	sub	sp, #112	; 0x70
 800be0a:	ab1d      	add	r3, sp, #116	; 0x74
 800be0c:	9002      	str	r0, [sp, #8]
 800be0e:	9006      	str	r0, [sp, #24]
 800be10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be14:	4809      	ldr	r0, [pc, #36]	; (800be3c <siprintf+0x38>)
 800be16:	9107      	str	r1, [sp, #28]
 800be18:	9104      	str	r1, [sp, #16]
 800be1a:	4909      	ldr	r1, [pc, #36]	; (800be40 <siprintf+0x3c>)
 800be1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800be20:	9105      	str	r1, [sp, #20]
 800be22:	6800      	ldr	r0, [r0, #0]
 800be24:	9301      	str	r3, [sp, #4]
 800be26:	a902      	add	r1, sp, #8
 800be28:	f000 fbac 	bl	800c584 <_svfiprintf_r>
 800be2c:	9b02      	ldr	r3, [sp, #8]
 800be2e:	2200      	movs	r2, #0
 800be30:	701a      	strb	r2, [r3, #0]
 800be32:	b01c      	add	sp, #112	; 0x70
 800be34:	f85d eb04 	ldr.w	lr, [sp], #4
 800be38:	b003      	add	sp, #12
 800be3a:	4770      	bx	lr
 800be3c:	20000050 	.word	0x20000050
 800be40:	ffff0208 	.word	0xffff0208

0800be44 <__swbuf_r>:
 800be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be46:	460e      	mov	r6, r1
 800be48:	4614      	mov	r4, r2
 800be4a:	4605      	mov	r5, r0
 800be4c:	b118      	cbz	r0, 800be56 <__swbuf_r+0x12>
 800be4e:	6983      	ldr	r3, [r0, #24]
 800be50:	b90b      	cbnz	r3, 800be56 <__swbuf_r+0x12>
 800be52:	f000 f9a7 	bl	800c1a4 <__sinit>
 800be56:	4b21      	ldr	r3, [pc, #132]	; (800bedc <__swbuf_r+0x98>)
 800be58:	429c      	cmp	r4, r3
 800be5a:	d12a      	bne.n	800beb2 <__swbuf_r+0x6e>
 800be5c:	686c      	ldr	r4, [r5, #4]
 800be5e:	69a3      	ldr	r3, [r4, #24]
 800be60:	60a3      	str	r3, [r4, #8]
 800be62:	89a3      	ldrh	r3, [r4, #12]
 800be64:	071a      	lsls	r2, r3, #28
 800be66:	d52e      	bpl.n	800bec6 <__swbuf_r+0x82>
 800be68:	6923      	ldr	r3, [r4, #16]
 800be6a:	b363      	cbz	r3, 800bec6 <__swbuf_r+0x82>
 800be6c:	6923      	ldr	r3, [r4, #16]
 800be6e:	6820      	ldr	r0, [r4, #0]
 800be70:	1ac0      	subs	r0, r0, r3
 800be72:	6963      	ldr	r3, [r4, #20]
 800be74:	b2f6      	uxtb	r6, r6
 800be76:	4283      	cmp	r3, r0
 800be78:	4637      	mov	r7, r6
 800be7a:	dc04      	bgt.n	800be86 <__swbuf_r+0x42>
 800be7c:	4621      	mov	r1, r4
 800be7e:	4628      	mov	r0, r5
 800be80:	f000 f926 	bl	800c0d0 <_fflush_r>
 800be84:	bb28      	cbnz	r0, 800bed2 <__swbuf_r+0x8e>
 800be86:	68a3      	ldr	r3, [r4, #8]
 800be88:	3b01      	subs	r3, #1
 800be8a:	60a3      	str	r3, [r4, #8]
 800be8c:	6823      	ldr	r3, [r4, #0]
 800be8e:	1c5a      	adds	r2, r3, #1
 800be90:	6022      	str	r2, [r4, #0]
 800be92:	701e      	strb	r6, [r3, #0]
 800be94:	6963      	ldr	r3, [r4, #20]
 800be96:	3001      	adds	r0, #1
 800be98:	4283      	cmp	r3, r0
 800be9a:	d004      	beq.n	800bea6 <__swbuf_r+0x62>
 800be9c:	89a3      	ldrh	r3, [r4, #12]
 800be9e:	07db      	lsls	r3, r3, #31
 800bea0:	d519      	bpl.n	800bed6 <__swbuf_r+0x92>
 800bea2:	2e0a      	cmp	r6, #10
 800bea4:	d117      	bne.n	800bed6 <__swbuf_r+0x92>
 800bea6:	4621      	mov	r1, r4
 800bea8:	4628      	mov	r0, r5
 800beaa:	f000 f911 	bl	800c0d0 <_fflush_r>
 800beae:	b190      	cbz	r0, 800bed6 <__swbuf_r+0x92>
 800beb0:	e00f      	b.n	800bed2 <__swbuf_r+0x8e>
 800beb2:	4b0b      	ldr	r3, [pc, #44]	; (800bee0 <__swbuf_r+0x9c>)
 800beb4:	429c      	cmp	r4, r3
 800beb6:	d101      	bne.n	800bebc <__swbuf_r+0x78>
 800beb8:	68ac      	ldr	r4, [r5, #8]
 800beba:	e7d0      	b.n	800be5e <__swbuf_r+0x1a>
 800bebc:	4b09      	ldr	r3, [pc, #36]	; (800bee4 <__swbuf_r+0xa0>)
 800bebe:	429c      	cmp	r4, r3
 800bec0:	bf08      	it	eq
 800bec2:	68ec      	ldreq	r4, [r5, #12]
 800bec4:	e7cb      	b.n	800be5e <__swbuf_r+0x1a>
 800bec6:	4621      	mov	r1, r4
 800bec8:	4628      	mov	r0, r5
 800beca:	f000 f80d 	bl	800bee8 <__swsetup_r>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d0cc      	beq.n	800be6c <__swbuf_r+0x28>
 800bed2:	f04f 37ff 	mov.w	r7, #4294967295
 800bed6:	4638      	mov	r0, r7
 800bed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beda:	bf00      	nop
 800bedc:	0800d06c 	.word	0x0800d06c
 800bee0:	0800d08c 	.word	0x0800d08c
 800bee4:	0800d04c 	.word	0x0800d04c

0800bee8 <__swsetup_r>:
 800bee8:	4b32      	ldr	r3, [pc, #200]	; (800bfb4 <__swsetup_r+0xcc>)
 800beea:	b570      	push	{r4, r5, r6, lr}
 800beec:	681d      	ldr	r5, [r3, #0]
 800beee:	4606      	mov	r6, r0
 800bef0:	460c      	mov	r4, r1
 800bef2:	b125      	cbz	r5, 800befe <__swsetup_r+0x16>
 800bef4:	69ab      	ldr	r3, [r5, #24]
 800bef6:	b913      	cbnz	r3, 800befe <__swsetup_r+0x16>
 800bef8:	4628      	mov	r0, r5
 800befa:	f000 f953 	bl	800c1a4 <__sinit>
 800befe:	4b2e      	ldr	r3, [pc, #184]	; (800bfb8 <__swsetup_r+0xd0>)
 800bf00:	429c      	cmp	r4, r3
 800bf02:	d10f      	bne.n	800bf24 <__swsetup_r+0x3c>
 800bf04:	686c      	ldr	r4, [r5, #4]
 800bf06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	0715      	lsls	r5, r2, #28
 800bf0e:	d42c      	bmi.n	800bf6a <__swsetup_r+0x82>
 800bf10:	06d0      	lsls	r0, r2, #27
 800bf12:	d411      	bmi.n	800bf38 <__swsetup_r+0x50>
 800bf14:	2209      	movs	r2, #9
 800bf16:	6032      	str	r2, [r6, #0]
 800bf18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf1c:	81a3      	strh	r3, [r4, #12]
 800bf1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf22:	e03e      	b.n	800bfa2 <__swsetup_r+0xba>
 800bf24:	4b25      	ldr	r3, [pc, #148]	; (800bfbc <__swsetup_r+0xd4>)
 800bf26:	429c      	cmp	r4, r3
 800bf28:	d101      	bne.n	800bf2e <__swsetup_r+0x46>
 800bf2a:	68ac      	ldr	r4, [r5, #8]
 800bf2c:	e7eb      	b.n	800bf06 <__swsetup_r+0x1e>
 800bf2e:	4b24      	ldr	r3, [pc, #144]	; (800bfc0 <__swsetup_r+0xd8>)
 800bf30:	429c      	cmp	r4, r3
 800bf32:	bf08      	it	eq
 800bf34:	68ec      	ldreq	r4, [r5, #12]
 800bf36:	e7e6      	b.n	800bf06 <__swsetup_r+0x1e>
 800bf38:	0751      	lsls	r1, r2, #29
 800bf3a:	d512      	bpl.n	800bf62 <__swsetup_r+0x7a>
 800bf3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf3e:	b141      	cbz	r1, 800bf52 <__swsetup_r+0x6a>
 800bf40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf44:	4299      	cmp	r1, r3
 800bf46:	d002      	beq.n	800bf4e <__swsetup_r+0x66>
 800bf48:	4630      	mov	r0, r6
 800bf4a:	f000 fa19 	bl	800c380 <_free_r>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	6363      	str	r3, [r4, #52]	; 0x34
 800bf52:	89a3      	ldrh	r3, [r4, #12]
 800bf54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf58:	81a3      	strh	r3, [r4, #12]
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	6063      	str	r3, [r4, #4]
 800bf5e:	6923      	ldr	r3, [r4, #16]
 800bf60:	6023      	str	r3, [r4, #0]
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	f043 0308 	orr.w	r3, r3, #8
 800bf68:	81a3      	strh	r3, [r4, #12]
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	b94b      	cbnz	r3, 800bf82 <__swsetup_r+0x9a>
 800bf6e:	89a3      	ldrh	r3, [r4, #12]
 800bf70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf78:	d003      	beq.n	800bf82 <__swsetup_r+0x9a>
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f000 f9bf 	bl	800c300 <__smakebuf_r>
 800bf82:	89a2      	ldrh	r2, [r4, #12]
 800bf84:	f012 0301 	ands.w	r3, r2, #1
 800bf88:	d00c      	beq.n	800bfa4 <__swsetup_r+0xbc>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60a3      	str	r3, [r4, #8]
 800bf8e:	6963      	ldr	r3, [r4, #20]
 800bf90:	425b      	negs	r3, r3
 800bf92:	61a3      	str	r3, [r4, #24]
 800bf94:	6923      	ldr	r3, [r4, #16]
 800bf96:	b953      	cbnz	r3, 800bfae <__swsetup_r+0xc6>
 800bf98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf9c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bfa0:	d1ba      	bne.n	800bf18 <__swsetup_r+0x30>
 800bfa2:	bd70      	pop	{r4, r5, r6, pc}
 800bfa4:	0792      	lsls	r2, r2, #30
 800bfa6:	bf58      	it	pl
 800bfa8:	6963      	ldrpl	r3, [r4, #20]
 800bfaa:	60a3      	str	r3, [r4, #8]
 800bfac:	e7f2      	b.n	800bf94 <__swsetup_r+0xac>
 800bfae:	2000      	movs	r0, #0
 800bfb0:	e7f7      	b.n	800bfa2 <__swsetup_r+0xba>
 800bfb2:	bf00      	nop
 800bfb4:	20000050 	.word	0x20000050
 800bfb8:	0800d06c 	.word	0x0800d06c
 800bfbc:	0800d08c 	.word	0x0800d08c
 800bfc0:	0800d04c 	.word	0x0800d04c

0800bfc4 <__sflush_r>:
 800bfc4:	898a      	ldrh	r2, [r1, #12]
 800bfc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfca:	4605      	mov	r5, r0
 800bfcc:	0710      	lsls	r0, r2, #28
 800bfce:	460c      	mov	r4, r1
 800bfd0:	d458      	bmi.n	800c084 <__sflush_r+0xc0>
 800bfd2:	684b      	ldr	r3, [r1, #4]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	dc05      	bgt.n	800bfe4 <__sflush_r+0x20>
 800bfd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	dc02      	bgt.n	800bfe4 <__sflush_r+0x20>
 800bfde:	2000      	movs	r0, #0
 800bfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfe6:	2e00      	cmp	r6, #0
 800bfe8:	d0f9      	beq.n	800bfde <__sflush_r+0x1a>
 800bfea:	2300      	movs	r3, #0
 800bfec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bff0:	682f      	ldr	r7, [r5, #0]
 800bff2:	6a21      	ldr	r1, [r4, #32]
 800bff4:	602b      	str	r3, [r5, #0]
 800bff6:	d032      	beq.n	800c05e <__sflush_r+0x9a>
 800bff8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bffa:	89a3      	ldrh	r3, [r4, #12]
 800bffc:	075a      	lsls	r2, r3, #29
 800bffe:	d505      	bpl.n	800c00c <__sflush_r+0x48>
 800c000:	6863      	ldr	r3, [r4, #4]
 800c002:	1ac0      	subs	r0, r0, r3
 800c004:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c006:	b10b      	cbz	r3, 800c00c <__sflush_r+0x48>
 800c008:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c00a:	1ac0      	subs	r0, r0, r3
 800c00c:	2300      	movs	r3, #0
 800c00e:	4602      	mov	r2, r0
 800c010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c012:	6a21      	ldr	r1, [r4, #32]
 800c014:	4628      	mov	r0, r5
 800c016:	47b0      	blx	r6
 800c018:	1c43      	adds	r3, r0, #1
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	d106      	bne.n	800c02c <__sflush_r+0x68>
 800c01e:	6829      	ldr	r1, [r5, #0]
 800c020:	291d      	cmp	r1, #29
 800c022:	d848      	bhi.n	800c0b6 <__sflush_r+0xf2>
 800c024:	4a29      	ldr	r2, [pc, #164]	; (800c0cc <__sflush_r+0x108>)
 800c026:	40ca      	lsrs	r2, r1
 800c028:	07d6      	lsls	r6, r2, #31
 800c02a:	d544      	bpl.n	800c0b6 <__sflush_r+0xf2>
 800c02c:	2200      	movs	r2, #0
 800c02e:	6062      	str	r2, [r4, #4]
 800c030:	04d9      	lsls	r1, r3, #19
 800c032:	6922      	ldr	r2, [r4, #16]
 800c034:	6022      	str	r2, [r4, #0]
 800c036:	d504      	bpl.n	800c042 <__sflush_r+0x7e>
 800c038:	1c42      	adds	r2, r0, #1
 800c03a:	d101      	bne.n	800c040 <__sflush_r+0x7c>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b903      	cbnz	r3, 800c042 <__sflush_r+0x7e>
 800c040:	6560      	str	r0, [r4, #84]	; 0x54
 800c042:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c044:	602f      	str	r7, [r5, #0]
 800c046:	2900      	cmp	r1, #0
 800c048:	d0c9      	beq.n	800bfde <__sflush_r+0x1a>
 800c04a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c04e:	4299      	cmp	r1, r3
 800c050:	d002      	beq.n	800c058 <__sflush_r+0x94>
 800c052:	4628      	mov	r0, r5
 800c054:	f000 f994 	bl	800c380 <_free_r>
 800c058:	2000      	movs	r0, #0
 800c05a:	6360      	str	r0, [r4, #52]	; 0x34
 800c05c:	e7c0      	b.n	800bfe0 <__sflush_r+0x1c>
 800c05e:	2301      	movs	r3, #1
 800c060:	4628      	mov	r0, r5
 800c062:	47b0      	blx	r6
 800c064:	1c41      	adds	r1, r0, #1
 800c066:	d1c8      	bne.n	800bffa <__sflush_r+0x36>
 800c068:	682b      	ldr	r3, [r5, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d0c5      	beq.n	800bffa <__sflush_r+0x36>
 800c06e:	2b1d      	cmp	r3, #29
 800c070:	d001      	beq.n	800c076 <__sflush_r+0xb2>
 800c072:	2b16      	cmp	r3, #22
 800c074:	d101      	bne.n	800c07a <__sflush_r+0xb6>
 800c076:	602f      	str	r7, [r5, #0]
 800c078:	e7b1      	b.n	800bfde <__sflush_r+0x1a>
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c080:	81a3      	strh	r3, [r4, #12]
 800c082:	e7ad      	b.n	800bfe0 <__sflush_r+0x1c>
 800c084:	690f      	ldr	r7, [r1, #16]
 800c086:	2f00      	cmp	r7, #0
 800c088:	d0a9      	beq.n	800bfde <__sflush_r+0x1a>
 800c08a:	0793      	lsls	r3, r2, #30
 800c08c:	680e      	ldr	r6, [r1, #0]
 800c08e:	bf08      	it	eq
 800c090:	694b      	ldreq	r3, [r1, #20]
 800c092:	600f      	str	r7, [r1, #0]
 800c094:	bf18      	it	ne
 800c096:	2300      	movne	r3, #0
 800c098:	eba6 0807 	sub.w	r8, r6, r7
 800c09c:	608b      	str	r3, [r1, #8]
 800c09e:	f1b8 0f00 	cmp.w	r8, #0
 800c0a2:	dd9c      	ble.n	800bfde <__sflush_r+0x1a>
 800c0a4:	4643      	mov	r3, r8
 800c0a6:	463a      	mov	r2, r7
 800c0a8:	6a21      	ldr	r1, [r4, #32]
 800c0aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	47b0      	blx	r6
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	dc06      	bgt.n	800c0c2 <__sflush_r+0xfe>
 800c0b4:	89a3      	ldrh	r3, [r4, #12]
 800c0b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ba:	81a3      	strh	r3, [r4, #12]
 800c0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c0:	e78e      	b.n	800bfe0 <__sflush_r+0x1c>
 800c0c2:	4407      	add	r7, r0
 800c0c4:	eba8 0800 	sub.w	r8, r8, r0
 800c0c8:	e7e9      	b.n	800c09e <__sflush_r+0xda>
 800c0ca:	bf00      	nop
 800c0cc:	20400001 	.word	0x20400001

0800c0d0 <_fflush_r>:
 800c0d0:	b538      	push	{r3, r4, r5, lr}
 800c0d2:	690b      	ldr	r3, [r1, #16]
 800c0d4:	4605      	mov	r5, r0
 800c0d6:	460c      	mov	r4, r1
 800c0d8:	b1db      	cbz	r3, 800c112 <_fflush_r+0x42>
 800c0da:	b118      	cbz	r0, 800c0e4 <_fflush_r+0x14>
 800c0dc:	6983      	ldr	r3, [r0, #24]
 800c0de:	b90b      	cbnz	r3, 800c0e4 <_fflush_r+0x14>
 800c0e0:	f000 f860 	bl	800c1a4 <__sinit>
 800c0e4:	4b0c      	ldr	r3, [pc, #48]	; (800c118 <_fflush_r+0x48>)
 800c0e6:	429c      	cmp	r4, r3
 800c0e8:	d109      	bne.n	800c0fe <_fflush_r+0x2e>
 800c0ea:	686c      	ldr	r4, [r5, #4]
 800c0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0f0:	b17b      	cbz	r3, 800c112 <_fflush_r+0x42>
 800c0f2:	4621      	mov	r1, r4
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0fa:	f7ff bf63 	b.w	800bfc4 <__sflush_r>
 800c0fe:	4b07      	ldr	r3, [pc, #28]	; (800c11c <_fflush_r+0x4c>)
 800c100:	429c      	cmp	r4, r3
 800c102:	d101      	bne.n	800c108 <_fflush_r+0x38>
 800c104:	68ac      	ldr	r4, [r5, #8]
 800c106:	e7f1      	b.n	800c0ec <_fflush_r+0x1c>
 800c108:	4b05      	ldr	r3, [pc, #20]	; (800c120 <_fflush_r+0x50>)
 800c10a:	429c      	cmp	r4, r3
 800c10c:	bf08      	it	eq
 800c10e:	68ec      	ldreq	r4, [r5, #12]
 800c110:	e7ec      	b.n	800c0ec <_fflush_r+0x1c>
 800c112:	2000      	movs	r0, #0
 800c114:	bd38      	pop	{r3, r4, r5, pc}
 800c116:	bf00      	nop
 800c118:	0800d06c 	.word	0x0800d06c
 800c11c:	0800d08c 	.word	0x0800d08c
 800c120:	0800d04c 	.word	0x0800d04c

0800c124 <std>:
 800c124:	2300      	movs	r3, #0
 800c126:	b510      	push	{r4, lr}
 800c128:	4604      	mov	r4, r0
 800c12a:	e9c0 3300 	strd	r3, r3, [r0]
 800c12e:	6083      	str	r3, [r0, #8]
 800c130:	8181      	strh	r1, [r0, #12]
 800c132:	6643      	str	r3, [r0, #100]	; 0x64
 800c134:	81c2      	strh	r2, [r0, #14]
 800c136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c13a:	6183      	str	r3, [r0, #24]
 800c13c:	4619      	mov	r1, r3
 800c13e:	2208      	movs	r2, #8
 800c140:	305c      	adds	r0, #92	; 0x5c
 800c142:	f7ff fdf2 	bl	800bd2a <memset>
 800c146:	4b05      	ldr	r3, [pc, #20]	; (800c15c <std+0x38>)
 800c148:	6263      	str	r3, [r4, #36]	; 0x24
 800c14a:	4b05      	ldr	r3, [pc, #20]	; (800c160 <std+0x3c>)
 800c14c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c14e:	4b05      	ldr	r3, [pc, #20]	; (800c164 <std+0x40>)
 800c150:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c152:	4b05      	ldr	r3, [pc, #20]	; (800c168 <std+0x44>)
 800c154:	6224      	str	r4, [r4, #32]
 800c156:	6323      	str	r3, [r4, #48]	; 0x30
 800c158:	bd10      	pop	{r4, pc}
 800c15a:	bf00      	nop
 800c15c:	0800caa5 	.word	0x0800caa5
 800c160:	0800cac7 	.word	0x0800cac7
 800c164:	0800caff 	.word	0x0800caff
 800c168:	0800cb23 	.word	0x0800cb23

0800c16c <_cleanup_r>:
 800c16c:	4901      	ldr	r1, [pc, #4]	; (800c174 <_cleanup_r+0x8>)
 800c16e:	f000 b885 	b.w	800c27c <_fwalk_reent>
 800c172:	bf00      	nop
 800c174:	0800c0d1 	.word	0x0800c0d1

0800c178 <__sfmoreglue>:
 800c178:	b570      	push	{r4, r5, r6, lr}
 800c17a:	1e4a      	subs	r2, r1, #1
 800c17c:	2568      	movs	r5, #104	; 0x68
 800c17e:	4355      	muls	r5, r2
 800c180:	460e      	mov	r6, r1
 800c182:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c186:	f000 f949 	bl	800c41c <_malloc_r>
 800c18a:	4604      	mov	r4, r0
 800c18c:	b140      	cbz	r0, 800c1a0 <__sfmoreglue+0x28>
 800c18e:	2100      	movs	r1, #0
 800c190:	e9c0 1600 	strd	r1, r6, [r0]
 800c194:	300c      	adds	r0, #12
 800c196:	60a0      	str	r0, [r4, #8]
 800c198:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c19c:	f7ff fdc5 	bl	800bd2a <memset>
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	bd70      	pop	{r4, r5, r6, pc}

0800c1a4 <__sinit>:
 800c1a4:	6983      	ldr	r3, [r0, #24]
 800c1a6:	b510      	push	{r4, lr}
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	bb33      	cbnz	r3, 800c1fa <__sinit+0x56>
 800c1ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c1b0:	6503      	str	r3, [r0, #80]	; 0x50
 800c1b2:	4b12      	ldr	r3, [pc, #72]	; (800c1fc <__sinit+0x58>)
 800c1b4:	4a12      	ldr	r2, [pc, #72]	; (800c200 <__sinit+0x5c>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	6282      	str	r2, [r0, #40]	; 0x28
 800c1ba:	4298      	cmp	r0, r3
 800c1bc:	bf04      	itt	eq
 800c1be:	2301      	moveq	r3, #1
 800c1c0:	6183      	streq	r3, [r0, #24]
 800c1c2:	f000 f81f 	bl	800c204 <__sfp>
 800c1c6:	6060      	str	r0, [r4, #4]
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f000 f81b 	bl	800c204 <__sfp>
 800c1ce:	60a0      	str	r0, [r4, #8]
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f000 f817 	bl	800c204 <__sfp>
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	60e0      	str	r0, [r4, #12]
 800c1da:	2104      	movs	r1, #4
 800c1dc:	6860      	ldr	r0, [r4, #4]
 800c1de:	f7ff ffa1 	bl	800c124 <std>
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	2109      	movs	r1, #9
 800c1e6:	68a0      	ldr	r0, [r4, #8]
 800c1e8:	f7ff ff9c 	bl	800c124 <std>
 800c1ec:	2202      	movs	r2, #2
 800c1ee:	2112      	movs	r1, #18
 800c1f0:	68e0      	ldr	r0, [r4, #12]
 800c1f2:	f7ff ff97 	bl	800c124 <std>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	61a3      	str	r3, [r4, #24]
 800c1fa:	bd10      	pop	{r4, pc}
 800c1fc:	0800d048 	.word	0x0800d048
 800c200:	0800c16d 	.word	0x0800c16d

0800c204 <__sfp>:
 800c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c206:	4b1b      	ldr	r3, [pc, #108]	; (800c274 <__sfp+0x70>)
 800c208:	681e      	ldr	r6, [r3, #0]
 800c20a:	69b3      	ldr	r3, [r6, #24]
 800c20c:	4607      	mov	r7, r0
 800c20e:	b913      	cbnz	r3, 800c216 <__sfp+0x12>
 800c210:	4630      	mov	r0, r6
 800c212:	f7ff ffc7 	bl	800c1a4 <__sinit>
 800c216:	3648      	adds	r6, #72	; 0x48
 800c218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	d503      	bpl.n	800c228 <__sfp+0x24>
 800c220:	6833      	ldr	r3, [r6, #0]
 800c222:	b133      	cbz	r3, 800c232 <__sfp+0x2e>
 800c224:	6836      	ldr	r6, [r6, #0]
 800c226:	e7f7      	b.n	800c218 <__sfp+0x14>
 800c228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c22c:	b16d      	cbz	r5, 800c24a <__sfp+0x46>
 800c22e:	3468      	adds	r4, #104	; 0x68
 800c230:	e7f4      	b.n	800c21c <__sfp+0x18>
 800c232:	2104      	movs	r1, #4
 800c234:	4638      	mov	r0, r7
 800c236:	f7ff ff9f 	bl	800c178 <__sfmoreglue>
 800c23a:	6030      	str	r0, [r6, #0]
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d1f1      	bne.n	800c224 <__sfp+0x20>
 800c240:	230c      	movs	r3, #12
 800c242:	603b      	str	r3, [r7, #0]
 800c244:	4604      	mov	r4, r0
 800c246:	4620      	mov	r0, r4
 800c248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c24a:	4b0b      	ldr	r3, [pc, #44]	; (800c278 <__sfp+0x74>)
 800c24c:	6665      	str	r5, [r4, #100]	; 0x64
 800c24e:	e9c4 5500 	strd	r5, r5, [r4]
 800c252:	60a5      	str	r5, [r4, #8]
 800c254:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c258:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c25c:	2208      	movs	r2, #8
 800c25e:	4629      	mov	r1, r5
 800c260:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c264:	f7ff fd61 	bl	800bd2a <memset>
 800c268:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c26c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c270:	e7e9      	b.n	800c246 <__sfp+0x42>
 800c272:	bf00      	nop
 800c274:	0800d048 	.word	0x0800d048
 800c278:	ffff0001 	.word	0xffff0001

0800c27c <_fwalk_reent>:
 800c27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c280:	4680      	mov	r8, r0
 800c282:	4689      	mov	r9, r1
 800c284:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c288:	2600      	movs	r6, #0
 800c28a:	b914      	cbnz	r4, 800c292 <_fwalk_reent+0x16>
 800c28c:	4630      	mov	r0, r6
 800c28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c292:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c296:	3f01      	subs	r7, #1
 800c298:	d501      	bpl.n	800c29e <_fwalk_reent+0x22>
 800c29a:	6824      	ldr	r4, [r4, #0]
 800c29c:	e7f5      	b.n	800c28a <_fwalk_reent+0xe>
 800c29e:	89ab      	ldrh	r3, [r5, #12]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d907      	bls.n	800c2b4 <_fwalk_reent+0x38>
 800c2a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	d003      	beq.n	800c2b4 <_fwalk_reent+0x38>
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	4640      	mov	r0, r8
 800c2b0:	47c8      	blx	r9
 800c2b2:	4306      	orrs	r6, r0
 800c2b4:	3568      	adds	r5, #104	; 0x68
 800c2b6:	e7ee      	b.n	800c296 <_fwalk_reent+0x1a>

0800c2b8 <__swhatbuf_r>:
 800c2b8:	b570      	push	{r4, r5, r6, lr}
 800c2ba:	460e      	mov	r6, r1
 800c2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2c0:	2900      	cmp	r1, #0
 800c2c2:	b096      	sub	sp, #88	; 0x58
 800c2c4:	4614      	mov	r4, r2
 800c2c6:	461d      	mov	r5, r3
 800c2c8:	da07      	bge.n	800c2da <__swhatbuf_r+0x22>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	602b      	str	r3, [r5, #0]
 800c2ce:	89b3      	ldrh	r3, [r6, #12]
 800c2d0:	061a      	lsls	r2, r3, #24
 800c2d2:	d410      	bmi.n	800c2f6 <__swhatbuf_r+0x3e>
 800c2d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2d8:	e00e      	b.n	800c2f8 <__swhatbuf_r+0x40>
 800c2da:	466a      	mov	r2, sp
 800c2dc:	f000 fc48 	bl	800cb70 <_fstat_r>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	dbf2      	blt.n	800c2ca <__swhatbuf_r+0x12>
 800c2e4:	9a01      	ldr	r2, [sp, #4]
 800c2e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c2ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c2ee:	425a      	negs	r2, r3
 800c2f0:	415a      	adcs	r2, r3
 800c2f2:	602a      	str	r2, [r5, #0]
 800c2f4:	e7ee      	b.n	800c2d4 <__swhatbuf_r+0x1c>
 800c2f6:	2340      	movs	r3, #64	; 0x40
 800c2f8:	2000      	movs	r0, #0
 800c2fa:	6023      	str	r3, [r4, #0]
 800c2fc:	b016      	add	sp, #88	; 0x58
 800c2fe:	bd70      	pop	{r4, r5, r6, pc}

0800c300 <__smakebuf_r>:
 800c300:	898b      	ldrh	r3, [r1, #12]
 800c302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c304:	079d      	lsls	r5, r3, #30
 800c306:	4606      	mov	r6, r0
 800c308:	460c      	mov	r4, r1
 800c30a:	d507      	bpl.n	800c31c <__smakebuf_r+0x1c>
 800c30c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c310:	6023      	str	r3, [r4, #0]
 800c312:	6123      	str	r3, [r4, #16]
 800c314:	2301      	movs	r3, #1
 800c316:	6163      	str	r3, [r4, #20]
 800c318:	b002      	add	sp, #8
 800c31a:	bd70      	pop	{r4, r5, r6, pc}
 800c31c:	ab01      	add	r3, sp, #4
 800c31e:	466a      	mov	r2, sp
 800c320:	f7ff ffca 	bl	800c2b8 <__swhatbuf_r>
 800c324:	9900      	ldr	r1, [sp, #0]
 800c326:	4605      	mov	r5, r0
 800c328:	4630      	mov	r0, r6
 800c32a:	f000 f877 	bl	800c41c <_malloc_r>
 800c32e:	b948      	cbnz	r0, 800c344 <__smakebuf_r+0x44>
 800c330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c334:	059a      	lsls	r2, r3, #22
 800c336:	d4ef      	bmi.n	800c318 <__smakebuf_r+0x18>
 800c338:	f023 0303 	bic.w	r3, r3, #3
 800c33c:	f043 0302 	orr.w	r3, r3, #2
 800c340:	81a3      	strh	r3, [r4, #12]
 800c342:	e7e3      	b.n	800c30c <__smakebuf_r+0xc>
 800c344:	4b0d      	ldr	r3, [pc, #52]	; (800c37c <__smakebuf_r+0x7c>)
 800c346:	62b3      	str	r3, [r6, #40]	; 0x28
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	6020      	str	r0, [r4, #0]
 800c34c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c350:	81a3      	strh	r3, [r4, #12]
 800c352:	9b00      	ldr	r3, [sp, #0]
 800c354:	6163      	str	r3, [r4, #20]
 800c356:	9b01      	ldr	r3, [sp, #4]
 800c358:	6120      	str	r0, [r4, #16]
 800c35a:	b15b      	cbz	r3, 800c374 <__smakebuf_r+0x74>
 800c35c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c360:	4630      	mov	r0, r6
 800c362:	f000 fc17 	bl	800cb94 <_isatty_r>
 800c366:	b128      	cbz	r0, 800c374 <__smakebuf_r+0x74>
 800c368:	89a3      	ldrh	r3, [r4, #12]
 800c36a:	f023 0303 	bic.w	r3, r3, #3
 800c36e:	f043 0301 	orr.w	r3, r3, #1
 800c372:	81a3      	strh	r3, [r4, #12]
 800c374:	89a3      	ldrh	r3, [r4, #12]
 800c376:	431d      	orrs	r5, r3
 800c378:	81a5      	strh	r5, [r4, #12]
 800c37a:	e7cd      	b.n	800c318 <__smakebuf_r+0x18>
 800c37c:	0800c16d 	.word	0x0800c16d

0800c380 <_free_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4605      	mov	r5, r0
 800c384:	2900      	cmp	r1, #0
 800c386:	d045      	beq.n	800c414 <_free_r+0x94>
 800c388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c38c:	1f0c      	subs	r4, r1, #4
 800c38e:	2b00      	cmp	r3, #0
 800c390:	bfb8      	it	lt
 800c392:	18e4      	addlt	r4, r4, r3
 800c394:	f000 fc39 	bl	800cc0a <__malloc_lock>
 800c398:	4a1f      	ldr	r2, [pc, #124]	; (800c418 <_free_r+0x98>)
 800c39a:	6813      	ldr	r3, [r2, #0]
 800c39c:	4610      	mov	r0, r2
 800c39e:	b933      	cbnz	r3, 800c3ae <_free_r+0x2e>
 800c3a0:	6063      	str	r3, [r4, #4]
 800c3a2:	6014      	str	r4, [r2, #0]
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3aa:	f000 bc2f 	b.w	800cc0c <__malloc_unlock>
 800c3ae:	42a3      	cmp	r3, r4
 800c3b0:	d90c      	bls.n	800c3cc <_free_r+0x4c>
 800c3b2:	6821      	ldr	r1, [r4, #0]
 800c3b4:	1862      	adds	r2, r4, r1
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	bf04      	itt	eq
 800c3ba:	681a      	ldreq	r2, [r3, #0]
 800c3bc:	685b      	ldreq	r3, [r3, #4]
 800c3be:	6063      	str	r3, [r4, #4]
 800c3c0:	bf04      	itt	eq
 800c3c2:	1852      	addeq	r2, r2, r1
 800c3c4:	6022      	streq	r2, [r4, #0]
 800c3c6:	6004      	str	r4, [r0, #0]
 800c3c8:	e7ec      	b.n	800c3a4 <_free_r+0x24>
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	685a      	ldr	r2, [r3, #4]
 800c3ce:	b10a      	cbz	r2, 800c3d4 <_free_r+0x54>
 800c3d0:	42a2      	cmp	r2, r4
 800c3d2:	d9fa      	bls.n	800c3ca <_free_r+0x4a>
 800c3d4:	6819      	ldr	r1, [r3, #0]
 800c3d6:	1858      	adds	r0, r3, r1
 800c3d8:	42a0      	cmp	r0, r4
 800c3da:	d10b      	bne.n	800c3f4 <_free_r+0x74>
 800c3dc:	6820      	ldr	r0, [r4, #0]
 800c3de:	4401      	add	r1, r0
 800c3e0:	1858      	adds	r0, r3, r1
 800c3e2:	4282      	cmp	r2, r0
 800c3e4:	6019      	str	r1, [r3, #0]
 800c3e6:	d1dd      	bne.n	800c3a4 <_free_r+0x24>
 800c3e8:	6810      	ldr	r0, [r2, #0]
 800c3ea:	6852      	ldr	r2, [r2, #4]
 800c3ec:	605a      	str	r2, [r3, #4]
 800c3ee:	4401      	add	r1, r0
 800c3f0:	6019      	str	r1, [r3, #0]
 800c3f2:	e7d7      	b.n	800c3a4 <_free_r+0x24>
 800c3f4:	d902      	bls.n	800c3fc <_free_r+0x7c>
 800c3f6:	230c      	movs	r3, #12
 800c3f8:	602b      	str	r3, [r5, #0]
 800c3fa:	e7d3      	b.n	800c3a4 <_free_r+0x24>
 800c3fc:	6820      	ldr	r0, [r4, #0]
 800c3fe:	1821      	adds	r1, r4, r0
 800c400:	428a      	cmp	r2, r1
 800c402:	bf04      	itt	eq
 800c404:	6811      	ldreq	r1, [r2, #0]
 800c406:	6852      	ldreq	r2, [r2, #4]
 800c408:	6062      	str	r2, [r4, #4]
 800c40a:	bf04      	itt	eq
 800c40c:	1809      	addeq	r1, r1, r0
 800c40e:	6021      	streq	r1, [r4, #0]
 800c410:	605c      	str	r4, [r3, #4]
 800c412:	e7c7      	b.n	800c3a4 <_free_r+0x24>
 800c414:	bd38      	pop	{r3, r4, r5, pc}
 800c416:	bf00      	nop
 800c418:	2000aa9c 	.word	0x2000aa9c

0800c41c <_malloc_r>:
 800c41c:	b570      	push	{r4, r5, r6, lr}
 800c41e:	1ccd      	adds	r5, r1, #3
 800c420:	f025 0503 	bic.w	r5, r5, #3
 800c424:	3508      	adds	r5, #8
 800c426:	2d0c      	cmp	r5, #12
 800c428:	bf38      	it	cc
 800c42a:	250c      	movcc	r5, #12
 800c42c:	2d00      	cmp	r5, #0
 800c42e:	4606      	mov	r6, r0
 800c430:	db01      	blt.n	800c436 <_malloc_r+0x1a>
 800c432:	42a9      	cmp	r1, r5
 800c434:	d903      	bls.n	800c43e <_malloc_r+0x22>
 800c436:	230c      	movs	r3, #12
 800c438:	6033      	str	r3, [r6, #0]
 800c43a:	2000      	movs	r0, #0
 800c43c:	bd70      	pop	{r4, r5, r6, pc}
 800c43e:	f000 fbe4 	bl	800cc0a <__malloc_lock>
 800c442:	4a21      	ldr	r2, [pc, #132]	; (800c4c8 <_malloc_r+0xac>)
 800c444:	6814      	ldr	r4, [r2, #0]
 800c446:	4621      	mov	r1, r4
 800c448:	b991      	cbnz	r1, 800c470 <_malloc_r+0x54>
 800c44a:	4c20      	ldr	r4, [pc, #128]	; (800c4cc <_malloc_r+0xb0>)
 800c44c:	6823      	ldr	r3, [r4, #0]
 800c44e:	b91b      	cbnz	r3, 800c458 <_malloc_r+0x3c>
 800c450:	4630      	mov	r0, r6
 800c452:	f000 fb17 	bl	800ca84 <_sbrk_r>
 800c456:	6020      	str	r0, [r4, #0]
 800c458:	4629      	mov	r1, r5
 800c45a:	4630      	mov	r0, r6
 800c45c:	f000 fb12 	bl	800ca84 <_sbrk_r>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d124      	bne.n	800c4ae <_malloc_r+0x92>
 800c464:	230c      	movs	r3, #12
 800c466:	6033      	str	r3, [r6, #0]
 800c468:	4630      	mov	r0, r6
 800c46a:	f000 fbcf 	bl	800cc0c <__malloc_unlock>
 800c46e:	e7e4      	b.n	800c43a <_malloc_r+0x1e>
 800c470:	680b      	ldr	r3, [r1, #0]
 800c472:	1b5b      	subs	r3, r3, r5
 800c474:	d418      	bmi.n	800c4a8 <_malloc_r+0x8c>
 800c476:	2b0b      	cmp	r3, #11
 800c478:	d90f      	bls.n	800c49a <_malloc_r+0x7e>
 800c47a:	600b      	str	r3, [r1, #0]
 800c47c:	50cd      	str	r5, [r1, r3]
 800c47e:	18cc      	adds	r4, r1, r3
 800c480:	4630      	mov	r0, r6
 800c482:	f000 fbc3 	bl	800cc0c <__malloc_unlock>
 800c486:	f104 000b 	add.w	r0, r4, #11
 800c48a:	1d23      	adds	r3, r4, #4
 800c48c:	f020 0007 	bic.w	r0, r0, #7
 800c490:	1ac3      	subs	r3, r0, r3
 800c492:	d0d3      	beq.n	800c43c <_malloc_r+0x20>
 800c494:	425a      	negs	r2, r3
 800c496:	50e2      	str	r2, [r4, r3]
 800c498:	e7d0      	b.n	800c43c <_malloc_r+0x20>
 800c49a:	428c      	cmp	r4, r1
 800c49c:	684b      	ldr	r3, [r1, #4]
 800c49e:	bf16      	itet	ne
 800c4a0:	6063      	strne	r3, [r4, #4]
 800c4a2:	6013      	streq	r3, [r2, #0]
 800c4a4:	460c      	movne	r4, r1
 800c4a6:	e7eb      	b.n	800c480 <_malloc_r+0x64>
 800c4a8:	460c      	mov	r4, r1
 800c4aa:	6849      	ldr	r1, [r1, #4]
 800c4ac:	e7cc      	b.n	800c448 <_malloc_r+0x2c>
 800c4ae:	1cc4      	adds	r4, r0, #3
 800c4b0:	f024 0403 	bic.w	r4, r4, #3
 800c4b4:	42a0      	cmp	r0, r4
 800c4b6:	d005      	beq.n	800c4c4 <_malloc_r+0xa8>
 800c4b8:	1a21      	subs	r1, r4, r0
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	f000 fae2 	bl	800ca84 <_sbrk_r>
 800c4c0:	3001      	adds	r0, #1
 800c4c2:	d0cf      	beq.n	800c464 <_malloc_r+0x48>
 800c4c4:	6025      	str	r5, [r4, #0]
 800c4c6:	e7db      	b.n	800c480 <_malloc_r+0x64>
 800c4c8:	2000aa9c 	.word	0x2000aa9c
 800c4cc:	2000aaa0 	.word	0x2000aaa0

0800c4d0 <__ssputs_r>:
 800c4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d4:	688e      	ldr	r6, [r1, #8]
 800c4d6:	429e      	cmp	r6, r3
 800c4d8:	4682      	mov	sl, r0
 800c4da:	460c      	mov	r4, r1
 800c4dc:	4690      	mov	r8, r2
 800c4de:	4699      	mov	r9, r3
 800c4e0:	d837      	bhi.n	800c552 <__ssputs_r+0x82>
 800c4e2:	898a      	ldrh	r2, [r1, #12]
 800c4e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4e8:	d031      	beq.n	800c54e <__ssputs_r+0x7e>
 800c4ea:	6825      	ldr	r5, [r4, #0]
 800c4ec:	6909      	ldr	r1, [r1, #16]
 800c4ee:	1a6f      	subs	r7, r5, r1
 800c4f0:	6965      	ldr	r5, [r4, #20]
 800c4f2:	2302      	movs	r3, #2
 800c4f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4f8:	fb95 f5f3 	sdiv	r5, r5, r3
 800c4fc:	f109 0301 	add.w	r3, r9, #1
 800c500:	443b      	add	r3, r7
 800c502:	429d      	cmp	r5, r3
 800c504:	bf38      	it	cc
 800c506:	461d      	movcc	r5, r3
 800c508:	0553      	lsls	r3, r2, #21
 800c50a:	d530      	bpl.n	800c56e <__ssputs_r+0x9e>
 800c50c:	4629      	mov	r1, r5
 800c50e:	f7ff ff85 	bl	800c41c <_malloc_r>
 800c512:	4606      	mov	r6, r0
 800c514:	b950      	cbnz	r0, 800c52c <__ssputs_r+0x5c>
 800c516:	230c      	movs	r3, #12
 800c518:	f8ca 3000 	str.w	r3, [sl]
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c522:	81a3      	strh	r3, [r4, #12]
 800c524:	f04f 30ff 	mov.w	r0, #4294967295
 800c528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c52c:	463a      	mov	r2, r7
 800c52e:	6921      	ldr	r1, [r4, #16]
 800c530:	f7ff fbf0 	bl	800bd14 <memcpy>
 800c534:	89a3      	ldrh	r3, [r4, #12]
 800c536:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c53a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c53e:	81a3      	strh	r3, [r4, #12]
 800c540:	6126      	str	r6, [r4, #16]
 800c542:	6165      	str	r5, [r4, #20]
 800c544:	443e      	add	r6, r7
 800c546:	1bed      	subs	r5, r5, r7
 800c548:	6026      	str	r6, [r4, #0]
 800c54a:	60a5      	str	r5, [r4, #8]
 800c54c:	464e      	mov	r6, r9
 800c54e:	454e      	cmp	r6, r9
 800c550:	d900      	bls.n	800c554 <__ssputs_r+0x84>
 800c552:	464e      	mov	r6, r9
 800c554:	4632      	mov	r2, r6
 800c556:	4641      	mov	r1, r8
 800c558:	6820      	ldr	r0, [r4, #0]
 800c55a:	f000 fb3d 	bl	800cbd8 <memmove>
 800c55e:	68a3      	ldr	r3, [r4, #8]
 800c560:	1b9b      	subs	r3, r3, r6
 800c562:	60a3      	str	r3, [r4, #8]
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	441e      	add	r6, r3
 800c568:	6026      	str	r6, [r4, #0]
 800c56a:	2000      	movs	r0, #0
 800c56c:	e7dc      	b.n	800c528 <__ssputs_r+0x58>
 800c56e:	462a      	mov	r2, r5
 800c570:	f000 fb4d 	bl	800cc0e <_realloc_r>
 800c574:	4606      	mov	r6, r0
 800c576:	2800      	cmp	r0, #0
 800c578:	d1e2      	bne.n	800c540 <__ssputs_r+0x70>
 800c57a:	6921      	ldr	r1, [r4, #16]
 800c57c:	4650      	mov	r0, sl
 800c57e:	f7ff feff 	bl	800c380 <_free_r>
 800c582:	e7c8      	b.n	800c516 <__ssputs_r+0x46>

0800c584 <_svfiprintf_r>:
 800c584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c588:	461d      	mov	r5, r3
 800c58a:	898b      	ldrh	r3, [r1, #12]
 800c58c:	061f      	lsls	r7, r3, #24
 800c58e:	b09d      	sub	sp, #116	; 0x74
 800c590:	4680      	mov	r8, r0
 800c592:	460c      	mov	r4, r1
 800c594:	4616      	mov	r6, r2
 800c596:	d50f      	bpl.n	800c5b8 <_svfiprintf_r+0x34>
 800c598:	690b      	ldr	r3, [r1, #16]
 800c59a:	b96b      	cbnz	r3, 800c5b8 <_svfiprintf_r+0x34>
 800c59c:	2140      	movs	r1, #64	; 0x40
 800c59e:	f7ff ff3d 	bl	800c41c <_malloc_r>
 800c5a2:	6020      	str	r0, [r4, #0]
 800c5a4:	6120      	str	r0, [r4, #16]
 800c5a6:	b928      	cbnz	r0, 800c5b4 <_svfiprintf_r+0x30>
 800c5a8:	230c      	movs	r3, #12
 800c5aa:	f8c8 3000 	str.w	r3, [r8]
 800c5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b2:	e0c8      	b.n	800c746 <_svfiprintf_r+0x1c2>
 800c5b4:	2340      	movs	r3, #64	; 0x40
 800c5b6:	6163      	str	r3, [r4, #20]
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c5bc:	2320      	movs	r3, #32
 800c5be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5c2:	2330      	movs	r3, #48	; 0x30
 800c5c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5c8:	9503      	str	r5, [sp, #12]
 800c5ca:	f04f 0b01 	mov.w	fp, #1
 800c5ce:	4637      	mov	r7, r6
 800c5d0:	463d      	mov	r5, r7
 800c5d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c5d6:	b10b      	cbz	r3, 800c5dc <_svfiprintf_r+0x58>
 800c5d8:	2b25      	cmp	r3, #37	; 0x25
 800c5da:	d13e      	bne.n	800c65a <_svfiprintf_r+0xd6>
 800c5dc:	ebb7 0a06 	subs.w	sl, r7, r6
 800c5e0:	d00b      	beq.n	800c5fa <_svfiprintf_r+0x76>
 800c5e2:	4653      	mov	r3, sl
 800c5e4:	4632      	mov	r2, r6
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	f7ff ff71 	bl	800c4d0 <__ssputs_r>
 800c5ee:	3001      	adds	r0, #1
 800c5f0:	f000 80a4 	beq.w	800c73c <_svfiprintf_r+0x1b8>
 800c5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f6:	4453      	add	r3, sl
 800c5f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c5fa:	783b      	ldrb	r3, [r7, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f000 809d 	beq.w	800c73c <_svfiprintf_r+0x1b8>
 800c602:	2300      	movs	r3, #0
 800c604:	f04f 32ff 	mov.w	r2, #4294967295
 800c608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c60c:	9304      	str	r3, [sp, #16]
 800c60e:	9307      	str	r3, [sp, #28]
 800c610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c614:	931a      	str	r3, [sp, #104]	; 0x68
 800c616:	462f      	mov	r7, r5
 800c618:	2205      	movs	r2, #5
 800c61a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c61e:	4850      	ldr	r0, [pc, #320]	; (800c760 <_svfiprintf_r+0x1dc>)
 800c620:	f7f3 fdde 	bl	80001e0 <memchr>
 800c624:	9b04      	ldr	r3, [sp, #16]
 800c626:	b9d0      	cbnz	r0, 800c65e <_svfiprintf_r+0xda>
 800c628:	06d9      	lsls	r1, r3, #27
 800c62a:	bf44      	itt	mi
 800c62c:	2220      	movmi	r2, #32
 800c62e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c632:	071a      	lsls	r2, r3, #28
 800c634:	bf44      	itt	mi
 800c636:	222b      	movmi	r2, #43	; 0x2b
 800c638:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c63c:	782a      	ldrb	r2, [r5, #0]
 800c63e:	2a2a      	cmp	r2, #42	; 0x2a
 800c640:	d015      	beq.n	800c66e <_svfiprintf_r+0xea>
 800c642:	9a07      	ldr	r2, [sp, #28]
 800c644:	462f      	mov	r7, r5
 800c646:	2000      	movs	r0, #0
 800c648:	250a      	movs	r5, #10
 800c64a:	4639      	mov	r1, r7
 800c64c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c650:	3b30      	subs	r3, #48	; 0x30
 800c652:	2b09      	cmp	r3, #9
 800c654:	d94d      	bls.n	800c6f2 <_svfiprintf_r+0x16e>
 800c656:	b1b8      	cbz	r0, 800c688 <_svfiprintf_r+0x104>
 800c658:	e00f      	b.n	800c67a <_svfiprintf_r+0xf6>
 800c65a:	462f      	mov	r7, r5
 800c65c:	e7b8      	b.n	800c5d0 <_svfiprintf_r+0x4c>
 800c65e:	4a40      	ldr	r2, [pc, #256]	; (800c760 <_svfiprintf_r+0x1dc>)
 800c660:	1a80      	subs	r0, r0, r2
 800c662:	fa0b f000 	lsl.w	r0, fp, r0
 800c666:	4318      	orrs	r0, r3
 800c668:	9004      	str	r0, [sp, #16]
 800c66a:	463d      	mov	r5, r7
 800c66c:	e7d3      	b.n	800c616 <_svfiprintf_r+0x92>
 800c66e:	9a03      	ldr	r2, [sp, #12]
 800c670:	1d11      	adds	r1, r2, #4
 800c672:	6812      	ldr	r2, [r2, #0]
 800c674:	9103      	str	r1, [sp, #12]
 800c676:	2a00      	cmp	r2, #0
 800c678:	db01      	blt.n	800c67e <_svfiprintf_r+0xfa>
 800c67a:	9207      	str	r2, [sp, #28]
 800c67c:	e004      	b.n	800c688 <_svfiprintf_r+0x104>
 800c67e:	4252      	negs	r2, r2
 800c680:	f043 0302 	orr.w	r3, r3, #2
 800c684:	9207      	str	r2, [sp, #28]
 800c686:	9304      	str	r3, [sp, #16]
 800c688:	783b      	ldrb	r3, [r7, #0]
 800c68a:	2b2e      	cmp	r3, #46	; 0x2e
 800c68c:	d10c      	bne.n	800c6a8 <_svfiprintf_r+0x124>
 800c68e:	787b      	ldrb	r3, [r7, #1]
 800c690:	2b2a      	cmp	r3, #42	; 0x2a
 800c692:	d133      	bne.n	800c6fc <_svfiprintf_r+0x178>
 800c694:	9b03      	ldr	r3, [sp, #12]
 800c696:	1d1a      	adds	r2, r3, #4
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	9203      	str	r2, [sp, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	bfb8      	it	lt
 800c6a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6a4:	3702      	adds	r7, #2
 800c6a6:	9305      	str	r3, [sp, #20]
 800c6a8:	4d2e      	ldr	r5, [pc, #184]	; (800c764 <_svfiprintf_r+0x1e0>)
 800c6aa:	7839      	ldrb	r1, [r7, #0]
 800c6ac:	2203      	movs	r2, #3
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	f7f3 fd96 	bl	80001e0 <memchr>
 800c6b4:	b138      	cbz	r0, 800c6c6 <_svfiprintf_r+0x142>
 800c6b6:	2340      	movs	r3, #64	; 0x40
 800c6b8:	1b40      	subs	r0, r0, r5
 800c6ba:	fa03 f000 	lsl.w	r0, r3, r0
 800c6be:	9b04      	ldr	r3, [sp, #16]
 800c6c0:	4303      	orrs	r3, r0
 800c6c2:	3701      	adds	r7, #1
 800c6c4:	9304      	str	r3, [sp, #16]
 800c6c6:	7839      	ldrb	r1, [r7, #0]
 800c6c8:	4827      	ldr	r0, [pc, #156]	; (800c768 <_svfiprintf_r+0x1e4>)
 800c6ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6ce:	2206      	movs	r2, #6
 800c6d0:	1c7e      	adds	r6, r7, #1
 800c6d2:	f7f3 fd85 	bl	80001e0 <memchr>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d038      	beq.n	800c74c <_svfiprintf_r+0x1c8>
 800c6da:	4b24      	ldr	r3, [pc, #144]	; (800c76c <_svfiprintf_r+0x1e8>)
 800c6dc:	bb13      	cbnz	r3, 800c724 <_svfiprintf_r+0x1a0>
 800c6de:	9b03      	ldr	r3, [sp, #12]
 800c6e0:	3307      	adds	r3, #7
 800c6e2:	f023 0307 	bic.w	r3, r3, #7
 800c6e6:	3308      	adds	r3, #8
 800c6e8:	9303      	str	r3, [sp, #12]
 800c6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ec:	444b      	add	r3, r9
 800c6ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c6f0:	e76d      	b.n	800c5ce <_svfiprintf_r+0x4a>
 800c6f2:	fb05 3202 	mla	r2, r5, r2, r3
 800c6f6:	2001      	movs	r0, #1
 800c6f8:	460f      	mov	r7, r1
 800c6fa:	e7a6      	b.n	800c64a <_svfiprintf_r+0xc6>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	3701      	adds	r7, #1
 800c700:	9305      	str	r3, [sp, #20]
 800c702:	4619      	mov	r1, r3
 800c704:	250a      	movs	r5, #10
 800c706:	4638      	mov	r0, r7
 800c708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c70c:	3a30      	subs	r2, #48	; 0x30
 800c70e:	2a09      	cmp	r2, #9
 800c710:	d903      	bls.n	800c71a <_svfiprintf_r+0x196>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d0c8      	beq.n	800c6a8 <_svfiprintf_r+0x124>
 800c716:	9105      	str	r1, [sp, #20]
 800c718:	e7c6      	b.n	800c6a8 <_svfiprintf_r+0x124>
 800c71a:	fb05 2101 	mla	r1, r5, r1, r2
 800c71e:	2301      	movs	r3, #1
 800c720:	4607      	mov	r7, r0
 800c722:	e7f0      	b.n	800c706 <_svfiprintf_r+0x182>
 800c724:	ab03      	add	r3, sp, #12
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	4622      	mov	r2, r4
 800c72a:	4b11      	ldr	r3, [pc, #68]	; (800c770 <_svfiprintf_r+0x1ec>)
 800c72c:	a904      	add	r1, sp, #16
 800c72e:	4640      	mov	r0, r8
 800c730:	f3af 8000 	nop.w
 800c734:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c738:	4681      	mov	r9, r0
 800c73a:	d1d6      	bne.n	800c6ea <_svfiprintf_r+0x166>
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	065b      	lsls	r3, r3, #25
 800c740:	f53f af35 	bmi.w	800c5ae <_svfiprintf_r+0x2a>
 800c744:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c746:	b01d      	add	sp, #116	; 0x74
 800c748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74c:	ab03      	add	r3, sp, #12
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	4622      	mov	r2, r4
 800c752:	4b07      	ldr	r3, [pc, #28]	; (800c770 <_svfiprintf_r+0x1ec>)
 800c754:	a904      	add	r1, sp, #16
 800c756:	4640      	mov	r0, r8
 800c758:	f000 f882 	bl	800c860 <_printf_i>
 800c75c:	e7ea      	b.n	800c734 <_svfiprintf_r+0x1b0>
 800c75e:	bf00      	nop
 800c760:	0800d0ac 	.word	0x0800d0ac
 800c764:	0800d0b2 	.word	0x0800d0b2
 800c768:	0800d0b6 	.word	0x0800d0b6
 800c76c:	00000000 	.word	0x00000000
 800c770:	0800c4d1 	.word	0x0800c4d1

0800c774 <_printf_common>:
 800c774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c778:	4691      	mov	r9, r2
 800c77a:	461f      	mov	r7, r3
 800c77c:	688a      	ldr	r2, [r1, #8]
 800c77e:	690b      	ldr	r3, [r1, #16]
 800c780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c784:	4293      	cmp	r3, r2
 800c786:	bfb8      	it	lt
 800c788:	4613      	movlt	r3, r2
 800c78a:	f8c9 3000 	str.w	r3, [r9]
 800c78e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c792:	4606      	mov	r6, r0
 800c794:	460c      	mov	r4, r1
 800c796:	b112      	cbz	r2, 800c79e <_printf_common+0x2a>
 800c798:	3301      	adds	r3, #1
 800c79a:	f8c9 3000 	str.w	r3, [r9]
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	0699      	lsls	r1, r3, #26
 800c7a2:	bf42      	ittt	mi
 800c7a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c7a8:	3302      	addmi	r3, #2
 800c7aa:	f8c9 3000 	strmi.w	r3, [r9]
 800c7ae:	6825      	ldr	r5, [r4, #0]
 800c7b0:	f015 0506 	ands.w	r5, r5, #6
 800c7b4:	d107      	bne.n	800c7c6 <_printf_common+0x52>
 800c7b6:	f104 0a19 	add.w	sl, r4, #25
 800c7ba:	68e3      	ldr	r3, [r4, #12]
 800c7bc:	f8d9 2000 	ldr.w	r2, [r9]
 800c7c0:	1a9b      	subs	r3, r3, r2
 800c7c2:	42ab      	cmp	r3, r5
 800c7c4:	dc28      	bgt.n	800c818 <_printf_common+0xa4>
 800c7c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c7ca:	6822      	ldr	r2, [r4, #0]
 800c7cc:	3300      	adds	r3, #0
 800c7ce:	bf18      	it	ne
 800c7d0:	2301      	movne	r3, #1
 800c7d2:	0692      	lsls	r2, r2, #26
 800c7d4:	d42d      	bmi.n	800c832 <_printf_common+0xbe>
 800c7d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7da:	4639      	mov	r1, r7
 800c7dc:	4630      	mov	r0, r6
 800c7de:	47c0      	blx	r8
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	d020      	beq.n	800c826 <_printf_common+0xb2>
 800c7e4:	6823      	ldr	r3, [r4, #0]
 800c7e6:	68e5      	ldr	r5, [r4, #12]
 800c7e8:	f8d9 2000 	ldr.w	r2, [r9]
 800c7ec:	f003 0306 	and.w	r3, r3, #6
 800c7f0:	2b04      	cmp	r3, #4
 800c7f2:	bf08      	it	eq
 800c7f4:	1aad      	subeq	r5, r5, r2
 800c7f6:	68a3      	ldr	r3, [r4, #8]
 800c7f8:	6922      	ldr	r2, [r4, #16]
 800c7fa:	bf0c      	ite	eq
 800c7fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c800:	2500      	movne	r5, #0
 800c802:	4293      	cmp	r3, r2
 800c804:	bfc4      	itt	gt
 800c806:	1a9b      	subgt	r3, r3, r2
 800c808:	18ed      	addgt	r5, r5, r3
 800c80a:	f04f 0900 	mov.w	r9, #0
 800c80e:	341a      	adds	r4, #26
 800c810:	454d      	cmp	r5, r9
 800c812:	d11a      	bne.n	800c84a <_printf_common+0xd6>
 800c814:	2000      	movs	r0, #0
 800c816:	e008      	b.n	800c82a <_printf_common+0xb6>
 800c818:	2301      	movs	r3, #1
 800c81a:	4652      	mov	r2, sl
 800c81c:	4639      	mov	r1, r7
 800c81e:	4630      	mov	r0, r6
 800c820:	47c0      	blx	r8
 800c822:	3001      	adds	r0, #1
 800c824:	d103      	bne.n	800c82e <_printf_common+0xba>
 800c826:	f04f 30ff 	mov.w	r0, #4294967295
 800c82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c82e:	3501      	adds	r5, #1
 800c830:	e7c3      	b.n	800c7ba <_printf_common+0x46>
 800c832:	18e1      	adds	r1, r4, r3
 800c834:	1c5a      	adds	r2, r3, #1
 800c836:	2030      	movs	r0, #48	; 0x30
 800c838:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c83c:	4422      	add	r2, r4
 800c83e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c842:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c846:	3302      	adds	r3, #2
 800c848:	e7c5      	b.n	800c7d6 <_printf_common+0x62>
 800c84a:	2301      	movs	r3, #1
 800c84c:	4622      	mov	r2, r4
 800c84e:	4639      	mov	r1, r7
 800c850:	4630      	mov	r0, r6
 800c852:	47c0      	blx	r8
 800c854:	3001      	adds	r0, #1
 800c856:	d0e6      	beq.n	800c826 <_printf_common+0xb2>
 800c858:	f109 0901 	add.w	r9, r9, #1
 800c85c:	e7d8      	b.n	800c810 <_printf_common+0x9c>
	...

0800c860 <_printf_i>:
 800c860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c864:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c868:	460c      	mov	r4, r1
 800c86a:	7e09      	ldrb	r1, [r1, #24]
 800c86c:	b085      	sub	sp, #20
 800c86e:	296e      	cmp	r1, #110	; 0x6e
 800c870:	4617      	mov	r7, r2
 800c872:	4606      	mov	r6, r0
 800c874:	4698      	mov	r8, r3
 800c876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c878:	f000 80b3 	beq.w	800c9e2 <_printf_i+0x182>
 800c87c:	d822      	bhi.n	800c8c4 <_printf_i+0x64>
 800c87e:	2963      	cmp	r1, #99	; 0x63
 800c880:	d036      	beq.n	800c8f0 <_printf_i+0x90>
 800c882:	d80a      	bhi.n	800c89a <_printf_i+0x3a>
 800c884:	2900      	cmp	r1, #0
 800c886:	f000 80b9 	beq.w	800c9fc <_printf_i+0x19c>
 800c88a:	2958      	cmp	r1, #88	; 0x58
 800c88c:	f000 8083 	beq.w	800c996 <_printf_i+0x136>
 800c890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c894:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c898:	e032      	b.n	800c900 <_printf_i+0xa0>
 800c89a:	2964      	cmp	r1, #100	; 0x64
 800c89c:	d001      	beq.n	800c8a2 <_printf_i+0x42>
 800c89e:	2969      	cmp	r1, #105	; 0x69
 800c8a0:	d1f6      	bne.n	800c890 <_printf_i+0x30>
 800c8a2:	6820      	ldr	r0, [r4, #0]
 800c8a4:	6813      	ldr	r3, [r2, #0]
 800c8a6:	0605      	lsls	r5, r0, #24
 800c8a8:	f103 0104 	add.w	r1, r3, #4
 800c8ac:	d52a      	bpl.n	800c904 <_printf_i+0xa4>
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6011      	str	r1, [r2, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	da03      	bge.n	800c8be <_printf_i+0x5e>
 800c8b6:	222d      	movs	r2, #45	; 0x2d
 800c8b8:	425b      	negs	r3, r3
 800c8ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c8be:	486f      	ldr	r0, [pc, #444]	; (800ca7c <_printf_i+0x21c>)
 800c8c0:	220a      	movs	r2, #10
 800c8c2:	e039      	b.n	800c938 <_printf_i+0xd8>
 800c8c4:	2973      	cmp	r1, #115	; 0x73
 800c8c6:	f000 809d 	beq.w	800ca04 <_printf_i+0x1a4>
 800c8ca:	d808      	bhi.n	800c8de <_printf_i+0x7e>
 800c8cc:	296f      	cmp	r1, #111	; 0x6f
 800c8ce:	d020      	beq.n	800c912 <_printf_i+0xb2>
 800c8d0:	2970      	cmp	r1, #112	; 0x70
 800c8d2:	d1dd      	bne.n	800c890 <_printf_i+0x30>
 800c8d4:	6823      	ldr	r3, [r4, #0]
 800c8d6:	f043 0320 	orr.w	r3, r3, #32
 800c8da:	6023      	str	r3, [r4, #0]
 800c8dc:	e003      	b.n	800c8e6 <_printf_i+0x86>
 800c8de:	2975      	cmp	r1, #117	; 0x75
 800c8e0:	d017      	beq.n	800c912 <_printf_i+0xb2>
 800c8e2:	2978      	cmp	r1, #120	; 0x78
 800c8e4:	d1d4      	bne.n	800c890 <_printf_i+0x30>
 800c8e6:	2378      	movs	r3, #120	; 0x78
 800c8e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8ec:	4864      	ldr	r0, [pc, #400]	; (800ca80 <_printf_i+0x220>)
 800c8ee:	e055      	b.n	800c99c <_printf_i+0x13c>
 800c8f0:	6813      	ldr	r3, [r2, #0]
 800c8f2:	1d19      	adds	r1, r3, #4
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6011      	str	r1, [r2, #0]
 800c8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c900:	2301      	movs	r3, #1
 800c902:	e08c      	b.n	800ca1e <_printf_i+0x1be>
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6011      	str	r1, [r2, #0]
 800c908:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c90c:	bf18      	it	ne
 800c90e:	b21b      	sxthne	r3, r3
 800c910:	e7cf      	b.n	800c8b2 <_printf_i+0x52>
 800c912:	6813      	ldr	r3, [r2, #0]
 800c914:	6825      	ldr	r5, [r4, #0]
 800c916:	1d18      	adds	r0, r3, #4
 800c918:	6010      	str	r0, [r2, #0]
 800c91a:	0628      	lsls	r0, r5, #24
 800c91c:	d501      	bpl.n	800c922 <_printf_i+0xc2>
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	e002      	b.n	800c928 <_printf_i+0xc8>
 800c922:	0668      	lsls	r0, r5, #25
 800c924:	d5fb      	bpl.n	800c91e <_printf_i+0xbe>
 800c926:	881b      	ldrh	r3, [r3, #0]
 800c928:	4854      	ldr	r0, [pc, #336]	; (800ca7c <_printf_i+0x21c>)
 800c92a:	296f      	cmp	r1, #111	; 0x6f
 800c92c:	bf14      	ite	ne
 800c92e:	220a      	movne	r2, #10
 800c930:	2208      	moveq	r2, #8
 800c932:	2100      	movs	r1, #0
 800c934:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c938:	6865      	ldr	r5, [r4, #4]
 800c93a:	60a5      	str	r5, [r4, #8]
 800c93c:	2d00      	cmp	r5, #0
 800c93e:	f2c0 8095 	blt.w	800ca6c <_printf_i+0x20c>
 800c942:	6821      	ldr	r1, [r4, #0]
 800c944:	f021 0104 	bic.w	r1, r1, #4
 800c948:	6021      	str	r1, [r4, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d13d      	bne.n	800c9ca <_printf_i+0x16a>
 800c94e:	2d00      	cmp	r5, #0
 800c950:	f040 808e 	bne.w	800ca70 <_printf_i+0x210>
 800c954:	4665      	mov	r5, ip
 800c956:	2a08      	cmp	r2, #8
 800c958:	d10b      	bne.n	800c972 <_printf_i+0x112>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	07db      	lsls	r3, r3, #31
 800c95e:	d508      	bpl.n	800c972 <_printf_i+0x112>
 800c960:	6923      	ldr	r3, [r4, #16]
 800c962:	6862      	ldr	r2, [r4, #4]
 800c964:	429a      	cmp	r2, r3
 800c966:	bfde      	ittt	le
 800c968:	2330      	movle	r3, #48	; 0x30
 800c96a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c96e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c972:	ebac 0305 	sub.w	r3, ip, r5
 800c976:	6123      	str	r3, [r4, #16]
 800c978:	f8cd 8000 	str.w	r8, [sp]
 800c97c:	463b      	mov	r3, r7
 800c97e:	aa03      	add	r2, sp, #12
 800c980:	4621      	mov	r1, r4
 800c982:	4630      	mov	r0, r6
 800c984:	f7ff fef6 	bl	800c774 <_printf_common>
 800c988:	3001      	adds	r0, #1
 800c98a:	d14d      	bne.n	800ca28 <_printf_i+0x1c8>
 800c98c:	f04f 30ff 	mov.w	r0, #4294967295
 800c990:	b005      	add	sp, #20
 800c992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c996:	4839      	ldr	r0, [pc, #228]	; (800ca7c <_printf_i+0x21c>)
 800c998:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c99c:	6813      	ldr	r3, [r2, #0]
 800c99e:	6821      	ldr	r1, [r4, #0]
 800c9a0:	1d1d      	adds	r5, r3, #4
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	6015      	str	r5, [r2, #0]
 800c9a6:	060a      	lsls	r2, r1, #24
 800c9a8:	d50b      	bpl.n	800c9c2 <_printf_i+0x162>
 800c9aa:	07ca      	lsls	r2, r1, #31
 800c9ac:	bf44      	itt	mi
 800c9ae:	f041 0120 	orrmi.w	r1, r1, #32
 800c9b2:	6021      	strmi	r1, [r4, #0]
 800c9b4:	b91b      	cbnz	r3, 800c9be <_printf_i+0x15e>
 800c9b6:	6822      	ldr	r2, [r4, #0]
 800c9b8:	f022 0220 	bic.w	r2, r2, #32
 800c9bc:	6022      	str	r2, [r4, #0]
 800c9be:	2210      	movs	r2, #16
 800c9c0:	e7b7      	b.n	800c932 <_printf_i+0xd2>
 800c9c2:	064d      	lsls	r5, r1, #25
 800c9c4:	bf48      	it	mi
 800c9c6:	b29b      	uxthmi	r3, r3
 800c9c8:	e7ef      	b.n	800c9aa <_printf_i+0x14a>
 800c9ca:	4665      	mov	r5, ip
 800c9cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9d0:	fb02 3311 	mls	r3, r2, r1, r3
 800c9d4:	5cc3      	ldrb	r3, [r0, r3]
 800c9d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c9da:	460b      	mov	r3, r1
 800c9dc:	2900      	cmp	r1, #0
 800c9de:	d1f5      	bne.n	800c9cc <_printf_i+0x16c>
 800c9e0:	e7b9      	b.n	800c956 <_printf_i+0xf6>
 800c9e2:	6813      	ldr	r3, [r2, #0]
 800c9e4:	6825      	ldr	r5, [r4, #0]
 800c9e6:	6961      	ldr	r1, [r4, #20]
 800c9e8:	1d18      	adds	r0, r3, #4
 800c9ea:	6010      	str	r0, [r2, #0]
 800c9ec:	0628      	lsls	r0, r5, #24
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	d501      	bpl.n	800c9f6 <_printf_i+0x196>
 800c9f2:	6019      	str	r1, [r3, #0]
 800c9f4:	e002      	b.n	800c9fc <_printf_i+0x19c>
 800c9f6:	066a      	lsls	r2, r5, #25
 800c9f8:	d5fb      	bpl.n	800c9f2 <_printf_i+0x192>
 800c9fa:	8019      	strh	r1, [r3, #0]
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	6123      	str	r3, [r4, #16]
 800ca00:	4665      	mov	r5, ip
 800ca02:	e7b9      	b.n	800c978 <_printf_i+0x118>
 800ca04:	6813      	ldr	r3, [r2, #0]
 800ca06:	1d19      	adds	r1, r3, #4
 800ca08:	6011      	str	r1, [r2, #0]
 800ca0a:	681d      	ldr	r5, [r3, #0]
 800ca0c:	6862      	ldr	r2, [r4, #4]
 800ca0e:	2100      	movs	r1, #0
 800ca10:	4628      	mov	r0, r5
 800ca12:	f7f3 fbe5 	bl	80001e0 <memchr>
 800ca16:	b108      	cbz	r0, 800ca1c <_printf_i+0x1bc>
 800ca18:	1b40      	subs	r0, r0, r5
 800ca1a:	6060      	str	r0, [r4, #4]
 800ca1c:	6863      	ldr	r3, [r4, #4]
 800ca1e:	6123      	str	r3, [r4, #16]
 800ca20:	2300      	movs	r3, #0
 800ca22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca26:	e7a7      	b.n	800c978 <_printf_i+0x118>
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	462a      	mov	r2, r5
 800ca2c:	4639      	mov	r1, r7
 800ca2e:	4630      	mov	r0, r6
 800ca30:	47c0      	blx	r8
 800ca32:	3001      	adds	r0, #1
 800ca34:	d0aa      	beq.n	800c98c <_printf_i+0x12c>
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	079b      	lsls	r3, r3, #30
 800ca3a:	d413      	bmi.n	800ca64 <_printf_i+0x204>
 800ca3c:	68e0      	ldr	r0, [r4, #12]
 800ca3e:	9b03      	ldr	r3, [sp, #12]
 800ca40:	4298      	cmp	r0, r3
 800ca42:	bfb8      	it	lt
 800ca44:	4618      	movlt	r0, r3
 800ca46:	e7a3      	b.n	800c990 <_printf_i+0x130>
 800ca48:	2301      	movs	r3, #1
 800ca4a:	464a      	mov	r2, r9
 800ca4c:	4639      	mov	r1, r7
 800ca4e:	4630      	mov	r0, r6
 800ca50:	47c0      	blx	r8
 800ca52:	3001      	adds	r0, #1
 800ca54:	d09a      	beq.n	800c98c <_printf_i+0x12c>
 800ca56:	3501      	adds	r5, #1
 800ca58:	68e3      	ldr	r3, [r4, #12]
 800ca5a:	9a03      	ldr	r2, [sp, #12]
 800ca5c:	1a9b      	subs	r3, r3, r2
 800ca5e:	42ab      	cmp	r3, r5
 800ca60:	dcf2      	bgt.n	800ca48 <_printf_i+0x1e8>
 800ca62:	e7eb      	b.n	800ca3c <_printf_i+0x1dc>
 800ca64:	2500      	movs	r5, #0
 800ca66:	f104 0919 	add.w	r9, r4, #25
 800ca6a:	e7f5      	b.n	800ca58 <_printf_i+0x1f8>
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1ac      	bne.n	800c9ca <_printf_i+0x16a>
 800ca70:	7803      	ldrb	r3, [r0, #0]
 800ca72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca7a:	e76c      	b.n	800c956 <_printf_i+0xf6>
 800ca7c:	0800d0bd 	.word	0x0800d0bd
 800ca80:	0800d0ce 	.word	0x0800d0ce

0800ca84 <_sbrk_r>:
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	4c06      	ldr	r4, [pc, #24]	; (800caa0 <_sbrk_r+0x1c>)
 800ca88:	2300      	movs	r3, #0
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	4608      	mov	r0, r1
 800ca8e:	6023      	str	r3, [r4, #0]
 800ca90:	f7f5 fc9a 	bl	80023c8 <_sbrk>
 800ca94:	1c43      	adds	r3, r0, #1
 800ca96:	d102      	bne.n	800ca9e <_sbrk_r+0x1a>
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	b103      	cbz	r3, 800ca9e <_sbrk_r+0x1a>
 800ca9c:	602b      	str	r3, [r5, #0]
 800ca9e:	bd38      	pop	{r3, r4, r5, pc}
 800caa0:	2000b0c0 	.word	0x2000b0c0

0800caa4 <__sread>:
 800caa4:	b510      	push	{r4, lr}
 800caa6:	460c      	mov	r4, r1
 800caa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caac:	f000 f8d6 	bl	800cc5c <_read_r>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	bfab      	itete	ge
 800cab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cab6:	89a3      	ldrhlt	r3, [r4, #12]
 800cab8:	181b      	addge	r3, r3, r0
 800caba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cabe:	bfac      	ite	ge
 800cac0:	6563      	strge	r3, [r4, #84]	; 0x54
 800cac2:	81a3      	strhlt	r3, [r4, #12]
 800cac4:	bd10      	pop	{r4, pc}

0800cac6 <__swrite>:
 800cac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caca:	461f      	mov	r7, r3
 800cacc:	898b      	ldrh	r3, [r1, #12]
 800cace:	05db      	lsls	r3, r3, #23
 800cad0:	4605      	mov	r5, r0
 800cad2:	460c      	mov	r4, r1
 800cad4:	4616      	mov	r6, r2
 800cad6:	d505      	bpl.n	800cae4 <__swrite+0x1e>
 800cad8:	2302      	movs	r3, #2
 800cada:	2200      	movs	r2, #0
 800cadc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cae0:	f000 f868 	bl	800cbb4 <_lseek_r>
 800cae4:	89a3      	ldrh	r3, [r4, #12]
 800cae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800caee:	81a3      	strh	r3, [r4, #12]
 800caf0:	4632      	mov	r2, r6
 800caf2:	463b      	mov	r3, r7
 800caf4:	4628      	mov	r0, r5
 800caf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cafa:	f000 b817 	b.w	800cb2c <_write_r>

0800cafe <__sseek>:
 800cafe:	b510      	push	{r4, lr}
 800cb00:	460c      	mov	r4, r1
 800cb02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb06:	f000 f855 	bl	800cbb4 <_lseek_r>
 800cb0a:	1c43      	adds	r3, r0, #1
 800cb0c:	89a3      	ldrh	r3, [r4, #12]
 800cb0e:	bf15      	itete	ne
 800cb10:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb1a:	81a3      	strheq	r3, [r4, #12]
 800cb1c:	bf18      	it	ne
 800cb1e:	81a3      	strhne	r3, [r4, #12]
 800cb20:	bd10      	pop	{r4, pc}

0800cb22 <__sclose>:
 800cb22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb26:	f000 b813 	b.w	800cb50 <_close_r>
	...

0800cb2c <_write_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4c07      	ldr	r4, [pc, #28]	; (800cb4c <_write_r+0x20>)
 800cb30:	4605      	mov	r5, r0
 800cb32:	4608      	mov	r0, r1
 800cb34:	4611      	mov	r1, r2
 800cb36:	2200      	movs	r2, #0
 800cb38:	6022      	str	r2, [r4, #0]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	f7f5 fbf3 	bl	8002326 <_write>
 800cb40:	1c43      	adds	r3, r0, #1
 800cb42:	d102      	bne.n	800cb4a <_write_r+0x1e>
 800cb44:	6823      	ldr	r3, [r4, #0]
 800cb46:	b103      	cbz	r3, 800cb4a <_write_r+0x1e>
 800cb48:	602b      	str	r3, [r5, #0]
 800cb4a:	bd38      	pop	{r3, r4, r5, pc}
 800cb4c:	2000b0c0 	.word	0x2000b0c0

0800cb50 <_close_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	4c06      	ldr	r4, [pc, #24]	; (800cb6c <_close_r+0x1c>)
 800cb54:	2300      	movs	r3, #0
 800cb56:	4605      	mov	r5, r0
 800cb58:	4608      	mov	r0, r1
 800cb5a:	6023      	str	r3, [r4, #0]
 800cb5c:	f7f5 fbff 	bl	800235e <_close>
 800cb60:	1c43      	adds	r3, r0, #1
 800cb62:	d102      	bne.n	800cb6a <_close_r+0x1a>
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	b103      	cbz	r3, 800cb6a <_close_r+0x1a>
 800cb68:	602b      	str	r3, [r5, #0]
 800cb6a:	bd38      	pop	{r3, r4, r5, pc}
 800cb6c:	2000b0c0 	.word	0x2000b0c0

0800cb70 <_fstat_r>:
 800cb70:	b538      	push	{r3, r4, r5, lr}
 800cb72:	4c07      	ldr	r4, [pc, #28]	; (800cb90 <_fstat_r+0x20>)
 800cb74:	2300      	movs	r3, #0
 800cb76:	4605      	mov	r5, r0
 800cb78:	4608      	mov	r0, r1
 800cb7a:	4611      	mov	r1, r2
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	f7f5 fbfa 	bl	8002376 <_fstat>
 800cb82:	1c43      	adds	r3, r0, #1
 800cb84:	d102      	bne.n	800cb8c <_fstat_r+0x1c>
 800cb86:	6823      	ldr	r3, [r4, #0]
 800cb88:	b103      	cbz	r3, 800cb8c <_fstat_r+0x1c>
 800cb8a:	602b      	str	r3, [r5, #0]
 800cb8c:	bd38      	pop	{r3, r4, r5, pc}
 800cb8e:	bf00      	nop
 800cb90:	2000b0c0 	.word	0x2000b0c0

0800cb94 <_isatty_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	4c06      	ldr	r4, [pc, #24]	; (800cbb0 <_isatty_r+0x1c>)
 800cb98:	2300      	movs	r3, #0
 800cb9a:	4605      	mov	r5, r0
 800cb9c:	4608      	mov	r0, r1
 800cb9e:	6023      	str	r3, [r4, #0]
 800cba0:	f7f5 fbf9 	bl	8002396 <_isatty>
 800cba4:	1c43      	adds	r3, r0, #1
 800cba6:	d102      	bne.n	800cbae <_isatty_r+0x1a>
 800cba8:	6823      	ldr	r3, [r4, #0]
 800cbaa:	b103      	cbz	r3, 800cbae <_isatty_r+0x1a>
 800cbac:	602b      	str	r3, [r5, #0]
 800cbae:	bd38      	pop	{r3, r4, r5, pc}
 800cbb0:	2000b0c0 	.word	0x2000b0c0

0800cbb4 <_lseek_r>:
 800cbb4:	b538      	push	{r3, r4, r5, lr}
 800cbb6:	4c07      	ldr	r4, [pc, #28]	; (800cbd4 <_lseek_r+0x20>)
 800cbb8:	4605      	mov	r5, r0
 800cbba:	4608      	mov	r0, r1
 800cbbc:	4611      	mov	r1, r2
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	6022      	str	r2, [r4, #0]
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	f7f5 fbf2 	bl	80023ac <_lseek>
 800cbc8:	1c43      	adds	r3, r0, #1
 800cbca:	d102      	bne.n	800cbd2 <_lseek_r+0x1e>
 800cbcc:	6823      	ldr	r3, [r4, #0]
 800cbce:	b103      	cbz	r3, 800cbd2 <_lseek_r+0x1e>
 800cbd0:	602b      	str	r3, [r5, #0]
 800cbd2:	bd38      	pop	{r3, r4, r5, pc}
 800cbd4:	2000b0c0 	.word	0x2000b0c0

0800cbd8 <memmove>:
 800cbd8:	4288      	cmp	r0, r1
 800cbda:	b510      	push	{r4, lr}
 800cbdc:	eb01 0302 	add.w	r3, r1, r2
 800cbe0:	d807      	bhi.n	800cbf2 <memmove+0x1a>
 800cbe2:	1e42      	subs	r2, r0, #1
 800cbe4:	4299      	cmp	r1, r3
 800cbe6:	d00a      	beq.n	800cbfe <memmove+0x26>
 800cbe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbec:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cbf0:	e7f8      	b.n	800cbe4 <memmove+0xc>
 800cbf2:	4283      	cmp	r3, r0
 800cbf4:	d9f5      	bls.n	800cbe2 <memmove+0xa>
 800cbf6:	1881      	adds	r1, r0, r2
 800cbf8:	1ad2      	subs	r2, r2, r3
 800cbfa:	42d3      	cmn	r3, r2
 800cbfc:	d100      	bne.n	800cc00 <memmove+0x28>
 800cbfe:	bd10      	pop	{r4, pc}
 800cc00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc04:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cc08:	e7f7      	b.n	800cbfa <memmove+0x22>

0800cc0a <__malloc_lock>:
 800cc0a:	4770      	bx	lr

0800cc0c <__malloc_unlock>:
 800cc0c:	4770      	bx	lr

0800cc0e <_realloc_r>:
 800cc0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc10:	4607      	mov	r7, r0
 800cc12:	4614      	mov	r4, r2
 800cc14:	460e      	mov	r6, r1
 800cc16:	b921      	cbnz	r1, 800cc22 <_realloc_r+0x14>
 800cc18:	4611      	mov	r1, r2
 800cc1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc1e:	f7ff bbfd 	b.w	800c41c <_malloc_r>
 800cc22:	b922      	cbnz	r2, 800cc2e <_realloc_r+0x20>
 800cc24:	f7ff fbac 	bl	800c380 <_free_r>
 800cc28:	4625      	mov	r5, r4
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc2e:	f000 f827 	bl	800cc80 <_malloc_usable_size_r>
 800cc32:	42a0      	cmp	r0, r4
 800cc34:	d20f      	bcs.n	800cc56 <_realloc_r+0x48>
 800cc36:	4621      	mov	r1, r4
 800cc38:	4638      	mov	r0, r7
 800cc3a:	f7ff fbef 	bl	800c41c <_malloc_r>
 800cc3e:	4605      	mov	r5, r0
 800cc40:	2800      	cmp	r0, #0
 800cc42:	d0f2      	beq.n	800cc2a <_realloc_r+0x1c>
 800cc44:	4631      	mov	r1, r6
 800cc46:	4622      	mov	r2, r4
 800cc48:	f7ff f864 	bl	800bd14 <memcpy>
 800cc4c:	4631      	mov	r1, r6
 800cc4e:	4638      	mov	r0, r7
 800cc50:	f7ff fb96 	bl	800c380 <_free_r>
 800cc54:	e7e9      	b.n	800cc2a <_realloc_r+0x1c>
 800cc56:	4635      	mov	r5, r6
 800cc58:	e7e7      	b.n	800cc2a <_realloc_r+0x1c>
	...

0800cc5c <_read_r>:
 800cc5c:	b538      	push	{r3, r4, r5, lr}
 800cc5e:	4c07      	ldr	r4, [pc, #28]	; (800cc7c <_read_r+0x20>)
 800cc60:	4605      	mov	r5, r0
 800cc62:	4608      	mov	r0, r1
 800cc64:	4611      	mov	r1, r2
 800cc66:	2200      	movs	r2, #0
 800cc68:	6022      	str	r2, [r4, #0]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	f7f5 fb3e 	bl	80022ec <_read>
 800cc70:	1c43      	adds	r3, r0, #1
 800cc72:	d102      	bne.n	800cc7a <_read_r+0x1e>
 800cc74:	6823      	ldr	r3, [r4, #0]
 800cc76:	b103      	cbz	r3, 800cc7a <_read_r+0x1e>
 800cc78:	602b      	str	r3, [r5, #0]
 800cc7a:	bd38      	pop	{r3, r4, r5, pc}
 800cc7c:	2000b0c0 	.word	0x2000b0c0

0800cc80 <_malloc_usable_size_r>:
 800cc80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc84:	1f18      	subs	r0, r3, #4
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	bfbc      	itt	lt
 800cc8a:	580b      	ldrlt	r3, [r1, r0]
 800cc8c:	18c0      	addlt	r0, r0, r3
 800cc8e:	4770      	bx	lr

0800cc90 <_init>:
 800cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc92:	bf00      	nop
 800cc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc96:	bc08      	pop	{r3}
 800cc98:	469e      	mov	lr, r3
 800cc9a:	4770      	bx	lr

0800cc9c <_fini>:
 800cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9e:	bf00      	nop
 800cca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cca2:	bc08      	pop	{r3}
 800cca4:	469e      	mov	lr, r3
 800cca6:	4770      	bx	lr
