
Cygnini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003628  08000190  08000190  00010190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f8  080039f8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080039f8  080039f8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039f8  080039f8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000008  08003a10  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003a10  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac13  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003618  00000000  00000000  0003ac4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  0003e268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d90  00000000  00000000  0003f168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007c1b  00000000  00000000  0003fef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005bfe  00000000  00000000  00047b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004d711  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003aec  00000000  00000000  0004d790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037a0 	.word	0x080037a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	080037a0 	.word	0x080037a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <c12832_assign_SPI>:
//static GPIO_InitTypeDef c12832_backlight_pin_Struct = 	{GPIO_PIN_5,GPIO_MODE_IT_FALLING,GPIO_NOPULL,GPIO_SPEED_FREQ_LOW,};




void c12832_assign_SPI(SPI_HandleTypeDef *hspix){
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	c12832_SpiHandle = hspix;
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <c12832_assign_SPI+0x1c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	6013      	str	r3, [r2, #0]
}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000024 	.word	0x20000024

08000200 <hal_spi_write_read>:


int hal_spi_write_read (uint8_t *tx_data, uint8_t *rx_data, uint16_t lenght) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	4613      	mov	r3, r2
 800020c:	80fb      	strh	r3, [r7, #6]

	//if (HAL_SPI_Transmit (&hspi1, tx_data, 1, 200) != HAL_OK)
	//	DEBUG_MESSAGE_AND_EXIT_FAILURE

	HAL_SPI_Transmit (c12832_SpiHandle, tx_data, 1, 200);
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <hal_spi_write_read+0x28>)
 8000210:	6818      	ldr	r0, [r3, #0]
 8000212:	23c8      	movs	r3, #200	; 0xc8
 8000214:	2201      	movs	r2, #1
 8000216:	68f9      	ldr	r1, [r7, #12]
 8000218:	f001 ff30 	bl	800207c <HAL_SPI_Transmit>
	return EXIT_SUCCESS;
 800021c:	2300      	movs	r3, #0

}
 800021e:	4618      	mov	r0, r3
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000024 	.word	0x20000024

0800022c <graphic_lcd_clear_screen>:
#include "font.h"

/* Application */
//#include "../microcontroller_board/microcontroller_board.h"

int graphic_lcd_clear_screen(void) {
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
	
	int i, j;
	
	for (i=0; i<LINE_COUNT; i++) {
 8000232:	2300      	movs	r3, #0
 8000234:	607b      	str	r3, [r7, #4]
 8000236:	e019      	b.n	800026c <graphic_lcd_clear_screen+0x40>
		st7565r_set_page_address(i);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f8c5 	bl	80003cc <st7565r_set_page_address>
		st7565r_set_column_address(0);
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8d6 	bl	80003f4 <st7565r_set_column_address>
		st7565r_set_display_start_line_address(0);
 8000248:	2000      	movs	r0, #0
 800024a:	f000 f8f0 	bl	800042e <st7565r_set_display_start_line_address>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 800024e:	2300      	movs	r3, #0
 8000250:	603b      	str	r3, [r7, #0]
 8000252:	e005      	b.n	8000260 <graphic_lcd_clear_screen+0x34>
			st7565r_write_data(0);
 8000254:	2000      	movs	r0, #0
 8000256:	f000 f87d 	bl	8000354 <st7565r_write_data>
		for (j=0; j<LINE_PIXEL_LENGHT + FONT_SIZE; j++)
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	3301      	adds	r3, #1
 800025e:	603b      	str	r3, [r7, #0]
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	2b84      	cmp	r3, #132	; 0x84
 8000264:	ddf6      	ble.n	8000254 <graphic_lcd_clear_screen+0x28>
	for (i=0; i<LINE_COUNT; i++) {
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	3301      	adds	r3, #1
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b03      	cmp	r3, #3
 8000270:	dde2      	ble.n	8000238 <graphic_lcd_clear_screen+0xc>
	}
	
	return EXIT_SUCCESS;
 8000272:	2300      	movs	r3, #0
}
 8000274:	4618      	mov	r0, r3
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <graphic_lcd_write>:

int graphic_lcd_write(int line, int offset, char *text) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]

	int i, j;
	
	st7565r_set_page_address(line);
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	4618      	mov	r0, r3
 800028e:	f000 f89d 	bl	80003cc <st7565r_set_page_address>
	st7565r_set_column_address(offset + FONT_SIZE);
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	3305      	adds	r3, #5
 8000298:	b2db      	uxtb	r3, r3
 800029a:	4618      	mov	r0, r3
 800029c:	f000 f8aa 	bl	80003f4 <st7565r_set_column_address>
	
	for (i=0; i<strlen(text); i++) {
 80002a0:	2300      	movs	r3, #0
 80002a2:	617b      	str	r3, [r7, #20]
 80002a4:	e01e      	b.n	80002e4 <graphic_lcd_write+0x68>
	
		for (j=0; j<FONT_SIZE; j++) {
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
 80002aa:	e012      	b.n	80002d2 <graphic_lcd_write+0x56>
			st7565r_write_data(font_5x8_table[(((text[i] - ASCII_FONT_FIRST) * FONT_SIZE) + j)]);
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	4413      	add	r3, r2
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	f1a3 0220 	sub.w	r2, r3, #32
 80002b8:	4613      	mov	r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	441a      	add	r2, r3
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	4413      	add	r3, r2
 80002c2:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <graphic_lcd_write+0x80>)
 80002c4:	5cd3      	ldrb	r3, [r2, r3]
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f844 	bl	8000354 <st7565r_write_data>
		for (j=0; j<FONT_SIZE; j++) {
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	3301      	adds	r3, #1
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	2b04      	cmp	r3, #4
 80002d6:	dde9      	ble.n	80002ac <graphic_lcd_write+0x30>
		}
		st7565r_write_data(0);
 80002d8:	2000      	movs	r0, #0
 80002da:	f000 f83b 	bl	8000354 <st7565r_write_data>
	for (i=0; i<strlen(text); i++) {
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	3301      	adds	r3, #1
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	6878      	ldr	r0, [r7, #4]
 80002e6:	f7ff ff73 	bl	80001d0 <strlen>
 80002ea:	4602      	mov	r2, r0
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d8d9      	bhi.n	80002a6 <graphic_lcd_write+0x2a>
	}
		
	return EXIT_SUCCESS;
 80002f2:	2300      	movs	r3, #0
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3718      	adds	r7, #24
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	080037ec 	.word	0x080037ec

08000300 <graphic_lcd_initialize>:

int graphic_lcd_initialize (void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	
	return st7565r_init ();
 8000304:	f000 f8d6 	bl	80004b4 <st7565r_init>
 8000308:	4603      	mov	r3, r0
	
}
 800030a:	4618      	mov	r0, r3
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <st7565r_write_command>:
#include "c12832_port.h"
//#include "../microcontroller_board/microcontroller_board.h"

#define HUNDRED_MILLISECONDS  	(10 / portTICK_PERIOD_MS)

void st7565r_write_command(uint8_t command) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 800031a:	2200      	movs	r2, #0
 800031c:	2104      	movs	r1, #4
 800031e:	480c      	ldr	r0, [pc, #48]	; (8000350 <st7565r_write_command+0x40>)
 8000320:	f000 fbae 	bl	8000a80 <HAL_GPIO_WritePin>
        DISPLAY_A0_LOW;
 8000324:	2200      	movs	r2, #0
 8000326:	2101      	movs	r1, #1
 8000328:	4809      	ldr	r0, [pc, #36]	; (8000350 <st7565r_write_command+0x40>)
 800032a:	f000 fba9 	bl	8000a80 <HAL_GPIO_WritePin>
        hal_spi_write_read (&command, &tmp, 1);
 800032e:	f107 010f 	add.w	r1, r7, #15
 8000332:	1dfb      	adds	r3, r7, #7
 8000334:	2201      	movs	r2, #1
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ff62 	bl	8000200 <hal_spi_write_read>
        DISPLAY_CHIP_SELECT_HIGH;
 800033c:	2201      	movs	r2, #1
 800033e:	2104      	movs	r1, #4
 8000340:	4803      	ldr	r0, [pc, #12]	; (8000350 <st7565r_write_command+0x40>)
 8000342:	f000 fb9d 	bl	8000a80 <HAL_GPIO_WritePin>
}
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	48000800 	.word	0x48000800

08000354 <st7565r_write_data>:

void st7565r_write_data(uint8_t data) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	71fb      	strb	r3, [r7, #7]
	
		uint8_t tmp;

        DISPLAY_CHIP_SELECT_LOW;
 800035e:	2200      	movs	r2, #0
 8000360:	2104      	movs	r1, #4
 8000362:	480e      	ldr	r0, [pc, #56]	; (800039c <st7565r_write_data+0x48>)
 8000364:	f000 fb8c 	bl	8000a80 <HAL_GPIO_WritePin>
        DISPLAY_A0_HIGH;
 8000368:	2201      	movs	r2, #1
 800036a:	2101      	movs	r1, #1
 800036c:	480b      	ldr	r0, [pc, #44]	; (800039c <st7565r_write_data+0x48>)
 800036e:	f000 fb87 	bl	8000a80 <HAL_GPIO_WritePin>
        hal_spi_write_read (&data, &tmp, 1);
 8000372:	f107 010f 	add.w	r1, r7, #15
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	2201      	movs	r2, #1
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff40 	bl	8000200 <hal_spi_write_read>
        DISPLAY_A0_LOW;
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	4805      	ldr	r0, [pc, #20]	; (800039c <st7565r_write_data+0x48>)
 8000386:	f000 fb7b 	bl	8000a80 <HAL_GPIO_WritePin>
        DISPLAY_CHIP_SELECT_HIGH;
 800038a:	2201      	movs	r2, #1
 800038c:	2104      	movs	r1, #4
 800038e:	4803      	ldr	r0, [pc, #12]	; (800039c <st7565r_write_data+0x48>)
 8000390:	f000 fb76 	bl	8000a80 <HAL_GPIO_WritePin>
}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	48000800 	.word	0x48000800

080003a0 <st7565r_hard_reset>:
 *
 * This functions will reset the LCD controller by setting the reset pin low.
 * \note this funtions should not be confused with the \ref st7565r_soft_reset()
 * function, this command will control the RST pin.
 */
void st7565r_hard_reset(void) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	
        DISPLAY_RESET_LOW;
 80003a4:	2200      	movs	r2, #0
 80003a6:	2108      	movs	r1, #8
 80003a8:	4807      	ldr	r0, [pc, #28]	; (80003c8 <st7565r_hard_reset+0x28>)
 80003aa:	f000 fb69 	bl	8000a80 <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 80003ae:	200a      	movs	r0, #10
 80003b0:	f002 fa16 	bl	80027e0 <vTaskDelay>
        DISPLAY_RESET_HIGH;
 80003b4:	2201      	movs	r2, #1
 80003b6:	2108      	movs	r1, #8
 80003b8:	4803      	ldr	r0, [pc, #12]	; (80003c8 <st7565r_hard_reset+0x28>)
 80003ba:	f000 fb61 	bl	8000a80 <HAL_GPIO_WritePin>
        vTaskDelay (HUNDRED_MILLISECONDS);
 80003be:	200a      	movs	r0, #10
 80003c0:	f002 fa0e 	bl	80027e0 <vTaskDelay>
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	48000800 	.word	0x48000800

080003cc <st7565r_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
void st7565r_set_page_address(uint8_t address)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
        // Make sure that the address is 4 bits (only 8 pages)
        address &= 0x0F;
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	f003 030f 	and.w	r3, r3, #15
 80003dc:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff92 	bl	8000310 <st7565r_write_command>
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <st7565r_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void st7565r_set_column_address(uint8_t address)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
        // Make sure the address is 7 bits
        address &= 0x7F;
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000404:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	091b      	lsrs	r3, r3, #4
 800040a:	b2db      	uxtb	r3, r3
 800040c:	f043 0310 	orr.w	r3, r3, #16
 8000410:	b2db      	uxtb	r3, r3
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff7c 	bl	8000310 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	f003 030f 	and.w	r3, r3, #15
 800041e:	b2db      	uxtb	r3, r3
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ff75 	bl	8000310 <st7565r_write_command>
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <st7565r_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the LCD.
 */
void st7565r_set_display_start_line_address(uint8_t address)
{
 800042e:	b580      	push	{r7, lr}
 8000430:	b082      	sub	sp, #8
 8000432:	af00      	add	r7, sp, #0
 8000434:	4603      	mov	r3, r0
 8000436:	71fb      	strb	r3, [r7, #7]
        // Make sure address is 6 bits
        address &= 0x3F;
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800043e:	71fb      	strb	r3, [r7, #7]
        st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000446:	b2db      	uxtb	r3, r3
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff61 	bl	8000310 <st7565r_write_command>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <st7565r_display_on>:
 * \brief Turn the LCD display on
 *
 * This function will turn on the LCD.
 */
void st7565r_display_on(void)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_ON);
 800045a:	20af      	movs	r0, #175	; 0xaf
 800045c:	f7ff ff58 	bl	8000310 <st7565r_write_command>
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <st7565r_set_contrast>:
 *                 the LCD.
 *
 * \retval contrast the contrast value written to the LCD controller
 */
uint8_t st7565r_set_contrast(uint8_t contrast)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
        if (contrast < ST7565R_DISPLAY_CONTRAST_MIN) {
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2b1d      	cmp	r3, #29
 8000472:	d801      	bhi.n	8000478 <st7565r_set_contrast+0x14>
                contrast = ST7565R_DISPLAY_CONTRAST_MIN;
 8000474:	231e      	movs	r3, #30
 8000476:	71fb      	strb	r3, [r7, #7]
        }
        if (contrast > ST7565R_DISPLAY_CONTRAST_MAX) {
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	2b28      	cmp	r3, #40	; 0x28
 800047c:	d901      	bls.n	8000482 <st7565r_set_contrast+0x1e>
                contrast = ST7565R_DISPLAY_CONTRAST_MAX;
 800047e:	2328      	movs	r3, #40	; 0x28
 8000480:	71fb      	strb	r3, [r7, #7]
        }
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME_MODE_SET);
 8000482:	2081      	movs	r0, #129	; 0x81
 8000484:	f7ff ff44 	bl	8000310 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_ELECTRONIC_VOLUME(contrast));
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	43db      	mvns	r3, r3
 800048c:	b2db      	uxtb	r3, r3
 800048e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000492:	b2db      	uxtb	r3, r3
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ff3b 	bl	8000310 <st7565r_write_command>
        return contrast;
 800049a:	79fb      	ldrb	r3, [r7, #7]
}
 800049c:	4618      	mov	r0, r3
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <st7565r_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the LCD
 *
 */
void st7565r_display_invert_disable(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
        st7565r_write_command(ST7565R_CMD_DISPLAY_NORMAL);
 80004a8:	20a6      	movs	r0, #166	; 0xa6
 80004aa:	f7ff ff31 	bl	8000310 <st7565r_write_command>
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <st7565r_init>:

int st7565r_init(void) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	


        // Do a hard reset of the LCD display controller
        st7565r_hard_reset();
 80004b8:	f7ff ff72 	bl	80003a0 <st7565r_hard_reset>

        // Set the A0 pin to the default state (command)
        DISPLAY_A0_LOW;
 80004bc:	2200      	movs	r2, #0
 80004be:	2101      	movs	r1, #1
 80004c0:	4810      	ldr	r0, [pc, #64]	; (8000504 <st7565r_init+0x50>)
 80004c2:	f000 fadd 	bl	8000a80 <HAL_GPIO_WritePin>

        // The column address
        st7565r_write_command(ST7565R_CMD_ADC_NORMAL);
 80004c6:	20a0      	movs	r0, #160	; 0xa0
 80004c8:	f7ff ff22 	bl	8000310 <st7565r_write_command>

        // Non-inverted display
        st7565r_display_invert_disable();
 80004cc:	f7ff ffea 	bl	80004a4 <st7565r_display_invert_disable>

        // The common mode scan direction
        st7565r_write_command(ST7565R_CMD_REVERSE_SCAN_DIRECTION);
 80004d0:	20c8      	movs	r0, #200	; 0xc8
 80004d2:	f7ff ff1d 	bl	8000310 <st7565r_write_command>

        // Set the voltage bias ratio to 1/6
        st7565r_write_command(ST7565R_CMD_LCD_BIAS_1_DIV_6_DUTY33);
 80004d6:	20a2      	movs	r0, #162	; 0xa2
 80004d8:	f7ff ff1a 	bl	8000310 <st7565r_write_command>

        // Set booster circuit, voltage regulator and voltage follower all to on
        st7565r_write_command(ST7565R_CMD_POWER_CTRL_ALL_ON);
 80004dc:	202f      	movs	r0, #47	; 0x2f
 80004de:	f7ff ff17 	bl	8000310 <st7565r_write_command>

        // Set the booster ratio to 2X,3X,4X
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_SET);
 80004e2:	20f8      	movs	r0, #248	; 0xf8
 80004e4:	f7ff ff14 	bl	8000310 <st7565r_write_command>
        st7565r_write_command(ST7565R_CMD_BOOSTER_RATIO_2X_3X_4X);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f7ff ff11 	bl	8000310 <st7565r_write_command>

        // Set voltage resistor ratio to 1
        st7565r_write_command(ST7565R_CMD_VOLTAGE_RESISTOR_RATIO_1);
 80004ee:	2021      	movs	r0, #33	; 0x21
 80004f0:	f7ff ff0e 	bl	8000310 <st7565r_write_command>

        /* Set contrast to min value, no need to check return value as the contrast
        is set to the defined min*/
        st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);
 80004f4:	201e      	movs	r0, #30
 80004f6:	f7ff ffb5 	bl	8000464 <st7565r_set_contrast>

        // Turn on the display
        st7565r_display_on();
 80004fa:	f7ff ffac 	bl	8000456 <st7565r_display_on>
		
		return EXIT_SUCCESS;
 80004fe:	2300      	movs	r3, #0
}
 8000500:	4618      	mov	r0, r3
 8000502:	bd80      	pop	{r7, pc}
 8000504:	48000800 	.word	0x48000800

08000508 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f905 	bl	800071c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 f806 	bl	8000524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f002 fe32 	bl	8003180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_InitTick+0x30>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <HAL_InitTick+0x34>)
 8000532:	fba2 2303 	umull	r2, r3, r2, r3
 8000536:	099b      	lsrs	r3, r3, #6
 8000538:	4618      	mov	r0, r3
 800053a:	f000 f916 	bl	800076a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800053e:	2200      	movs	r2, #0
 8000540:	6879      	ldr	r1, [r7, #4]
 8000542:	f04f 30ff 	mov.w	r0, #4294967295
 8000546:	f000 f8f4 	bl	8000732 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800054a:	2300      	movs	r3, #0
}
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000004 	.word	0x20000004
 8000558:	10624dd3 	.word	0x10624dd3

0800055c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  uwTick++;
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <HAL_IncTick+0x18>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x18>)
 8000568:	6013      	str	r3, [r2, #0]
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	200000f8 	.word	0x200000f8

08000578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return uwTick;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <HAL_GetTick+0x14>)
 800057e:	681b      	ldr	r3, [r3, #0]
}
 8000580:	4618      	mov	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	200000f8 	.word	0x200000f8

08000590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 800059c:	f7ff ffec 	bl	8000578 <HAL_GetTick>
 80005a0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80005a2:	bf00      	nop
 80005a4:	f7ff ffe8 	bl	8000578 <HAL_GetTick>
 80005a8:	4602      	mov	r2, r0
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	1ad2      	subs	r2, r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d3f7      	bcc.n	80005a4 <HAL_Delay+0x14>
  {
  }
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <NVIC_SetPriorityGrouping+0x44>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ee:	4a04      	ldr	r2, [pc, #16]	; (8000600 <NVIC_SetPriorityGrouping+0x44>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	60d3      	str	r3, [r2, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <NVIC_GetPriorityGrouping+0x18>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	f003 0307 	and.w	r3, r3, #7
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800062c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	da0b      	bge.n	800064c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	490d      	ldr	r1, [pc, #52]	; (800066c <NVIC_SetPriority+0x4c>)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f003 030f 	and.w	r3, r3, #15
 800063c:	3b04      	subs	r3, #4
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	b2d2      	uxtb	r2, r2
 8000642:	0112      	lsls	r2, r2, #4
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	440b      	add	r3, r1
 8000648:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800064a:	e009      	b.n	8000660 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	4908      	ldr	r1, [pc, #32]	; (8000670 <NVIC_SetPriority+0x50>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	0112      	lsls	r2, r2, #4
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	440b      	add	r3, r1
 800065c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00
 8000670:	e000e100 	.word	0xe000e100

08000674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000674:	b480      	push	{r7}
 8000676:	b089      	sub	sp, #36	; 0x24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	f1c3 0307 	rsb	r3, r3, #7
 800068e:	2b04      	cmp	r3, #4
 8000690:	bf28      	it	cs
 8000692:	2304      	movcs	r3, #4
 8000694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	3304      	adds	r3, #4
 800069a:	2b06      	cmp	r3, #6
 800069c:	d902      	bls.n	80006a4 <NVIC_EncodePriority+0x30>
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	e000      	b.n	80006a6 <NVIC_EncodePriority+0x32>
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	2201      	movs	r2, #1
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	1e5a      	subs	r2, r3, #1
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	401a      	ands	r2, r3
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ba:	2101      	movs	r1, #1
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	1e59      	subs	r1, r3, #1
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	4313      	orrs	r3, r2
         );
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3724      	adds	r7, #36	; 0x24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006e8:	d301      	bcc.n	80006ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00f      	b.n	800070e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <SysTick_Config+0x40>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006f6:	210f      	movs	r1, #15
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295
 80006fc:	f7ff ff90 	bl	8000620 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <SysTick_Config+0x40>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <SysTick_Config+0x40>)
 8000708:	2207      	movs	r2, #7
 800070a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	e000e010 	.word	0xe000e010

0800071c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff49 	bl	80005bc <NVIC_SetPriorityGrouping>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b086      	sub	sp, #24
 8000736:	af00      	add	r7, sp, #0
 8000738:	4603      	mov	r3, r0
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000744:	f7ff ff5e 	bl	8000604 <NVIC_GetPriorityGrouping>
 8000748:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	68b9      	ldr	r1, [r7, #8]
 800074e:	6978      	ldr	r0, [r7, #20]
 8000750:	f7ff ff90 	bl	8000674 <NVIC_EncodePriority>
 8000754:	4602      	mov	r2, r0
 8000756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff5f 	bl	8000620 <NVIC_SetPriority>
}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ffb0 	bl	80006d8 <SysTick_Config>
 8000778:	4603      	mov	r3, r0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000784:	b480      	push	{r7}
 8000786:	b087      	sub	sp, #28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800079a:	e154      	b.n	8000a46 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	2101      	movs	r1, #1
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	fa01 f303 	lsl.w	r3, r1, r3
 80007a8:	4013      	ands	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	f000 8146 	beq.w	8000a40 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d003      	beq.n	80007c4 <HAL_GPIO_Init+0x40>
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	2b12      	cmp	r3, #18
 80007c2:	d123      	bne.n	800080c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	08da      	lsrs	r2, r3, #3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3208      	adds	r2, #8
 80007cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	f003 0307 	and.w	r3, r3, #7
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	220f      	movs	r2, #15
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	43db      	mvns	r3, r3
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	4013      	ands	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	691a      	ldr	r2, [r3, #16]
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	08da      	lsrs	r2, r3, #3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3208      	adds	r2, #8
 8000806:	6939      	ldr	r1, [r7, #16]
 8000808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	2203      	movs	r2, #3
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	43db      	mvns	r3, r3
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	4013      	ands	r3, r2
 8000822:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	f003 0203 	and.w	r2, r3, #3
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	4313      	orrs	r3, r2
 8000838:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d00b      	beq.n	8000860 <HAL_GPIO_Init+0xdc>
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d007      	beq.n	8000860 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000854:	2b11      	cmp	r3, #17
 8000856:	d003      	beq.n	8000860 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b12      	cmp	r3, #18
 800085e:	d130      	bne.n	80008c2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	2203      	movs	r2, #3
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	4313      	orrs	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000896:	2201      	movs	r2, #1
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	4013      	ands	r3, r2
 80008a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	f003 0201 	and.w	r2, r3, #1
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2203      	movs	r2, #3
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	4013      	ands	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	689a      	ldr	r2, [r3, #8]
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	f000 80a0 	beq.w	8000a40 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000900:	4a58      	ldr	r2, [pc, #352]	; (8000a64 <HAL_GPIO_Init+0x2e0>)
 8000902:	4b58      	ldr	r3, [pc, #352]	; (8000a64 <HAL_GPIO_Init+0x2e0>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	6613      	str	r3, [r2, #96]	; 0x60
 800090c:	4b55      	ldr	r3, [pc, #340]	; (8000a64 <HAL_GPIO_Init+0x2e0>)
 800090e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000918:	4a53      	ldr	r2, [pc, #332]	; (8000a68 <HAL_GPIO_Init+0x2e4>)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	089b      	lsrs	r3, r3, #2
 800091e:	3302      	adds	r3, #2
 8000920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000924:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	220f      	movs	r2, #15
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4013      	ands	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000942:	d019      	beq.n	8000978 <HAL_GPIO_Init+0x1f4>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a49      	ldr	r2, [pc, #292]	; (8000a6c <HAL_GPIO_Init+0x2e8>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d013      	beq.n	8000974 <HAL_GPIO_Init+0x1f0>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a48      	ldr	r2, [pc, #288]	; (8000a70 <HAL_GPIO_Init+0x2ec>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d00d      	beq.n	8000970 <HAL_GPIO_Init+0x1ec>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a47      	ldr	r2, [pc, #284]	; (8000a74 <HAL_GPIO_Init+0x2f0>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d007      	beq.n	800096c <HAL_GPIO_Init+0x1e8>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a46      	ldr	r2, [pc, #280]	; (8000a78 <HAL_GPIO_Init+0x2f4>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d101      	bne.n	8000968 <HAL_GPIO_Init+0x1e4>
 8000964:	2304      	movs	r3, #4
 8000966:	e008      	b.n	800097a <HAL_GPIO_Init+0x1f6>
 8000968:	2307      	movs	r3, #7
 800096a:	e006      	b.n	800097a <HAL_GPIO_Init+0x1f6>
 800096c:	2303      	movs	r3, #3
 800096e:	e004      	b.n	800097a <HAL_GPIO_Init+0x1f6>
 8000970:	2302      	movs	r3, #2
 8000972:	e002      	b.n	800097a <HAL_GPIO_Init+0x1f6>
 8000974:	2301      	movs	r3, #1
 8000976:	e000      	b.n	800097a <HAL_GPIO_Init+0x1f6>
 8000978:	2300      	movs	r3, #0
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	f002 0203 	and.w	r2, r2, #3
 8000980:	0092      	lsls	r2, r2, #2
 8000982:	4093      	lsls	r3, r2
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800098a:	4937      	ldr	r1, [pc, #220]	; (8000a68 <HAL_GPIO_Init+0x2e4>)
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	089b      	lsrs	r3, r3, #2
 8000990:	3302      	adds	r3, #2
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000998:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <HAL_GPIO_Init+0x2f8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	43db      	mvns	r3, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4013      	ands	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d003      	beq.n	80009bc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80009bc:	4a2f      	ldr	r2, [pc, #188]	; (8000a7c <HAL_GPIO_Init+0x2f8>)
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80009c2:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <HAL_GPIO_Init+0x2f8>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	43db      	mvns	r3, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4013      	ands	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d003      	beq.n	80009e6 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80009e6:	4a25      	ldr	r2, [pc, #148]	; (8000a7c <HAL_GPIO_Init+0x2f8>)
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009ec:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <HAL_GPIO_Init+0x2f8>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	43db      	mvns	r3, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d003      	beq.n	8000a10 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a10:	4a1a      	ldr	r2, [pc, #104]	; (8000a7c <HAL_GPIO_Init+0x2f8>)
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_GPIO_Init+0x2f8>)
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <HAL_GPIO_Init+0x2f8>)
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	3301      	adds	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f47f aea3 	bne.w	800079c <HAL_GPIO_Init+0x18>
  }
}
 8000a56:	bf00      	nop
 8000a58:	371c      	adds	r7, #28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40010000 	.word	0x40010000
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	48000800 	.word	0x48000800
 8000a74:	48000c00 	.word	0x48000c00
 8000a78:	48001000 	.word	0x48001000
 8000a7c:	40010400 	.word	0x40010400

08000a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	807b      	strh	r3, [r7, #2]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a90:	787b      	ldrb	r3, [r7, #1]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a96:	887a      	ldrh	r2, [r7, #2]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a9c:	e002      	b.n	8000aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a9e:	887a      	ldrh	r2, [r7, #2]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8000ab4:	4a05      	ldr	r2, [pc, #20]	; (8000acc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40007000 	.word	0x40007000

08000ad0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40007000 	.word	0x40007000

08000aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000afe:	d12f      	bne.n	8000b60 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b0c:	d037      	beq.n	8000b7e <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0e:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1c:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	0c9b      	lsrs	r3, r3, #18
 8000b2a:	2232      	movs	r2, #50	; 0x32
 8000b2c:	fb02 f303 	mul.w	r3, r2, r3
 8000b30:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000b32:	e002      	b.n	8000b3a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d006      	beq.n	8000b4e <HAL_PWREx_ControlVoltageScaling+0x62>
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b4c:	d0f2      	beq.n	8000b34 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b5a:	d110      	bne.n	8000b7e <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e00f      	b.n	8000b80 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b6c:	d007      	beq.n	8000b7e <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
}  
 8000b80:	4618      	mov	r0, r3
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40007000 	.word	0x40007000
 8000b90:	20000004 	.word	0x20000004
 8000b94:	431bde83 	.word	0x431bde83

08000b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 80db 	beq.w	8000d68 <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000bb2:	4ba2      	ldr	r3, [pc, #648]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f003 030c 	and.w	r3, r3, #12
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 8084 	bne.w	8000cc8 <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bc0:	4b9e      	ldr	r3, [pc, #632]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d005      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x40>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e39b      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a1a      	ldr	r2, [r3, #32]
 8000bdc:	4b97      	ldr	r3, [pc, #604]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0308 	and.w	r3, r3, #8
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d004      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x5a>
 8000be8:	4b94      	ldr	r3, [pc, #592]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bf0:	e005      	b.n	8000bfe <HAL_RCC_OscConfig+0x66>
 8000bf2:	4b92      	ldr	r3, [pc, #584]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bf8:	091b      	lsrs	r3, r3, #4
 8000bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d923      	bls.n	8000c4a <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a1b      	ldr	r3, [r3, #32]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fda4 	bl	8001754 <RCC_SetFlashLatencyFromMSIRange>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e37c      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c16:	4a89      	ldr	r2, [pc, #548]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000c18:	4b88      	ldr	r3, [pc, #544]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	4986      	ldr	r1, [pc, #536]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000c24:	4b85      	ldr	r3, [pc, #532]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a1b      	ldr	r3, [r3, #32]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c34:	4981      	ldr	r1, [pc, #516]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000c36:	4b81      	ldr	r3, [pc, #516]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	4313      	orrs	r3, r2
 8000c46:	604b      	str	r3, [r1, #4]
 8000c48:	e022      	b.n	8000c90 <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c4a:	4a7c      	ldr	r2, [pc, #496]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000c4c:	4b7b      	ldr	r3, [pc, #492]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	4979      	ldr	r1, [pc, #484]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000c58:	4b78      	ldr	r3, [pc, #480]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a1b      	ldr	r3, [r3, #32]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c68:	4974      	ldr	r1, [pc, #464]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000c6a:	4b74      	ldr	r3, [pc, #464]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fd67 	bl	8001754 <RCC_SetFlashLatencyFromMSIRange>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e33f      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000c90:	f000 fc66 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 8000c94:	4601      	mov	r1, r0
 8000c96:	4b69      	ldr	r3, [pc, #420]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000c9e:	23f0      	movs	r3, #240	; 0xf0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	fa93 f3a3 	rbit	r3, r3
 8000ca8:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000caa:	6a3b      	ldr	r3, [r7, #32]
 8000cac:	fab3 f383 	clz	r3, r3
 8000cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb4:	4a62      	ldr	r2, [pc, #392]	; (8000e40 <HAL_RCC_OscConfig+0x2a8>)
 8000cb6:	5cd3      	ldrb	r3, [r2, r3]
 8000cb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbc:	4a61      	ldr	r2, [pc, #388]	; (8000e44 <HAL_RCC_OscConfig+0x2ac>)
 8000cbe:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff fc2f 	bl	8000524 <HAL_InitTick>
 8000cc6:	e04f      	b.n	8000d68 <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d032      	beq.n	8000d36 <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000cd0:	4a5a      	ldr	r2, [pc, #360]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000cd2:	4b5a      	ldr	r3, [pc, #360]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fc4c 	bl	8000578 <HAL_GetTick>
 8000ce0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fc48 	bl	8000578 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e30c      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000cf6:	4b51      	ldr	r3, [pc, #324]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f0      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d02:	4a4e      	ldr	r2, [pc, #312]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000d04:	4b4d      	ldr	r3, [pc, #308]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	494b      	ldr	r1, [pc, #300]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000d10:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d20:	4946      	ldr	r1, [pc, #280]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000d22:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	4313      	orrs	r3, r2
 8000d32:	604b      	str	r3, [r1, #4]
 8000d34:	e018      	b.n	8000d68 <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d36:	4a41      	ldr	r2, [pc, #260]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 0301 	bic.w	r3, r3, #1
 8000d40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d42:	f7ff fc19 	bl	8000578 <HAL_GetTick>
 8000d46:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000d48:	e008      	b.n	8000d5c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d4a:	f7ff fc15 	bl	8000578 <HAL_GetTick>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d901      	bls.n	8000d5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e2d9      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000d5c:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f0      	bne.n	8000d4a <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d07a      	beq.n	8000e6a <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8000d74:	4b31      	ldr	r3, [pc, #196]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f003 030c 	and.w	r3, r3, #12
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d00b      	beq.n	8000d98 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d80:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8000d88:	2b0c      	cmp	r3, #12
 8000d8a:	d111      	bne.n	8000db0 <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d8c:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d10b      	bne.n	8000db0 <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d061      	beq.n	8000e68 <HAL_RCC_OscConfig+0x2d0>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d15d      	bne.n	8000e68 <HAL_RCC_OscConfig+0x2d0>
      {
        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e2af      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db8:	d106      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x230>
 8000dba:	4a20      	ldr	r2, [pc, #128]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e01d      	b.n	8000e04 <HAL_RCC_OscConfig+0x26c>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd0:	d10c      	bne.n	8000dec <HAL_RCC_OscConfig+0x254>
 8000dd2:	4a1a      	ldr	r2, [pc, #104]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e00b      	b.n	8000e04 <HAL_RCC_OscConfig+0x26c>
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d013      	beq.n	8000e34 <HAL_RCC_OscConfig+0x29c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fbb4 	bl	8000578 <HAL_GetTick>
 8000e10:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e14:	f7ff fbb0 	bl	8000578 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b64      	cmp	r3, #100	; 0x64
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e274      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_RCC_OscConfig+0x2a4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f0      	beq.n	8000e14 <HAL_RCC_OscConfig+0x27c>
 8000e32:	e01a      	b.n	8000e6a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e34:	f7ff fba0 	bl	8000578 <HAL_GetTick>
 8000e38:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000e3a:	e00e      	b.n	8000e5a <HAL_RCC_OscConfig+0x2c2>
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	080039b4 	.word	0x080039b4
 8000e44:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e48:	f7ff fb96 	bl	8000578 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b64      	cmp	r3, #100	; 0x64
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e25a      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000e5a:	4bb0      	ldr	r3, [pc, #704]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f0      	bne.n	8000e48 <HAL_RCC_OscConfig+0x2b0>
 8000e66:	e000      	b.n	8000e6a <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d07f      	beq.n	8000f76 <HAL_RCC_OscConfig+0x3de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000e76:	4ba9      	ldr	r3, [pc, #676]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 030c 	and.w	r3, r3, #12
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	d00b      	beq.n	8000e9a <HAL_RCC_OscConfig+0x302>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e82:	4ba6      	ldr	r3, [pc, #664]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000e8a:	2b0c      	cmp	r3, #12
 8000e8c:	d127      	bne.n	8000ede <HAL_RCC_OscConfig+0x346>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e8e:	4ba3      	ldr	r3, [pc, #652]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d121      	bne.n	8000ede <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e9a:	4ba0      	ldr	r3, [pc, #640]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d005      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x31a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e22e      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb2:	489a      	ldr	r0, [pc, #616]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000eb4:	4b99      	ldr	r3, [pc, #612]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6919      	ldr	r1, [r3, #16]
 8000ec0:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8000ec4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa93 f3a3 	rbit	r3, r3
 8000ecc:	61bb      	str	r3, [r7, #24]
  return(result);
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	fab3 f383 	clz	r3, r3
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	6043      	str	r3, [r0, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000edc:	e04b      	b.n	8000f76 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d02e      	beq.n	8000f44 <HAL_RCC_OscConfig+0x3ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee6:	4a8d      	ldr	r2, [pc, #564]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000ee8:	4b8c      	ldr	r3, [pc, #560]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fb41 	bl	8000578 <HAL_GetTick>
 8000ef6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efa:	f7ff fb3d 	bl	8000578 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e201      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f0c:	4b83      	ldr	r3, [pc, #524]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f18:	4880      	ldr	r0, [pc, #512]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000f1a:	4b80      	ldr	r3, [pc, #512]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6919      	ldr	r1, [r3, #16]
 8000f26:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8000f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa93 f3a3 	rbit	r3, r3
 8000f32:	613b      	str	r3, [r7, #16]
  return(result);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	fab3 f383 	clz	r3, r3
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	6043      	str	r3, [r0, #4]
 8000f42:	e018      	b.n	8000f76 <HAL_RCC_OscConfig+0x3de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f44:	4a75      	ldr	r2, [pc, #468]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000f46:	4b75      	ldr	r3, [pc, #468]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f50:	f7ff fb12 	bl	8000578 <HAL_GetTick>
 8000f54:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f58:	f7ff fb0e 	bl	8000578 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e1d2      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000f6a:	4b6c      	ldr	r3, [pc, #432]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f0      	bne.n	8000f58 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d03c      	beq.n	8000ffc <HAL_RCC_OscConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d01c      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x42c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f8a:	4a64      	ldr	r2, [pc, #400]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000f8c:	4b63      	ldr	r3, [pc, #396]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f9a:	f7ff faed 	bl	8000578 <HAL_GetTick>
 8000f9e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa2:	f7ff fae9 	bl	8000578 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e1ad      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000fb4:	4b59      	ldr	r3, [pc, #356]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0ef      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x40a>
 8000fc2:	e01b      	b.n	8000ffc <HAL_RCC_OscConfig+0x464>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fc4:	4a55      	ldr	r2, [pc, #340]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000fc6:	4b55      	ldr	r3, [pc, #340]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fd4:	f7ff fad0 	bl	8000578 <HAL_GetTick>
 8000fd8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fdc:	f7ff facc 	bl	8000578 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e190      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000fee:	4b4b      	ldr	r3, [pc, #300]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8000ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1ef      	bne.n	8000fdc <HAL_RCC_OscConfig+0x444>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80a9 	beq.w	800115c <HAL_RCC_OscConfig+0x5c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001010:	4b42      	ldr	r3, [pc, #264]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10e      	bne.n	800103a <HAL_RCC_OscConfig+0x4a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	4a3f      	ldr	r2, [pc, #252]	; (800111c <HAL_RCC_OscConfig+0x584>)
 800101e:	4b3f      	ldr	r3, [pc, #252]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001026:	6593      	str	r3, [r2, #88]	; 0x58
 8001028:	4b3c      	ldr	r3, [pc, #240]	; (800111c <HAL_RCC_OscConfig+0x584>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001034:	2301      	movs	r3, #1
 8001036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <HAL_RCC_OscConfig+0x588>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001042:	2b00      	cmp	r3, #0
 8001044:	d118      	bne.n	8001078 <HAL_RCC_OscConfig+0x4e0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001046:	4a36      	ldr	r2, [pc, #216]	; (8001120 <HAL_RCC_OscConfig+0x588>)
 8001048:	4b35      	ldr	r3, [pc, #212]	; (8001120 <HAL_RCC_OscConfig+0x588>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001052:	f7ff fa91 	bl	8000578 <HAL_GetTick>
 8001056:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800105a:	f7ff fa8d 	bl	8000578 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e151      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800106c:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <HAL_RCC_OscConfig+0x588>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x4c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d108      	bne.n	8001092 <HAL_RCC_OscConfig+0x4fa>
 8001080:	4a26      	ldr	r2, [pc, #152]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8001084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001090:	e024      	b.n	80010dc <HAL_RCC_OscConfig+0x544>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b05      	cmp	r3, #5
 8001098:	d110      	bne.n	80010bc <HAL_RCC_OscConfig+0x524>
 800109a:	4a20      	ldr	r2, [pc, #128]	; (800111c <HAL_RCC_OscConfig+0x584>)
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <HAL_RCC_OscConfig+0x584>)
 800109e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <HAL_RCC_OscConfig+0x584>)
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_RCC_OscConfig+0x584>)
 80010ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010ba:	e00f      	b.n	80010dc <HAL_RCC_OscConfig+0x544>
 80010bc:	4a17      	ldr	r2, [pc, #92]	; (800111c <HAL_RCC_OscConfig+0x584>)
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_RCC_OscConfig+0x584>)
 80010c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c4:	f023 0301 	bic.w	r3, r3, #1
 80010c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010cc:	4a13      	ldr	r2, [pc, #76]	; (800111c <HAL_RCC_OscConfig+0x584>)
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_RCC_OscConfig+0x584>)
 80010d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d4:	f023 0304 	bic.w	r3, r3, #4
 80010d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d016      	beq.n	8001112 <HAL_RCC_OscConfig+0x57a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e4:	f7ff fa48 	bl	8000578 <HAL_GetTick>
 80010e8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80010ea:	e00a      	b.n	8001102 <HAL_RCC_OscConfig+0x56a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ec:	f7ff fa44 	bl	8000578 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x56a>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e106      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_RCC_OscConfig+0x584>)
 8001104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0ed      	beq.n	80010ec <HAL_RCC_OscConfig+0x554>
 8001110:	e01a      	b.n	8001148 <HAL_RCC_OscConfig+0x5b0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001112:	f7ff fa31 	bl	8000578 <HAL_GetTick>
 8001116:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001118:	e00f      	b.n	800113a <HAL_RCC_OscConfig+0x5a2>
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001124:	f7ff fa28 	bl	8000578 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001132:	4293      	cmp	r3, r2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x5a2>
        {
          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e0ea      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800113a:	4b77      	ldr	r3, [pc, #476]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 800113c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1ed      	bne.n	8001124 <HAL_RCC_OscConfig+0x58c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001148:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800114c:	2b01      	cmp	r3, #1
 800114e:	d105      	bne.n	800115c <HAL_RCC_OscConfig+0x5c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001150:	4a71      	ldr	r2, [pc, #452]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 8001152:	4b71      	ldr	r3, [pc, #452]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 8001154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800115a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0320 	and.w	r3, r3, #32
 8001164:	2b00      	cmp	r3, #0
 8001166:	d03c      	beq.n	80011e2 <HAL_RCC_OscConfig+0x64a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	2b00      	cmp	r3, #0
 800116e:	d01c      	beq.n	80011aa <HAL_RCC_OscConfig+0x612>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001170:	4a69      	ldr	r2, [pc, #420]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 8001172:	4b69      	ldr	r3, [pc, #420]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 8001174:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001180:	f7ff f9fa 	bl	8000578 <HAL_GetTick>
 8001184:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x602>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001188:	f7ff f9f6 	bl	8000578 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x602>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e0ba      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 800119a:	4b5f      	ldr	r3, [pc, #380]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 800119c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0ef      	beq.n	8001188 <HAL_RCC_OscConfig+0x5f0>
 80011a8:	e01b      	b.n	80011e2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011aa:	4a5b      	ldr	r2, [pc, #364]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 80011ac:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 80011ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011b2:	f023 0301 	bic.w	r3, r3, #1
 80011b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ba:	f7ff f9dd 	bl	8000578 <HAL_GetTick>
 80011be:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x63c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011c2:	f7ff f9d9 	bl	8000578 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e09d      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80011d4:	4b50      	ldr	r3, [pc, #320]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 80011d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1ef      	bne.n	80011c2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8091 	beq.w	800130e <HAL_RCC_OscConfig+0x776>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011ec:	4b4a      	ldr	r3, [pc, #296]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b0c      	cmp	r3, #12
 80011f6:	f000 8088 	beq.w	800130a <HAL_RCC_OscConfig+0x772>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d155      	bne.n	80012ae <HAL_RCC_OscConfig+0x716>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001202:	4a45      	ldr	r2, [pc, #276]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 8001204:	4b44      	ldr	r3, [pc, #272]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800120c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120e:	f7ff f9b3 	bl	8000578 <HAL_GetTick>
 8001212:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001216:	f7ff f9af 	bl	8000578 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e073      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001228:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f0      	bne.n	8001216 <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001234:	4938      	ldr	r1, [pc, #224]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	3b01      	subs	r3, #1
 800123c:	011a      	lsls	r2, r3, #4
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001250:	085b      	lsrs	r3, r3, #1
 8001252:	3b01      	subs	r3, #1
 8001254:	055b      	lsls	r3, r3, #21
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	085b      	lsrs	r3, r3, #1
 800125e:	3b01      	subs	r3, #1
 8001260:	065b      	lsls	r3, r3, #25
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001268:	06db      	lsls	r3, r3, #27
 800126a:	4313      	orrs	r3, r2
 800126c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800126e:	4a2a      	ldr	r2, [pc, #168]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 8001270:	4b29      	ldr	r3, [pc, #164]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001278:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800127a:	4a27      	ldr	r2, [pc, #156]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 800127c:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001284:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001286:	f7ff f977 	bl	8000578 <HAL_GetTick>
 800128a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x708>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128e:	f7ff f973 	bl	8000578 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x708>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e037      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x6f6>
 80012ac:	e02f      	b.n	800130e <HAL_RCC_OscConfig+0x776>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ae:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d105      	bne.n	80012d2 <HAL_RCC_OscConfig+0x73a>
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80012c6:	4a14      	ldr	r2, [pc, #80]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f023 0303 	bic.w	r3, r3, #3
 80012d0:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80012d2:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80012dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e2:	f7ff f949 	bl	8000578 <HAL_GetTick>
 80012e6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x764>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ea:	f7ff f945 	bl	8000578 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x764>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e009      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_RCC_OscConfig+0x780>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f0      	bne.n	80012ea <HAL_RCC_OscConfig+0x752>
 8001308:	e001      	b.n	800130e <HAL_RCC_OscConfig+0x776>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_RCC_OscConfig+0x778>
    }
  }
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3730      	adds	r7, #48	; 0x30
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40021000 	.word	0x40021000

0800131c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800132a:	4b89      	ldr	r3, [pc, #548]	; (8001550 <HAL_RCC_ClockConfig+0x234>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0207 	and.w	r2, r3, #7
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d210      	bcs.n	800135a <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001338:	4985      	ldr	r1, [pc, #532]	; (8001550 <HAL_RCC_ClockConfig+0x234>)
 800133a:	4b85      	ldr	r3, [pc, #532]	; (8001550 <HAL_RCC_ClockConfig+0x234>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 0207 	bic.w	r2, r3, #7
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001348:	4b81      	ldr	r3, [pc, #516]	; (8001550 <HAL_RCC_ClockConfig+0x234>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0207 	and.w	r2, r3, #7
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d001      	beq.n	800135a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e0f6      	b.n	8001548 <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d008      	beq.n	8001378 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001366:	497b      	ldr	r1, [pc, #492]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 8001368:	4b7a      	ldr	r3, [pc, #488]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	4313      	orrs	r3, r2
 8001376:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 808e 	beq.w	80014a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d107      	bne.n	800139e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800138e:	4b71      	ldr	r3, [pc, #452]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d121      	bne.n	80013de <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e0d4      	b.n	8001548 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d107      	bne.n	80013b6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80013a6:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d115      	bne.n	80013de <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0c8      	b.n	8001548 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d107      	bne.n	80013ce <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80013be:	4b65      	ldr	r3, [pc, #404]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d109      	bne.n	80013de <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0bc      	b.n	8001548 <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80013ce:	4b61      	ldr	r3, [pc, #388]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e0b4      	b.n	8001548 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013de:	495d      	ldr	r1, [pc, #372]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 80013e0:	4b5c      	ldr	r3, [pc, #368]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f023 0203 	bic.w	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013f0:	f7ff f8c2 	bl	8000578 <HAL_GetTick>
 80013f4:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d112      	bne.n	8001424 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80013fe:	e00a      	b.n	8001416 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001400:	f7ff f8ba 	bl	8000578 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	f241 3288 	movw	r2, #5000	; 0x1388
 800140e:	4293      	cmp	r3, r2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e098      	b.n	8001548 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001416:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b08      	cmp	r3, #8
 8001420:	d1ee      	bne.n	8001400 <HAL_RCC_ClockConfig+0xe4>
 8001422:	e03e      	b.n	80014a2 <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b03      	cmp	r3, #3
 800142a:	d112      	bne.n	8001452 <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142e:	f7ff f8a3 	bl	8000578 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e081      	b.n	8001548 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001444:	4b43      	ldr	r3, [pc, #268]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b0c      	cmp	r3, #12
 800144e:	d1ee      	bne.n	800142e <HAL_RCC_ClockConfig+0x112>
 8001450:	e027      	b.n	80014a2 <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d11d      	bne.n	8001496 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145c:	f7ff f88c 	bl	8000578 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	; 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e06a      	b.n	8001548 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001472:	4b38      	ldr	r3, [pc, #224]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ee      	bne.n	800145c <HAL_RCC_ClockConfig+0x140>
 800147e:	e010      	b.n	80014a2 <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001480:	f7ff f87a 	bl	8000578 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f241 3288 	movw	r2, #5000	; 0x1388
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e058      	b.n	8001548 <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001496:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d1ee      	bne.n	8001480 <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_RCC_ClockConfig+0x234>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0207 	and.w	r2, r3, #7
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d910      	bls.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b0:	4927      	ldr	r1, [pc, #156]	; (8001550 <HAL_RCC_ClockConfig+0x234>)
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_RCC_ClockConfig+0x234>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 0207 	bic.w	r2, r3, #7
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014c0:	4b23      	ldr	r3, [pc, #140]	; (8001550 <HAL_RCC_ClockConfig+0x234>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0207 	and.w	r2, r3, #7
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e03a      	b.n	8001548 <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d008      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014de:	491d      	ldr	r1, [pc, #116]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d009      	beq.n	8001510 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014fc:	4915      	ldr	r1, [pc, #84]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4313      	orrs	r3, r2
 800150e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001510:	f000 f826 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 8001514:	4601      	mov	r1, r0
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_RCC_ClockConfig+0x238>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800151e:	23f0      	movs	r3, #240	; 0xf0
 8001520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	60fb      	str	r3, [r7, #12]
  return(result);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
 8001534:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_RCC_ClockConfig+0x23c>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	fa21 f303 	lsr.w	r3, r1, r3
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_RCC_ClockConfig+0x240>)
 800153e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001540:	2000      	movs	r0, #0
 8001542:	f7fe ffef 	bl	8000524 <HAL_InitTick>

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40022000 	.word	0x40022000
 8001554:	40021000 	.word	0x40021000
 8001558:	080039b4 	.word	0x080039b4
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b095      	sub	sp, #84	; 0x54
 8001564:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001566:	2300      	movs	r3, #0
 8001568:	64fb      	str	r3, [r7, #76]	; 0x4c
 800156a:	2300      	movs	r3, #0
 800156c:	64bb      	str	r3, [r7, #72]	; 0x48
 800156e:	2300      	movs	r3, #0
 8001570:	643b      	str	r3, [r7, #64]	; 0x40
 8001572:	2302      	movs	r3, #2
 8001574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001576:	2302      	movs	r3, #2
 8001578:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800157e:	4b71      	ldr	r3, [pc, #452]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00b      	beq.n	80015a2 <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800158a:	4b6e      	ldr	r3, [pc, #440]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d13c      	bne.n	8001610 <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001596:	4b6b      	ldr	r3, [pc, #428]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d136      	bne.n	8001610 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80015a2:	4b68      	ldr	r3, [pc, #416]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d112      	bne.n	80015d4 <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 80015ae:	4b65      	ldr	r3, [pc, #404]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80015b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80015b8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80015c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c8:	fab3 f383 	clz	r3, r3
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015d2:	e00f      	b.n	80015f4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80015d4:	4b5b      	ldr	r3, [pc, #364]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015dc:	23f0      	movs	r3, #240	; 0xf0
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	fa22 f303 	lsr.w	r3, r2, r3
 80015f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80015f4:	4a54      	ldr	r2, [pc, #336]	; (8001748 <HAL_RCC_GetSysClockFreq+0x1e8>)
 80015f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80015fe:	4b51      	ldr	r3, [pc, #324]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b00      	cmp	r3, #0
 8001608:	d113      	bne.n	8001632 <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800160a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800160c:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800160e:	e010      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001610:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b04      	cmp	r3, #4
 800161a:	d102      	bne.n	8001622 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800161c:	4b4b      	ldr	r3, [pc, #300]	; (800174c <HAL_RCC_GetSysClockFreq+0x1ec>)
 800161e:	647b      	str	r3, [r7, #68]	; 0x44
 8001620:	e007      	b.n	8001632 <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001622:	4b48      	ldr	r3, [pc, #288]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b08      	cmp	r3, #8
 800162c:	d101      	bne.n	8001632 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800162e:	4b48      	ldr	r3, [pc, #288]	; (8001750 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001630:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001632:	4b44      	ldr	r3, [pc, #272]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b0c      	cmp	r3, #12
 800163c:	d17b      	bne.n	8001736 <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800163e:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8001648:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001650:	2370      	movs	r3, #112	; 0x70
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	623b      	str	r3, [r7, #32]
  return(result);
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	fa22 f303 	lsr.w	r3, r2, r3
 8001666:	3301      	adds	r3, #1
 8001668:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 800166a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800166c:	2b02      	cmp	r3, #2
 800166e:	d002      	beq.n	8001676 <HAL_RCC_GetSysClockFreq+0x116>
 8001670:	2b03      	cmp	r3, #3
 8001672:	d018      	beq.n	80016a6 <HAL_RCC_GetSysClockFreq+0x146>
 8001674:	e02f      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001676:	4a35      	ldr	r2, [pc, #212]	; (800174c <HAL_RCC_GetSysClockFreq+0x1ec>)
 8001678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4a31      	ldr	r2, [pc, #196]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001680:	68d2      	ldr	r2, [r2, #12]
 8001682:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8001686:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800168a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	fa92 f2a2 	rbit	r2, r2
 8001692:	61ba      	str	r2, [r7, #24]
  return(result);
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	fab2 f282 	clz	r2, r2
 800169a:	fa21 f202 	lsr.w	r2, r1, r2
 800169e:	fb02 f303 	mul.w	r3, r2, r3
 80016a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80016a4:	e02f      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80016a6:	4a2a      	ldr	r2, [pc, #168]	; (8001750 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80016a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	4a25      	ldr	r2, [pc, #148]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80016b0:	68d2      	ldr	r2, [r2, #12]
 80016b2:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 80016b6:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80016ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	fa92 f2a2 	rbit	r2, r2
 80016c2:	613a      	str	r2, [r7, #16]
  return(result);
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	fab2 f282 	clz	r2, r2
 80016ca:	fa21 f202 	lsr.w	r2, r1, r2
 80016ce:	fb02 f303 	mul.w	r3, r2, r3
 80016d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80016d4:	e017      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80016d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80016e0:	68d2      	ldr	r2, [r2, #12]
 80016e2:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 80016e6:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80016ea:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	fa92 f2a2 	rbit	r2, r2
 80016f2:	60ba      	str	r2, [r7, #8]
  return(result);
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	fab2 f282 	clz	r2, r2
 80016fa:	fa21 f202 	lsr.w	r2, r1, r2
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001704:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800170e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001712:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	603b      	str	r3, [r7, #0]
  return(result);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	fab3 f383 	clz	r3, r3
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	3301      	adds	r3, #1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 800172c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800172e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001730:	fbb2 f3f3 	udiv	r3, r2, r3
 8001734:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 8001736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001738:	4618      	mov	r0, r3
 800173a:	3754      	adds	r7, #84	; 0x54
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	40021000 	.word	0x40021000
 8001748:	080039c4 	.word	0x080039c4
 800174c:	00f42400 	.word	0x00f42400
 8001750:	007a1200 	.word	0x007a1200

08001754 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001764:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001770:	f7ff f9ae 	bl	8000ad0 <HAL_PWREx_GetVoltageRange>
 8001774:	6178      	str	r0, [r7, #20]
 8001776:	e014      	b.n	80017a2 <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	4a25      	ldr	r2, [pc, #148]	; (8001810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001782:	6593      	str	r3, [r2, #88]	; 0x58
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001790:	f7ff f99e 	bl	8000ad0 <HAL_PWREx_GetVoltageRange>
 8001794:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001796:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a8:	d10b      	bne.n	80017c2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b80      	cmp	r3, #128	; 0x80
 80017ae:	d919      	bls.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2ba0      	cmp	r3, #160	; 0xa0
 80017b4:	d902      	bls.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017b6:	2302      	movs	r3, #2
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	e013      	b.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017bc:	2301      	movs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	e010      	b.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b80      	cmp	r3, #128	; 0x80
 80017c6:	d902      	bls.n	80017ce <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017c8:	2303      	movs	r3, #3
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	e00a      	b.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b80      	cmp	r3, #128	; 0x80
 80017d2:	d102      	bne.n	80017da <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017d4:	2302      	movs	r3, #2
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	e004      	b.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b70      	cmp	r3, #112	; 0x70
 80017de:	d101      	bne.n	80017e4 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017e0:	2301      	movs	r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 80017e4:	490b      	ldr	r1, [pc, #44]	; (8001814 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 0207 	bic.w	r2, r3, #7
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0207 	and.w	r2, r3, #7
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d001      	beq.n	8001806 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	40022000 	.word	0x40022000

08001818 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001828:	2300      	movs	r3, #0
 800182a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800182c:	2300      	movs	r3, #0
 800182e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001838:	2b00      	cmp	r3, #0
 800183a:	d02f      	beq.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001840:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001844:	d005      	beq.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8001846:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800184a:	d015      	beq.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800184c:	2b00      	cmp	r3, #0
 800184e:	d007      	beq.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001850:	e00f      	b.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001852:	4a5a      	ldr	r2, [pc, #360]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001854:	4b59      	ldr	r3, [pc, #356]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800185e:	e00c      	b.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x62>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3304      	adds	r3, #4
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fa2c 	bl	8001cc4 <RCCEx_PLLSAI1_Config>
 800186c:	4603      	mov	r3, r0
 800186e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001870:	e003      	b.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x62>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	74fb      	strb	r3, [r7, #19]
      break;
 8001876:	e000      	b.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x62>
      break;
 8001878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800187a:	7cfb      	ldrb	r3, [r7, #19]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10b      	bne.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001880:	494e      	ldr	r1, [pc, #312]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001882:	4b4e      	ldr	r3, [pc, #312]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001888:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	4313      	orrs	r3, r2
 8001892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001896:	e001      	b.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001898:	7cfb      	ldrb	r3, [r7, #19]
 800189a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8098 	beq.w	80019da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ae:	4b43      	ldr	r3, [pc, #268]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10d      	bne.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4a40      	ldr	r2, [pc, #256]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018bc:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6593      	str	r3, [r2, #88]	; 0x58
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d2:	2301      	movs	r3, #1
 80018d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018d6:	4a3a      	ldr	r2, [pc, #232]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80018d8:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018e2:	f7fe fe49 	bl	8000578 <HAL_GetTick>
 80018e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80018e8:	e009      	b.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ea:	f7fe fe45 	bl	8000578 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d902      	bls.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
      {
        ret = HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	74fb      	strb	r3, [r7, #19]
        break;
 80018fc:	e005      	b.n	800190a <HAL_RCCEx_PeriphCLKConfig+0xf2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80018fe:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0ef      	beq.n	80018ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }

    if(ret == HAL_OK)
 800190a:	7cfb      	ldrb	r3, [r7, #19]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d159      	bne.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001910:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800191a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d01e      	beq.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	d019      	beq.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x148>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001936:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001938:	4a20      	ldr	r2, [pc, #128]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800193c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001948:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800194a:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800194c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d016      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x180>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7fe fe05 	bl	8000578 <HAL_GetTick>
 800196e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001970:	e00b      	b.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x172>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001972:	f7fe fe01 	bl	8000578 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001980:	4293      	cmp	r3, r2
 8001982:	d902      	bls.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x172>
          {
            ret = HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	74fb      	strb	r3, [r7, #19]
            break;
 8001988:	e006      	b.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x180>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800198c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ec      	beq.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001998:	7cfb      	ldrb	r3, [r7, #19]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10b      	bne.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800199e:	4907      	ldr	r1, [pc, #28]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	4313      	orrs	r3, r2
 80019b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80019b4:	e008      	b.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80019b6:	7cfb      	ldrb	r3, [r7, #19]
 80019b8:	74bb      	strb	r3, [r7, #18]
 80019ba:	e005      	b.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019c4:	7cfb      	ldrb	r3, [r7, #19]
 80019c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c8:	7c7b      	ldrb	r3, [r7, #17]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d105      	bne.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ce:	4a8d      	ldr	r2, [pc, #564]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80019d0:	4b8c      	ldr	r3, [pc, #560]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00a      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019e6:	4987      	ldr	r1, [pc, #540]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80019e8:	4b86      	ldr	r3, [pc, #536]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00a      	beq.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a08:	497e      	ldr	r1, [pc, #504]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001a0a:	4b7e      	ldr	r3, [pc, #504]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a10:	f023 020c 	bic.w	r2, r3, #12
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00a      	beq.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a2a:	4976      	ldr	r1, [pc, #472]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001a2c:	4b75      	ldr	r3, [pc, #468]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00a      	beq.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a4c:	496d      	ldr	r1, [pc, #436]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001a4e:	4b6d      	ldr	r3, [pc, #436]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00a      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a6e:	4965      	ldr	r1, [pc, #404]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001a70:	4b64      	ldr	r3, [pc, #400]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a76:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00a      	beq.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a90:	495c      	ldr	r1, [pc, #368]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001a92:	4b5c      	ldr	r3, [pc, #368]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ab2:	4954      	ldr	r1, [pc, #336]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)  

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00a      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ad4:	494b      	ldr	r1, [pc, #300]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001ad6:	4b4b      	ldr	r3, [pc, #300]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001adc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00a      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001af6:	4943      	ldr	r1, [pc, #268]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001af8:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b06:	4313      	orrs	r3, r2
 8001b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d028      	beq.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b18:	493a      	ldr	r1, [pc, #232]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001b1a:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b36:	d106      	bne.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b38:	4a32      	ldr	r2, [pc, #200]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001b3a:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b42:	60d3      	str	r3, [r2, #12]
 8001b44:	e011      	b.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x352>
    }
    else if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b4e:	d10c      	bne.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x352>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3304      	adds	r3, #4
 8001b54:	2101      	movs	r1, #1
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f8b4 	bl	8001cc4 <RCCEx_PLLSAI1_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8001b60:	7cfb      	ldrb	r3, [r7, #19]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x352>
      {
        /* set overall return value */
        status = ret;
 8001b66:	7cfb      	ldrb	r3, [r7, #19]
 8001b68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d028      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001b76:	4923      	ldr	r1, [pc, #140]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	4313      	orrs	r3, r2
 8001b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b94:	d106      	bne.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b96:	4a1b      	ldr	r2, [pc, #108]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ba0:	60d3      	str	r3, [r2, #12]
 8001ba2:	e011      	b.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f885 	bl	8001cc4 <RCCEx_PLLSAI1_Config>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8001bbe:	7cfb      	ldrb	r3, [r7, #19]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      {
        /* set overall return value */
        status = ret;
 8001bc4:	7cfb      	ldrb	r3, [r7, #19]
 8001bc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d02b      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x414>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001bd4:	490b      	ldr	r1, [pc, #44]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bdc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bf2:	d109      	bne.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001bf4:	4a03      	ldr	r2, [pc, #12]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001bf6:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bfe:	60d3      	str	r3, [r2, #12]
 8001c00:	e014      	b.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2101      	movs	r1, #1
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 f853 	bl	8001cc4 <RCCEx_PLLSAI1_Config>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8001c22:	7cfb      	ldrb	r3, [r7, #19]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x414>
      {
        /* set overall return value */
        status = ret;
 8001c28:	7cfb      	ldrb	r3, [r7, #19]
 8001c2a:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01c      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c38:	4919      	ldr	r1, [pc, #100]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c56:	d10c      	bne.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f830 	bl	8001cc4 <RCCEx_PLLSAI1_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c68:	7cfb      	ldrb	r3, [r7, #19]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x45a>
      {
        /* set overall return value */
        status = ret;
 8001c6e:	7cfb      	ldrb	r3, [r7, #19]
 8001c70:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00a      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8001c94:	7cbb      	ldrb	r3, [r7, #18]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001ca8:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f043 0304 	orr.w	r3, r3, #4
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b095      	sub	sp, #84	; 0x54
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001cd8:	4ba3      	ldr	r3, [pc, #652]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d023      	beq.n	8001d2c <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001ce4:	4ba0      	ldr	r3, [pc, #640]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d117      	bne.n	8001d24 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
       || 
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <RCCEx_PLLSAI1_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 8001cfc:	4b9a      	ldr	r3, [pc, #616]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d04:	2370      	movs	r3, #112	; 0x70
 8001d06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8001d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
       || 
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d054      	beq.n	8001dce <RCCEx_PLLSAI1_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001d2a:	e050      	b.n	8001dce <RCCEx_PLLSAI1_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d00d      	beq.n	8001d50 <RCCEx_PLLSAI1_Config+0x8c>
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d015      	beq.n	8001d64 <RCCEx_PLLSAI1_Config+0xa0>
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d123      	bne.n	8001d84 <RCCEx_PLLSAI1_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001d3c:	4b8a      	ldr	r3, [pc, #552]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d121      	bne.n	8001d8c <RCCEx_PLLSAI1_Config+0xc8>
      {
        status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8001d4e:	e01d      	b.n	8001d8c <RCCEx_PLLSAI1_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001d50:	4b85      	ldr	r3, [pc, #532]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d119      	bne.n	8001d90 <RCCEx_PLLSAI1_Config+0xcc>
      {
        status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8001d62:	e015      	b.n	8001d90 <RCCEx_PLLSAI1_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001d64:	4b80      	ldr	r3, [pc, #512]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d111      	bne.n	8001d94 <RCCEx_PLLSAI1_Config+0xd0>
 8001d70:	4b7d      	ldr	r3, [pc, #500]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10b      	bne.n	8001d94 <RCCEx_PLLSAI1_Config+0xd0>
      {
        status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8001d82:	e007      	b.n	8001d94 <RCCEx_PLLSAI1_Config+0xd0>
    default:
      status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      break;
 8001d8a:	e004      	b.n	8001d96 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8001d8c:	bf00      	nop
 8001d8e:	e002      	b.n	8001d96 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8001d90:	bf00      	nop
 8001d92:	e000      	b.n	8001d96 <RCCEx_PLLSAI1_Config+0xd2>
      break;
 8001d94:	bf00      	nop
    }
    
    if(status == HAL_OK)
 8001d96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d117      	bne.n	8001dce <RCCEx_PLLSAI1_Config+0x10a>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8001d9e:	4c72      	ldr	r4, [pc, #456]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001da0:	4b71      	ldr	r3, [pc, #452]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6819      	ldr	r1, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	1e58      	subs	r0, r3, #1
 8001db2:	2370      	movs	r3, #112	; 0x70
 8001db4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8001dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	fa00 f303 	lsl.w	r3, r0, r3
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 8001dce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 80c1 	bne.w	8001f5a <RCCEx_PLLSAI1_Config+0x296>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001dd8:	4a63      	ldr	r2, [pc, #396]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001dda:	4b63      	ldr	r3, [pc, #396]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de4:	f7fe fbc8 	bl	8000578 <HAL_GetTick>
 8001de8:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001dea:	e00a      	b.n	8001e02 <RCCEx_PLLSAI1_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001dec:	f7fe fbc4 	bl	8000578 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d903      	bls.n	8001e02 <RCCEx_PLLSAI1_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        break;
 8001e00:	e005      	b.n	8001e0e <RCCEx_PLLSAI1_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001e02:	4b59      	ldr	r3, [pc, #356]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1ee      	bne.n	8001dec <RCCEx_PLLSAI1_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 8001e0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 80a1 	bne.w	8001f5a <RCCEx_PLLSAI1_Config+0x296>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d125      	bne.n	8001e6a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001e1e:	4c52      	ldr	r4, [pc, #328]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001e20:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001e28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6891      	ldr	r1, [r2, #8]
 8001e30:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001e34:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e38:	fa92 f2a2 	rbit	r2, r2
 8001e3c:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 8001e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e40:	fab2 f282 	clz	r2, r2
 8001e44:	4091      	lsls	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68d0      	ldr	r0, [r2, #12]
 8001e4a:	f04f 4278 	mov.w	r2, #4160749568	; 0xf8000000
 8001e4e:	637a      	str	r2, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e52:	fa92 f2a2 	rbit	r2, r2
 8001e56:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8001e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e5a:	fab2 f282 	clz	r2, r2
 8001e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e62:	430a      	orrs	r2, r1
 8001e64:	4313      	orrs	r3, r2
 8001e66:	6123      	str	r3, [r4, #16]
 8001e68:	e051      	b.n	8001f0e <RCCEx_PLLSAI1_Config+0x24a>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d127      	bne.n	8001ec0 <RCCEx_PLLSAI1_Config+0x1fc>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001e70:	4c3d      	ldr	r4, [pc, #244]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001e72:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001e7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6891      	ldr	r1, [r2, #8]
 8001e82:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001e86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	61ba      	str	r2, [r7, #24]
  return(result);
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	4091      	lsls	r1, r2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6912      	ldr	r2, [r2, #16]
 8001e9c:	0852      	lsrs	r2, r2, #1
 8001e9e:	1e50      	subs	r0, r2, #1
 8001ea0:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001ea4:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea8:	fa92 f2a2 	rbit	r2, r2
 8001eac:	623a      	str	r2, [r7, #32]
  return(result);
 8001eae:	6a3a      	ldr	r2, [r7, #32]
 8001eb0:	fab2 f282 	clz	r2, r2
 8001eb4:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	6123      	str	r3, [r4, #16]
 8001ebe:	e026      	b.n	8001f0e <RCCEx_PLLSAI1_Config+0x24a>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001ec0:	4c29      	ldr	r4, [pc, #164]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001ec2:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001eca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6891      	ldr	r1, [r2, #8]
 8001ed2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001ed6:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	fa92 f2a2 	rbit	r2, r2
 8001ede:	60ba      	str	r2, [r7, #8]
  return(result);
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	fab2 f282 	clz	r2, r2
 8001ee6:	4091      	lsls	r1, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6952      	ldr	r2, [r2, #20]
 8001eec:	0852      	lsrs	r2, r2, #1
 8001eee:	1e50      	subs	r0, r2, #1
 8001ef0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	fa92 f2a2 	rbit	r2, r2
 8001efc:	613a      	str	r2, [r7, #16]
  return(result);
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	fab2 f282 	clz	r2, r2
 8001f04:	fa00 f202 	lsl.w	r2, r0, r2
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	6123      	str	r3, [r4, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001f0e:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1a:	f7fe fb2d 	bl	8000578 <HAL_GetTick>
 8001f1e:	64b8      	str	r0, [r7, #72]	; 0x48

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001f20:	e00a      	b.n	8001f38 <RCCEx_PLLSAI1_Config+0x274>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f22:	f7fe fb29 	bl	8000578 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d903      	bls.n	8001f38 <RCCEx_PLLSAI1_Config+0x274>
        {
          status = HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8001f36:	e005      	b.n	8001f44 <RCCEx_PLLSAI1_Config+0x280>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ee      	beq.n	8001f22 <RCCEx_PLLSAI1_Config+0x25e>
        }
      }

      if(status == HAL_OK)    
 8001f44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d106      	bne.n	8001f5a <RCCEx_PLLSAI1_Config+0x296>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001f4c:	4906      	ldr	r1, [pc, #24]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <RCCEx_PLLSAI1_Config+0x2a4>)
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 8001f5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3754      	adds	r7, #84	; 0x54
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd90      	pop	{r4, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e07a      	b.n	8002074 <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d106      	bne.n	8001f9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f001 f919 	bl	80031d0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fb4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fbe:	d902      	bls.n	8001fc6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e002      	b.n	8001fcc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001fd4:	d007      	beq.n	8001fe6 <HAL_SPI_Init+0x7a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fde:	d002      	beq.n	8001fe6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10b      	bne.n	8002006 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ff6:	d903      	bls.n	8002000 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ffe:	e002      	b.n	8002006 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6851      	ldr	r1, [r2, #4]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6892      	ldr	r2, [r2, #8]
 8002012:	4311      	orrs	r1, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6912      	ldr	r2, [r2, #16]
 8002018:	4311      	orrs	r1, r2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6952      	ldr	r2, [r2, #20]
 800201e:	4311      	orrs	r1, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6992      	ldr	r2, [r2, #24]
 8002024:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	69d2      	ldr	r2, [r2, #28]
 800202e:	4311      	orrs	r1, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6a12      	ldr	r2, [r2, #32]
 8002034:	4311      	orrs	r1, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6992      	ldr	r2, [r2, #24]
 8002046:	0c12      	lsrs	r2, r2, #16
 8002048:	f002 0104 	and.w	r1, r2, #4
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002050:	4311      	orrs	r1, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68d2      	ldr	r2, [r2, #12]
 800205c:	4311      	orrs	r1, r2
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	430a      	orrs	r2, r1
 8002062:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_SPI_Transmit+0x26>
 800209e:	2302      	movs	r3, #2
 80020a0:	e13e      	b.n	8002320 <HAL_SPI_Transmit+0x2a4>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020aa:	f7fe fa65 	bl	8000578 <HAL_GetTick>
 80020ae:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d002      	beq.n	80020c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
 80020be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020c0:	e125      	b.n	800230e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_SPI_Transmit+0x52>
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020d2:	e11c      	b.n	800230e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2203      	movs	r2, #3
 80020d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	88fa      	ldrh	r2, [r7, #6]
 80020ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	88fa      	ldrh	r2, [r7, #6]
 80020f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800211e:	d107      	bne.n	8002130 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800212e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b40      	cmp	r3, #64	; 0x40
 800213c:	d007      	beq.n	800214e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002156:	d947      	bls.n	80021e8 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <HAL_SPI_Transmit+0xee>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d138      	bne.n	80021dc <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	8812      	ldrh	r2, [r2, #0]
 8002172:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	3302      	adds	r3, #2
 8002178:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002188:	e028      	b.n	80021dc <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b02      	cmp	r3, #2
 8002196:	d10f      	bne.n	80021b8 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	8812      	ldrh	r2, [r2, #0]
 80021a0:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3302      	adds	r3, #2
 80021a6:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021b6:	e011      	b.n	80021dc <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_SPI_Transmit+0x15a>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d00a      	beq.n	80021dc <HAL_SPI_Transmit+0x160>
 80021c6:	f7fe f9d7 	bl	8000578 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	1ad2      	subs	r2, r2, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d302      	bcc.n	80021dc <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021da:	e098      	b.n	800230e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1d1      	bne.n	800218a <HAL_SPI_Transmit+0x10e>
 80021e6:	e072      	b.n	80022ce <HAL_SPI_Transmit+0x252>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <HAL_SPI_Transmit+0x17e>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d164      	bne.n	80022c4 <HAL_SPI_Transmit+0x248>
    {
      if (hspi->TxXferCount > 1U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d90f      	bls.n	8002224 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	8812      	ldrh	r2, [r2, #0]
 800220c:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3302      	adds	r3, #2
 8002212:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b02      	subs	r3, #2
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002222:	e04f      	b.n	80022c4 <HAL_SPI_Transmit+0x248>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f103 020c 	add.w	r2, r3, #12
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	1c59      	adds	r1, r3, #1
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002244:	e03e      	b.n	80022c4 <HAL_SPI_Transmit+0x248>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b02      	cmp	r3, #2
 8002252:	d125      	bne.n	80022a0 <HAL_SPI_Transmit+0x224>
      {
        if (hspi->TxXferCount > 1U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d90f      	bls.n	800227e <HAL_SPI_Transmit+0x202>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	8812      	ldrh	r2, [r2, #0]
 8002266:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	3302      	adds	r3, #2
 800226c:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b02      	subs	r3, #2
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800227c:	e022      	b.n	80022c4 <HAL_SPI_Transmit+0x248>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f103 020c 	add.w	r2, r3, #12
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1c59      	adds	r1, r3, #1
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002294:	b29b      	uxth	r3, r3
 8002296:	3b01      	subs	r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800229e:	e011      	b.n	80022c4 <HAL_SPI_Transmit+0x248>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_SPI_Transmit+0x242>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d00a      	beq.n	80022c4 <HAL_SPI_Transmit+0x248>
 80022ae:	f7fe f963 	bl	8000578 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	1ad2      	subs	r2, r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d302      	bcc.n	80022c4 <HAL_SPI_Transmit+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022c2:	e024      	b.n	800230e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1bb      	bne.n	8002246 <HAL_SPI_Transmit+0x1ca>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	6839      	ldr	r1, [r7, #0]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f902 	bl	80024dc <SPI_EndRxTxTransaction>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_SPI_Transmit+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <HAL_SPI_Transmit+0x286>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_SPI_Transmit+0x292>
  {
    errorcode = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800231e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3720      	adds	r7, #32
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002336:	e04d      	b.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d049      	beq.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002346:	f7fe f917 	bl	8000578 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	1ad2      	subs	r2, r2, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d33e      	bcc.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	6852      	ldr	r2, [r2, #4]
 8002360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800236e:	d111      	bne.n	8002394 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002378:	d004      	beq.n	8002384 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002382:	d107      	bne.n	8002394 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239c:	d110      	bne.n	80023c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6819      	ldr	r1, [r3, #0]
 80023a8:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80023ac:	400b      	ands	r3, r1
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e00e      	b.n	80023f2 <SPI_WaitFlagStateUntilTimeout+0xca>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	401a      	ands	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d101      	bne.n	80023e8 <SPI_WaitFlagStateUntilTimeout+0xc0>
 80023e4:	2201      	movs	r2, #1
 80023e6:	e000      	b.n	80023ea <SPI_WaitFlagStateUntilTimeout+0xc2>
 80023e8:	2200      	movs	r2, #0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1a3      	bne.n	8002338 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8002408:	e05b      	b.n	80024c2 <SPI_WaitFifoStateUntilTimeout+0xc8>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002410:	d109      	bne.n	8002426 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d106      	bne.n	8002426 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	330c      	adds	r3, #12
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002424:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242c:	d049      	beq.n	80024c2 <SPI_WaitFifoStateUntilTimeout+0xc8>
    {
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8002434:	f7fe f8a0 	bl	8000578 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	1ad2      	subs	r2, r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d33e      	bcc.n	80024c2 <SPI_WaitFifoStateUntilTimeout+0xc8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	6852      	ldr	r2, [r2, #4]
 800244e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002452:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800245c:	d111      	bne.n	8002482 <SPI_WaitFifoStateUntilTimeout+0x88>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002466:	d004      	beq.n	8002472 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002470:	d107      	bne.n	8002482 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002480:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800248a:	d110      	bne.n	80024ae <SPI_WaitFifoStateUntilTimeout+0xb4>
        {
          SPI_RESET_CRC(hspi);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800249a:	400b      	ands	r3, r1
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e008      	b.n	80024d4 <SPI_WaitFifoStateUntilTimeout+0xda>
  while ((hspi->Instance->SR & Fifo) != State)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	401a      	ands	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d19b      	bne.n	800240a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <SPI_EndRxTxTransaction>:
  * @param hspi: SPI handle
  * @param Timeout: Timeout duration
  * @param  Tickstart: tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7ff ff80 	bl	80023fa <SPI_WaitFifoStateUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002504:	f043 0220 	orr.w	r2, r3, #32
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e013      	b.n	8002538 <SPI_EndRxTxTransaction+0x5c>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2200      	movs	r2, #0
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff ff04 	bl	8002328 <SPI_WaitFlagStateUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252a:	f043 0220 	orr.w	r2, r3, #32
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e000      	b.n	8002538 <SPI_EndRxTxTransaction+0x5c>
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002544:	f000 fbb4 	bl	8002cb0 <xTaskGetSchedulerState>
 8002548:	4603      	mov	r3, r0
 800254a:	2b01      	cmp	r3, #1
 800254c:	d001      	beq.n	8002552 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800254e:	f000 f923 	bl	8002798 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}

08002556 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	601a      	str	r2, [r3, #0]
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d103      	bne.n	80025be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	e00c      	b.n	80025d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3308      	adds	r3, #8
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	e002      	b.n	80025cc <vListInsert+0x2e>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d9f6      	bls.n	80025c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	601a      	str	r2, [r3, #0]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6892      	ldr	r2, [r2, #8]
 8002626:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6852      	ldr	r2, [r2, #4]
 8002630:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	d103      	bne.n	8002644 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	1e5a      	subs	r2, r3, #1
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <pxCurrentTCBConst2>)
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	6808      	ldr	r0, [r1, #0]
 800266a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800266e:	f380 8809 	msr	PSP, r0
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	f04f 0000 	mov.w	r0, #0
 800267a:	f380 8811 	msr	BASEPRI, r0
 800267e:	4770      	bx	lr

08002680 <pxCurrentTCBConst2>:
 8002680:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop

08002688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800268e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002692:	f383 8811 	msr	BASEPRI, r3
 8002696:	f3bf 8f6f 	isb	sy
 800269a:	f3bf 8f4f 	dsb	sy
 800269e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <vPortEnterCritical+0x54>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <vPortEnterCritical+0x54>)
 80026a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <vPortEnterCritical+0x54>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d10e      	bne.n	80026d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <vPortEnterCritical+0x58>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <vPortEnterCritical+0x48>
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	e7fe      	b.n	80026ce <vPortEnterCritical+0x46>
	}
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	20000000 	.word	0x20000000
 80026e0:	e000ed04 	.word	0xe000ed04

080026e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <vPortExitCritical+0x4c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <vPortExitCritical+0x22>
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	e7fe      	b.n	8002704 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <vPortExitCritical+0x4c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3b01      	subs	r3, #1
 800270c:	4a08      	ldr	r2, [pc, #32]	; (8002730 <vPortExitCritical+0x4c>)
 800270e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <vPortExitCritical+0x4c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d104      	bne.n	8002722 <vPortExitCritical+0x3e>
 8002718:	2300      	movs	r3, #0
 800271a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000000 	.word	0x20000000

08002734 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002734:	f3ef 8009 	mrs	r0, PSP
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <pxCurrentTCBConst>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	f01e 0f10 	tst.w	lr, #16
 8002744:	bf08      	it	eq
 8002746:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800274a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800274e:	6010      	str	r0, [r2, #0]
 8002750:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002754:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002758:	f380 8811 	msr	BASEPRI, r0
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	f000 f9ee 	bl	8002b44 <vTaskSwitchContext>
 8002768:	f04f 0000 	mov.w	r0, #0
 800276c:	f380 8811 	msr	BASEPRI, r0
 8002770:	bc08      	pop	{r3}
 8002772:	6819      	ldr	r1, [r3, #0]
 8002774:	6808      	ldr	r0, [r1, #0]
 8002776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800277a:	f01e 0f10 	tst.w	lr, #16
 800277e:	bf08      	it	eq
 8002780:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002784:	f380 8809 	msr	PSP, r0
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop

08002790 <pxCurrentTCBConst>:
 8002790:	20000028 	.word	0x20000028
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop

08002798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
	__asm volatile
 800279e:	f3ef 8211 	mrs	r2, BASEPRI
 80027a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	60fa      	str	r2, [r7, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80027b6:	f000 f907 	bl	80029c8 <xTaskIncrementTick>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <xPortSysTickHandler+0x44>)
 80027c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	2300      	movs	r3, #0
 80027ca:	607b      	str	r3, [r7, #4]
	__asm volatile
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	e000ed04 	.word	0xe000ed04

080027e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d02f      	beq.n	8002852 <vTaskDelay+0x72>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80027f2:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <vTaskDelay+0x90>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <vTaskDelay+0x2e>
	__asm volatile
 80027fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fe:	f383 8811 	msr	BASEPRI, r3
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	e7fe      	b.n	800280c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800280e:	f000 f839 	bl	8002884 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8002812:	4b18      	ldr	r3, [pc, #96]	; (8002874 <vTaskDelay+0x94>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	613b      	str	r3, [r7, #16]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <vTaskDelay+0x98>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	3304      	adds	r3, #4
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fef4 	bl	8002610 <uxListRemove>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10b      	bne.n	8002846 <vTaskDelay+0x66>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <vTaskDelay+0x98>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	2201      	movs	r2, #1
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <vTaskDelay+0x9c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4013      	ands	r3, r2
 8002842:	4a0e      	ldr	r2, [pc, #56]	; (800287c <vTaskDelay+0x9c>)
 8002844:	6013      	str	r3, [r2, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002846:	6938      	ldr	r0, [r7, #16]
 8002848:	f000 f9d6 	bl	8002bf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800284c:	f000 f828 	bl	80028a0 <xTaskResumeAll>
 8002850:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d107      	bne.n	8002868 <vTaskDelay+0x88>
		{
			portYIELD_WITHIN_API();
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <vTaskDelay+0xa0>)
 800285a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002868:	bf00      	nop
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	200000f4 	.word	0x200000f4
 8002874:	200000d8 	.word	0x200000d8
 8002878:	20000028 	.word	0x20000028
 800287c:	200000dc 	.word	0x200000dc
 8002880:	e000ed04 	.word	0xe000ed04

08002884 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <vTaskSuspendAll+0x18>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	4a03      	ldr	r2, [pc, #12]	; (800289c <vTaskSuspendAll+0x18>)
 8002890:	6013      	str	r3, [r2, #0]
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	200000f4 	.word	0x200000f4

080028a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80028aa:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <xTaskResumeAll+0x104>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <xTaskResumeAll+0x26>
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	e7fe      	b.n	80028c4 <xTaskResumeAll+0x24>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80028c6:	f7ff fedf 	bl	8002688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80028ca:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <xTaskResumeAll+0x104>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	4a34      	ldr	r2, [pc, #208]	; (80029a4 <xTaskResumeAll+0x104>)
 80028d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028d4:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <xTaskResumeAll+0x104>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d15b      	bne.n	8002994 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028dc:	4b32      	ldr	r3, [pc, #200]	; (80029a8 <xTaskResumeAll+0x108>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d057      	beq.n	8002994 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028e4:	e02e      	b.n	8002944 <xTaskResumeAll+0xa4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80028e6:	4b31      	ldr	r3, [pc, #196]	; (80029ac <xTaskResumeAll+0x10c>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60bb      	str	r3, [r7, #8]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	3318      	adds	r3, #24
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fe8c 	bl	8002610 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	3304      	adds	r3, #4
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fe87 	bl	8002610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	2201      	movs	r2, #1
 8002908:	409a      	lsls	r2, r3
 800290a:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <xTaskResumeAll+0x110>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4313      	orrs	r3, r2
 8002910:	4a27      	ldr	r2, [pc, #156]	; (80029b0 <xTaskResumeAll+0x110>)
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4a24      	ldr	r2, [pc, #144]	; (80029b4 <xTaskResumeAll+0x114>)
 8002922:	441a      	add	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f7ff fe13 	bl	8002556 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002934:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <xTaskResumeAll+0x118>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	429a      	cmp	r2, r3
 800293c:	d302      	bcc.n	8002944 <xTaskResumeAll+0xa4>
					{
						xYieldPending = pdTRUE;
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <xTaskResumeAll+0x11c>)
 8002940:	2201      	movs	r2, #1
 8002942:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <xTaskResumeAll+0x10c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1cc      	bne.n	80028e6 <xTaskResumeAll+0x46>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800294c:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <xTaskResumeAll+0x120>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d011      	beq.n	8002978 <xTaskResumeAll+0xd8>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8002954:	e00c      	b.n	8002970 <xTaskResumeAll+0xd0>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8002956:	f000 f837 	bl	80029c8 <xTaskIncrementTick>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <xTaskResumeAll+0xc6>
						{
							xYieldPending = pdTRUE;
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <xTaskResumeAll+0x11c>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <xTaskResumeAll+0x120>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3b01      	subs	r3, #1
 800296c:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <xTaskResumeAll+0x120>)
 800296e:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <xTaskResumeAll+0x120>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ee      	bne.n	8002956 <xTaskResumeAll+0xb6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <xTaskResumeAll+0x11c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d109      	bne.n	8002994 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002980:	2301      	movs	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <xTaskResumeAll+0x124>)
 8002986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002994:	f7ff fea6 	bl	80026e4 <vPortExitCritical>

	return xAlreadyYielded;
 8002998:	68fb      	ldr	r3, [r7, #12]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200000f4 	.word	0x200000f4
 80029a8:	200000d4 	.word	0x200000d4
 80029ac:	200000c0 	.word	0x200000c0
 80029b0:	200000dc 	.word	0x200000dc
 80029b4:	2000002c 	.word	0x2000002c
 80029b8:	20000028 	.word	0x20000028
 80029bc:	200000e8 	.word	0x200000e8
 80029c0:	200000e4 	.word	0x200000e4
 80029c4:	e000ed04 	.word	0xe000ed04

080029c8 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029d2:	4b51      	ldr	r3, [pc, #324]	; (8002b18 <xTaskIncrementTick+0x150>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 808d 	bne.w	8002af6 <xTaskIncrementTick+0x12e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 80029dc:	4b4f      	ldr	r3, [pc, #316]	; (8002b1c <xTaskIncrementTick+0x154>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3301      	adds	r3, #1
 80029e2:	4a4e      	ldr	r2, [pc, #312]	; (8002b1c <xTaskIncrementTick+0x154>)
 80029e4:	6013      	str	r3, [r2, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80029e6:	4b4d      	ldr	r3, [pc, #308]	; (8002b1c <xTaskIncrementTick+0x154>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11f      	bne.n	8002a32 <xTaskIncrementTick+0x6a>
			{
				taskSWITCH_DELAYED_LISTS();
 80029f2:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <xTaskIncrementTick+0x158>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d009      	beq.n	8002a10 <xTaskIncrementTick+0x48>
 80029fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	e7fe      	b.n	8002a0e <xTaskIncrementTick+0x46>
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <xTaskIncrementTick+0x158>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b43      	ldr	r3, [pc, #268]	; (8002b24 <xTaskIncrementTick+0x15c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a41      	ldr	r2, [pc, #260]	; (8002b20 <xTaskIncrementTick+0x158>)
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4a41      	ldr	r2, [pc, #260]	; (8002b24 <xTaskIncrementTick+0x15c>)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <xTaskIncrementTick+0x160>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	4a3f      	ldr	r2, [pc, #252]	; (8002b28 <xTaskIncrementTick+0x160>)
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	f000 f919 	bl	8002c64 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8002a32:	4b3e      	ldr	r3, [pc, #248]	; (8002b2c <xTaskIncrementTick+0x164>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d34d      	bcc.n	8002ad8 <xTaskIncrementTick+0x110>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a3c:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <xTaskIncrementTick+0x158>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <xTaskIncrementTick+0x82>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <xTaskIncrementTick+0x84>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <xTaskIncrementTick+0x92>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8002a50:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <xTaskIncrementTick+0x164>)
 8002a52:	f04f 32ff 	mov.w	r2, #4294967295
 8002a56:	601a      	str	r2, [r3, #0]
						break;
 8002a58:	e03e      	b.n	8002ad8 <xTaskIncrementTick+0x110>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a5a:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <xTaskIncrementTick+0x158>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d203      	bcs.n	8002a7a <xTaskIncrementTick+0xb2>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8002a72:	4a2e      	ldr	r2, [pc, #184]	; (8002b2c <xTaskIncrementTick+0x164>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6013      	str	r3, [r2, #0]
							break;
 8002a78:	e02e      	b.n	8002ad8 <xTaskIncrementTick+0x110>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fdc6 	bl	8002610 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <xTaskIncrementTick+0xce>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3318      	adds	r3, #24
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fdbd 	bl	8002610 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <xTaskIncrementTick+0x168>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <xTaskIncrementTick+0x168>)
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <xTaskIncrementTick+0x16c>)
 8002ab6:	441a      	add	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	3304      	adds	r3, #4
 8002abc:	4619      	mov	r1, r3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	f7ff fd49 	bl	8002556 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <xTaskIncrementTick+0x170>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d3b4      	bcc.n	8002a3c <xTaskIncrementTick+0x74>
							{
								xSwitchRequired = pdTRUE;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ad6:	e7b1      	b.n	8002a3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <xTaskIncrementTick+0x170>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ade:	4915      	ldr	r1, [pc, #84]	; (8002b34 <xTaskIncrementTick+0x16c>)
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d907      	bls.n	8002b00 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002af0:	2301      	movs	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e004      	b.n	8002b00 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <xTaskIncrementTick+0x174>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3301      	adds	r3, #1
 8002afc:	4a0f      	ldr	r2, [pc, #60]	; (8002b3c <xTaskIncrementTick+0x174>)
 8002afe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <xTaskIncrementTick+0x178>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002b0c:	697b      	ldr	r3, [r7, #20]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200000f4 	.word	0x200000f4
 8002b1c:	200000d8 	.word	0x200000d8
 8002b20:	200000b8 	.word	0x200000b8
 8002b24:	200000bc 	.word	0x200000bc
 8002b28:	200000ec 	.word	0x200000ec
 8002b2c:	200000f0 	.word	0x200000f0
 8002b30:	200000dc 	.word	0x200000dc
 8002b34:	2000002c 	.word	0x2000002c
 8002b38:	20000028 	.word	0x20000028
 8002b3c:	200000e4 	.word	0x200000e4
 8002b40:	200000e8 	.word	0x200000e8

08002b44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b4a:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <vTaskSwitchContext+0xa0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b52:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <vTaskSwitchContext+0xa4>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b58:	e03e      	b.n	8002bd8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <vTaskSwitchContext+0xa4>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b60:	4b22      	ldr	r3, [pc, #136]	; (8002bec <vTaskSwitchContext+0xa8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002b6e:	7afb      	ldrb	r3, [r7, #11]
 8002b70:	f1c3 031f 	rsb	r3, r3, #31
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	491e      	ldr	r1, [pc, #120]	; (8002bf0 <vTaskSwitchContext+0xac>)
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <vTaskSwitchContext+0x5a>
	__asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	e7fe      	b.n	8002b9c <vTaskSwitchContext+0x58>
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <vTaskSwitchContext+0xac>)
 8002baa:	4413      	add	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d104      	bne.n	8002bce <vTaskSwitchContext+0x8a>
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a07      	ldr	r2, [pc, #28]	; (8002bf4 <vTaskSwitchContext+0xb0>)
 8002bd6:	6013      	str	r3, [r2, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	200000f4 	.word	0x200000f4
 8002be8:	200000e8 	.word	0x200000e8
 8002bec:	200000dc 	.word	0x200000dc
 8002bf0:	2000002c 	.word	0x2000002c
 8002bf4:	20000028 	.word	0x20000028

08002bf8 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <prvAddCurrentTaskToDelayedList+0x58>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <prvAddCurrentTaskToDelayedList+0x5c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d209      	bcs.n	8002c26 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <prvAddCurrentTaskToDelayedList+0x60>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <prvAddCurrentTaskToDelayedList+0x58>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f7ff fcbd 	bl	800259e <vListInsert>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002c24:	e010      	b.n	8002c48 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <prvAddCurrentTaskToDelayedList+0x64>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <prvAddCurrentTaskToDelayedList+0x58>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f7ff fcb3 	bl	800259e <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <prvAddCurrentTaskToDelayedList+0x68>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d202      	bcs.n	8002c48 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
 8002c42:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <prvAddCurrentTaskToDelayedList+0x68>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6013      	str	r3, [r2, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000028 	.word	0x20000028
 8002c54:	200000d8 	.word	0x200000d8
 8002c58:	200000bc 	.word	0x200000bc
 8002c5c:	200000b8 	.word	0x200000b8
 8002c60:	200000f0 	.word	0x200000f0

08002c64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <prvResetNextTaskUnblockTime+0x44>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <prvResetNextTaskUnblockTime+0x14>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <prvResetNextTaskUnblockTime+0x16>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <prvResetNextTaskUnblockTime+0x48>)
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 8002c86:	e008      	b.n	8002c9a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c88:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <prvResetNextTaskUnblockTime+0x44>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4a05      	ldr	r2, [pc, #20]	; (8002cac <prvResetNextTaskUnblockTime+0x48>)
 8002c98:	6013      	str	r3, [r2, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	200000b8 	.word	0x200000b8
 8002cac:	200000f0 	.word	0x200000f0

08002cb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <xTaskGetSchedulerState+0x34>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	e008      	b.n	8002cd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <xTaskGetSchedulerState+0x38>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	e001      	b.n	8002cd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002cd6:	687b      	ldr	r3, [r7, #4]
	}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	200000e0 	.word	0x200000e0
 8002ce8:	200000f4 	.word	0x200000f4

08002cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d02:	4a6c      	ldr	r2, [pc, #432]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d04:	4b6b      	ldr	r3, [pc, #428]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d0e:	4b69      	ldr	r3, [pc, #420]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d1a:	4a66      	ldr	r2, [pc, #408]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d1c:	4b65      	ldr	r3, [pc, #404]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d26:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d32:	4a60      	ldr	r2, [pc, #384]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d34:	4b5f      	ldr	r3, [pc, #380]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d3e:	4b5d      	ldr	r3, [pc, #372]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4a:	4a5a      	ldr	r2, [pc, #360]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d4c:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d50:	f043 0302 	orr.w	r3, r3, #2
 8002d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d56:	4b57      	ldr	r3, [pc, #348]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	607b      	str	r3, [r7, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d62:	4a54      	ldr	r2, [pc, #336]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d68:	f043 0308 	orr.w	r3, r3, #8
 8002d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d6e:	4b51      	ldr	r3, [pc, #324]	; (8002eb4 <MX_GPIO_Init+0x1c8>)
 8002d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISPLAY_A0_Pin|DISPLAY_BACKLIGHT_Pin|DISPLAY_nSEL_Pin|DISPLAY_nRESET_Pin
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f241 311f 	movw	r1, #4895	; 0x131f
 8002d80:	484d      	ldr	r0, [pc, #308]	; (8002eb8 <MX_GPIO_Init+0x1cc>)
 8002d82:	f7fd fe7d 	bl	8000a80 <HAL_GPIO_WritePin>
                          |SI4455_SND_Pin|RED_LED_Pin|GREEN_LED_Pin|EXT_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SI4455_nSEL_GPIO_Port, SI4455_nSEL_Pin, GPIO_PIN_RESET);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2101      	movs	r1, #1
 8002d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d8e:	f7fd fe77 	bl	8000a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AK4556_nRESET_GPIO_Port, AK4556_nRESET_Pin, GPIO_PIN_RESET);
 8002d92:	2200      	movs	r2, #0
 8002d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d98:	4848      	ldr	r0, [pc, #288]	; (8002ebc <MX_GPIO_Init+0x1d0>)
 8002d9a:	f7fd fe71 	bl	8000a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002da4:	2303      	movs	r3, #3
 8002da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	4619      	mov	r1, r3
 8002db2:	4841      	ldr	r0, [pc, #260]	; (8002eb8 <MX_GPIO_Init+0x1cc>)
 8002db4:	f7fd fce6 	bl	8000784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8002db8:	230b      	movs	r3, #11
 8002dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4619      	mov	r1, r3
 8002dca:	483d      	ldr	r0, [pc, #244]	; (8002ec0 <MX_GPIO_Init+0x1d4>)
 8002dcc:	f7fd fcda 	bl	8000784 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_A0_Pin DISPLAY_BACKLIGHT_Pin DISPLAY_nSEL_Pin DISPLAY_nRESET_Pin
                           SI4455_SND_Pin RED_LED_Pin GREEN_LED_Pin EXT_3_Pin */
  GPIO_InitStruct.Pin = DISPLAY_A0_Pin|DISPLAY_BACKLIGHT_Pin|DISPLAY_nSEL_Pin|DISPLAY_nRESET_Pin
 8002dd0:	f241 331f 	movw	r3, #4895	; 0x131f
 8002dd4:	617b      	str	r3, [r7, #20]
                          |SI4455_SND_Pin|RED_LED_Pin|GREEN_LED_Pin|EXT_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	4619      	mov	r1, r3
 8002de8:	4833      	ldr	r0, [pc, #204]	; (8002eb8 <MX_GPIO_Init+0x1cc>)
 8002dea:	f7fd fccb 	bl	8000784 <HAL_GPIO_Init>

  /*Configure GPIO pin : SI4455_nSEL_Pin */
  GPIO_InitStruct.Pin = SI4455_nSEL_Pin;
 8002dee:	2301      	movs	r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df2:	2301      	movs	r3, #1
 8002df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SI4455_nSEL_GPIO_Port, &GPIO_InitStruct);
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4619      	mov	r1, r3
 8002e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e08:	f7fd fcbc 	bl	8000784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002e0c:	f248 131e 	movw	r3, #33054	; 0x811e
 8002e10:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e12:	2303      	movs	r3, #3
 8002e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e24:	f7fd fcae 	bl	8000784 <HAL_GPIO_Init>

  /*Configure GPIO pins : SI4455_nIRQ_Pin SI4455_GPIO0_Pin SI4455_GPIO1_Pin EXT_1_Pin
                           EXT_2_Pin */
  GPIO_InitStruct.Pin = SI4455_nIRQ_Pin|SI4455_GPIO0_Pin|SI4455_GPIO1_Pin|EXT_1_Pin
 8002e28:	f44f 634e 	mov.w	r3, #3296	; 0xce0
 8002e2c:	617b      	str	r3, [r7, #20]
                          |EXT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	481e      	ldr	r0, [pc, #120]	; (8002eb8 <MX_GPIO_Init+0x1cc>)
 8002e3e:	f7fd fca1 	bl	8000784 <HAL_GPIO_Init>

  /*Configure GPIO pins : SI133_INT_Pin DIP1_Pin DIP2_Pin */
  GPIO_InitStruct.Pin = SI133_INT_Pin|DIP1_Pin|DIP2_Pin;
 8002e42:	2307      	movs	r3, #7
 8002e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	4619      	mov	r1, r3
 8002e54:	4819      	ldr	r0, [pc, #100]	; (8002ebc <MX_GPIO_Init+0x1d0>)
 8002e56:	f7fd fc95 	bl	8000784 <HAL_GPIO_Init>

  /*Configure GPIO pin : AK4556_nRESET_Pin */
  GPIO_InitStruct.Pin = AK4556_nRESET_Pin;
 8002e5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e60:	2301      	movs	r3, #1
 8002e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AK4556_nRESET_GPIO_Port, &GPIO_InitStruct);
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4619      	mov	r1, r3
 8002e72:	4812      	ldr	r0, [pc, #72]	; (8002ebc <MX_GPIO_Init+0x1d0>)
 8002e74:	f7fd fc86 	bl	8000784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB3 PB4 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8002e78:	f242 3318 	movw	r3, #8984	; 0x2318
 8002e7c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	480b      	ldr	r0, [pc, #44]	; (8002ebc <MX_GPIO_Init+0x1d0>)
 8002e8e:	f7fd fc79 	bl	8000784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e92:	2304      	movs	r3, #4
 8002e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e96:	2303      	movs	r3, #3
 8002e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e9e:	f107 0314 	add.w	r3, r7, #20
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4807      	ldr	r0, [pc, #28]	; (8002ec4 <MX_GPIO_Init+0x1d8>)
 8002ea6:	f7fd fc6d 	bl	8000784 <HAL_GPIO_Init>

}
 8002eaa:	bf00      	nop
 8002eac:	3728      	adds	r7, #40	; 0x28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	48000800 	.word	0x48000800
 8002ebc:	48000400 	.word	0x48000400
 8002ec0:	48001c00 	.word	0x48001c00
 8002ec4:	48000c00 	.word	0x48000c00

08002ec8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002ece:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <MX_SPI1_Init+0x78>)
 8002ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ed2:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002ed4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ed8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002ee2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ee6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee8:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eee:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002efa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002efe:	2228      	movs	r2, #40	; 0x28
 8002f00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f02:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f16:	2207      	movs	r2, #7
 8002f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f26:	4805      	ldr	r0, [pc, #20]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f28:	f7ff f820 	bl	8001f6c <HAL_SPI_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f32:	f000 f8e3 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200000fc 	.word	0x200000fc
 8002f40:	40013000 	.word	0x40013000

08002f44 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0

	c12832_assign_SPI(&hspi1);
 8002f48:	4819      	ldr	r0, [pc, #100]	; (8002fb0 <main+0x6c>)
 8002f4a:	f7fd f949 	bl	80001e0 <c12832_assign_SPI>


	HAL_Init();
 8002f4e:	f7fd fadb 	bl	8000508 <HAL_Init>

	SystemClock_Config();
 8002f52:	f000 f837 	bl	8002fc4 <SystemClock_Config>

	MX_GPIO_Init();
 8002f56:	f7ff fec9 	bl	8002cec <MX_GPIO_Init>

	MX_SPI1_Init();
 8002f5a:	f7ff ffb5 	bl	8002ec8 <MX_SPI1_Init>


	graphic_lcd_initialize();
 8002f5e:	f7fd f9cf 	bl	8000300 <graphic_lcd_initialize>
	graphic_lcd_clear_screen ();
 8002f62:	f7fd f963 	bl	800022c <graphic_lcd_clear_screen>
	DISPLAY_BACKLIGHT_ON;
 8002f66:	2201      	movs	r2, #1
 8002f68:	2102      	movs	r1, #2
 8002f6a:	4812      	ldr	r0, [pc, #72]	; (8002fb4 <main+0x70>)
 8002f6c:	f7fd fd88 	bl	8000a80 <HAL_GPIO_WritePin>

	graphic_lcd_write(1, 0, "Thank you very much");
 8002f70:	4a11      	ldr	r2, [pc, #68]	; (8002fb8 <main+0x74>)
 8002f72:	2100      	movs	r1, #0
 8002f74:	2001      	movs	r0, #1
 8002f76:	f7fd f981 	bl	800027c <graphic_lcd_write>
	graphic_lcd_write(0, 0, "Hey Erland ");
 8002f7a:	4a10      	ldr	r2, [pc, #64]	; (8002fbc <main+0x78>)
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7fd f97c 	bl	800027c <graphic_lcd_write>


	/* Infinite loop */
	while (1)
	{
		printf("hello world %d\r\n");
 8002f84:	480e      	ldr	r0, [pc, #56]	; (8002fc0 <main+0x7c>)
 8002f86:	f000 fb95 	bl	80036b4 <iprintf>
		HAL_Delay(200);
 8002f8a:	20c8      	movs	r0, #200	; 0xc8
 8002f8c:	f7fd fb00 	bl	8000590 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002f90:	2200      	movs	r2, #0
 8002f92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f96:	4807      	ldr	r0, [pc, #28]	; (8002fb4 <main+0x70>)
 8002f98:	f7fd fd72 	bl	8000a80 <HAL_GPIO_WritePin>

		HAL_Delay(200);
 8002f9c:	20c8      	movs	r0, #200	; 0xc8
 8002f9e:	f7fd faf7 	bl	8000590 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fa8:	4802      	ldr	r0, [pc, #8]	; (8002fb4 <main+0x70>)
 8002faa:	f7fd fd69 	bl	8000a80 <HAL_GPIO_WritePin>
		printf("hello world %d\r\n");
 8002fae:	e7e9      	b.n	8002f84 <main+0x40>
 8002fb0:	200000fc 	.word	0x200000fc
 8002fb4:	48000800 	.word	0x48000800
 8002fb8:	080037b8 	.word	0x080037b8
 8002fbc:	080037cc 	.word	0x080037cc
 8002fc0:	080037d8 	.word	0x080037d8

08002fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b0ae      	sub	sp, #184	; 0xb8
 8002fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002fce:	2244      	movs	r2, #68	; 0x44
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fbdc 	bl	8003790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fd8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fe8:	463b      	mov	r3, r7
 8002fea:	2260      	movs	r2, #96	; 0x60
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fbce 	bl	8003790 <memset>

  /**Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002ff4:	f7fd fd5c 	bl	8000ab0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002ff8:	4a3e      	ldr	r2, [pc, #248]	; (80030f4 <SystemClock_Config+0x130>)
 8002ffa:	4b3e      	ldr	r3, [pc, #248]	; (80030f4 <SystemClock_Config+0x130>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f023 0318 	bic.w	r3, r3, #24
 8003004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003008:	2314      	movs	r3, #20
 800300a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800300c:	2301      	movs	r3, #1
 800300e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003010:	2301      	movs	r3, #1
 8003012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 800301c:	2370      	movs	r3, #112	; 0x70
 800301e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003022:	2302      	movs	r3, #2
 8003024:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003028:	2301      	movs	r3, #1
 800302a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800302e:	2301      	movs	r3, #1
 8003030:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 36;
 8003034:	2324      	movs	r3, #36	; 0x24
 8003036:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800303a:	2307      	movs	r3, #7
 800303c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8003040:	2306      	movs	r3, #6
 8003042:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8003046:	2304      	movs	r3, #4
 8003048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800304c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd fda1 	bl	8000b98 <HAL_RCC_OscConfig>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800305c:	f000 f84e 	bl	80030fc <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003060:	230f      	movs	r3, #15
 8003062:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003064:	2303      	movs	r3, #3
 8003066:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003068:	2300      	movs	r3, #0
 800306a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800306c:	2300      	movs	r3, #0
 800306e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003070:	2300      	movs	r3, #0
 8003072:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003074:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003078:	2104      	movs	r1, #4
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe f94e 	bl	800131c <HAL_RCC_ClockConfig>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003086:	f000 f839 	bl	80030fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 800308a:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <SystemClock_Config+0x134>)
 800308c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800308e:	2300      	movs	r3, #0
 8003090:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003092:	2300      	movs	r3, #0
 8003094:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8003096:	2300      	movs	r3, #0
 8003098:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800309a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800309e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80030a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030a4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80030a6:	2301      	movs	r3, #1
 80030a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80030aa:	2301      	movs	r3, #1
 80030ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 26;
 80030ae:	231a      	movs	r3, #26
 80030b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80030b2:	2311      	movs	r3, #17
 80030b4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80030b6:	2302      	movs	r3, #2
 80030b8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80030ba:	2302      	movs	r3, #2
 80030bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80030be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030c2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030c4:	463b      	mov	r3, r7
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe fba6 	bl	8001818 <HAL_RCCEx_PeriphCLKConfig>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80030d2:	f000 f813 	bl	80030fc <Error_Handler>
  }
  /**Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80030d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80030da:	f7fd fd07 	bl	8000aec <HAL_PWREx_ControlVoltageScaling>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <SystemClock_Config+0x124>
  {
    Error_Handler();
 80030e4:	f000 f80a 	bl	80030fc <Error_Handler>
  }
  /**Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80030e8:	f7fe fddc 	bl	8001ca4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80030ec:	bf00      	nop
 80030ee:	37b8      	adds	r7, #184	; 0xb8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000
 80030f8:	00022841 	.word	0x00022841

080030fc <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
		HAL_Delay(200);
 8003100:	20c8      	movs	r0, #200	; 0xc8
 8003102:	f7fd fa45 	bl	8000590 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8003106:	2200      	movs	r2, #0
 8003108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800310c:	4806      	ldr	r0, [pc, #24]	; (8003128 <Error_Handler+0x2c>)
 800310e:	f7fd fcb7 	bl	8000a80 <HAL_GPIO_WritePin>

		HAL_Delay(200);
 8003112:	20c8      	movs	r0, #200	; 0xc8
 8003114:	f7fd fa3c 	bl	8000590 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8003118:	2201      	movs	r2, #1
 800311a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800311e:	4802      	ldr	r0, [pc, #8]	; (8003128 <Error_Handler+0x2c>)
 8003120:	f7fd fcae 	bl	8000a80 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8003124:	e7ec      	b.n	8003100 <Error_Handler+0x4>
 8003126:	bf00      	nop
 8003128:	48000800 	.word	0x48000800

0800312c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800312c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003164 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003130:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003132:	e003      	b.n	800313c <LoopCopyDataInit>

08003134 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003136:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003138:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800313a:	3104      	adds	r1, #4

0800313c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800313c:	480b      	ldr	r0, [pc, #44]	; (800316c <LoopForever+0xa>)
	ldr	r3, =_edata
 800313e:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003140:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003142:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003144:	d3f6      	bcc.n	8003134 <CopyDataInit>
	ldr	r2, =_sbss
 8003146:	4a0b      	ldr	r2, [pc, #44]	; (8003174 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003148:	e002      	b.n	8003150 <LoopFillZerobss>

0800314a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800314a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800314c:	f842 3b04 	str.w	r3, [r2], #4

08003150 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <LoopForever+0x16>)
	cmp	r2, r3
 8003152:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003154:	d3f9      	bcc.n	800314a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003156:	f000 f901 	bl	800335c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800315a:	f000 faf5 	bl	8003748 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800315e:	f7ff fef1 	bl	8002f44 <main>

08003162 <LoopForever>:

LoopForever:
    b LoopForever
 8003162:	e7fe      	b.n	8003162 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003164:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8003168:	08003a08 	.word	0x08003a08
	ldr	r0, =_sdata
 800316c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003170:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8003174:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8003178:	20000160 	.word	0x20000160

0800317c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800317c:	e7fe      	b.n	800317c <ADC1_IRQHandler>
	...

08003180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003186:	4a11      	ldr	r2, [pc, #68]	; (80031cc <HAL_MspInit+0x4c>)
 8003188:	4b10      	ldr	r3, [pc, #64]	; (80031cc <HAL_MspInit+0x4c>)
 800318a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6613      	str	r3, [r2, #96]	; 0x60
 8003192:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <HAL_MspInit+0x4c>)
 8003194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	607b      	str	r3, [r7, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <HAL_MspInit+0x4c>)
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_MspInit+0x4c>)
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6593      	str	r3, [r2, #88]	; 0x58
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <HAL_MspInit+0x4c>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	210f      	movs	r1, #15
 80031ba:	f06f 0001 	mvn.w	r0, #1
 80031be:	f7fd fab8 	bl	8000732 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000

080031d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a17      	ldr	r2, [pc, #92]	; (800324c <HAL_SPI_MspInit+0x7c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d128      	bne.n	8003244 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031f2:	4a17      	ldr	r2, [pc, #92]	; (8003250 <HAL_SPI_MspInit+0x80>)
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <HAL_SPI_MspInit+0x80>)
 80031f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031fc:	6613      	str	r3, [r2, #96]	; 0x60
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_SPI_MspInit+0x80>)
 8003200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320a:	4a11      	ldr	r2, [pc, #68]	; (8003250 <HAL_SPI_MspInit+0x80>)
 800320c:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_SPI_MspInit+0x80>)
 800320e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <HAL_SPI_MspInit+0x80>)
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8003222:	23e0      	movs	r3, #224	; 0xe0
 8003224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322e:	2303      	movs	r3, #3
 8003230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003232:	2305      	movs	r3, #5
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003236:	f107 0314 	add.w	r3, r7, #20
 800323a:	4619      	mov	r1, r3
 800323c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003240:	f7fd faa0 	bl	8000784 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003244:	bf00      	nop
 8003246:	3728      	adds	r7, #40	; 0x28
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40013000 	.word	0x40013000
 8003250:	40021000 	.word	0x40021000

08003254 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003266:	e7fe      	b.n	8003266 <HardFault_Handler+0x4>

08003268 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800326c:	e7fe      	b.n	800326c <MemManage_Handler+0x4>

0800326e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003272:	e7fe      	b.n	8003272 <BusFault_Handler+0x4>

08003274 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003278:	e7fe      	b.n	8003278 <UsageFault_Handler+0x4>

0800327a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800328c:	f7ff f958 	bl	8002540 <osSystickHandler>
  HAL_IncTick();
 8003290:	f7fd f964 	bl	800055c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}

08003298 <TIM1_UP_TIM16_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
*/
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <DMA2_Channel1_IRQHandler>:

/**
* @brief This function handles DMA2 channel1 global interrupt.
*/
void DMA2_Channel1_IRQHandler(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <DMA2_Channel2_IRQHandler>:

/**
* @brief This function handles DMA2 channel2 global interrupt.
*/
void DMA2_Channel2_IRQHandler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <USB_IRQHandler>:

/**
* @brief This function handles USB event interrupt through EXTI line 17.
*/
void USB_IRQHandler(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0
  /* USER CODE END USB_IRQn 0 */

  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80032d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80032dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d013      	beq.n	8003310 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80032e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80032ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80032f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00b      	beq.n	8003310 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80032f8:	e000      	b.n	80032fc <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 80032fa:	bf00      	nop
 80032fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f9      	beq.n	80032fa <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003306:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003310:	687b      	ldr	r3, [r7, #4]
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <_write>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e009      	b.n	8003348 <_write+0x2a>
	ITM_SendChar((*ptr++));
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	60ba      	str	r2, [r7, #8]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ffc7 	bl	80032d0 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	3301      	adds	r3, #1
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	dbf1      	blt.n	8003334 <_write+0x16>
	return len;
 8003350:	687b      	ldr	r3, [r7, #4]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003360:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <SystemInit+0x64>)
 8003362:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <SystemInit+0x64>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800336c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003370:	4a14      	ldr	r2, [pc, #80]	; (80033c4 <SystemInit+0x68>)
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <SystemInit+0x68>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800337c:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <SystemInit+0x68>)
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003382:	4a10      	ldr	r2, [pc, #64]	; (80033c4 <SystemInit+0x68>)
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <SystemInit+0x68>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800338c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003390:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <SystemInit+0x68>)
 8003394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003398:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <SystemInit+0x68>)
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <SystemInit+0x68>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80033a6:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <SystemInit+0x68>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <SystemInit+0x64>)
 80033ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033b2:	609a      	str	r2, [r3, #8]
#endif
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000ed00 	.word	0xe000ed00
 80033c4:	40021000 	.word	0x40021000

080033c8 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
	int div = 1;
 80033d4:	2301      	movs	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80033d8:	e004      	b.n	80033e4 <ts_itoa+0x1c>
		div *= base;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d2f3      	bcs.n	80033da <ts_itoa+0x12>

	while (div != 0)
 80033f2:	e029      	b.n	8003448 <ts_itoa+0x80>
	{
		int num = d/div;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	613b      	str	r3, [r7, #16]
		d = d%div;
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	fbb3 f1f2 	udiv	r1, r3, r2
 8003406:	fb02 f201 	mul.w	r2, r2, r1
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	60bb      	str	r3, [r7, #8]
		div /= base;
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	fb92 f3f3 	sdiv	r3, r2, r3
 8003416:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b09      	cmp	r3, #9
 800341c:	dd0a      	ble.n	8003434 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	6011      	str	r1, [r2, #0]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	3237      	adds	r2, #55	; 0x37
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	e009      	b.n	8003448 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	1c59      	adds	r1, r3, #1
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	6011      	str	r1, [r2, #0]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	3230      	adds	r2, #48	; 0x30
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1d2      	bne.n	80033f4 <ts_itoa+0x2c>
	}
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b088      	sub	sp, #32
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800346a:	e07d      	b.n	8003568 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b25      	cmp	r3, #37	; 0x25
 8003472:	d171      	bne.n	8003558 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	3301      	adds	r3, #1
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d01e      	beq.n	80034c0 <ts_formatstring+0x66>
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	dc06      	bgt.n	8003494 <ts_formatstring+0x3a>
 8003486:	2b58      	cmp	r3, #88	; 0x58
 8003488:	d050      	beq.n	800352c <ts_formatstring+0xd2>
 800348a:	2b63      	cmp	r3, #99	; 0x63
 800348c:	d00e      	beq.n	80034ac <ts_formatstring+0x52>
 800348e:	2b25      	cmp	r3, #37	; 0x25
 8003490:	d058      	beq.n	8003544 <ts_formatstring+0xea>
 8003492:	e05d      	b.n	8003550 <ts_formatstring+0xf6>
 8003494:	2b73      	cmp	r3, #115	; 0x73
 8003496:	d02b      	beq.n	80034f0 <ts_formatstring+0x96>
 8003498:	2b73      	cmp	r3, #115	; 0x73
 800349a:	dc02      	bgt.n	80034a2 <ts_formatstring+0x48>
 800349c:	2b69      	cmp	r3, #105	; 0x69
 800349e:	d00f      	beq.n	80034c0 <ts_formatstring+0x66>
 80034a0:	e056      	b.n	8003550 <ts_formatstring+0xf6>
 80034a2:	2b75      	cmp	r3, #117	; 0x75
 80034a4:	d037      	beq.n	8003516 <ts_formatstring+0xbc>
 80034a6:	2b78      	cmp	r3, #120	; 0x78
 80034a8:	d040      	beq.n	800352c <ts_formatstring+0xd2>
 80034aa:	e051      	b.n	8003550 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	60fa      	str	r2, [r7, #12]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	1d11      	adds	r1, r2, #4
 80034b6:	6079      	str	r1, [r7, #4]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]
				break;
 80034be:	e047      	b.n	8003550 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	1d1a      	adds	r2, r3, #4
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da07      	bge.n	80034e0 <ts_formatstring+0x86>
					{
						val *= -1;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	425b      	negs	r3, r3
 80034d4:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	60fa      	str	r2, [r7, #12]
 80034dc:	222d      	movs	r2, #45	; 0x2d
 80034de:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80034e0:	69f9      	ldr	r1, [r7, #28]
 80034e2:	f107 030c 	add.w	r3, r7, #12
 80034e6:	220a      	movs	r2, #10
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff6d 	bl	80033c8 <ts_itoa>
				}
				break;
 80034ee:	e02f      	b.n	8003550 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	1d1a      	adds	r2, r3, #4
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80034fa:	e007      	b.n	800350c <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	60fa      	str	r2, [r7, #12]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	1c51      	adds	r1, r2, #1
 8003506:	61b9      	str	r1, [r7, #24]
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f3      	bne.n	80034fc <ts_formatstring+0xa2>
					}
				}
				break;
 8003514:	e01c      	b.n	8003550 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	1d1a      	adds	r2, r3, #4
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	6819      	ldr	r1, [r3, #0]
 800351e:	f107 030c 	add.w	r3, r7, #12
 8003522:	220a      	movs	r2, #10
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff4f 	bl	80033c8 <ts_itoa>
				break;
 800352a:	e011      	b.n	8003550 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	1d1a      	adds	r2, r3, #4
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4619      	mov	r1, r3
 8003536:	f107 030c 	add.w	r3, r7, #12
 800353a:	2210      	movs	r2, #16
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff43 	bl	80033c8 <ts_itoa>
				break;
 8003542:	e005      	b.n	8003550 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	60fa      	str	r2, [r7, #12]
 800354a:	2225      	movs	r2, #37	; 0x25
 800354c:	701a      	strb	r2, [r3, #0]
				  break;
 800354e:	bf00      	nop
			}
			fmt++;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	3301      	adds	r3, #1
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	e007      	b.n	8003568 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	60fa      	str	r2, [r7, #12]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	1c51      	adds	r1, r2, #1
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	7812      	ldrb	r2, [r2, #0]
 8003566:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f47f af7d 	bne.w	800346c <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	461a      	mov	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	1ad3      	subs	r3, r2, r3
}
 8003580:	4618      	mov	r0, r3
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
	int length = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8003596:	e081      	b.n	800369c <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b25      	cmp	r3, #37	; 0x25
 800359e:	d177      	bne.n	8003690 <ts_formatlength+0x108>
		{
			++fmt;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3301      	adds	r3, #1
 80035a4:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	3b58      	subs	r3, #88	; 0x58
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d86a      	bhi.n	8003686 <ts_formatlength+0xfe>
 80035b0:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <ts_formatlength+0x30>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	08003679 	.word	0x08003679
 80035bc:	08003687 	.word	0x08003687
 80035c0:	08003687 	.word	0x08003687
 80035c4:	08003687 	.word	0x08003687
 80035c8:	08003687 	.word	0x08003687
 80035cc:	08003687 	.word	0x08003687
 80035d0:	08003687 	.word	0x08003687
 80035d4:	08003687 	.word	0x08003687
 80035d8:	08003687 	.word	0x08003687
 80035dc:	08003687 	.word	0x08003687
 80035e0:	08003687 	.word	0x08003687
 80035e4:	0800363d 	.word	0x0800363d
 80035e8:	0800364b 	.word	0x0800364b
 80035ec:	08003687 	.word	0x08003687
 80035f0:	08003687 	.word	0x08003687
 80035f4:	08003687 	.word	0x08003687
 80035f8:	08003687 	.word	0x08003687
 80035fc:	0800364b 	.word	0x0800364b
 8003600:	08003687 	.word	0x08003687
 8003604:	08003687 	.word	0x08003687
 8003608:	08003687 	.word	0x08003687
 800360c:	08003687 	.word	0x08003687
 8003610:	08003687 	.word	0x08003687
 8003614:	08003687 	.word	0x08003687
 8003618:	08003687 	.word	0x08003687
 800361c:	08003687 	.word	0x08003687
 8003620:	08003687 	.word	0x08003687
 8003624:	08003659 	.word	0x08003659
 8003628:	08003687 	.word	0x08003687
 800362c:	0800364b 	.word	0x0800364b
 8003630:	08003687 	.word	0x08003687
 8003634:	08003687 	.word	0x08003687
 8003638:	08003679 	.word	0x08003679
			{
			  case 'c':
		  		  va_arg(va, int);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	3304      	adds	r3, #4
 8003640:	603b      	str	r3, [r7, #0]
				  ++length;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3301      	adds	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
				  break;
 8003648:	e025      	b.n	8003696 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	330b      	adds	r3, #11
 800364e:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	3304      	adds	r3, #4
 8003654:	603b      	str	r3, [r7, #0]
				  break;
 8003656:	e01e      	b.n	8003696 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	1d1a      	adds	r2, r3, #4
 800365c:	603a      	str	r2, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8003662:	e002      	b.n	800366a <ts_formatlength+0xe2>
			  			  ++length;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3301      	adds	r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	60ba      	str	r2, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f6      	bne.n	8003664 <ts_formatlength+0xdc>
			  	  }
				  break;
 8003676:	e00e      	b.n	8003696 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3308      	adds	r3, #8
 800367c:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	3304      	adds	r3, #4
 8003682:	603b      	str	r3, [r7, #0]
				  break;
 8003684:	e007      	b.n	8003696 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3301      	adds	r3, #1
 800368a:	60fb      	str	r3, [r7, #12]
				  break;
 800368c:	bf00      	nop
 800368e:	e002      	b.n	8003696 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3301      	adds	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3301      	adds	r3, #1
 800369a:	607b      	str	r3, [r7, #4]
	while (*fmt)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f47f af79 	bne.w	8003598 <ts_formatlength+0x10>
	}
	return length;
 80036a6:	68fb      	ldr	r3, [r7, #12]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 80036b4:	b40f      	push	{r0, r1, r2, r3}
 80036b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
	int length = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 80036c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80036c6:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 80036c8:	6839      	ldr	r1, [r7, #0]
 80036ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036cc:	f7ff ff5c 	bl	8003588 <ts_formatlength>
 80036d0:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 80036d2:	466b      	mov	r3, sp
 80036d4:	461e      	mov	r6, r3
		char buf[length];
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	1e4b      	subs	r3, r1, #1
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	460b      	mov	r3, r1
 80036de:	461a      	mov	r2, r3
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80036e8:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80036ec:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80036f0:	460b      	mov	r3, r1
 80036f2:	461a      	mov	r2, r3
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	00dd      	lsls	r5, r3, #3
 80036fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036fe:	00d4      	lsls	r4, r2, #3
 8003700:	460b      	mov	r3, r1
 8003702:	3307      	adds	r3, #7
 8003704:	08db      	lsrs	r3, r3, #3
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	ebad 0d03 	sub.w	sp, sp, r3
 800370c:	466b      	mov	r3, sp
 800370e:	3300      	adds	r3, #0
 8003710:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8003712:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003716:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fe9b 	bl	800345a <ts_formatstring>
 8003724:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4619      	mov	r1, r3
 800372c:	2001      	movs	r0, #1
 800372e:	f7ff fdf6 	bl	800331e <_write>
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8003736:	68fb      	ldr	r3, [r7, #12]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003742:	b004      	add	sp, #16
 8003744:	4770      	bx	lr
	...

08003748 <__libc_init_array>:
 8003748:	b570      	push	{r4, r5, r6, lr}
 800374a:	4e0d      	ldr	r6, [pc, #52]	; (8003780 <__libc_init_array+0x38>)
 800374c:	4c0d      	ldr	r4, [pc, #52]	; (8003784 <__libc_init_array+0x3c>)
 800374e:	1ba4      	subs	r4, r4, r6
 8003750:	10a4      	asrs	r4, r4, #2
 8003752:	2500      	movs	r5, #0
 8003754:	42a5      	cmp	r5, r4
 8003756:	d109      	bne.n	800376c <__libc_init_array+0x24>
 8003758:	4e0b      	ldr	r6, [pc, #44]	; (8003788 <__libc_init_array+0x40>)
 800375a:	4c0c      	ldr	r4, [pc, #48]	; (800378c <__libc_init_array+0x44>)
 800375c:	f000 f820 	bl	80037a0 <_init>
 8003760:	1ba4      	subs	r4, r4, r6
 8003762:	10a4      	asrs	r4, r4, #2
 8003764:	2500      	movs	r5, #0
 8003766:	42a5      	cmp	r5, r4
 8003768:	d105      	bne.n	8003776 <__libc_init_array+0x2e>
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003770:	4798      	blx	r3
 8003772:	3501      	adds	r5, #1
 8003774:	e7ee      	b.n	8003754 <__libc_init_array+0xc>
 8003776:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800377a:	4798      	blx	r3
 800377c:	3501      	adds	r5, #1
 800377e:	e7f2      	b.n	8003766 <__libc_init_array+0x1e>
 8003780:	080039f8 	.word	0x080039f8
 8003784:	080039f8 	.word	0x080039f8
 8003788:	080039f8 	.word	0x080039f8
 800378c:	080039fc 	.word	0x080039fc

08003790 <memset>:
 8003790:	4402      	add	r2, r0
 8003792:	4603      	mov	r3, r0
 8003794:	4293      	cmp	r3, r2
 8003796:	d100      	bne.n	800379a <memset+0xa>
 8003798:	4770      	bx	lr
 800379a:	f803 1b01 	strb.w	r1, [r3], #1
 800379e:	e7f9      	b.n	8003794 <memset+0x4>

080037a0 <_init>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr

080037ac <_fini>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr
